row_id,query,is_chosen,is_generation,snippet_len,snippet
0,randomly generate 100 letters,False,True,7,random.choice(range(100))
1,randomly generate 100 letters,False,True,6,"random.randint(0, 100)"
2,randomly generate 100 letters,False,True,9,"random.choice(range(100), hours=100)"
3,randomly generate 100 letters,False,True,11,"random.choice(range(0, 100), 100)"
4,randomly generate 100 letters,False,True,9,"random.choice(range(100), num=100)"
5,randomly generate 100 letters,False,True,8,"random.randint(0, 100, hours=100)"
6,randomly generate 100 letters,False,True,6,"random.randint(0, 7)"
7,randomly generate 100 letters,True,False,16,''.join(random.choice(string.ascii_uppercase + string.digits) for _ in range(N))
8,randomly generate 100 letters,False,False,11,"''.join(random.choices(string.ascii_uppercase + string.digits, k=N))"
9,randomly generate 100 letters,False,False,19,''.join(random.SystemRandom().choice(string.ascii_uppercase + string.digits) for _ in range(N))
10,randomly generate 100 letters,False,False,61,">>> import string
>>> import random
>>> def id_generator(size=6, chars=string.ascii_uppercase + string.digits):
...    return ''.join(random.choice(chars) for _ in range(size))
...
>>> id_generator()
'G5G74W'
>>> id_generator(3, ""6793YUIO"")
'Y3U'"
11,randomly generate 100 letters,False,False,18,">>> string.ascii_uppercase
'ABCDEFGHIJKLMNOPQRSTUVWXYZ'
>>> string.digits
'0123456789'
>>> string.ascii_uppercase + string.digits
'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'"
12,randomly generate 100 letters,False,False,62,">>> range(4) # range create a list of 'n' numbers
[0, 1, 2, 3]
>>> ['elem' for _ in range(4)] # we use range to create 4 times 'elem'
['elem', 'elem', 'elem', 'elem']"
13,randomly generate 100 letters,False,False,33,">>> random.choice(""abcde"")
'a'
>>> random.choice(""abcde"")
'd'
>>> random.choice(""abcde"")
'b'"
14,print current date time,False,True,6,print(datetime.datetime.now())
15,print current date time,False,True,13,print(datetime.datetime.now().strftime('%d'))
16,print current date time,True,True,25,print(datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S'))
17,print current date time,False,True,14,print('<unk> %s' % datetime.datetime.now())
18,print current date time,False,True,22,print(datetime.datetime.now().strftime('%Y-%m-%d %H:%M'))
19,print current date time,False,True,19,print(datetime.datetime.now().strftime('%H:%M:%S'))
20,print current date time,False,True,18,"print('<unk> %s, <unk>' % datetime.datetime.now())"
21,print current date time,False,False,38,">>> import datetime
>>> datetime.datetime.now()
datetime.datetime(2009, 1, 6, 15, 8, 24, 78915)

>>> print(datetime.datetime.now())
2009-01-06 15:08:24.789150"
22,print current date time,False,False,32,">>> datetime.datetime.now().time()
datetime.time(15, 8, 24, 78915)

>>> print(datetime.datetime.now().time())
15:08:24.789150"
23,print current date time,False,False,7,>>> from datetime import datetime
24,print current date time,False,False,38,">>> from time import gmtime, strftime
>>> strftime(""%Y-%m-%d %H:%M:%S"", gmtime())
'2009-01-05 22:14:39'"
25,print current date time,False,False,10,"for date in mylist :
    print str(date)"
26,print current date time,False,False,128,"import datetime
mylist = []
today = datetime.date.today()
mylist.append(today)
print mylist[0] # print the date object, not the container ;-)
2008-11-22

# It's better to always use str() because :

print ""This is a new day : "", mylist[0] # will work
>>> This is a new day : 2008-11-22

print ""This is a new day : "" + mylist[0] # will crash
>>> cannot concatenate 'str' and 'datetime.date' objects

print ""This is a new day : "" + str(mylist[0]) 
>>> This is a new day : 2008-11-22"
27,print current date time,False,False,26,"print today.strftime('We are the %d, %b %Y')
>>> 'We are the 22, Nov 2008'"
28,get date time one week from now,False,True,18,"datetime.datetime.strptime('January 11, 2010', '%B %d, %Y')"
29,get date time one week from now,False,True,11,"datetime.datetime.combine(datetime.date.today(), datetime.timedelta(hours=3))"
30,get date time one week from now,False,True,10,"datetime.datetime.combine(datetime.date.today(), datetime.now())"
31,get date time one week from now,False,True,18,"datetime.datetime.strptime('<unk>', '%B %d, %Y')"
32,get date time one week from now,True,True,11,"datetime.datetime.combine(datetime.date.today(), datetime.timedelta(days=12))"
33,get date time one week from now,False,True,15,"datetime.datetime.combine(datetime.date.today(), '%B A"")]')"
34,get date time one week from now,False,True,15,"datetime.datetime.combine(datetime.datetime.now(), '%B A"")]')"
35,get date time one week from now,False,False,38,">>> import datetime
>>> datetime.datetime.now()
datetime.datetime(2009, 1, 6, 15, 8, 24, 78915)

>>> print(datetime.datetime.now())
2009-01-06 15:08:24.789150"
36,get date time one week from now,False,False,32,">>> datetime.datetime.now().time()
datetime.time(15, 8, 24, 78915)

>>> print(datetime.datetime.now().time())
15:08:24.789150"
37,get date time one week from now,False,False,7,>>> from datetime import datetime
38,get date time one week from now,False,False,16,"from datetime import datetime, timedelta

d = datetime.today() - timedelta(days=days_to_subtract)"
39,get date time one week from now,False,False,38,">>> from time import gmtime, strftime
>>> strftime(""%Y-%m-%d %H:%M:%S"", gmtime())
'2009-01-05 22:14:39'"
40,get date time one week from now,False,False,37,">>> import datetime
>>> datetime.datetime.today()
datetime.datetime(2012, 3, 23, 23, 24, 55, 173504)
>>> datetime.datetime.today().weekday()
4"
41,get date time one week from now,False,False,26,"from datetime import datetime
datetime.now().strftime('%Y-%m-%d %H:%M:%S')"
42,get gmt timezone,False,True,3,datetime.datetime.now()
43,get gmt timezone,False,True,3,datetime.datetime.utcnow()
44,get gmt timezone,False,True,4,datetime.datetime.now().periods
45,get gmt timezone,False,True,4,datetime.datetime.now().year
46,get gmt timezone,False,True,4,datetime.datetime.now().microsecond
47,get gmt timezone,False,True,1,datetime.datetime.now
48,get gmt timezone,False,True,1,df.microsecond.values.microsecond
49,get gmt timezone,False,False,13,"import pytz
from datetime import datetime
datetime.utcnow().replace(tzinfo=pytz.utc)"
50,get gmt timezone,False,False,4,datetime.now(pytz.utc)
51,get gmt timezone,False,False,5,"import time

time.time()"
52,get gmt timezone,False,False,1,1369550494.884832
53,get gmt timezone,True,False,7,"from datetime import datetime
datetime.utcnow()"
54,get gmt timezone,False,False,31,"class datetime.timedelta([days[, seconds[, microseconds[, milliseconds[, minutes[, hours[, weeks]]]]]]])"
55,get gmt timezone,False,False,9,"from datetime import datetime
naive_dt = datetime.now()"
56,write to csv file,True,True,4,writer.writerow(write)
57,write to csv file,False,True,4,writer.writerow(csv)
58,write to csv file,True,True,4,writer.writerow(file)
59,write to csv file,False,True,7,"pd.read_csv('write', shell=True)"
60,write to csv file,False,True,7,"pd.read_csv('file', shell=True)"
61,write to csv file,False,True,4,writer.writerow(para)
62,write to csv file,False,True,4,writer.writerow(extra)
63,write to csv file,False,False,7,"df.to_csv(file_name, sep='\t')"
64,write to csv file,False,False,10,"df.to_csv(file_name, sep='\t', encoding='utf-8')"
65,write to csv file,False,False,26,"import csv

with open(""output.csv"", ""wb"") as f:
    writer = csv.writer(f)
    writer.writerows(a)"
66,write to csv file,False,False,30,"import csv

with open(""out.csv"", ""w"", newline="""") as f:
    writer = csv.writer(f)
    writer.writerows(a)"
67,write to csv file,False,False,9,"df.to_csv(file_name, encoding='utf-8', index=False)"
68,write to csv file,False,False,8,"Color  Number
0   red     22
1  blue     10"
69,write to csv file,False,False,5,"Color,Number
red,22
blue,10"
70,recursively iterate over all files in a directory,False,True,5,glob.glob('*')
71,recursively iterate over all files in a directory,True,True,33,"for dirname, dirnames, filenames in os.walk('file.txt'):
    for subdirname in dirnames:
        print(os.path.join(dirname, subdirname))
    for filename in filenames:
        pass"
72,recursively iterate over all files in a directory,False,True,10,"os.chdir(os.path.join(root, 'test.sh'))"
73,recursively iterate over all files in a directory,False,True,7,os.chdir(os.path.dirname(__file__))
74,recursively iterate over all files in a directory,False,True,7,os.chdir(os.path.normpath(__file__))
75,recursively iterate over all files in a directory,False,True,10,"os.chdir(os.path.join(root, 'my_file'))"
76,recursively iterate over all files in a directory,False,True,3,os.getcwd()
77,recursively iterate over all files in a directory,False,False,22,"from pathlib import Path

for path in Path('src').rglob('*.c'):
    print(path.name)"
78,recursively iterate over all files in a directory,False,False,41,"import fnmatch
import os

matches = []
for root, dirnames, filenames in os.walk('src'):
    for filename in fnmatch.filter(filenames, '*.c'):
        matches.append(os.path.join(root, filename))"
79,recursively iterate over all files in a directory,False,False,39,"import os

for filename in os.listdir(directory):
    if filename.endswith("".asm"") or filename.endswith("".py""): 
         # print(os.path.join(directory, filename))
        continue
    else:
        continue"
80,recursively iterate over all files in a directory,False,False,51,"import os

directory = os.fsencode(directory_in_str)

for file in os.listdir(directory):
     filename = os.fsdecode(file)
     if filename.endswith("".asm"") or filename.endswith("".py""): 
         # print(os.path.join(directory, filename))
         continue
     else:
         continue"
81,recursively iterate over all files in a directory,False,False,38,"from pathlib import Path

pathlist = Path(directory_in_str).glob('**/*.asm')
for path in pathlist:
     # because path is object not string
     path_in_str = str(path)
     # print(path_in_str)"
82,recursively iterate over all files in a directory,False,False,12,"for root, subdirs, files in os.walk(rootdir):"
83,recursively iterate over all files in a directory,False,False,223,"import os
import sys

walk_dir = sys.argv[1]

print('walk_dir = ' + walk_dir)

# If your current working directory may change during script execution, it's recommended to
# immediately convert program arguments to an absolute path. Then the variable root below will
# be an absolute path as well. Example:
# walk_dir = os.path.abspath(walk_dir)
print('walk_dir (absolute) = ' + os.path.abspath(walk_dir))

for root, subdirs, files in os.walk(walk_dir):
    print('--\nroot = ' + root)
    list_file_path = os.path.join(root, 'my-directory-list.txt')
    print('list_file_path = ' + list_file_path)

    with open(list_file_path, 'wb') as list_file:
        for subdir in subdirs:
            print('\t- subdirectory ' + subdir)

        for filename in files:
            file_path = os.path.join(root, filename)

            print('\t- file %s (full path: %s)' % (filename, file_path))

            with open(file_path, 'rb') as f:
                f_content = f.read()
                list_file.write(('The file %s contains:\n' % filename).encode('utf-8'))
                list_file.write(f_content)
                list_file.write(b'\n')"
84,regex replace capture group,False,True,16,"re.sub('<unk>', '<unk>', text)"
85,regex replace capture group,False,True,16,"re.sub('<unk>', '<unk>', str)"
86,regex replace capture group,False,True,14,"re.sub('#(\\w+)', '\\1', regex)"
87,regex replace capture group,False,True,13,"re.sub('<unk>', '\\1', text)"
88,regex replace capture group,True,True,14,"re.sub('#(\\w+)', '\\1', text)"
89,regex replace capture group,False,True,14,"re.sub('#(\\w+)', '\\1', para)"
90,regex replace capture group,False,True,11,"re.sub('http://www\\.iwashere\\.com/', '', para)"
91,regex replace capture group,False,False,25,"result = re.sub(r""(\d.*?)\s(\d.*?)"", r""\1 \2"", string1)"
92,regex replace capture group,False,False,24,"coord_re = re.sub(r""(\d), (\d)"", r""\1,\2"", coords)"
93,regex replace capture group,False,False,35,">>> '\1,\2'
'\x01,\x02'
>>> print '\1,\2'
,
>>> print r'\1,\2'   # this is what you actually want
\1,\2"
94,regex replace capture group,False,False,26,"re.sub(r'(\_a)?\.([^\.]*)$' , r'_suff.\2',""long.file.name.jpg"")"
95,regex replace capture group,False,False,8,"p.sub('gray \\1', s)"
96,regex replace capture group,False,False,8,"p.sub(r'gray \1', s)"
97,regex replace capture group,False,False,28,"re.sub(r'(?:_a)?\.([^.]*)$', r'_suff.\1', ""long.file.name.jpg"")"
98,load csv file with pandas,False,True,10,"df.to_csv(l, index=False, sep=' ')"
99,load csv file with pandas,True,True,10,"pandas.read_csv(file, sep='\t', lineterminator='\r')"
100,load csv file with pandas,False,True,10,"pd.read_csv(file, sep='', lineterminator='\r')"
101,load csv file with pandas,False,True,9,"pd.read_csv(file, sep='', header=None)"
102,load csv file with pandas,False,True,10,"pd.read_csv(file, sep='\t', lineterminator='\r')"
103,load csv file with pandas,False,True,10,"pandas.read_csv(file, sep='', lineterminator='\r')"
104,load csv file with pandas,False,True,10,"df.to_csv(l, **False, sep=' ')"
105,load csv file with pandas,False,False,16,"from numpy import genfromtxt
my_data = genfromtxt('my_file.csv', delimiter=',')"
106,load csv file with pandas,False,False,19,"chunksize = 10 ** 6
for chunk in pd.read_csv(filename, chunksize=chunksize):
    process(chunk)"
107,load csv file with pandas,False,False,14,"import pandas as pd

url=""https://raw.githubusercontent.com/cs109/2014_data/master/countries.csv""
c=pd.read_csv(url)"
108,load csv file with pandas,False,False,39,"import pandas as pd
df=pd.read_csv('myfile.csv', sep=',',header=None)
df.values
array([[ 1. ,  2. ,  3. ],
       [ 4. ,  5.5,  6. ]])"
109,load csv file with pandas,False,False,24,"1.0, 2, 3
4, 5.5, 6

import numpy as np
np.genfromtxt('myfile.csv',delimiter=',')"
110,load csv file with pandas,False,False,22,"array([[ 1. ,  2. ,  3. ],
       [ 4. ,  5.5,  6. ]])"
111,load csv file with pandas,False,False,12,"np.genfromtxt('myfile.csv',delimiter=',',dtype=None)"
112,get average of row values in pandas dataframe,False,True,16,"df.apply(lambda x: (x.mean / 100).mean(), axis=1)"
113,get average of row values in pandas dataframe,True,True,19,"df.groupby(np.arange(len(df.columns)) // 2 + 1, axis=1).mean()"
114,get average of row values in pandas dataframe,False,True,17,"df.groupby(np.arange(len(df.columns)) // 3, axis=1).mean()"
115,get average of row values in pandas dataframe,False,True,16,"df.apply(lambda x: (x.mean / 3).mean(), axis=1)"
116,get average of row values in pandas dataframe,False,True,16,"df.apply(lambda x: (x - 1).mean(), axis=1)"
117,get average of row values in pandas dataframe,False,True,19,"df.groupby(np.arange(len(df.columns)) // 2 // 3, axis=1).mean()"
118,get average of row values in pandas dataframe,False,True,14,df.apply(lambda x: (x.mean / 100).mean())
119,get average of row values in pandas dataframe,False,False,14,"from sklearn.model_selection import train_test_split

train, test = train_test_split(df, test_size=0.2)"
120,get average of row values in pandas dataframe,False,False,98,">>> import pandas as pd
>>> from numpy.random import randint

>>> df = pd.DataFrame(columns=['lib', 'qty1', 'qty2'])
>>> for i in range(5):
>>>     df.loc[i] = ['name' + str(i)] + list(randint(10, size=2))

>>> df
     lib qty1 qty2
0  name0    3    3
1  name1    2    4
2  name2    2    8
3  name3    2    1
4  name4    9    6"
121,get average of row values in pandas dataframe,False,False,38,"rows_list = []
for row in input_rows:

        dict1 = {}
        # get input row in dictionary format
        # key = col_name
        dict1.update(blah..) 

        rows_list.append(dict1)

df = pd.DataFrame(rows_list)"
122,get average of row values in pandas dataframe,False,False,61,"In [3]: sub_df
Out[3]:
          A         B
2 -0.133653 -0.030854

In [4]: sub_df.iloc[0]
Out[4]:
A   -0.133653
B   -0.030854
Name: 2, dtype: float64

In [5]: sub_df.iloc[0]['A']
Out[5]: -0.13365288513107493"
123,get average of row values in pandas dataframe,False,False,54,"In [11]: df = pd.DataFrame(np.random.randn(100, 2))

In [12]: msk = np.random.rand(len(df)) < 0.8

In [13]: train = df[msk]

In [14]: test = df[~msk]"
124,get average of row values in pandas dataframe,False,False,30,"In [15]: len(test)
Out[15]: 21

In [16]: len(train)
Out[16]: 79"
125,get average of row values in pandas dataframe,False,False,17,"train=df.sample(frac=0.8,random_state=200) #random state is a seed value
test=df.drop(train.index)"
126,pandas get average of column,False,True,27,df['average'] = df['mean'].apply(lambda x: x.mean() / float(x.mean()))
127,pandas get average of column,False,True,25,df['average'] = df['mean'].apply(lambda x: mean() / int(x))
128,pandas get average of column,False,True,17,"df.groupby(np.arange(len(df.columns)) // 3, axis=1).mean()"
129,pandas get average of column,False,True,25,df['average'] = df['mean'].apply(lambda x: x.mean() / int(x))
130,pandas get average of column,False,True,14,"df.groupby(np.arange(3) // 3, axis=1).mean()"
131,pandas get average of column,False,True,16,(df['mean'] / df['mean']).mean()
132,pandas get average of column,False,True,17,df['average'] = df['mean'] / df['mean']
133,pandas get average of column,True,False,50,"In [479]: df
Out[479]: 
         ID  birthyear    weight
0    619040       1962  0.123123
1    600161       1963  0.981742
2  25602033       1963  1.312312
3    624870       1987  0.942120

In [480]: df[""weight""].mean()
Out[480]: 0.83982437500000007"
134,pandas get average of column,False,False,68,">>> df
                 A      B
DATE                     
2013-05-01  473077  71333
2013-05-02   35131  62441
2013-05-03     727  27381
2013-05-04     481   1206
2013-05-05     226   1733
2013-05-06     NaN   4064
2013-05-07     NaN  41151
2013-05-08     NaN   8144
2013-05-09     NaN     23
2013-05-10     NaN     10
>>> df.mean(axis=1)
DATE
2013-05-01    272205.0
2013-05-02     48786.0
2013-05-03     14054.0
2013-05-04       843.5
2013-05-05       979.5
2013-05-06      4064.0
2013-05-07     41151.0
2013-05-08      8144.0
2013-05-09        23.0
2013-05-10        10.0
dtype: float64"
135,pandas get average of column,False,False,11,"df['average'] = df.mean(axis=1)
df"
136,pandas get average of column,False,False,19,"salary_1  salary_2  salary_3     average
0       230       235       210  225.000000
1       345       375       385  368.333333
2       222       292       260  258.000000"
137,pandas get average of column,False,False,21,"df['average_1_3'] = df[['salary_1', 'salary_3']].mean(axis=1)
df"
138,pandas get average of column,False,False,19,"salary_1  salary_2  salary_3  average_1_3
0       230       235       210        220.0
1       345       375       385        365.0
2       222       292       260        241.0"
139,pandas get average of column,False,False,16,"df.groupby(np.arange(len(df.columns))//3, axis=1).mean()"
140,pandas join dataframes,True,True,10,"pd.concat([df1, df2], axis=1)"
141,pandas join dataframes,False,True,11,"pd.merge(a, b, on='?')"
142,pandas join dataframes,False,True,10,"pandas.concat([df1, df2], axis=1)"
143,pandas join dataframes,False,True,13,"pd.concat([df1, pd.DataFrame(df2.values)], axis=1)"
144,pandas join dataframes,False,True,13,"pd.concat([df1, df2], **',')"
145,pandas join dataframes,False,True,11,"pd.concat([df1, df2], **'*')"
146,pandas join dataframes,False,True,13,"pandas.concat([df1, df2], **',')"
147,pandas join dataframes,False,False,4,import pandas as pd
148,pandas join dataframes,False,False,11,"dfs = [df0, df1, df2, dfN]"
149,pandas join dataframes,False,False,21,"df_final = reduce(lambda left,right: pd.merge(left,right,on='name'), dfs)"
150,pandas join dataframes,False,False,4,from functools import reduce
151,pandas join dataframes,False,False,21,"left.join(right, on=key_or_keys)
pd.merge(left, right, left_on=key_or_keys, right_index=True, how='left', sort=False)"
152,pandas join dataframes,False,False,10,"pd.merge(df1, df2, left_index=True, right_index=True)"
153,pandas join dataframes,False,False,4,df1.join(df2)
154,pandas join series into dataframes,False,True,10,"pd.concat([df1, df2], axis=1)"
155,pandas join series into dataframes,False,True,19,"pd.concat([df1, df2], axis=1).merge(df3, on='?')"
156,pandas join series into dataframes,False,True,19,"pd.concat([df1, df2], axis=1).apply(lambda x: x.tolist())"
157,pandas join series into dataframes,False,True,10,"pandas.concat([df1, df2], axis=1)"
158,pandas join series into dataframes,False,True,13,"pd.concat([df1, df2], **',')"
159,pandas join series into dataframes,False,True,10,"pd.concat([df1, df2], **cols)"
160,pandas join series into dataframes,False,True,28,"pd.concat([df1, df2], **['A', 'B']).apply(lambda x: x.tolist())"
161,pandas join series into dataframes,True,False,120,"In [1]: s1 = pd.Series([1, 2], index=['A', 'B'], name='s1')

In [2]: s2 = pd.Series([3, 4], index=['A', 'B'], name='s2')

In [3]: pd.concat([s1, s2], axis=1)
Out[3]:
   s1  s2
A   1   3
B   2   4

In [4]: pd.concat([s1, s2], axis=1).reset_index()
Out[4]:
  index  s1  s2
0     A   1   3
1     B   2   4"
162,pandas join series into dataframes,False,False,28,"df.merge(s.rename('new'), left_index=True, right_index=True)
# If series is already named,
# df.merge(s, left_index=True, right_index=True)"
163,pandas join series into dataframes,False,False,10,"df.merge(s.to_frame(), left_index=True, right_index=True)"
164,pandas join series into dataframes,False,False,14,"pd.DataFrame({'email':sf.index, 'list':sf.values})"
165,pandas join series into dataframes,False,False,16,"import pandas as pd
pd.merge(restaurant_ids_dataframe, restaurant_review_frame, on='business_id', how='outer')"
166,pandas join series into dataframes,False,False,21,"pd.merge(restaurant_ids_dataframe, restaurant_review_frame, on='business_id', how='outer', suffixes=('_restaurant_id', '_restaurant_review'))"
167,pandas join series into dataframes,False,False,16,"email
email1@email.com    A
email2@email.com    B
email3@email.com    C
dtype: int64"
168,pandas change dataframe column name,False,True,15,df['name'] = df['name'].apply(pd.Series)
169,pandas change dataframe column name,False,True,20,df['name'] = df['name'].apply(lambda x: x.tolist())
170,pandas change dataframe column name,False,True,14,df['name'] = df['name'].values.tolist()
171,pandas change dataframe column name,False,True,18,"df['name'] = df['name'].str.replace('str_3', '')"
172,pandas change dataframe column name,False,True,7,df['name'] = df.index
173,pandas change dataframe column name,False,True,8,df['name'] = 'value'
174,pandas change dataframe column name,False,True,7,df['name'] = idx
175,pandas change dataframe column name,True,False,51,"df = df.rename(columns={'oldName1': 'newName1', 'oldName2': 'newName2'})
# Or rename the existing DataFrame (rather than creating a copy) 
df.rename(columns={'oldName1': 'newName1', 'oldName2': 'newName2'}, inplace=True)"
176,pandas change dataframe column name,False,False,43,"df = pd.DataFrame('x', index=range(3), columns=list('abcde'))
df

   a  b  c  d  e
0  x  x  x  x  x
1  x  x  x  x  x
2  x  x  x  x  x"
177,pandas change dataframe column name,False,False,102,"df2 = df.rename({'a': 'X', 'b': 'Y'}, axis=1)  # new method
df2 = df.rename({'a': 'X', 'b': 'Y'}, axis='columns')
df2 = df.rename(columns={'a': 'X', 'b': 'Y'})  # old method  

df2

   X  Y  c  d  e
0  x  x  x  x  x
1  x  x  x  x  x
2  x  x  x  x  x"
178,pandas change dataframe column name,False,False,48,"df.rename({'a': 'X', 'b': 'Y'}, axis=1, inplace=True)
df

   X  Y  c  d  e
0  x  x  x  x  x
1  x  x  x  x  x
2  x  x  x  x  x"
179,pandas change dataframe column name,False,False,54,"df2 = df.set_axis(['V', 'W', 'X', 'Y', 'Z'], axis=1, inplace=False)
df2

   V  W  X  Y  Z
0  x  x  x  x  x
1  x  x  x  x  x
2  x  x  x  x  x"
180,pandas change dataframe column name,False,False,47,"df.columns = ['V', 'W', 'X', 'Y', 'Z']
df

   V  W  X  Y  Z
0  x  x  x  x  x
1  x  x  x  x  x
2  x  x  x  x  x"
181,pandas change dataframe column name,False,False,53,">>> df = pd.DataFrame({'$a':[1,2], '$b': [10,20]})
>>> df.columns = ['a', 'b']
>>> df
   a   b
0  1  10
1  2  20"
182,rename pandas df columns,False,True,22,"df.rename(columns={'A': 'B'}, ascending=[True, False], inplace=True)"
183,rename pandas df columns,False,True,15,"df.rename(columns={'A': 'B'}, inplace=True)"
184,rename pandas df columns,False,True,15,"df.rename(columns={'A': 'B'}, axis=1)"
185,rename pandas df columns,False,True,17,"df.rename(columns={'A': 'B'}, axis=1, inplace=True)"
186,rename pandas df columns,False,True,20,"df.rename(columns={'A': 'B'}, ascending=[True, False])"
187,rename pandas df columns,False,True,23,"df.rename(**{'A': 'A', 'B': 'B'}, axis=1)"
188,rename pandas df columns,False,True,23,"df.rename(**{'A': 'A', 'B': 'B'}, inplace=True)"
189,rename pandas df columns,False,False,51,"df = df.rename(columns={'oldName1': 'newName1', 'oldName2': 'newName2'})
# Or rename the existing DataFrame (rather than creating a copy) 
df.rename(columns={'oldName1': 'newName1', 'oldName2': 'newName2'}, inplace=True)"
190,rename pandas df columns,False,False,43,"df = pd.DataFrame('x', index=range(3), columns=list('abcde'))
df

   a  b  c  d  e
0  x  x  x  x  x
1  x  x  x  x  x
2  x  x  x  x  x"
191,rename pandas df columns,False,False,102,"df2 = df.rename({'a': 'X', 'b': 'Y'}, axis=1)  # new method
df2 = df.rename({'a': 'X', 'b': 'Y'}, axis='columns')
df2 = df.rename(columns={'a': 'X', 'b': 'Y'})  # old method  

df2

   X  Y  c  d  e
0  x  x  x  x  x
1  x  x  x  x  x
2  x  x  x  x  x"
192,rename pandas df columns,False,False,48,"df.rename({'a': 'X', 'b': 'Y'}, axis=1, inplace=True)
df

   X  Y  c  d  e
0  x  x  x  x  x
1  x  x  x  x  x
2  x  x  x  x  x"
193,rename pandas df columns,True,False,54,"df2 = df.set_axis(['V', 'W', 'X', 'Y', 'Z'], axis=1, inplace=False)
df2

   V  W  X  Y  Z
0  x  x  x  x  x
1  x  x  x  x  x
2  x  x  x  x  x"
194,rename pandas df columns,False,False,47,"df.columns = ['V', 'W', 'X', 'Y', 'Z']
df

   V  W  X  Y  Z
0  x  x  x  x  x
1  x  x  x  x  x
2  x  x  x  x  x"
195,rename pandas df columns,False,False,53,">>> df = pd.DataFrame({'$a':[1,2], '$b': [10,20]})
>>> df.columns = ['a', 'b']
>>> df
   a   b
0  1  10
1  2  20"
196,pandas write df to csv,False,True,13,"pd.concat([df, pd.DataFrame(df)], axis=1)"
197,pandas write df to csv,False,True,7,"df.to_csv('df', index=False)"
198,pandas write df to csv,False,True,10,"pd.concat([df, df], axis=1)"
199,pandas write df to csv,False,True,10,"pd.DataFrame([df] * 5, ignore_index=True)"
200,pandas write df to csv,False,True,14,"pd.concat([df, df.to_csv('df')], axis=1)"
201,pandas write df to csv,False,True,7,"df.to_csv('df', **False)"
202,pandas write df to csv,False,True,10,"pd.concat([df, df], ignore_index=True)"
203,pandas write df to csv,True,False,7,"df.to_csv(file_name, sep='\t')"
204,pandas write df to csv,False,False,10,"df.to_csv(file_name, sep='\t', encoding='utf-8')"
205,pandas write df to csv,False,False,9,"df.to_csv(file_name, encoding='utf-8', index=False)"
206,pandas write df to csv,False,False,8,"Color  Number
0   red     22
1  blue     10"
207,pandas write df to csv,False,False,5,"Color,Number
red,22
blue,10"
208,pandas write df to csv,False,False,10,",Color,Number
0,red,22
1,blue,10"
209,pandas write df to csv,False,False,41,">>> df = pd.DataFrame({'A' : [0, 1], 'B' : [1, 6]})
>>> df.to_csv()
',A,B\n0,0,1\n1,1,6\n'"
210,pandas print with two decimals,False,True,17,df.apply(lambda x: (x + 1).click()).all()
211,pandas print with two decimals,False,True,10,df.groupby('Q').head(4)
212,pandas print with two decimals,False,True,19,"df.apply(lambda idx: x.pack('utf8', 1).strip()).max()"
213,pandas print with two decimals,False,True,9,df.groupby('Name').head(4)
214,pandas print with two decimals,False,True,24,"df.apply(lambda x: x.replace('-like_count', '').rstrip('*')).encode('?')"
215,pandas print with two decimals,False,True,28,"df.apply(lambda idx: x.replace('-like_count', '').map(lambda x: '%.2f' % x)
    ).start()"
216,pandas print with two decimals,False,True,22,"df.apply(lambda x: x.strftime('%d', x).group(1)).all()"
217,pandas print with two decimals,False,False,130,">>> 125650429603636838/(2**53)
13.949999999999999

>>> 234042163/(2**24)
13.949999988079071

>>> a = 13.946
>>> print(a)
13.946
>>> print(""%.2f"" % a)
13.95
>>> round(a,2)
13.949999999999999
>>> print(""%.2f"" % round(a, 2))
13.95
>>> print(""{:.2f}"".format(a))
13.95
>>> print(""{:.2f}"".format(round(a, 2)))
13.95
>>> print(""{:.15f}"".format(round(a, 2)))
13.949999999999999"
218,pandas print with two decimals,False,False,10,"""{:.2f}"".format(13.949999999999999)"
219,pandas print with two decimals,False,False,13,"float(""{:.2f}"".format(13.949999999999999))"
220,pandas print with two decimals,False,False,64,">>> x = 13.949999999999999999
>>> x
13.95
>>> g = float(""{:.2f}"".format(x))
>>> g
13.95
>>> x == g
True
>>> h = round(x, 2)
>>> h
13.95
>>> x == h
True"
221,pandas print with two decimals,False,False,11,"answer = str(round(answer, 2))"
222,pandas print with two decimals,False,False,10,">>> round(14.22222223, 2)
14.22"
223,pandas print with two decimals,True,False,52,"import pandas as pd
pd.options.display.float_format = '${:,.2f}'.format
df = pd.DataFrame([123.4567, 234.5678, 345.6789, 456.7890],
                  index=['foo','bar','baz','quux'],
                  columns=['cost'])
print(df)"
224,pandas save csv two decimal,False,True,14,"df = pd.read_csv('myfile.txt', sep=',', header=None)"
225,pandas save csv two decimal,False,True,5,pd.radians('var_3')
226,pandas save csv two decimal,False,True,11,"pd.strptime('<unk>', 'rb')"
227,pandas save csv two decimal,False,True,15,"pd.strptime('<unk>', '\\1.\\2', sep=' ')"
228,pandas save csv two decimal,False,True,14,"pd.strptime('<unk>', '\\1.\\2', sep='\t')"
229,pandas save csv two decimal,False,True,5,pd.radians('rb')
230,pandas save csv two decimal,False,True,10,df.apply(lambda x: x.round(x.decimal))
231,pandas save csv two decimal,False,False,16,"df = pd.read_csv(Input, delimiter="";"", decimal="","")"
232,pandas save csv two decimal,False,False,36,"import locale

# Set to users preferred locale:
locale.setlocale(locale.LC_ALL, '')
# Or a specific locale:
locale.setlocale(locale.LC_NUMERIC, ""en_DK.UTF-8"")

print locale.atof(""3,14"")"
233,pandas save csv two decimal,True,False,36,"with open('foo.csv', 'w') as f:
    data.to_csv(f, index=True, header=True, decimal=',', sep=' ', float_format='%.3f')"
234,pandas save csv two decimal,False,False,27,"data.reset_index().to_csv('foo.csv', index=False, header=True, decimal=',', sep=' ', float_format='%.3f')"
235,pandas save csv two decimal,False,False,12,"df = pd.read_csv(r'data.csv', decimal=',')"
236,pandas save csv two decimal,False,False,36,"import pandas as pd

df_in  = pd.read_csv(source_file, float_precision='round_trip')
df_out = ... # some processing of df_in
df_out.to_csv(target_file, float_format=""%.3f"") # for 3 decimal places"
237,pandas save csv two decimal,False,False,87,"df = pd.DataFrame({'a': ['120,00', '42,00', '18,00', '23,00'], 
                'b': ['51,23', '18,45', '28,90', '133,00']})

df['a'] = [x.replace(',', '.') for x in df['a']]

df['a'] = df['a'].astype(float)"
238,pandas create buckets by column value,False,True,23,"df['value'] = df['value'].apply(lambda x: int(x), axis=1)"
239,pandas create buckets by column value,False,True,21,df['value'] = df['value'].apply(lambda x: int(x))
240,pandas create buckets by column value,False,True,29,"df['value'] = df['value'].apply(lambda x: int(x.replace(' ', '')), axis=1)"
241,pandas create buckets by column value,False,True,19,df['value'] = df['value'].replace(pandas['value'])
242,pandas create buckets by column value,False,True,21,"df['value'] = df['value'].replace(df['value'], axis=1)"
243,pandas create buckets by column value,False,True,18,"df['value'] = df.apply(lambda x: int(x), axis=1)"
244,pandas create buckets by column value,False,True,25,"df['value'] = df['value'].apply(lambda x: x.replace('0', ''))"
245,pandas create buckets by column value,True,False,67,"bins = [0, 1, 5, 10, 25, 50, 100]
df['binned'] = pd.cut(df['percentage'], bins)
print (df)
   percentage     binned
0       46.50   (25, 50]
1       44.20   (25, 50]
2      100.00  (50, 100]
3       42.12   (25, 50]"
246,pandas create buckets by column value,False,False,58,"bins = [0, 1, 5, 10, 25, 50, 100]
labels = [1,2,3,4,5,6]
df['binned'] = pd.cut(df['percentage'], bins=bins, labels=labels)
print (df)
   percentage binned
0       46.50      5
1       44.20      5
2      100.00      6
3       42.12      5"
247,pandas create buckets by column value,False,False,52,"bins = [0, 1, 5, 10, 25, 50, 100]
df['binned'] = np.searchsorted(bins, df['percentage'].values)
print (df)
   percentage  binned
0       46.50       5
1       44.20       5
2      100.00       6
3       42.12       5"
248,pandas create buckets by column value,False,False,62,"s = pd.cut(df['percentage'], bins=bins).value_counts()
print (s)
(25, 50]     3
(50, 100]    1
(10, 25]     0
(5, 10]      0
(1, 5]       0
(0, 1]       0
Name: percentage, dtype: int64"
249,pandas create buckets by column value,False,False,62,"s = df.groupby(pd.cut(df['percentage'], bins=bins)).size()
print (s)
percentage
(0, 1]       0
(1, 5]       0
(5, 10]      0
(10, 25]     0
(25, 50]     3
(50, 100]    1
dtype: int64"
250,pandas create buckets by column value,False,False,10,In [25]: df.hist(column='Trip_distance')
251,pandas create buckets by column value,False,False,12,"In [34]: df.hist(column='Trip_distance', bins=50)"
252,filter values in pandas df,False,True,10,"pd.concat([df] * 5, axis=1)"
253,filter values in pandas df,False,True,11,"df.apply(lambda x: x.tolist(), axis=1)"
254,filter values in pandas df,False,True,10,"pd.concat([df, df], axis=1)"
255,filter values in pandas df,False,True,10,"pd.concat([df, filter], axis=1)"
256,filter values in pandas df,False,True,8,pd.concat([df] * 5)
257,filter values in pandas df,False,True,9,df.apply(lambda x: x.tolist())
258,filter values in pandas df,False,True,13,df.apply(lambda x: x.startswith('b.'))
259,filter values in pandas df,True,False,10,df.loc[df['column_name'] == some_value]
260,filter values in pandas df,False,False,12,df.loc[df['column_name'].isin(some_values)]
261,filter values in pandas df,False,False,24,df.loc[(df['column_name'] >= A) & (df['column_name'] <= B)]
262,filter values in pandas df,False,False,17,df['column_name'] >= A & df['column_name'] <= B
263,filter values in pandas df,False,False,19,df['column_name'] >= (A & df['column_name']) <= B
264,filter values in pandas df,False,False,11,df.loc[df['column_name'] != some_value]
265,filter values in pandas df,False,False,12,df.loc[~df['column_name'].isin(some_values)]
266,filter df with two conditions,False,True,10,"pd.concat([df, df], axis=1)"
267,filter df with two conditions,False,True,12,"re.sub('<unk>', '', df)"
268,filter df with two conditions,False,True,13,"re.sub('<unk>', '\\1', df)"
269,filter df with two conditions,False,True,13,"re.sub('<unk>', '\\1\\2', df)"
270,filter df with two conditions,False,True,10,"re.concat([df, df], axis=1)"
271,filter df with two conditions,False,True,14,"re.sub('<unk>', 'B', df)"
272,filter df with two conditions,False,True,19,"pd.merge(df, df, on=['df', 'B'], how='left')"
273,filter df with two conditions,True,False,98,"In [11]: df.loc[df['col1'] >= 1, 'col1']
Out[11]: 
1    1
2    2
Name: col1

In [12]: df[df['col1'] >= 1]
Out[12]: 
   col1  col2
1     1    11
2     2    12

In [13]: df[(df['col1'] >= 1) & (df['col1'] <=1 )]
Out[13]: 
   col1  col2
1     1    11"
274,filter df with two conditions,False,False,109,"In [14]: def b(x, col, op, n): 
             return op(x[col],n)

In [15]: def f(x, *b):
             return x[(np.logical_and(*b))]

In [16]: b1 = b(df, 'col1', ge, 1)

In [17]: b2 = b(df, 'col1', le, 1)

In [18]: f(df, b1, b2)
Out[18]: 
   col1  col2
1     1    11"
275,filter df with two conditions,False,False,28,"In [21]: df.query('col1 <= 1 & 1 <= col1')
Out[21]:
   col1  col2
1     1    11"
276,filter df with two conditions,False,False,18,df1 = df[(df.a != -1) & (df.b != -1)]
277,filter df with two conditions,False,False,18,df2 = df[(df.a != -1) | (df.b != -1)]
278,filter df with two conditions,False,False,21,males = df[(df[Gender]=='Male') & (df[Year]==2014)]
279,filter df with two conditions,False,False,69,"from collections import defaultdict
dic={}
for g in ['male', 'female']:
  dic[g]=defaultdict(dict)
  for y in [2013, 2014]:
    dic[g][y]=df[(df[Gender]==g) & (df[Year]==y)] #store the DataFrames to a dict of dict"
280,df set column to 7 decimals,False,True,7,"scipy.set_option('display.max_columns', 7)"
281,df set column to 7 decimals,False,True,15,numpy.array([(3) for i in range(3)])
282,df set column to 7 decimals,False,True,20,"numpy.array([x.get('7') for x in x.split(',')])"
283,df set column to 7 decimals,False,True,20,numpy.array([x.get('7') for x in x.split(':')])
284,df set column to 7 decimals,False,True,20,"numpy.array([(3) for x in struct.pack('<I', 7)])"
285,df set column to 7 decimals,False,True,19,numpy.array([x.get('7') for x in os.listdir('\\1')])
286,df set column to 7 decimals,False,True,18,numpy.array([x.get('7') for x in os.listdir('')])
287,df set column to 7 decimals,True,False,42,"output = df.to_string(formatters={
    'var1': '{:,.2f}'.format,
    'var2': '{:,.2f}'.format,
    'var3': '{:,.2%}'.format
})
print(output)"
288,df set column to 7 decimals,False,False,51,"from IPython.core.display import display, HTML
output = df.to_html(formatters={
    'var1': '{:,.2f}'.format,
    'var2': '{:,.2f}'.format,
    'var3': '{:,.2%}'.format
})
display(HTML(output))"
289,df set column to 7 decimals,False,False,36,"df.style.format({
    'var1': '{:,.2f}'.format,
    'var2': '{:,.2f}'.format,
    'var3': '{:,.2%}'.format,
})"
290,df set column to 7 decimals,False,False,7,df = df.assign(industry='yyy')
291,df set column to 7 decimals,False,False,37,"df_data['vals'] = df_data['vals'].map(lambda x: '%2.1f' % x)

df_data.to_csv(outfile, index=False, header=False, float_format='%11.6f')"
292,df set column to 7 decimals,False,False,66,"df['var2'] = pd.Series([round(val, 2) for val in df['var2']], index = df.index)
df['var3'] = pd.Series([""{0:.2f}%"".format(val * 100) for val in df['var3']], index = df.index)"
293,df set column to 7 decimals,False,False,9,pd.options.display.float_format = '{:.2f}%'.format
294,pandas add new column based on row values,False,True,23,df['add'] = df['farm'].apply(lambda x: int(x) + 1)
295,pandas add new column based on row values,False,True,20,df['add'] = df['farm'].apply(lambda x: x + y)
296,pandas add new column based on row values,False,True,23,df['add'] = df['farm'].apply(lambda x: int(x) - 1)
297,pandas add new column based on row values,False,True,23,df['add'] = df['farm'].apply(lambda x: float(x) - 1)
298,pandas add new column based on row values,False,True,26,df['add'] = df['values'].apply(lambda x: int(x[1]) + 1)
299,pandas add new column based on row values,False,True,29,df['add'] = df['values'].apply(lambda x: int(x[1]) + x[1])
300,pandas add new column based on row values,False,True,10,"pd.concat([df1, df2], axis=1)"
301,pandas add new column based on row values,False,False,118,"def label_race (row):
   if row['eri_hispanic'] == 1 :
      return 'Hispanic'
   if row['eri_afr_amer'] + row['eri_asian'] + row['eri_hawaiian'] + row['eri_nat_amer'] + row['eri_white'] > 1 :
      return 'Two Or More'
   if row['eri_nat_amer'] == 1 :
      return 'A/I AK Native'
   if row['eri_asian'] == 1:
      return 'Asian'
   if row['eri_afr_amer']  == 1:
      return 'Black/AA'
   if row['eri_hawaiian'] == 1:
      return 'Haw/Pac Isl.'
   if row['eri_white'] == 1:
      return 'White'
   return 'Other'"
302,pandas add new column based on row values,False,False,12,"df.apply (lambda row: label_race(row), axis=1)"
303,pandas add new column based on row values,False,False,24,"0           White
1        Hispanic
2           White
3           White
4           Other
5           White
6     Two Or More
7           White
8    Haw/Pac Isl.
9           White"
304,pandas add new column based on row values,True,False,18,"df['race_label'] = df.apply (lambda row: label_race(row), axis=1)"
305,pandas add new column based on row values,False,False,135,"lname   fname rno_cd  eri_afr_amer  eri_asian  eri_hawaiian   eri_hispanic  eri_nat_amer  eri_white rno_defined    race_label
0      MOST    JEFF      E             0          0             0              0             0          1       White         White
1    CRUISE     TOM      E             0          0             0              1             0          0       White      Hispanic
2      DEPP  JOHNNY    NaN             0          0             0              0             0          1     Unknown         White
3     DICAP     LEO    NaN             0          0             0              0             0          1     Unknown         White
4    BRANDO  MARLON      E             0          0             0              0             0          0       White         Other
5     HANKS     TOM    NaN             0          0             0              0             0          1     Unknown         White
6    DENIRO  ROBERT      E             0          1             0              0             0          1       White   Two Or More
7    PACINO      AL      E             0          0             0              0             0          1       White         White
8  WILLIAMS   ROBIN      E             0          0             1              0             0          0       White  Haw/Pac Isl.
9  EASTWOOD   CLINT      E             0          0             0              0             0          1       White         White"
306,pandas add new column based on row values,False,False,110,"import pandas as pd

# make a simple dataframe
df = pd.DataFrame({'a':[1,2], 'b':[3,4]})
df
#    a  b
# 0  1  3
# 1  2  4

# create an unattached column with an index
df.apply(lambda row: row.a + row.b, axis=1)
# 0    4
# 1    6

# do same but attach it to the dataframe
df['c'] = df.apply(lambda row: row.a + row.b, axis=1)
df
#    a  b  c
# 0  1  3  4
# 1  2  4  6"
307,pandas add new column based on row values,False,False,45,"fn = lambda row: row.a + row.b # define a function for the new column
col = df.apply(fn, axis=1) # get column data with an index
df = df.assign(c=col.values) # assign values to column 'c'"
308,multinomial logistic regression model,False,True,5,plt.savefig('multinomial')
309,multinomial logistic regression model,False,True,7,"scipy.misc.imsave('multinomial', model)"
310,multinomial logistic regression model,False,True,7,"plt.savefig('multinomial', multinomial)"
311,multinomial logistic regression model,False,True,11,"scipy.misc.imsave('a', 'rb', multinomial)"
312,multinomial logistic regression model,False,True,7,plt.gca().dpi(multinomial)
313,multinomial logistic regression model,False,True,10,"scipy.misc.imsave('a', 'a')"
314,multinomial logistic regression model,False,True,4,np.array(multinomial)
315,multinomial logistic regression model,False,False,54,"X = df[['A', 'B', 'C', 'D']]
y = df['E']
lr = LogisticRegression()
lr.fit(X, y)
preds = lr.predict(X)  # will output array with integer values."
316,multinomial logistic regression model,True,False,15,"LogisticRegression(multi_class='multinomial',solver ='newton-cg').fit(X_train,y_train)"
317,multinomial logistic regression model,False,False,27,prediction = a0 + a1 * [ses==1] + a2 * [ses==2] + a3 * read + a4 * write + a5 * math
318,multinomial logistic regression model,False,False,19,prediction = a0 + a1 * ses + a3 * read + a4 * write + a5 * math
319,multinomial logistic regression model,False,False,123,"import pandas as pd, numpy as np
from sklearn import linear_model

data = pd.read_csv(""d1.csv"", sep='\t')
data.columns = data.columns.str.strip()

raw_x = data.drop('prog', axis=1)
# making the dummies
train_x = pd.get_dummies(raw_x, columns=['ses']).drop('ses_low ', axis=1)
print(train_x.columns)
train_y = data['prog']

mul_lr = linear_model.LogisticRegression(multi_class='multinomial',
                                         solver='newton-cg').fit(train_x, train_y)
reorder = [4, 3, 0, 1, 2] # the order in which coefficents show up in Stata

print(mul_lr.intercept_)
print(mul_lr.coef_[:, reorder])"
320,multinomial logistic regression model,False,False,44,"['read', 'write', 'math', 'ses_high ', 'ses_middle ']
[ 4.67331919  0.19082335 -4.86414254]
[[ 0.47140512 -0.08236331 -0.01909793 -0.02680609 -0.04587383]
 [-0.36381476 -0.33294749 -0.0021255   0.00765828 -0.00703075]
 [-0.10759035  0.4153108   0.02122343  0.01914781  0.05290458]]"
321,multinomial logistic regression model,False,False,25,"print(mul_lr.intercept_ - mul_lr.intercept_[-1])
print((mul_lr.coef_  - mul_lr.coef_[-1])[:, reorder])"
322,sklearn 5-fold cross validation,False,True,3,plt.utcnow()
323,sklearn 5-fold cross validation,False,True,10,"plt.DataFrame([1, 2, 3])"
324,sklearn 5-fold cross validation,False,True,16,plt.DataFrame([Q(key=sum) for _ in range(5)])
325,sklearn 5-fold cross validation,False,True,9,plt.DataFrame({'var_2': 5})
326,sklearn 5-fold cross validation,False,True,14,"plt.DataFrame({'tup': 5, '16': 5})"
327,sklearn 5-fold cross validation,False,True,14,"plt.DataFrame(np.arange(2), order=[0, 1])"
328,sklearn 5-fold cross validation,False,True,9,plt.DataFrame({'key': x})
329,sklearn 5-fold cross validation,True,False,43,"from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import cross_val_score
import numpy as np

clf = RandomForestClassifier() #Initialize with whatever parameters you want to

# 10-Fold Cross validation
print np.mean(cross_val_score(clf, X_train, y_train, cv=10))"
330,sklearn 5-fold cross validation,False,False,29,"param_grid = {
                 'n_estimators': [5, 10, 15, 20],
                 'max_depth': [2, 5, 7, 9]
             }"
331,sklearn 5-fold cross validation,False,False,20,"from sklearn.model_selection import GridSearchCV

grid_clf = GridSearchCV(clf, param_grid, cv=10)
grid_clf.fit(X_train, y_train)"
332,sklearn 5-fold cross validation,False,False,186,"import numpy as np
import pandas as pd
from sklearn import tree
from sklearn.cross_validation import cross_val_score
from pprint import pprint

features = [""fLength"", ""fWidth"", ""fSize"", ""fConc"", ""fConc1"", ""fAsym"", ""fM3Long"", ""fM3Trans"", ""fAlpha"", ""fDist"", ""class""]

df = pd.read_csv('magic04.data',header=None,names=features)
df['class'] = df['class'].map({'g':0,'h':1})

x = df[features[:-1]]
y = df['class']

# x_train,x_test,y_train,y_test = cross_validation.train_test_split(x,y,test_size=0.4,random_state=0)
depth = []
for i in range(3,20):
    clf = tree.DecisionTreeClassifier(max_depth=i)
    # Perform 7-fold cross validation 
    scores = cross_val_score(estimator=clf, X=x, y=y, cv=7, n_jobs=4)
    depth.append((i,scores.mean()))
print(depth)"
333,sklearn 5-fold cross validation,False,False,150,"import numpy as np
import pandas as pd
from sklearn import tree
from sklearn.model_selection import GridSearchCV

features = [""fLength"", ""fWidth"", ""fSize"", ""fConc"", ""fConc1"", ""fAsym"", ""fM3Long"", ""fM3Trans"", ""fAlpha"", ""fDist"", ""class""]

df = pd.read_csv('magic04.data',header=None,names=features)
df['class'] = df['class'].map({'g':0,'h':1})

x = df[features[:-1]]
y = df['class']


parameters = {'max_depth':range(3,20)}
clf = GridSearchCV(tree.DecisionTreeClassifier(), parameters, n_jobs=4)
clf.fit(X=x, y=y)
tree_model = clf.best_estimator_
print (clf.best_score_, clf.best_params_)"
334,sklearn 5-fold cross validation,False,False,4,from sklearn.model_selection import train_test_split
335,sklearn 5-fold cross validation,False,False,21,"In [15]: iris['data'].shape
Out[15]: (150, 4)"
336,disable warnings,False,True,4,warnings.disable(logging.CRITICAL)
337,disable warnings,False,True,5,warnings.shutdown('style')
338,disable warnings,False,True,5,warnings.warn('ignore')
339,disable warnings,False,True,5,warnings.shutdown('\n')
340,disable warnings,False,True,21,"warnings.linsolve('<unk>', '%l:%M%p', how='doSomething')"
341,disable warnings,False,True,5,warnings.shutdown('ignore')
342,disable warnings,False,True,10,"warnings.linsolve('<unk>', warnings)"
343,disable warnings,False,False,9,"export PYTHONWARNINGS=""ignore:Unverified HTTPS request"""
344,disable warnings,False,False,6,"import urllib3
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)"
345,disable warnings,False,False,10,"import requests
from requests.packages.urllib3.exceptions import InsecureRequestWarning

requests.packages.urllib3.disable_warnings(InsecureRequestWarning)"
346,disable warnings,True,False,7,"import warnings
warnings.filterwarnings('ignore')"
347,disable warnings,False,False,5,warnings.filterwarnings(action='once')
348,disable warnings,False,False,29,"import warnings

def fxn():
    warnings.warn(""deprecated"", DeprecationWarning)

with warnings.catch_warnings():
    warnings.simplefilter(""ignore"")
    fxn()"
349,disable warnings,False,False,8,"import warnings
warnings.filterwarnings(""ignore"")"
350,save plt figure,True,True,7,"plt.savefig('plt', dpi=1000)"
351,save plt figure,False,True,10,"plt.savefig('<unk>', dpi=1000)"
352,save plt figure,False,True,10,"plt.savefig('<unk>', dpi=300)"
353,save plt figure,False,True,8,"plt.savefig('plt color', dpi=1000)"
354,save plt figure,False,True,14,"plt.savefig('ulimit -s <unk> <unk>', dpi=1000)"
355,save plt figure,False,True,11,"plt.savefig('plt -c <unk>', dpi=1000)"
356,save plt figure,False,True,5,plt.savefig('plt')
357,save plt figure,False,False,16,"from matplotlib import pyplot as plt

plt.savefig('foo.png')
plt.savefig('foo.pdf')"
358,save plt figure,False,False,8,"savefig('foo.png', bbox_inches='tight')"
359,save plt figure,False,False,50,"import matplotlib.pyplot as plt
fig, ax = plt.subplots( nrows=1, ncols=1 )  # create figure & 1 axis
ax.plot([0,1,2], [10,20,3])
fig.savefig('path/to/save/image/to.png')   # save the figure to file
plt.close(fig)    # close the figure window"
360,save plt figure,False,False,37,"import matplotlib.pyplot as plt

f = plt.figure()
plt.plot(range(10), range(10), ""o"")
plt.show()

f.savefig(""foo.pdf"", bbox_inches='tight')"
361,save plt figure,False,False,11,"plt.figure(figsize=(800/my_dpi, 800/my_dpi), dpi=my_dpi)"
362,save plt figure,False,False,7,"plt.savefig('my_fig.png', dpi=my_dpi)"
363,save plt figure,False,False,9,"plt.savefig('my_fig.png', dpi=my_dpi * 10)"
364,plt set x axis tick range,False,True,8,"plt.yscale('log', nonposy='clip')"
365,plt set x axis tick range,False,True,12,"plt.yscale('log', **'<unk>')"
366,plt set x axis tick range,False,True,9,"plt.yscale('log', **[])"
367,plt set x axis tick range,False,True,8,"plt.ylim([0, 1000])"
368,plt set x axis tick range,False,True,7,"plt.yscale('log', **plt)"
369,plt set x axis tick range,False,True,7,"plt.yscale('log', top=0)"
370,plt set x axis tick range,False,True,14,"plt.yscale('log', **['<unk>'])"
371,plt set x axis tick range,True,False,18,"plt.xticks(np.arange(min(x), max(x)+1, 1.0))"
372,plt set x axis tick range,False,False,45,"import numpy as np
import matplotlib.pyplot as plt

x = [0,5,9,10,15]
y = [0,1,2,3,4]
plt.plot(x,y)
plt.xticks(np.arange(min(x), max(x)+1, 1.0))
plt.show()"
373,plt set x axis tick range,False,False,18,"start, end = ax.get_xlim()
ax.xaxis.set_ticks(np.arange(start, end, stepsize))"
374,plt set x axis tick range,False,False,10,ax.xaxis.set_major_formatter(ticker.FormatStrFormatter('%0.1f'))
375,plt set x axis tick range,False,False,66,"import numpy as np
import matplotlib.pyplot as plt
import matplotlib.ticker as ticker

x = [0,5,9,10,15]
y = [0,1,2,3,4]
fig, ax = plt.subplots()
ax.plot(x,y)
start, end = ax.get_xlim()
ax.xaxis.set_ticks(np.arange(start, end, 0.712123))
ax.xaxis.set_major_formatter(ticker.FormatStrFormatter('%0.1f'))
plt.show()"
376,plt set x axis tick range,False,False,78,"from matplotlib import pyplot as plt
plt.plot(range(10))
plt.tick_params(
    axis='x',          # changes apply to the x-axis
    which='both',      # both major and minor ticks are affected
    bottom=False,      # ticks along the bottom edge are off
    top=False,         # ticks along the top edge are off
    labelbottom=False) # labels along the bottom edge are off
plt.show()
plt.savefig('plot')
plt.clf()"
377,plt set x axis tick range,False,False,6,"pylab.ylim([0,1000])"
378,plt date as x axis,False,True,8,datetime.datetime.now().yscale('log')
379,plt date as x axis,False,True,6,datetime.datetime.now().isoformat()
380,plt date as x axis,False,True,11,"datetime.datetime.now().yscale('log', nonposy='clip')"
381,plt date as x axis,False,True,7,datetime.datetime.now().clip(level=0)
382,plt date as x axis,False,True,8,datetime.datetime.now().clip(nonposy='clip')
383,plt date as x axis,False,True,10,"datetime.datetime.now().yscale('log', **date)"
384,plt date as x axis,False,True,1,pass
385,plt date as x axis,True,False,12,"dates = matplotlib.dates.date2num(list_of_datetimes)
matplotlib.pyplot.plot_date(dates, values)"
386,plt date as x axis,False,False,60,"import datetime as dt

dates = ['01/02/1991','01/03/1991','01/04/1991']
x = [dt.datetime.strptime(d,'%m/%d/%Y').date() for d in dates]
y = range(len(x)) # many thanks to Kyss Tao for setting me straight here"
387,plt date as x axis,False,False,46,"import matplotlib.pyplot as plt
import matplotlib.dates as mdates

plt.gca().xaxis.set_major_formatter(mdates.DateFormatter('%m/%d/%Y'))
plt.gca().xaxis.set_major_locator(mdates.DayLocator())
plt.plot(x,y)
plt.gcf().autofmt_xdate()"
388,plt date as x axis,False,False,70,"import datetime
import random
import matplotlib.pyplot as plt

# make up some data
x = [datetime.datetime.now() + datetime.timedelta(hours=i) for i in range(12)]
y = [i+random.gauss(0,1) for i,_ in enumerate(x)]

# plot
plt.plot(x,y)
# beautify the x-labels
plt.gcf().autofmt_xdate()

plt.show()"
389,plt date as x axis,False,False,70,"import datetime
import random
import matplotlib.pyplot as plt

# make up some data
x = [datetime.datetime.now() + datetime.timedelta(hours=i) for i in range(12)]
y = [i+random.gauss(0,1) for i,_ in enumerate(x)]

# plot
plt.scatter(x,y)
# beautify the x-labels
plt.gcf().autofmt_xdate()

plt.show()"
390,plt date as x axis,False,False,192,"import numpy as np
from matplotlib import pyplot as plt
from matplotlib import dates
import datetime

a = np.array([
    [1293605162197, 0, 0],
    [1293605477994, 63, 0],
    [1293605478057, 0, 0],
    [1293605478072, 2735, 1249],
    [1293606162213, 0, 0],
    [1293606162229, 0, 0]])

d = a[:,0]
y1 = a[:,1]
y2 = a[:,2]

# convert epoch to matplotlib float format
s = d/1000
ms = d-1000*s  # not needed?
dts = map(datetime.datetime.fromtimestamp, s)
fds = dates.date2num(dts) # converted

# matplotlib date format object
hfmt = dates.DateFormatter('%m/%d %H:%M')

fig = plt.figure()
ax = fig.add_subplot(111)
ax.vlines(fds, y2, y1)

ax.xaxis.set_major_locator(dates.MinuteLocator())
ax.xaxis.set_major_formatter(hfmt)
ax.set_ylim(bottom = 0)
plt.xticks(rotation='vertical')
plt.subplots_adjust(bottom=.3)
plt.show()"
391,plt date as x axis,False,False,81,"import datetime
import matplotlib.pyplot as plt

x = [datetime.date(2014, 1, 29)] * 3 
y = [2, 4, 1]

fig, ax = plt.subplots()
ax.plot_date(x, y, markerfacecolor='CornflowerBlue', markeredgecolor='white')
fig.autofmt_xdate()
ax.set_xlim([datetime.date(2014, 1, 26), datetime.date(2014, 2, 1)])
ax.set_ylim([0, 5])"
392,scatter plot purple,False,True,8,"plt.scatter(purple, purple, out=scatter)"
393,scatter plot purple,False,True,6,"plt.scatter(purple, purple)"
394,scatter plot purple,False,True,16,"plt.scatter(*np.linspace(0, 3, size=(2, 100)))"
395,scatter plot purple,False,True,16,"plt.scatter(*np.linspace(0, 2, size=(2, 100)))"
396,scatter plot purple,False,True,16,"plt.scatter(*np.linspace(0, 3, size=(2, 3)))"
397,scatter plot purple,False,True,16,"plt.scatter(*np.linspace(0, 10, size=(2, 100)))"
398,scatter plot purple,False,True,16,"plt.scatter(*np.linspace(0, 3, size=(2, 0)))"
399,scatter plot purple,False,False,40,"# python2:

import matplotlib
for name, hex in matplotlib.colors.cnames.iteritems():
    print(name, hex)

# python3:

import matplotlib
for name, hex in matplotlib.colors.cnames.items():
    print(name, hex)"
400,scatter plot purple,False,False,1123,"cnames = {
'aliceblue':            '#F0F8FF',
'antiquewhite':         '#FAEBD7',
'aqua':                 '#00FFFF',
'aquamarine':           '#7FFFD4',
'azure':                '#F0FFFF',
'beige':                '#F5F5DC',
'bisque':               '#FFE4C4',
'black':                '#000000',
'blanchedalmond':       '#FFEBCD',
'blue':                 '#0000FF',
'blueviolet':           '#8A2BE2',
'brown':                '#A52A2A',
'burlywood':            '#DEB887',
'cadetblue':            '#5F9EA0',
'chartreuse':           '#7FFF00',
'chocolate':            '#D2691E',
'coral':                '#FF7F50',
'cornflowerblue':       '#6495ED',
'cornsilk':             '#FFF8DC',
'crimson':              '#DC143C',
'cyan':                 '#00FFFF',
'darkblue':             '#00008B',
'darkcyan':             '#008B8B',
'darkgoldenrod':        '#B8860B',
'darkgray':             '#A9A9A9',
'darkgreen':            '#006400',
'darkkhaki':            '#BDB76B',
'darkmagenta':          '#8B008B',
'darkolivegreen':       '#556B2F',
'darkorange':           '#FF8C00',
'darkorchid':           '#9932CC',
'darkred':              '#8B0000',
'darksalmon':           '#E9967A',
'darkseagreen':         '#8FBC8F',
'darkslateblue':        '#483D8B',
'darkslategray':        '#2F4F4F',
'darkturquoise':        '#00CED1',
'darkviolet':           '#9400D3',
'deeppink':             '#FF1493',
'deepskyblue':          '#00BFFF',
'dimgray':              '#696969',
'dodgerblue':           '#1E90FF',
'firebrick':            '#B22222',
'floralwhite':          '#FFFAF0',
'forestgreen':          '#228B22',
'fuchsia':              '#FF00FF',
'gainsboro':            '#DCDCDC',
'ghostwhite':           '#F8F8FF',
'gold':                 '#FFD700',
'goldenrod':            '#DAA520',
'gray':                 '#808080',
'green':                '#008000',
'greenyellow':          '#ADFF2F',
'honeydew':             '#F0FFF0',
'hotpink':              '#FF69B4',
'indianred':            '#CD5C5C',
'indigo':               '#4B0082',
'ivory':                '#FFFFF0',
'khaki':                '#F0E68C',
'lavender':             '#E6E6FA',
'lavenderblush':        '#FFF0F5',
'lawngreen':            '#7CFC00',
'lemonchiffon':         '#FFFACD',
'lightblue':            '#ADD8E6',
'lightcoral':           '#F08080',
'lightcyan':            '#E0FFFF',
'lightgoldenrodyellow': '#FAFAD2',
'lightgreen':           '#90EE90',
'lightgray':            '#D3D3D3',
'lightpink':            '#FFB6C1',
'lightsalmon':          '#FFA07A',
'lightseagreen':        '#20B2AA',
'lightskyblue':         '#87CEFA',
'lightslategray':       '#778899',
'lightsteelblue':       '#B0C4DE',
'lightyellow':          '#FFFFE0',
'lime':                 '#00FF00',
'limegreen':            '#32CD32',
'linen':                '#FAF0E6',
'magenta':              '#FF00FF',
'maroon':               '#800000',
'mediumaquamarine':     '#66CDAA',
'mediumblue':           '#0000CD',
'mediumorchid':         '#BA55D3',
'mediumpurple':         '#9370DB',
'mediumseagreen':       '#3CB371',
'mediumslateblue':      '#7B68EE',
'mediumspringgreen':    '#00FA9A',
'mediumturquoise':      '#48D1CC',
'mediumvioletred':      '#C71585',
'midnightblue':         '#191970',
'mintcream':            '#F5FFFA',
'mistyrose':            '#FFE4E1',
'moccasin':             '#FFE4B5',
'navajowhite':          '#FFDEAD',
'navy':                 '#000080',
'oldlace':              '#FDF5E6',
'olive':                '#808000',
'olivedrab':            '#6B8E23',
'orange':               '#FFA500',
'orangered':            '#FF4500',
'orchid':               '#DA70D6',
'palegoldenrod':        '#EEE8AA',
'palegreen':            '#98FB98',
'paleturquoise':        '#AFEEEE',
'palevioletred':        '#DB7093',
'papayawhip':           '#FFEFD5',
'peachpuff':            '#FFDAB9',
'peru':                 '#CD853F',
'pink':                 '#FFC0CB',
'plum':                 '#DDA0DD',
'powderblue':           '#B0E0E6',
'purple':               '#800080',
'red':                  '#FF0000',
'rosybrown':            '#BC8F8F',
'royalblue':            '#4169E1',
'saddlebrown':          '#8B4513',
'salmon':               '#FA8072',
'sandybrown':           '#FAA460',
'seagreen':             '#2E8B57',
'seashell':             '#FFF5EE',
'sienna':               '#A0522D',
'silver':               '#C0C0C0',
'skyblue':              '#87CEEB',
'slateblue':            '#6A5ACD',
'slategray':            '#708090',
'snow':                 '#FFFAFA',
'springgreen':          '#00FF7F',
'steelblue':            '#4682B4',
'tan':                  '#D2B48C',
'teal':                 '#008080',
'thistle':              '#D8BFD8',
'tomato':               '#FF6347',
'turquoise':            '#40E0D0',
'violet':               '#EE82EE',
'wheat':                '#F5DEB3',
'white':                '#FFFFFF',
'whitesmoke':           '#F5F5F5',
'yellow':               '#FFFF00',
'yellowgreen':          '#9ACD32'}"
401,scatter plot purple,False,False,123,"import matplotlib.pyplot as plt
import matplotlib.patches as patches
import matplotlib.colors as colors
import math


fig = plt.figure()
ax = fig.add_subplot(111)

ratio = 1.0 / 3.0
count = math.ceil(math.sqrt(len(colors.cnames)))
x_count = count * ratio
y_count = count / ratio
x = 0
y = 0
w = 1 / x_count
h = 1 / y_count

for c in colors.cnames:
    pos = (x / x_count, y / y_count)
    ax.add_patch(patches.Rectangle(pos, w, h, color=c))
    ax.annotate(c, xy=pos)
    if y >= y_count-1:
        x += 1
        y = 0
    else:
        y += 1

plt.show()"
402,scatter plot purple,False,False,263,"import matplotlib.pyplot as plt
from matplotlib import colors as mcolors


colors = dict(mcolors.BASE_COLORS, **mcolors.CSS4_COLORS)

# Sort colors by hue, saturation, value and name.
by_hsv = sorted((tuple(mcolors.rgb_to_hsv(mcolors.to_rgba(color)[:3])), name)
                for name, color in colors.items())
sorted_names = [name for hsv, name in by_hsv]

n = len(sorted_names)
ncols = 4
nrows = n // ncols

fig, ax = plt.subplots(figsize=(12, 10))

# Get height and width
X, Y = fig.get_dpi() * fig.get_size_inches()
h = Y / (nrows + 1)
w = X / ncols

for i, name in enumerate(sorted_names):
    row = i % nrows
    col = i // nrows
    y = Y - (row * h) - h

    xi_line = w * (col + 0.05)
    xf_line = w * (col + 0.25)
    xi_text = w * (col + 0.3)

    ax.text(xi_text, y, name, fontsize=(h * 0.8),
            horizontalalignment='left',
            verticalalignment='center')

    ax.hlines(y + h * 0.1, xi_line, xf_line,
              color=colors[name], linewidth=(h * 0.8))

ax.set_xlim(0, X)
ax.set_ylim(0, Y)
ax.set_axis_off()

fig.subplots_adjust(left=0, right=1,
                    top=1, bottom=0,
                    hspace=0, wspace=0)
plt.show()"
403,scatter plot purple,False,False,15,"plt.plot([1,2], lw=4, c='xkcd:baby poop green')"
404,scatter plot purple,False,False,13,"plt.plot([1,2], lw=4, c='tab:green')"
405,scatter plot purple,True,False,14,"plt.plot([1,2], lw=4, c='#8f9805')"
406,plt set x axis label,False,True,8,"plt.yscale('log', nonposy='clip')"
407,plt set x axis label,False,True,12,"plt.rc('font', rstrip='<unk>')"
408,plt set x axis label,False,True,12,"plt.plot(list(range(100)), vmin=0)"
409,plt set x axis label,False,True,9,plt.config(state='<unk>')
410,plt set x axis label,False,True,19,"plt.plot(list(range(100)), linestyle='--', vmin=2, vmax=1)"
411,plt set x axis label,False,True,19,"plt.plot(list(range(100)), linestyle='--', vmin=1, vmax=1)"
412,plt set x axis label,False,True,14,"plt.plot(list(range(0)), vmin=0, vmax=15)"
413,plt set x axis label,True,False,42,"from matplotlib import pyplot as plt    

fig = plt.figure()
plt.plot(data)
fig.suptitle('test title', fontsize=20)
plt.xlabel('xlabel', fontsize=18)
plt.ylabel('ylabel', fontsize=16)
fig.savefig('test.jpg')"
414,plt set x axis label,False,False,20,"axes.titlesize      : large   # fontsize of the axes title
axes.labelsize      : medium  # fontsize of the x any y labels"
415,plt set x axis label,False,False,194,"import random
import matplotlib.pyplot as plt

x = range(1, 101)
y1 = [random.randint(1, 100) for _ in xrange(len(x))]
y2 = [random.randint(1, 100) for _ in xrange(len(x))]

fig = plt.figure()
ax = fig.add_subplot(111)    # The big subplot
ax1 = fig.add_subplot(211)
ax2 = fig.add_subplot(212)

# Turn off axis lines and ticks of the big subplot
ax.spines['top'].set_color('none')
ax.spines['bottom'].set_color('none')
ax.spines['left'].set_color('none')
ax.spines['right'].set_color('none')
ax.tick_params(labelcolor='w', top=False, bottom=False, left=False, right=False)

ax1.loglog(x, y1)
ax2.loglog(x, y2)

# Set common labels
ax.set_xlabel('common xlabel')
ax.set_ylabel('common ylabel')

ax1.set_title('ax1 title')
ax2.set_title('ax2 title')

plt.savefig('common_labels.png', dpi=300)"
416,plt set x axis label,False,False,141,"import random
import matplotlib.pyplot as plt

x = range(1, 101)
y1 = [random.randint(1, 100) for _ in xrange(len(x))]
y2 = [random.randint(1, 100) for _ in xrange(len(x))]

fig = plt.figure()
ax1 = fig.add_subplot(211)
ax2 = fig.add_subplot(212)

ax1.loglog(x, y1)
ax2.loglog(x, y2)

# Set common labels
fig.text(0.5, 0.04, 'common xlabel', ha='center', va='center')
fig.text(0.06, 0.5, 'common ylabel', ha='center', va='center', rotation='vertical')

ax1.set_title('ax1 title')
ax2.set_title('ax2 title')

plt.savefig('common_labels_text.png', dpi=300)"
417,plt set x axis label,False,False,77,"import matplotlib.pyplot as plt

fig, axes = plt.subplots(3, 4, sharex=True, sharey=True)
# add a big axes, hide frame
fig.add_subplot(111, frameon=False)
# hide tick and tick label of the big axes
plt.tick_params(labelcolor='none', top='off', bottom='off', left='off', right='off')
plt.grid(False)
plt.xlabel(""common X"")
plt.ylabel(""common Y"")"
418,plt set x axis label,False,False,55,"import matplotlib.pylab as pylab
params = {'legend.fontsize': 'x-large',
          'figure.figsize': (15, 5),
         'axes.labelsize': 'x-large',
         'axes.titlesize':'x-large',
         'xtick.labelsize':'x-large',
         'ytick.labelsize':'x-large'}
pylab.rcParams.update(params)"
419,plt set x axis label,False,False,95,"import matplotlib.pyplot as plt

# set up a plot with dummy data
fig, ax = plt.subplots()
x = [0, 1, 2]
y = [0, 3, 9]
ax.plot(x,y)

# title and labels, setting initial sizes
fig.suptitle('test title', fontsize=12)
ax.set_xlabel('xlabel', fontsize=10)
ax.set_ylabel('ylabel', fontsize='medium')   # relative to plt.rcParams['font.size']

# setting label sizes after creation
ax.xaxis.label.set_size(20)
plt.draw()"
420,plt set xtick font size,False,True,5,cursor.execute('font.size')
421,plt set xtick font size,False,True,5,font.execute('font.size')
422,plt set xtick font size,False,True,7,"pandas.set_option('display.max_columns', font)"
423,plt set xtick font size,False,True,5,font.reset_index(rstrip='\t')
424,plt set xtick font size,False,True,7,"root.rsplit(' ', 1)"
425,plt set xtick font size,False,True,3,font.reset_index()
426,plt set xtick font size,False,True,5,cursor.execute('head')
427,plt set xtick font size,False,False,27,"font = {'family' : 'normal',
        'weight' : 'bold',
        'size'   : 22}

matplotlib.rc('font', **font)"
428,plt set xtick font size,False,False,9,matplotlib.rcParams.update({'font.size': 22})
429,plt set xtick font size,False,False,13,"import matplotlib.pyplot as plt
plt.rcParams.update({'font.size': 22})"
430,plt set xtick font size,True,False,45,"import matplotlib.pyplot as plt
# We prepare the plot  
fig, ax = plt.subplots()

# We change the fontsize of minor ticks label 
ax.tick_params(axis='both', which='major', labelsize=10)
ax.tick_params(axis='both', which='minor', labelsize=8)"
431,plt set xtick font size,False,False,102,"import matplotlib.pyplot as plt

SMALL_SIZE = 8
MEDIUM_SIZE = 10
BIGGER_SIZE = 12

plt.rc('font', size=SMALL_SIZE)          # controls default text sizes
plt.rc('axes', titlesize=SMALL_SIZE)     # fontsize of the axes title
plt.rc('axes', labelsize=MEDIUM_SIZE)    # fontsize of the x and y labels
plt.rc('xtick', labelsize=SMALL_SIZE)    # fontsize of the tick labels
plt.rc('ytick', labelsize=SMALL_SIZE)    # fontsize of the tick labels
plt.rc('legend', fontsize=SMALL_SIZE)    # legend fontsize
plt.rc('figure', titlesize=BIGGER_SIZE)  # fontsize of the figure title"
432,plt set xtick font size,False,False,24,"import matplotlib

SMALL_SIZE = 8
matplotlib.rc('font', size=SMALL_SIZE)
matplotlib.rc('axes', titlesize=SMALL_SIZE)

# and so on ..."
433,plt set xtick font size,False,False,6,"plt.xticks(fontsize=14, rotation=90)"
434,plt create figure with size,True,True,9,"plt.figure(figsize=(3, 4))"
435,plt create figure with size,False,True,9,"plt.figure(figsize=(1, 2))"
436,plt create figure with size,False,True,9,"plt.figure(figsize=(10, 2))"
437,plt create figure with size,False,True,9,"plt.figure(figsize=(100, 4))"
438,plt create figure with size,False,True,10,"plt.savefig('<unk>', dpi=300)"
439,plt create figure with size,False,True,9,"plt.figure(figsize=(1, 4))"
440,plt create figure with size,False,True,4,plt.figure(dpi=1)
441,plt create figure with size,False,False,27,"from matplotlib.pyplot import figure
figure(num=None, figsize=(8, 6), dpi=80, facecolor='w', edgecolor='k')"
442,plt create figure with size,False,False,18,"fig = matplotlib.pyplot.gcf()
fig.set_size_inches(18.5, 10.5)
fig.savefig('test2png.png', dpi=100)"
443,plt create figure with size,False,False,8,"fig.set_size_inches(18.5, 10.5, forward=True)"
444,plt create figure with size,False,False,8,"f.set_figheight(15)
f.set_figwidth(15)"
445,plt create figure with size,False,False,13,"f, axs = plt.subplots(2,2,figsize=(15,15))"
446,plt create figure with size,False,False,13,"from pylab import rcParams
rcParams['figure.figsize'] = 5, 10"
447,plt create figure with size,False,False,14,"import matplotlib.pyplot as plt
plt.rcParams[""figure.figsize""] = (20,3)"
448,group pandas df by two columns,False,True,12,df.groupby(pd.TimeGrouper(freq='<unk>'))
449,group pandas df by two columns,False,True,21,"df.groupby(df.groupby(['A', 'B']).sum().unstack())"
450,group pandas df by two columns,False,True,18,"df.groupby(df.groupby(['A', 'B']).sum())"
451,group pandas df by two columns,False,True,21,"df.groupby(df.groupby(['A', 'B']).sum().sum())"
452,group pandas df by two columns,True,True,14,"df.groupby(['A', 'B'], axis=1)"
453,group pandas df by two columns,False,True,7,df.groupby(pd.TimeGrouper(3))
454,group pandas df by two columns,False,True,21,"df.groupby(df.groupby(['A', 'B']).size().sum())"
455,group pandas df by two columns,False,False,88,"In [49]: df
Out[49]: 
          0         1
0  1.000000  0.000000
1 -0.494375  0.570994
2  1.000000  0.000000
3  1.876360 -0.229738
4  1.000000  0.000000

In [50]: def f(x):    
   ....:  return x[0] + x[1]  
   ....:  

In [51]: df.apply(f, axis=1) #passes a Series object, row-wise
Out[51]: 
0    1.000000
1    0.076619
2    1.000000
3    1.646622
4    1.000000"
456,group pandas df by two columns,False,False,20,"df['col_3'] = df.apply(lambda x: f(x.col_1, x.col_2), axis=1)"
457,group pandas df by two columns,False,False,110,"import pandas as pd

df = pd.DataFrame({'ID':['1', '2', '3'], 'col_1': [0, 2, 3], 'col_2':[1, 4, 5]})
mylist = ['a', 'b', 'c', 'd', 'e', 'f']

def get_sublist(sta,end):
    return mylist[sta:end+1]

df['col_3'] = df.apply(lambda x: get_sublist(x.col_1, x.col_2), axis=1)"
458,group pandas df by two columns,False,False,35,"ID  col_1  col_2      col_3
0  1      0      1     [a, b]
1  2      2      4  [c, d, e]
2  3      3      5  [d, e, f]"
459,group pandas df by two columns,False,False,30,"df['col_3'] = df.apply(lambda x: f(x['col 1'], x['col 2']), axis=1)"
460,group pandas df by two columns,False,False,21,males = df[(df[Gender]=='Male') & (df[Year]==2014)]
461,group pandas df by two columns,False,False,69,"from collections import defaultdict
dic={}
for g in ['male', 'female']:
  dic[g]=defaultdict(dict)
  for y in [2013, 2014]:
    dic[g][y]=df[(df[Gender]==g) & (df[Year]==y)] #store the DataFrames to a dict of dict"
462,bar plot with multiple bars per label,False,True,11,"plt.plot(x, y, color='b')"
463,bar plot with multiple bars per label,False,True,11,"plt.plot(x, y, color='y')"
464,bar plot with multiple bars per label,False,True,9,"plt.plot(x, y, color='str_3')"
465,bar plot with multiple bars per label,False,True,9,"plt.plot(x, y, c='str_2')"
466,bar plot with multiple bars per label,False,True,7,"plt.savefig('bar', dpi=300)"
467,bar plot with multiple bars per label,False,True,11,"plt.plot(x, y, color='c')"
468,bar plot with multiple bars per label,False,True,5,bar.plot(kind='bar')
469,bar plot with multiple bars per label,False,False,214,"import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

# Bring some raw data.
frequencies = [6, 16, 75, 160, 244, 260, 145, 73, 16, 4, 1]
# In my original code I create a series and run on that, 
# so for consistency I create a series from the list.
freq_series = pd.Series.from_array(frequencies)

x_labels = [108300.0, 110540.0, 112780.0, 115020.0, 117260.0, 119500.0,
            121740.0, 123980.0, 126220.0, 128460.0, 130700.0]

# Plot the figure.
plt.figure(figsize=(12, 8))
ax = freq_series.plot(kind='bar')
ax.set_title('Amount Frequency')
ax.set_xlabel('Amount ($)')
ax.set_ylabel('Frequency')
ax.set_xticklabels(x_labels)

rects = ax.patches

# Make some labels.
labels = [""label%d"" % i for i in xrange(len(rects))]

for rect, label in zip(rects, labels):
    height = rect.get_height()
    ax.text(rect.get_x() + rect.get_width() / 2, height + 5, label,
            ha='center', va='bottom')"
470,bar plot with multiple bars per label,True,False,145,"import matplotlib.pyplot as plt
from matplotlib.dates import date2num
import datetime

x = [
    datetime.datetime(2011, 1, 4, 0, 0),
    datetime.datetime(2011, 1, 5, 0, 0),
    datetime.datetime(2011, 1, 6, 0, 0)
]
x = date2num(x)

y = [4, 9, 2]
z = [1, 2, 3]
k = [11, 12, 13]

ax = plt.subplot(111)
ax.bar(x-0.2, y, width=0.2, color='b', align='center')
ax.bar(x, z, width=0.2, color='g', align='center')
ax.bar(x+0.2, k, width=0.2, color='r', align='center')
ax.xaxis_date()

plt.show()"
471,bar plot with multiple bars per label,False,False,67,"ax = plt.subplot(111)
w = 0.3
ax.bar(x-w, y, width=w, color='b', align='center')
ax.bar(x, z, width=w, color='g', align='center')
ax.bar(x+w, k, width=w, color='r', align='center')
ax.xaxis_date()
ax.autoscale(tight=True)

plt.show()"
472,bar plot with multiple bars per label,False,False,431,"import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

# Bring some raw data.
frequencies = [6, -16, 75, 160, 244, 260, 145, 73, 16, 4, 1]

# In my original code I create a series and run on that,
# so for consistency I create a series from the list.
freq_series = pd.Series.from_array(frequencies)

x_labels = [108300.0, 110540.0, 112780.0, 115020.0, 117260.0, 119500.0,
            121740.0, 123980.0, 126220.0, 128460.0, 130700.0]

# Plot the figure.
plt.figure(figsize=(12, 8))
ax = freq_series.plot(kind='bar')
ax.set_title('Amount Frequency')
ax.set_xlabel('Amount ($)')
ax.set_ylabel('Frequency')
ax.set_xticklabels(x_labels)


def add_value_labels(ax, spacing=5):
    """"""Add labels to the end of each bar in a bar chart.

    Arguments:
        ax (matplotlib.axes.Axes): The matplotlib object containing the axes
            of the plot to annotate.
        spacing (int): The distance between the labels and the bars.
    """"""

    # For each bar: Place a label
    for rect in ax.patches:
        # Get X and Y placement of label from rect.
        y_value = rect.get_height()
        x_value = rect.get_x() + rect.get_width() / 2

        # Number of points between bar and label. Change to your liking.
        space = spacing
        # Vertical alignment for positive values
        va = 'bottom'

        # If value of bar is negative: Place label below bar
        if y_value < 0:
            # Invert space to place label below
            space *= -1
            # Vertically align label at top
            va = 'top'

        # Use Y value as label and format number with one decimal place
        label = ""{:.1f}"".format(y_value)

        # Create annotation
        ax.annotate(
            label,                      # Use `label` as label
            (x_value, y_value),         # Place label at end of the bar
            xytext=(0, space),          # Vertically shift label by `space`
            textcoords=""offset points"", # Interpret `xytext` as offset in points
            ha='center',                # Horizontally center label
            va=va)                      # Vertically align label differently for
                                        # positive and negative values.


# Call the function above. All the magic happens there.
add_value_labels(ax)

plt.savefig(""image.png"")"
473,bar plot with multiple bars per label,False,False,222,"import numpy as np
import matplotlib.pyplot as plt

N = 3
ind = np.arange(N)  # the x locations for the groups
width = 0.27       # the width of the bars

fig = plt.figure()
ax = fig.add_subplot(111)

yvals = [4, 9, 2]
rects1 = ax.bar(ind, yvals, width, color='r')
zvals = [1,2,3]
rects2 = ax.bar(ind+width, zvals, width, color='g')
kvals = [11,12,13]
rects3 = ax.bar(ind+width*2, kvals, width, color='b')

ax.set_ylabel('Scores')
ax.set_xticks(ind+width)
ax.set_xticklabels( ('2011-Jan-4', '2011-Jan-5', '2011-Jan-6') )
ax.legend( (rects1[0], rects2[0], rects3[0]), ('y', 'z', 'k') )

def autolabel(rects):
    for rect in rects:
        h = rect.get_height()
        ax.text(rect.get_x()+rect.get_width()/2., 1.05*h, '%d'%int(h),
                ha='center', va='bottom')

autolabel(rects1)
autolabel(rects2)
autolabel(rects3)

plt.show()"
474,bar plot with multiple bars per label,False,False,195,"import numpy as np
import matplotlib.pyplot as plt

N = 5
menMeans = (20, 35, 30, 35, 27)
menStd =   (2, 3, 4, 1, 2)

ind = np.arange(N)  # the x locations for the groups
width = 0.35       # the width of the bars

fig = plt.figure()
ax = fig.add_subplot(111)
rects1 = ax.bar(ind, menMeans, width, color='royalblue', yerr=menStd)

womenMeans = (25, 32, 34, 20, 25)
womenStd =   (3, 5, 2, 3, 3)
rects2 = ax.bar(ind+width, womenMeans, width, color='seagreen', yerr=womenStd)

# add some
ax.set_ylabel('Scores')
ax.set_title('Scores by group and gender')
ax.set_xticks(ind + width / 2)
ax.set_xticklabels( ('G1', 'G2', 'G3', 'G4', 'G5') )

ax.legend( (rects1[0], rects2[0]), ('Men', 'Women') )

plt.show()"
475,bar plot with multiple bars per label,False,False,339,"# Bring some raw data.
frequencies = [6, -16, 75, 160, 244, 260, 145, 73, 16, 4, 1]

freq_series = pd.Series(frequencies)

y_labels = [108300.0, 110540.0, 112780.0, 115020.0, 117260.0, 119500.0, 
            121740.0, 123980.0, 126220.0, 128460.0, 130700.0]

# Plot the figure.
plt.figure(figsize=(12, 8))
ax = freq_series.plot(kind='barh')
ax.set_title('Amount Frequency')
ax.set_xlabel('Frequency')
ax.set_ylabel('Amount ($)')
ax.set_yticklabels(y_labels)
ax.set_xlim(-40, 300) # expand xlim to make labels easier to read

rects = ax.patches

# For each bar: Place a label
for rect in rects:
    # Get X and Y placement of label from rect.
    x_value = rect.get_width()
    y_value = rect.get_y() + rect.get_height() / 2

    # Number of points between bar and label. Change to your liking.
    space = 5
    # Vertical alignment for positive values
    ha = 'left'

    # If value of bar is negative: Place label left of bar
    if x_value < 0:
        # Invert space to place label to the left
        space *= -1
        # Horizontally align label at right
        ha = 'right'

    # Use X value as label and format number with one decimal place
    label = ""{:.1f}"".format(x_value)

    # Create annotation
    plt.annotate(
        label,                      # Use `label` as label
        (x_value, y_value),         # Place label at end of the bar
        xytext=(space, 0),          # Horizontally shift label by `space`
        textcoords=""offset points"", # Interpret `xytext` as offset in points
        va='center',                # Vertically center label
        ha=ha)                      # Horizontally align label differently for
                                    # positive and negative values.

plt.savefig(""image.png"")"
476,plt create 3 subplots,False,True,6,"fig.subplots_adjust(wspace=0, hspace=0)"
477,plt create 3 subplots,False,True,3,fig.utcnow()
478,plt create 3 subplots,False,True,8,"fig.add_subplot(1, 2, 3)"
479,plt create 3 subplots,False,True,6,"fig.subplots_adjust(wspace=0, hspace=1)"
480,plt create 3 subplots,False,True,10,"fig.DataFrame(np.arange(3).values, axis=1)"
481,plt create 3 subplots,False,True,10,"fig.DataFrame(np.arange(3).values, columns=None)"
482,plt create 3 subplots,False,True,10,"fig.DataFrame(np.arange(3).values, fig=plt)"
483,plt create 3 subplots,False,False,7,"fig, ax = plt.subplots()"
484,plt create 3 subplots,False,False,11,"fig = plt.figure()
ax = fig.add_subplot(111)"
485,plt create 3 subplots,True,False,45,"import matplotlib.pyplot as plt

x = range(10)
y = range(10)

fig, ax = plt.subplots(nrows=2, ncols=2)

for row in ax:
    for col in row:
        col.plot(x, y)

plt.show()"
486,plt create 3 subplots,False,False,64,"fig = plt.figure()

plt.subplot(2, 2, 1)
plt.plot(x, y)

plt.subplot(2, 2, 2)
plt.plot(x, y)

plt.subplot(2, 2, 3)
plt.plot(x, y)

plt.subplot(2, 2, 4)
plt.plot(x, y)

plt.show()"
487,plt create 3 subplots,False,False,17,"plt.subplot(1, 2, 1)

...

plt.subplot(1, 2, 2)"
488,plt create 3 subplots,False,False,3,plt.tight_layout()
489,plt create 3 subplots,False,False,14,"ValueError: not enough values to unpack (expected 4, got 2)"
490,matplotlib theme,False,True,9,"plt.plot(x, y, style='err')"
491,matplotlib theme,False,True,9,"ax.plot(x, y, style='err')"
492,matplotlib theme,False,True,9,"plt.plot(x.min(), color='color')"
493,matplotlib theme,False,True,9,"plt.plot(x, y, color='color')"
494,matplotlib theme,False,True,9,"plt.plot(x, y, style='r1')"
495,matplotlib theme,False,True,9,"fig.plot(x, y, style='err')"
496,matplotlib theme,False,True,9,"plt.plot(x, y, style='wb')"
497,matplotlib theme,True,False,11,"from matplotlib import pyplot as plt
plt.style.use('ggplot')"
498,matplotlib theme,False,False,5,plt.style.use('seaborn-white')
499,matplotlib theme,False,False,7,"import seaborn as sns
sns.set()"
500,matplotlib theme,False,False,4,plt.style.use(style_name)
501,matplotlib theme,False,False,49,"import matplotlib.pyplot as plt
import numpy as np

plt.style.use('ggplot')

num_lines = 6

ax = plt.subplot(111)

for i in range(num_lines):
    x = np.linspace(0,20,200)
    ax.plot(x,np.sin(x)+i)

plt.show()"
502,matplotlib theme,False,False,2,print plt.style.available
503,matplotlib theme,False,False,5,plt.style.use('seaborn-dark-palette')
504,plt show values on bar plot,False,True,7,"plt.savefig('bar', dpi=300)"
505,plt show values on bar plot,False,True,9,"plt.plot(x.min(), kind='bar')"
506,plt show values on bar plot,False,True,9,"plt.plot(x.sum(), kind='bar')"
507,plt show values on bar plot,False,True,7,"plt.savefig('bar', dpi=1000)"
508,plt show values on bar plot,False,True,8,"plt.savefig('bar', nonposy='clip')"
509,plt show values on bar plot,False,True,8,"plt.plot(x.min(), **bar)"
510,plt show values on bar plot,False,True,8,"plt.plot(x.sum(), **bar)"
511,plt show values on bar plot,True,False,31,"for i, v in enumerate(y):
    ax.text(v + 3, i + .25, str(v), color='blue', fontweight='bold')"
512,plt show values on bar plot,False,False,214,"import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

# Bring some raw data.
frequencies = [6, 16, 75, 160, 244, 260, 145, 73, 16, 4, 1]
# In my original code I create a series and run on that, 
# so for consistency I create a series from the list.
freq_series = pd.Series.from_array(frequencies)

x_labels = [108300.0, 110540.0, 112780.0, 115020.0, 117260.0, 119500.0,
            121740.0, 123980.0, 126220.0, 128460.0, 130700.0]

# Plot the figure.
plt.figure(figsize=(12, 8))
ax = freq_series.plot(kind='bar')
ax.set_title('Amount Frequency')
ax.set_xlabel('Amount ($)')
ax.set_ylabel('Frequency')
ax.set_xticklabels(x_labels)

rects = ax.patches

# Make some labels.
labels = [""label%d"" % i for i in xrange(len(rects))]

for rect, label in zip(rects, labels):
    height = rect.get_height()
    ax.text(rect.get_x() + rect.get_width() / 2, height + 5, label,
            ha='center', va='bottom')"
513,plt show values on bar plot,False,False,431,"import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

# Bring some raw data.
frequencies = [6, -16, 75, 160, 244, 260, 145, 73, 16, 4, 1]

# In my original code I create a series and run on that,
# so for consistency I create a series from the list.
freq_series = pd.Series.from_array(frequencies)

x_labels = [108300.0, 110540.0, 112780.0, 115020.0, 117260.0, 119500.0,
            121740.0, 123980.0, 126220.0, 128460.0, 130700.0]

# Plot the figure.
plt.figure(figsize=(12, 8))
ax = freq_series.plot(kind='bar')
ax.set_title('Amount Frequency')
ax.set_xlabel('Amount ($)')
ax.set_ylabel('Frequency')
ax.set_xticklabels(x_labels)


def add_value_labels(ax, spacing=5):
    """"""Add labels to the end of each bar in a bar chart.

    Arguments:
        ax (matplotlib.axes.Axes): The matplotlib object containing the axes
            of the plot to annotate.
        spacing (int): The distance between the labels and the bars.
    """"""

    # For each bar: Place a label
    for rect in ax.patches:
        # Get X and Y placement of label from rect.
        y_value = rect.get_height()
        x_value = rect.get_x() + rect.get_width() / 2

        # Number of points between bar and label. Change to your liking.
        space = spacing
        # Vertical alignment for positive values
        va = 'bottom'

        # If value of bar is negative: Place label below bar
        if y_value < 0:
            # Invert space to place label below
            space *= -1
            # Vertically align label at top
            va = 'top'

        # Use Y value as label and format number with one decimal place
        label = ""{:.1f}"".format(y_value)

        # Create annotation
        ax.annotate(
            label,                      # Use `label` as label
            (x_value, y_value),         # Place label at end of the bar
            xytext=(0, space),          # Vertically shift label by `space`
            textcoords=""offset points"", # Interpret `xytext` as offset in points
            ha='center',                # Horizontally center label
            va=va)                      # Vertically align label differently for
                                        # positive and negative values.


# Call the function above. All the magic happens there.
add_value_labels(ax)

plt.savefig(""image.png"")"
514,plt show values on bar plot,False,False,294,"""""""
========
Barchart
========

A bar plot with errorbars and height labels on individual bars
""""""
import numpy as np
import matplotlib.pyplot as plt

N = 5
men_means = (20, 35, 30, 35, 27)
men_std = (2, 3, 4, 1, 2)

ind = np.arange(N)  # the x locations for the groups
width = 0.35       # the width of the bars

fig, ax = plt.subplots()
rects1 = ax.bar(ind, men_means, width, color='r', yerr=men_std)

women_means = (25, 32, 34, 20, 25)
women_std = (3, 5, 2, 3, 3)
rects2 = ax.bar(ind + width, women_means, width, color='y', yerr=women_std)

# add some text for labels, title and axes ticks
ax.set_ylabel('Scores')
ax.set_title('Scores by group and gender')
ax.set_xticks(ind + width / 2)
ax.set_xticklabels(('G1', 'G2', 'G3', 'G4', 'G5'))

ax.legend((rects1[0], rects2[0]), ('Men', 'Women'))


def autolabel(rects):
    """"""
    Attach a text label above each bar displaying its height
    """"""
    for rect in rects:
        height = rect.get_height()
        ax.text(rect.get_x() + rect.get_width()/2., 1.05*height,
                '%d' % int(height),
                ha='center', va='bottom')

autolabel(rects1)
autolabel(rects2)

plt.show()"
515,plt show values on bar plot,False,False,297,"import matplotlib.pyplot as plt
import numpy as np

countListFast = [1492.0, 497.0, 441.0, 218.0, 101.0, 78.0, 103.0]
countListSlow = [1718.0, 806.0, 850.0, 397.0, 182.0, 125.0, 106.0]

errorRateListOfFast = ['9.09', '9.09', '9.38', '9.40', '7.89', '8.02', '10.00']
errorRateListOfSlow = ['10.00', '13.04', '14.29', '12.50', '14.29', '14.53', '11.11']

opacity = 0.4
bar_width = 0.35

plt.xlabel('Tasks')
plt.ylabel('Error Rate')

plt.xticks(range(len(errorRateListOfFast)),('[10-20)', '[20-30)', '[30-50)', '[50-70)','[70-90)', '[90-120)', ' [120 < )'), rotation=30)
bar1 = plt.bar(np.arange(len(errorRateListOfFast))+ bar_width, errorRateListOfFast, bar_width, align='center', alpha=opacity, color='b', label='Fast <= 6 sec.')
bar2 = plt.bar(range(len(errorRateListOfSlow)), errorRateListOfSlow, bar_width, align='center', alpha=opacity, color='r', label='Slower > 6 sec.')

# Add counts above the two bar graphs
for rect in bar1 + bar2:
    height = rect.get_height()
    plt.text(rect.get_x() + rect.get_width()/2.0, height, '%d' % int(height), ha='center', va='bottom')

plt.legend()
plt.tight_layout()
plt.show()"
516,plt show values on bar plot,False,False,67,"out = pd.cut(s, bins=[0, 0.35, 0.7, 1], include_lowest=True)
ax = out.value_counts(sort=False).plot.bar(rot=0, color=""b"", figsize=(6,4))
ax.set_xticklabels([c[1:-1].replace("","","" to"") for c in out.cat.categories])
plt.show()"
517,plt show values on bar plot,False,False,81,"out = pd.cut(s, bins=[0, 0.35, 0.7, 1], include_lowest=True)
out_norm = out.value_counts(sort=False, normalize=True).mul(100)
ax = out_norm.plot.bar(rot=0, color=""b"", figsize=(6,4))
ax.set_xticklabels([c[1:-1].replace("","","" to"") for c in out.cat.categories])
plt.ylabel(""pct"")
plt.show()"
518,plt ax xlabel,False,True,3,plt.show()
519,plt ax xlabel,False,True,10,"plt.savefig('<unk>', axis=0)"
520,plt ax xlabel,False,True,12,"plt.savefig('<unk>', axis=0, ignore_index=True)"
521,plt ax xlabel,False,True,10,"plt.savefig('<unk>', dpi=1000)"
522,plt ax xlabel,False,True,10,"plt.savefig('<unk>', dpi=100)"
523,plt ax xlabel,False,True,10,"plt.savefig('<unk>', dpi=300)"
524,plt ax xlabel,False,True,12,"plt.savefig('<unk>', axis=0, **0)"
525,plt ax xlabel,False,False,42,"from matplotlib import pyplot as plt    

fig = plt.figure()
plt.plot(data)
fig.suptitle('test title', fontsize=20)
plt.xlabel('xlabel', fontsize=18)
plt.ylabel('ylabel', fontsize=16)
fig.savefig('test.jpg')"
526,plt ax xlabel,False,False,20,"axes.titlesize      : large   # fontsize of the axes title
axes.labelsize      : medium  # fontsize of the x any y labels"
527,plt ax xlabel,False,False,4,plt.xticks(rotation=90)
528,plt ax xlabel,True,False,194,"import random
import matplotlib.pyplot as plt

x = range(1, 101)
y1 = [random.randint(1, 100) for _ in xrange(len(x))]
y2 = [random.randint(1, 100) for _ in xrange(len(x))]

fig = plt.figure()
ax = fig.add_subplot(111)    # The big subplot
ax1 = fig.add_subplot(211)
ax2 = fig.add_subplot(212)

# Turn off axis lines and ticks of the big subplot
ax.spines['top'].set_color('none')
ax.spines['bottom'].set_color('none')
ax.spines['left'].set_color('none')
ax.spines['right'].set_color('none')
ax.tick_params(labelcolor='w', top=False, bottom=False, left=False, right=False)

ax1.loglog(x, y1)
ax2.loglog(x, y2)

# Set common labels
ax.set_xlabel('common xlabel')
ax.set_ylabel('common ylabel')

ax1.set_title('ax1 title')
ax2.set_title('ax2 title')

plt.savefig('common_labels.png', dpi=300)"
529,plt ax xlabel,False,False,141,"import random
import matplotlib.pyplot as plt

x = range(1, 101)
y1 = [random.randint(1, 100) for _ in xrange(len(x))]
y2 = [random.randint(1, 100) for _ in xrange(len(x))]

fig = plt.figure()
ax1 = fig.add_subplot(211)
ax2 = fig.add_subplot(212)

ax1.loglog(x, y1)
ax2.loglog(x, y2)

# Set common labels
fig.text(0.5, 0.04, 'common xlabel', ha='center', va='center')
fig.text(0.06, 0.5, 'common ylabel', ha='center', va='center', rotation='vertical')

ax1.set_title('ax1 title')
ax2.set_title('ax2 title')

plt.savefig('common_labels_text.png', dpi=300)"
530,plt ax xlabel,False,False,54,"import matplotlib.pyplot as plt

fig, ax = plt.subplots(nrows=3, ncols=3, sharex=True, sharey=True, figsize=(6, 6))

fig.text(0.5, 0.04, 'common X', ha='center')
fig.text(0.04, 0.5, 'common Y', va='center', rotation='vertical')"
531,plt ax xlabel,False,False,3,fig.autofmt_xdate()
532,plt set x tick labels,False,True,4,xaxis.set_ticks_position(1)
533,plt set x tick labels,False,True,9,"plt.figure(figsize=(10, 4))"
534,plt set x tick labels,False,True,4,xaxis.set_ticks_position(0)
535,plt set x tick labels,False,True,5,xaxis.set_ticks_position('top')
536,plt set x tick labels,False,True,6,"plt.subplots_adjust(wspace=0, top=0)"
537,plt set x tick labels,False,True,3,xaxis.tick_top()
538,plt set x tick labels,False,True,6,"plt.subplots_adjust(wspace=0, hspace=0)"
539,plt set x tick labels,False,False,18,"plt.xticks(np.arange(min(x), max(x)+1, 1.0))"
540,plt set x tick labels,False,False,45,"import numpy as np
import matplotlib.pyplot as plt

x = [0,5,9,10,15]
y = [0,1,2,3,4]
plt.plot(x,y)
plt.xticks(np.arange(min(x), max(x)+1, 1.0))
plt.show()"
541,plt set x tick labels,True,False,18,"start, end = ax.get_xlim()
ax.xaxis.set_ticks(np.arange(start, end, stepsize))"
542,plt set x tick labels,False,False,10,ax.xaxis.set_major_formatter(ticker.FormatStrFormatter('%0.1f'))
543,plt set x tick labels,False,False,66,"import numpy as np
import matplotlib.pyplot as plt
import matplotlib.ticker as ticker

x = [0,5,9,10,15]
y = [0,1,2,3,4]
fig, ax = plt.subplots()
ax.plot(x,y)
start, end = ax.get_xlim()
ax.xaxis.set_ticks(np.arange(start, end, 0.712123))
ax.xaxis.set_major_formatter(ticker.FormatStrFormatter('%0.1f'))
plt.show()"
544,plt set x tick labels,False,False,78,"from matplotlib import pyplot as plt
plt.plot(range(10))
plt.tick_params(
    axis='x',          # changes apply to the x-axis
    which='both',      # both major and minor ticks are affected
    bottom=False,      # ticks along the bottom edge are off
    top=False,         # ticks along the top edge are off
    labelbottom=False) # labels along the bottom edge are off
plt.show()
plt.savefig('plot')
plt.clf()"
545,plt set x tick labels,False,False,63,"import matplotlib.pyplot as plt

fig, ax = plt.subplots()

# We need to draw the canvas, otherwise the labels won't be positioned and 
# won't have values yet.
fig.canvas.draw()

labels = [item.get_text() for item in ax.get_xticklabels()]
labels[1] = 'Testing'

ax.set_xticklabels(labels)

plt.show()"
546,plt set title for subplot figure,False,True,6,"plt.subplots_adjust(wspace=0, hspace=0)"
547,plt set title for subplot figure,False,True,6,"plt.subplots_adjust(wspace=0, hspace=60)"
548,plt set title for subplot figure,False,True,6,plt.set_title('2.0')
549,plt set title for subplot figure,False,True,6,"plt.subplots_adjust(wspace=0, hspace=1)"
550,plt set title for subplot figure,False,True,10,plt.set_title('$%s \\times data')
551,plt set title for subplot figure,False,True,10,"plt.savefig('<unk>', dpi=300)"
552,plt set title for subplot figure,False,True,6,plt.set_title('0.1')
553,plt set title for subplot figure,True,False,42,"from matplotlib import pyplot as plt    

fig = plt.figure()
plt.plot(data)
fig.suptitle('test title', fontsize=20)
plt.xlabel('xlabel', fontsize=18)
plt.ylabel('ylabel', fontsize=16)
fig.savefig('test.jpg')"
554,plt set title for subplot figure,False,False,20,"axes.titlesize      : large   # fontsize of the axes title
axes.labelsize      : medium  # fontsize of the x any y labels"
555,plt set title for subplot figure,False,False,8,"f.set_figheight(15)
f.set_figwidth(15)"
556,plt set title for subplot figure,False,False,13,"f, axs = plt.subplots(2,2,figsize=(15,15))"
557,plt set title for subplot figure,False,False,56,"import matplotlib.pyplot as plt
import numpy as np

fig=plt.figure()
data=np.arange(900).reshape((30,30))
for i in range(1,5):
    ax=fig.add_subplot(2,2,i)        
    ax.imshow(data)

fig.suptitle('Main title') # or plt.suptitle('Main title')
plt.show()"
558,plt set title for subplot figure,False,False,85,"import matplotlib.pyplot as plt

if __name__ == ""__main__"":
    data = [1, 2, 3, 4, 5]

    fig = plt.figure()
    fig.suptitle(""Title for whole figure"", fontsize=16)
    ax = plt.subplot(""211"")
    ax.set_title(""Title for first plot"")
    ax.plot(data)

    ax = plt.subplot(""212"")
    ax.set_title(""Title for second plot"")
    ax.plot(data)

    plt.show()"
559,plt set title for subplot figure,False,False,56,"fig = plt.figure()
ax1 = fig.add_subplot(221)
ax2 = fig.add_subplot(222)
ax3 = fig.add_subplot(223)
ax4 = fig.add_subplot(224)
ax1.title.set_text('First Plot')
ax2.title.set_text('Second Plot')
ax3.title.set_text('Third Plot')
ax4.title.set_text('Fourth Plot')
plt.show()"
560,random sample with replacement,False,True,11,"random.choice(random.choice(sample), repeat=random())"
561,random sample with replacement,True,True,9,"random.choice(random.choice(sample), repeat=n)"
562,random sample with replacement,False,True,12,"random.choice(random.choice(sample), repeat=random(10))"
563,random sample with replacement,False,True,12,"random.choice(random.choice(sample), **random.choice(sample))"
564,random sample with replacement,False,True,12,"random.choice(random.choice(sample), **random.randrange(10000))"
565,random sample with replacement,False,True,16,"random.choice(random.choice(sample), **random.choice('<unk>'))"
566,random sample with replacement,False,True,12,"random.choice(random.choice(sample), **random.randrange(1000))"
567,random sample with replacement,False,False,14,"from numpy.random import choice
draw = choice(list_of_candidates, number_of_items_to_pick,
              p=probability_distribution)"
568,random sample with replacement,False,False,210,"Python 3.6.1 (v3.6.1:69c0db5050, Mar 21 2017, 01:21:04)
Type 'copyright', 'credits' or 'license' for more information
IPython 6.0.0 -- An enhanced Interactive Python. Type '?' for help.

In [1]: import random

In [2]: random.choices(
...:     population=[['a','b'], ['b','a'], ['c','b']],
...:     weights=[0.2, 0.2, 0.6],
...:     k=10
...: )

Out[2]:
[['c', 'b'],
 ['c', 'b'],
 ['b', 'a'],
 ['c', 'b'],
 ['c', 'b'],
 ['b', 'a'],
 ['c', 'b'],
 ['b', 'a'],
 ['c', 'b'],
 ['c', 'b']]"
569,random sample with replacement,False,False,11,"import random
random.sample(range(100), 10)"
570,random sample with replacement,False,False,21,"all_lines = f1.readlines()
for i in range(50):
    lines = random.sample(all_lines, 40)"
571,random sample with replacement,False,False,58,"def weighted_choice(choices):
   total = sum(w for c, w in choices)
   r = random.uniform(0, total)
   upto = 0
   for c, w in choices:
      if upto + w >= r:
         return c
      upto += w
   assert False, ""Shouldn't get here"""
572,random sample with replacement,False,False,91,"from random import random
from bisect import bisect

def weighted_choice(choices):
    values, weights = zip(*choices)
    total = 0
    cum_weights = []
    for w in weights:
        total += w
        cum_weights.append(total)
    x = random() * total
    i = bisect(cum_weights, x)
    return values[i]

>>> weighted_choice([(""WHITE"",90), (""RED"",8), (""GREEN"",2)])
'WHITE'"
573,random sample with replacement,False,False,90,"In [11]: df = pd.DataFrame([[1, 2], [3, 4], [5, 6], [7, 8]], columns=[""A"", ""B""])

In [12]: df.sample(2)
Out[12]:
   A  B
0  1  2
2  5  6

In [13]: df.sample(2)
Out[13]:
   A  B
3  7  8
0  1  2"
574,print a to z,False,True,6,print(f.readlines())
575,print a to z,False,True,20,"print('<unk> %s, <unk>' % (var_1, z))"
576,print a to z,False,True,7,print(chain.from_iterable(z))
577,print a to z,False,True,7,print(join.set(z))
578,print a to z,False,True,7,print(itertools.chain(*var_1))
579,print a to z,False,True,6,print(func.readlines())
580,print a to z,False,True,6,print(self.readlines())
581,print a to z,False,False,11,">>> import string
>>> string.ascii_lowercase
'abcdefghijklmnopqrstuvwxyz'"
582,print a to z,False,False,108,">>> list(string.ascii_lowercase)
['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']"
583,print a to z,True,False,145,">>> list(map(chr, range(97, 123))) #or list(map(chr, range(ord('a'), ord('z')+1)))
['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']"
584,print a to z,False,False,102,">>> help(string) # on Python 3
....
DATA
    ascii_letters = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'
    ascii_lowercase = 'abcdefghijklmnopqrstuvwxyz'
    ascii_uppercase = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'
    digits = '0123456789'
    hexdigits = '0123456789abcdefABCDEF'
    octdigits = '01234567'
    printable = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!""#$%&\'()*+,-./:;<=>?@[\\]^_`{|}~ \t\n\r\x0b\x0c'
    punctuation = '!""#$%&\'()*+,-./:;<=>?@[\\]^_`{|}~'
    whitespace = ' \t\n\r\x0b\x0c'"
585,print a to z,False,False,60,">>> class Test:
...     def __repr__(self):
...         return ""Test()""
...     def __str__(self):
...         return ""member of Test""
... 
>>> t = Test()
>>> t
Test()
>>> print(t)
member of Test"
586,print a to z,False,False,35,"line_new = '{:>12}  {:>12}  {:>12}'.format(word[0], word[1], word[2])"
587,print a to z,False,False,27,"line_new = '%12s  %12s  %12s' % (word[0], word[1], word[2])"
588,random sample with replacement,False,True,11,"random.choice(random.choice(sample), repeat=random())"
589,random sample with replacement,True,True,9,"random.choice(random.choice(sample), repeat=n)"
590,random sample with replacement,False,True,12,"random.choice(random.choice(sample), repeat=random(10))"
591,random sample with replacement,False,True,12,"random.choice(random.choice(sample), **random.choice(sample))"
592,random sample with replacement,False,True,12,"random.choice(random.choice(sample), **random.randrange(10000))"
593,random sample with replacement,False,True,16,"random.choice(random.choice(sample), **random.choice('<unk>'))"
594,random sample with replacement,False,True,12,"random.choice(random.choice(sample), **random.randrange(1000))"
595,random sample with replacement,False,False,14,"from numpy.random import choice
draw = choice(list_of_candidates, number_of_items_to_pick,
              p=probability_distribution)"
596,random sample with replacement,False,False,210,"Python 3.6.1 (v3.6.1:69c0db5050, Mar 21 2017, 01:21:04)
Type 'copyright', 'credits' or 'license' for more information
IPython 6.0.0 -- An enhanced Interactive Python. Type '?' for help.

In [1]: import random

In [2]: random.choices(
...:     population=[['a','b'], ['b','a'], ['c','b']],
...:     weights=[0.2, 0.2, 0.6],
...:     k=10
...: )

Out[2]:
[['c', 'b'],
 ['c', 'b'],
 ['b', 'a'],
 ['c', 'b'],
 ['c', 'b'],
 ['b', 'a'],
 ['c', 'b'],
 ['b', 'a'],
 ['c', 'b'],
 ['c', 'b']]"
597,random sample with replacement,False,False,154,">>> A = np.random.randint(5, size=(10,3))
>>> A
array([[1, 3, 0],
       [3, 2, 0],
       [0, 2, 1],
       [1, 1, 4],
       [3, 2, 2],
       [0, 1, 0],
       [1, 3, 1],
       [0, 4, 1],
       [2, 4, 2],
       [3, 3, 1]])
>>> idx = np.random.randint(10, size=2)
>>> idx
array([7, 6])
>>> A[idx,:]
array([[0, 4, 1],
       [1, 3, 1]])"
598,random sample with replacement,False,False,14,"A[np.random.randint(A.shape[0], size=2), :]"
599,random sample with replacement,False,False,16,"A[np.random.choice(A.shape[0], 2, replace=False), :]"
600,random sample with replacement,False,False,58,"def weighted_choice(choices):
   total = sum(w for c, w in choices)
   r = random.uniform(0, total)
   upto = 0
   for c, w in choices:
      if upto + w >= r:
         return c
      upto += w
   assert False, ""Shouldn't get here"""
601,random sample with replacement,False,False,91,"from random import random
from bisect import bisect

def weighted_choice(choices):
    values, weights = zip(*choices)
    total = 0
    cum_weights = []
    for w in weights:
        total += w
        cum_weights.append(total)
    x = random() * total
    i = bisect(cum_weights, x)
    return values[i]

>>> weighted_choice([(""WHITE"",90), (""RED"",8), (""GREEN"",2)])
'WHITE'"
602,sort dict by key,False,True,17,"sorted(list(data.items()), key=lambda x: x[1])"
603,sort dict by key,False,True,20,"OrderedDict(sorted(list(dict.items()), key=lambda t: t[0]))"
604,sort dict by key,True,True,17,"sorted(list(dict.items()), key=lambda x: x[1])"
605,sort dict by key,False,True,20,"OrderedDict(sorted(list(data.items()), key=lambda t: t[0]))"
606,sort dict by key,False,True,18,"sorted(list(data.items()), **{'key': 'value'})"
607,sort dict by key,False,True,19,"sorted(list(data.items()), **sorted(list(dict.items())))"
608,sort dict by key,False,True,6,sorted(d.values())
609,sort dict by key,False,False,68,"x = {1: 2, 3: 4, 4: 3, 2: 1, 0: 0}
{k: v for k, v in sorted(x.items(), key=lambda item: item[1])}
{0: 0, 2: 1, 1: 2, 4: 3, 3: 4}"
610,sort dict by key,False,False,38,"import operator
x = {1: 2, 3: 4, 4: 3, 2: 1, 0: 0}
sorted_x = sorted(x.items(), key=operator.itemgetter(1))"
611,sort dict by key,False,False,38,"import operator
x = {1: 2, 3: 4, 4: 3, 2: 1, 0: 0}
sorted_x = sorted(x.items(), key=operator.itemgetter(0))"
612,sort dict by key,False,False,39,"x = {1: 2, 3: 4, 4: 3, 2: 1, 0: 0}
sorted_x = sorted(x.items(), key=lambda kv: kv[1])"
613,sort dict by key,False,False,8,"import collections

sorted_dict = collections.OrderedDict(sorted_x)"
614,sort dict by key,False,False,15,"newlist = sorted(list_to_be_sorted, key=lambda k: k['name'])"
615,sort dict by key,False,False,16,"from operator import itemgetter
newlist = sorted(list_to_be_sorted, key=itemgetter('name'))"
616,list files in folder,False,True,5,glob.glob('*')
617,list files in folder,True,True,8,os.listdir('<unk>')
618,list files in folder,False,True,8,os.walk('<unk>')
619,list files in folder,False,True,5,os.listdir('filenames')
620,list files in folder,False,True,19,"[os.path.join(dirname, subdirname) for dirname in os.listdir('<unk>')]"
621,list files in folder,False,True,5,os.listdir('..')
622,list files in folder,False,True,5,os.listdir('.c')
623,list files in folder,False,False,32,"from os import listdir
from os.path import isfile, join
onlyfiles = [f for f in listdir(mypath) if isfile(join(mypath, f))]"
624,list files in folder,False,False,27,"from os import walk

f = []
for (dirpath, dirnames, filenames) in walk(mypath):
    f.extend(filenames)
    break"
625,list files in folder,False,False,24,"import glob, os
os.chdir(""/mydir"")
for file in glob.glob(""*.txt""):
    print(file)"
626,list files in folder,False,False,31,"import os
for file in os.listdir(""/mydir""):
    if file.endswith("".txt""):
        print(os.path.join(""/mydir"", file))"
627,list files in folder,False,False,38,"import os
for root, dirs, files in os.walk(""/mydir""):
    for file in files:
        if file.endswith("".txt""):
             print(os.path.join(root, file))"
628,list files in folder,False,False,11,"import glob
print(glob.glob(""/home/adam/*.txt""))"
629,list files in folder,False,False,10,"['/home/adam/file1.txt', '/home/adam/file2.txt', .... ]"
630,copy file to other folder,False,True,6,"shutil.copy2(file.txt, other)"
631,copy file to other folder,False,True,7,"shutil.copy2(file, 'rb')"
632,copy file to other folder,False,True,6,"shutil.copy2(file, str1)"
633,copy file to other folder,False,True,7,"shutil.copy2(file, 'str_3')"
634,copy file to other folder,False,True,8,"shutil.copy2(file, '}')"
635,copy file to other folder,False,True,7,"shutil.copy2(file, 'rt')"
636,copy file to other folder,False,True,7,"shutil.copy2(file, 'ab')"
637,copy file to other folder,True,False,10,"from shutil import copyfile
copyfile(src, dst)"
638,copy file to other folder,False,False,57,"┌──────────────────┬────────┬───────────┬───────┬────────────────┐
│     Function     │ Copies │   Copies  │Can use│   Destination  │
│                  │metadata│permissions│buffer │may be directory│
├──────────────────┼────────┼───────────┼───────┼────────────────┤
│shutil.copy       │   No   │    Yes    │   No  │      Yes       │
│shutil.copyfile   │   No   │     No    │   No  │       No       │
│shutil.copy2      │  Yes   │    Yes    │   No  │      Yes       │
│shutil.copyfileobj│   No   │     No    │  Yes  │       No       │
└──────────────────┴────────┴───────────┴───────┴────────────────┘"
639,copy file to other folder,False,False,28,"import shutil
shutil.copy2('/src/dir/file.ext', '/dst/dir/newname.ext') # complete target filename given
shutil.copy2('/src/file.ext', '/dst/dir') # target filename is /dst/dir/file.ext"
640,copy file to other folder,False,False,35,"import os
import shutil
src_files = os.listdir(src)
for file_name in src_files:
    full_file_name = os.path.join(src, file_name)
    if os.path.isfile(full_file_name):
        shutil.copy(full_file_name, dest)"
641,copy file to other folder,False,False,10,"import shutil
shutil.copy('/etc/hostname', '/var/tmp/testhostname')"
642,copy file to other folder,False,False,6,"import os
import shutil
import subprocess"
643,copy file to other folder,False,False,20,"shutil.copyfile(src_file, dest_file, *, follow_symlinks=True)

# example    
shutil.copyfile('source.txt', 'destination.txt')"
644,text normalize newlines to \n,False,True,8,datetime.datetime.now().encode('utf-8')
645,text normalize newlines to \n,False,True,17,"re.findall('\\d+(?=[^[]+$)', text)"
646,text normalize newlines to \n,False,True,8,"re.findall('str_0', 'str_0')"
647,text normalize newlines to \n,False,True,9,urllib.DataFrame.unquote(text).decode('utf-8')
648,text normalize newlines to \n,False,True,10,"re.sub('str_0', 'str_0', text)"
649,text normalize newlines to \n,False,True,7,"re.findall('str_0', text)"
650,text normalize newlines to \n,False,True,17,"re.findall('\\d+(?=[^[]+$)', str.text)"
651,text normalize newlines to \n,False,False,10,">>> 'test string\n'.rstrip()
'test string'"
652,text normalize newlines to \n,False,False,13,">>> 'test string \n \r\n\n\r \n\n'.rstrip()
'test string'"
653,text normalize newlines to \n,False,False,17,">>> 'test string \n \r\n\n\r \n\n'.rstrip('\n')
'test string \n \r\n\n\r '"
654,text normalize newlines to \n,False,False,44,">>> s = ""   \n\r\n  \n  abc   def \n\r\n  \n  ""
>>> s.strip()
'abc   def'
>>> s.lstrip()
'abc   def \n\r\n  \n  '
>>> s.rstrip()
'   \n\r\n  \n  abc   def'"
655,text normalize newlines to \n,False,False,35,">>> text = ""line 1\nline 2\r\nline 3\nline 4""
>>> text.splitlines()
['line 1', 'line 2', 'line 3', 'line 4']"
656,text normalize newlines to \n,False,False,34,">>> 'Mac EOL\r'.rstrip('\r\n')
'Mac EOL'
>>> 'Windows EOL\r\n'.rstrip('\r\n')
'Windows EOL'
>>> 'Unix EOL\n'.rstrip('\r\n')
'Unix EOL'"
657,text normalize newlines to \n,True,False,15,">>> ""Hello\n\n\n"".rstrip(""\n"")
""Hello"""
658,write to file,False,True,5,os.write('write')
659,write to file,False,True,5,os.write('file')
660,write to file,False,True,18,os.write('\n'.join(str(line) for line in open('write')))
661,write to file,False,True,8,os.write('<unk>')
662,write to file,False,True,18,os.write('\n'.join(str(line) for line in open('file')))
663,write to file,False,True,25,"f.write('\n'.join(open('file', 'rb').read() for line in open('write')))"
664,write to file,False,True,5,shutil.write('file')
665,write to file,True,False,21,"with open(""test.txt"", ""a"") as myfile:
    myfile.write(""appended text"")"
666,write to file,False,False,27,"text_file = open(""Output.txt"", ""w"")
text_file.write(""Purchase Amount: %s"" % TotalAmount)
text_file.close()"
667,write to file,False,False,26,"with open(""Output.txt"", ""w"") as text_file:
    text_file.write(""Purchase Amount: %s"" % TotalAmount)"
668,write to file,False,False,29,"with open(""Output.txt"", ""w"") as text_file:
    text_file.write(""Purchase Amount: {0}"".format(TotalAmount))"
669,write to file,False,False,30,"with open(""Output.txt"", ""w"") as text_file:
    print(""Purchase Amount: {}"".format(TotalAmount), file=text_file)"
670,write to file,False,False,28,"with open(""Output.txt"", ""w"") as text_file:
    print(f""Purchase Amount: {TotalAmount}"", file=text_file)"
671,write to file,True,False,18,"with open('somefile.txt', 'a') as the_file:
    the_file.write('Hello\n')"
672,convert text files from encoding ISO-8859-15 to encoding UTF-8.,False,True,19,"json.load(codecs.open('iso-8859-15', 'r', 'r', 'ignore'))"
673,convert text files from encoding ISO-8859-15 to encoding UTF-8.,False,True,14,"json.load(codecs.open('iso-8859-15', 'rt', encoding='utf-8'))"
674,convert text files from encoding ISO-8859-15 to encoding UTF-8.,False,True,12,"json.load(codecs.open('iso-8859-15', 'w'))"
675,convert text files from encoding ISO-8859-15 to encoding UTF-8.,False,True,11,"json.load(codecs.open('iso-8859-15', 'rb'))"
676,convert text files from encoding ISO-8859-15 to encoding UTF-8.,False,True,20,"json.load(codecs.open('iso-8859-15', 'r', 'r', 'r'))"
677,convert text files from encoding ISO-8859-15 to encoding UTF-8.,False,True,23,"json.load(codecs.open('iso-8859-15', 'r', 'r', 'r', 'ignore'))"
678,convert text files from encoding ISO-8859-15 to encoding UTF-8.,False,True,3,files.click()
679,convert text files from encoding ISO-8859-15 to encoding UTF-8.,False,False,8,iconv -f ISO-8859-1 -t UTF-8 in.txt > out.txt
680,convert text files from encoding ISO-8859-15 to encoding UTF-8.,False,False,14,"-f ENCODING  the encoding of the input
-t ENCODING  the encoding of the output"
681,convert text files from encoding ISO-8859-15 to encoding UTF-8.,False,False,18,">>> def tell_me_about(s): return (type(s), s)"
682,convert text files from encoding ISO-8859-15 to encoding UTF-8.,False,False,76,">>> v = ""\xC4pple"" # iso-8859-1 aka latin1 encoded string

>>> tell_me_about(v)
(<type 'str'>, '\xc4pple')

>>> v
'\xc4pple'        # representation in memory

>>> print v
?pple             # map the iso-8859-1 in-memory to iso-8859-1 chars
                  # note that '\xc4' has no representation in iso-8859-1, 
                  # so is printed as ""?""."
683,convert text files from encoding ISO-8859-15 to encoding UTF-8.,False,False,93,">>> uv = v.decode(""iso-8859-1"")
>>> uv
u'\xc4pple'       # decoding iso-8859-1 becomes unicode, in memory

>>> tell_me_about(uv)
(<type 'unicode'>, u'\xc4pple')

>>> print v.decode(""iso-8859-1"")
Äpple             # convert unicode to the default character set
                  # (utf-8, based on sys.stdout.encoding)

>>> v.decode('iso-8859-1') == u'\xc4pple'
True              # one could have just used a unicode representation 
                  # from the start"
684,convert text files from encoding ISO-8859-15 to encoding UTF-8.,False,False,106,">>> u""Ä"" == u""\xc4""
True              # the native unicode char and escaped versions are the same

>>> ""Ä"" == u""\xc4""  
False             # the native unicode char is '\xc3\x84' in latin1

>>> ""Ä"".decode('utf8') == u""\xc4""
True              # one can decode the string to get unicode

>>> ""Ä"" == ""\xc4""
False             # the native character and the escaped string are
                  # of course not equal ('\xc3\x84' != '\xc4')."
685,convert text files from encoding ISO-8859-15 to encoding UTF-8.,True,False,121,">>> u8 = v.decode(""iso-8859-1"").encode(""utf-8"")
>>> u8
'\xc3\x84pple'    # convert iso-8859-1 to unicode to utf-8

>>> tell_me_about(u8)
(<type 'str'>, '\xc3\x84pple')

>>> u16 = v.decode('iso-8859-1').encode('utf-16')
>>> tell_me_about(u16)
(<type 'str'>, '\xff\xfe\xc4\x00p\x00p\x00l\x00e\x00')

>>> tell_me_about(u8.decode('utf8'))
(<type 'unicode'>, u'\xc4pple')

>>> tell_me_about(u16.decode('utf16'))
(<type 'unicode'>, u'\xc4pple')"
686,move file to other directory,False,True,8,os.listdir('<unk>')
687,move file to other directory,False,True,5,os.chdir('..')
688,move file to other directory,True,True,14,"shutil.copy2('<unk>', '<unk>')"
689,move file to other directory,False,True,11,"shutil.copy2('<unk>', 'rb')"
690,move file to other directory,False,True,5,os.chdir('file')
691,move file to other directory,False,True,8,os.walk('<unk>')
692,move file to other directory,False,True,10,[os.listdir('<unk>')]
693,move file to other directory,False,False,34,"import os
import shutil

os.rename(""path/to/current/file.foo"", ""path/to/new/destination/for/file.foo"")
shutil.move(""path/to/current/file.foo"", ""path/to/new/destination/for/file.foo"")
os.replace(""path/to/current/file.foo"", ""path/to/new/destination/for/file.foo"")"
694,move file to other directory,False,False,27,"import shutil
import os

source = '/path/to/source_folder'
dest1 = '/path/to/dest_folder'

files = os.listdir(source)

for f in files:
    shutil.move(source+f, dest1)"
695,move file to other directory,False,False,103,"import os
import shutil

root_src_dir = 'Src Directory\\'
root_dst_dir = 'Dst Directory\\'

for src_dir, dirs, files in os.walk(root_src_dir):
    dst_dir = src_dir.replace(root_src_dir, root_dst_dir, 1)
    if not os.path.exists(dst_dir):
        os.makedirs(dst_dir)
    for file_ in files:
        src_file = os.path.join(src_dir, file_)
        dst_file = os.path.join(dst_dir, file_)
        if os.path.exists(dst_file):
            # in case of the src and dst are the same file
            if os.path.samefile(src_file, dst_file):
                continue
            os.remove(dst_file)
        shutil.move(src_file, dst_dir)"
696,move file to other directory,False,False,50,"in /opt/awesome
○ → ls
source
○ → ls source
awesome.txt

python 
>>> source = '/opt/awesome/source'
>>> destination = '/opt/awesome/destination'
>>> import os
>>> os.rename(source, destination)
>>> os.listdir('/opt/awesome')
['destination']"
697,move file to other directory,False,False,26,">>> import shutil
>>> shutil.move(destination, source)
>>> os.listdir('/opt/awesome/source')
['awesome.txt']"
698,move file to other directory,False,False,16,"from pathlib import Path

Path(""path/to/current/file.foo"").rename(""path/to/new/destination/for/file.foo"")"
699,move file to other directory,False,False,40,"import os, shutil
path = ""/volume1/Users/Transfer/""
moveto = ""/volume1/Users/Drive_Transfer/""
files = os.listdir(path)
files.sort()
for f in files:
    src = path+f
    dst = moveto+f
    shutil.move(src,dst)"
700,print datetime in mm-dd-yyyy hh:mm  format,True,True,19,time.strftime('%Y-%m-%d %H:%M:%S')
701,print datetime in mm-dd-yyyy hh:mm  format,False,True,16,time.strftime('%Y-%m-%d %H:%M')
702,print datetime in mm-dd-yyyy hh:mm  format,False,True,3,t.strip()
703,print datetime in mm-dd-yyyy hh:mm  format,False,True,11,t.strftime('%Y-%m-%d')
704,print datetime in mm-dd-yyyy hh:mm  format,False,True,6,time.mktime(s.timetuple())
705,print datetime in mm-dd-yyyy hh:mm  format,False,True,16,t.strftime('%Y-%m-%d %H:%M')
706,print datetime in mm-dd-yyyy hh:mm  format,False,True,6,time.mktime(x.timetuple())
707,print datetime in mm-dd-yyyy hh:mm  format,False,False,10,"for date in mylist :
    print str(date)"
708,print datetime in mm-dd-yyyy hh:mm  format,False,False,128,"import datetime
mylist = []
today = datetime.date.today()
mylist.append(today)
print mylist[0] # print the date object, not the container ;-)
2008-11-22

# It's better to always use str() because :

print ""This is a new day : "", mylist[0] # will work
>>> This is a new day : 2008-11-22

print ""This is a new day : "" + mylist[0] # will crash
>>> cannot concatenate 'str' and 'datetime.date' objects

print ""This is a new day : "" + str(mylist[0]) 
>>> This is a new day : 2008-11-22"
709,print datetime in mm-dd-yyyy hh:mm  format,False,False,26,"print today.strftime('We are the %d, %b %Y')
>>> 'We are the 22, Nov 2008'"
710,print datetime in mm-dd-yyyy hh:mm  format,False,False,31,"print ""We are the {:%d, %b %Y}"".format(today)
>>> 'We are the 22, Nov 2008'"
711,print datetime in mm-dd-yyyy hh:mm  format,False,False,22,"import datetime
f""{datetime.datetime.now():%Y-%m-%d}""
>>> '2017-06-15'"
712,print datetime in mm-dd-yyyy hh:mm  format,False,False,18,"from datetime import datetime

datetime.today().strftime('%Y-%m-%d')"
713,print datetime in mm-dd-yyyy hh:mm  format,False,False,22,datetime.today().strftime('%Y-%m-%d-%H:%M:%S')
714,get time now,True,True,3,datetime.datetime.now()
715,get time now,False,True,4,datetime.datetime.kill(time.isoformat)
716,get time now,False,True,6,datetime.datetime.fromtimestamp(datetime.datetime.now())
717,get time now,False,True,6,"datetime.datetime.kill(time.signal, time.microsecond)"
718,get time now,False,True,4,datetime.datetime.minute(datetime.now)
719,get time now,False,True,4,datetime.datetime.t(datetime.datetime)
720,get time now,False,True,4,datetime.datetime.kill(time.now)
721,get time now,False,False,38,">>> import datetime
>>> datetime.datetime.now()
datetime.datetime(2009, 1, 6, 15, 8, 24, 78915)

>>> print(datetime.datetime.now())
2009-01-06 15:08:24.789150"
722,get time now,False,False,32,">>> datetime.datetime.now().time()
datetime.time(15, 8, 24, 78915)

>>> print(datetime.datetime.now().time())
15:08:24.789150"
723,get time now,False,False,7,>>> from datetime import datetime
724,get time now,False,False,38,">>> from time import gmtime, strftime
>>> strftime(""%Y-%m-%d %H:%M:%S"", gmtime())
'2009-01-05 22:14:39'"
725,get time now,False,False,17,"import time
millis = int(round(time.time() * 1000))
print millis"
726,get time now,False,False,17,"import time

current_milli_time = lambda: int(round(time.time() * 1000))"
727,get time now,False,False,7,">>> current_milli_time()
1378761833768"
728,get now one week from now,False,True,18,"datetime.datetime.strptime('<unk>', '%B %d, %Y')"
729,get now one week from now,False,True,18,"datetime.datetime.strptime('January 11, 2010', '%B %d, %Y')"
730,get now one week from now,False,True,21,"datetime.datetime.strptime('<unk> 4, 0', '%B %d, %Y')"
731,get now one week from now,False,True,22,"datetime.datetime.strptime('<unk> 4, 0', '%Y, <unk> %w')"
732,get now one week from now,False,True,18,"datetime.datetime.datetime.strptime('January 11, 2010', '%B %d, %Y')"
733,get now one week from now,False,True,15,"datetime.datetime.strptime('2010', '%B %d, %Y')"
734,get now one week from now,False,True,18,"datetime.datetime.strptime('January 11, 12', '%B %d, %Y')"
735,get now one week from now,False,False,38,">>> import datetime
>>> datetime.datetime.now()
datetime.datetime(2009, 1, 6, 15, 8, 24, 78915)

>>> print(datetime.datetime.now())
2009-01-06 15:08:24.789150"
736,get now one week from now,False,False,32,">>> datetime.datetime.now().time()
datetime.time(15, 8, 24, 78915)

>>> print(datetime.datetime.now().time())
15:08:24.789150"
737,get now one week from now,False,False,7,>>> from datetime import datetime
738,get now one week from now,True,False,16,"from datetime import datetime, timedelta

d = datetime.today() - timedelta(days=days_to_subtract)"
739,get now one week from now,False,False,38,">>> from time import gmtime, strftime
>>> strftime(""%Y-%m-%d %H:%M:%S"", gmtime())
'2009-01-05 22:14:39'"
740,get now one week from now,False,False,37,">>> import datetime
>>> datetime.datetime.today()
datetime.datetime(2012, 3, 23, 23, 24, 55, 173504)
>>> datetime.datetime.today().weekday()
4"
741,get now one week from now,False,False,26,"from datetime import datetime
datetime.now().strftime('%Y-%m-%d %H:%M:%S')"
742,"open ""data.csv"" file",False,True,14,"f = open('data.csv', 'r', encoding='data.csv')"
743,"open ""data.csv"" file",False,True,11,"f = open('data.csv', 'r')"
744,"open ""data.csv"" file",False,True,12,"f = open(os.path.join(__location__, 'data.csv'))"
745,"open ""data.csv"" file",False,True,10,"f = open('data.csv', 'rb')"
746,"open ""data.csv"" file",False,True,24,"with open('data.csv', 'r') as f:
    file = f.open('data.csv', 'r')"
747,"open ""data.csv"" file",False,True,19,"f = open('data.csv', 'r')
f.write('<unk>')"
748,"open ""data.csv"" file",False,True,18,"with open('data.csv', 'r') as f:
    f = f.read()"
749,"open ""data.csv"" file",False,False,16,"from numpy import genfromtxt
my_data = genfromtxt('my_file.csv', delimiter=',')"
750,"open ""data.csv"" file",True,False,39,"import pandas as pd
df=pd.read_csv('myfile.csv', sep=',',header=None)
df.values
array([[ 1. ,  2. ,  3. ],
       [ 4. ,  5.5,  6. ]])"
751,"open ""data.csv"" file",False,False,24,"1.0, 2, 3
4, 5.5, 6

import numpy as np
np.genfromtxt('myfile.csv',delimiter=',')"
752,"open ""data.csv"" file",False,False,22,"array([[ 1. ,  2. ,  3. ],
       [ 4. ,  5.5,  6. ]])"
753,"open ""data.csv"" file",False,False,12,"np.genfromtxt('myfile.csv',delimiter=',',dtype=None)"
754,"open ""data.csv"" file",False,False,53,"array([(1.0, 2.0, 3), (4.0, 5.5, 6)], 
      dtype=[('f0', '<f8'), ('f1', '<f8'), ('f2', '<i4')])"
755,"open ""data.csv"" file",False,False,19,"from numpy import genfromtxt
genfromtxt(fname = dest_file, dtype = (<whatever options>))"
756,get specific columns by index in pandas data frame,False,True,12,"df.set_index(['index', 'index'], axis=1)"
757,get specific columns by index in pandas data frame,False,True,8,"pd.DataFrame([data], index=df.index)"
758,get specific columns by index in pandas data frame,False,True,9,df.apply(lambda x: x.tolist())
759,get specific columns by index in pandas data frame,False,True,17,"df.set_index(['index', 'index'], ascending=[True, False])"
760,get specific columns by index in pandas data frame,False,True,12,"df.set_index(['index', 'values'], axis=1)"
761,get specific columns by index in pandas data frame,False,True,8,"pd.DataFrame(df.index - df.values, columns=df.index)"
762,get specific columns by index in pandas data frame,False,True,10,"pd.concat([df1, df2], axis=1)"
763,get specific columns by index in pandas data frame,False,False,14,"df1 = df[['a', 'b']]"
764,get specific columns by index in pandas data frame,True,False,21,"df1 = df.iloc[:, 0:2] # Remember that Python does not slice inclusive of the ending index."
765,get specific columns by index in pandas data frame,False,False,22,"df1 = df.iloc[0, 0:2].copy() # To avoid the case where changing df1 also changes df"
766,get specific columns by index in pandas data frame,False,False,17,"{df.columns.get_loc(c): c for idx, c in enumerate(df.columns)}"
767,get specific columns by index in pandas data frame,False,False,13,df.index[df['BoolCol'] == True].tolist()
768,get specific columns by index in pandas data frame,False,False,11,df.index[df['BoolCol']].tolist()
769,get specific columns by index in pandas data frame,False,False,83,"df = pd.DataFrame({'BoolCol': [True, False, False, True, True]},
       index=[10,20,30,40,50])

In [53]: df
Out[53]: 
   BoolCol
10    True
20   False
30   False
40    True
50    True

[5 rows x 1 columns]

In [54]: df.index[df['BoolCol']].tolist()
Out[54]: [10, 40, 50]"
770,save pandas dataframe to a file,False,True,10,"pandas.concat([df1, df2], axis=1)"
771,save pandas dataframe to a file,False,True,7,"pandas.set_option('display.max_columns', 7)"
772,save pandas dataframe to a file,False,True,10,"pandas.concat([a, b], ignore_index=True)"
773,save pandas dataframe to a file,False,True,7,"pandas.set_option('display.max_columns', 5)"
774,save pandas dataframe to a file,False,True,10,"pandas.concat([df1, df2], ignore_index=True)"
775,save pandas dataframe to a file,False,True,8,"pandas.concat([file, str_3])"
776,save pandas dataframe to a file,False,True,8,"pandas.concat([config_file, str_3])"
777,save pandas dataframe to a file,True,False,7,"df.to_csv(file_name, sep='\t')"
778,save pandas dataframe to a file,False,False,10,"df.to_csv(file_name, sep='\t', encoding='utf-8')"
779,save pandas dataframe to a file,False,False,14,"df.to_pickle(file_name)  # where to save it, usually as a .pkl"
780,save pandas dataframe to a file,False,False,6,df = pd.read_pickle(file_name)
781,save pandas dataframe to a file,False,False,25,"store = HDFStore('store.h5')

store['df'] = df  # save it
store['df']  # load it"
782,save pandas dataframe to a file,False,False,9,"df.to_csv(file_name, encoding='utf-8', index=False)"
783,save pandas dataframe to a file,False,False,8,"Color  Number
0   red     22
1  blue     10"
784,get the file extension,False,True,10,config_file = os.path.expanduser('<unk>')
785,get the file extension,False,True,8,os.listdir('<unk>')
786,get the file extension,False,True,7,path.dirname(os.path.abspath(__file__))
787,get the file extension,False,True,8,os.stat('<unk>')
788,get the file extension,False,True,7,path.dirname(os.path.realpath(__file__))
789,get the file extension,False,True,12,"x_file = open(os.path.abspath(__file__), 'rb')"
790,get the file extension,False,True,13,"x_file = open(os.path.join(__location__, 'a'))"
791,get the file extension,True,False,28,">>> import os
>>> filename, file_extension = os.path.splitext('/path/to/somefile.ext')
>>> filename
'/path/to/somefile'
>>> file_extension
'.ext'"
792,get the file extension,False,False,28,">>> os.path.splitext('/a/b.c/d')
('/a/b.c/d', '')
>>> os.path.splitext('.bashrc')
('.bashrc', '')"
793,get the file extension,False,False,11,"import os.path
extension = os.path.splitext(filename)[1]"
794,get the file extension,False,False,16,"if m.endswith('.mp3'):
...
elif m.endswith('.flac'):
..."
795,get the file extension,False,False,16,"m.lower().endswith(('.png', '.jpg', '.jpeg'))"
796,get the file extension,False,False,14,"import pathlib

print(pathlib.Path('yourPath.example').suffix) # '.example'"
797,get the file extension,False,False,15,"import os.path
extension = os.path.splitext(filename)[1][1:]"
798,copy file `ddd.png`,True,True,7,"shutil.copy2(ddd.png, 'ddd.png')"
799,copy file `ddd.png`,False,True,10,"shutil = open('ddd.png', 'rb')"
800,copy file `ddd.png`,False,True,6,"shutil.copy2(ddd.png, ddd.png)"
801,copy file `ddd.png`,False,True,10,"copyfile = open('ddd.png', 'rb')"
802,copy file `ddd.png`,False,True,8,"shutil.copy2('ddd.png', 'ddd.png')"
803,copy file `ddd.png`,False,True,10,"upload_url = collections.create_upload_url('ddd.png', gs_bucket_name='ddd.png')"
804,copy file `ddd.png`,False,True,10,"upload_url = collections.create_upload_url('ddd.png', delimiter='ddd.png')"
805,copy file `ddd.png`,False,False,10,"from shutil import copyfile
copyfile(src, dst)"
806,copy file `ddd.png`,False,False,57,"┌──────────────────┬────────┬───────────┬───────┬────────────────┐
│     Function     │ Copies │   Copies  │Can use│   Destination  │
│                  │metadata│permissions│buffer │may be directory│
├──────────────────┼────────┼───────────┼───────┼────────────────┤
│shutil.copy       │   No   │    Yes    │   No  │      Yes       │
│shutil.copyfile   │   No   │     No    │   No  │       No       │
│shutil.copy2      │  Yes   │    Yes    │   No  │      Yes       │
│shutil.copyfileobj│   No   │     No    │  Yes  │       No       │
└──────────────────┴────────┴───────────┴───────┴────────────────┘"
807,copy file `ddd.png`,False,False,28,"import shutil
shutil.copy2('/src/dir/file.ext', '/dst/dir/newname.ext') # complete target filename given
shutil.copy2('/src/file.ext', '/dst/dir') # target filename is /dst/dir/file.ext"
808,copy file `ddd.png`,False,False,10,"import shutil
shutil.copy('/etc/hostname', '/var/tmp/testhostname')"
809,copy file `ddd.png`,False,False,6,"import os
import shutil
import subprocess"
810,copy file `ddd.png`,False,False,20,"shutil.copyfile(src_file, dest_file, *, follow_symlinks=True)

# example    
shutil.copyfile('source.txt', 'destination.txt')"
811,copy file `ddd.png`,False,False,20,"shutil.copy(src_file, dest_file, *, follow_symlinks=True)

# example
shutil.copy('source.txt', 'destination.txt')"
812,match regex year month day,False,True,10,"re.findall('<unk>', year)"
813,match regex year month day,False,True,16,"re.date_range('<unk>', '<unk>', periods=12)"
814,match regex year month day,False,True,15,"re.date_range('1/1/2014', periods=12, freq='<unk>')"
815,match regex year month day,False,True,13,"re.sub('<unk>', 'today', day)"
816,match regex year month day,False,True,13,"datetime.strptime('<unk>', '%B')"
817,match regex year month day,False,True,14,"re.findall('<unk>', '<unk>')"
818,match regex year month day,False,True,13,"re.date_range('<unk>', '2008', periods=12)"
819,match regex year month day,False,False,11,^[12][0-9]{3}$
820,match regex year month day,False,False,9,^(19|20)\d{2}$
821,match regex year month day,False,False,5,^\d{4}$
822,match regex year month day,True,False,74,"In [140]: datetime.datetime.strptime(""11/12/98"",""%m/%d/%y"")
Out[140]: datetime.datetime(1998, 11, 12, 0, 0)

In [141]: datetime.datetime.strptime(""11/12/98"",""%d/%m/%y"")
Out[141]: datetime.datetime(1998, 12, 11, 0, 0)"
823,match regex year month day,False,False,36,"In [143]: date.year
Out[143]: 1998

In [144]: date.month
Out[144]: 11

In [145]: date.day
Out[145]: 12"
824,match regex year month day,False,False,62,"In [159]: try:
   .....:     datetime.datetime.strptime(""99/99/99"",""%m/%d/%y"")
   .....: except ValueError as err:
   .....:     print(err)
   .....:     
   .....:     
time data '99/99/99' does not match format '%m/%d/%y'"
825,match regex year month day,False,False,45,"In [146]: import re
In [152]: match = re.search(r'(\d+/\d+/\d+)','The date is 11/12/98')

In [153]: match.group(1)
Out[153]: '11/12/98'"
826,copy a file to dist,False,True,11,"shutil.copy2('<unk>', 'dist')"
827,copy a file to dist,True,True,7,"shutil.copy2(file, 'en_US')"
828,copy a file to dist,False,True,14,"shutil.copy2('<unk>', '<unk>')"
829,copy a file to dist,False,True,8,"shutil.copy2(dist, 'w')"
830,copy a file to dist,False,True,8,"shutil.copy2('dist', 'rb')"
831,copy a file to dist,False,True,7,"shutil.copy2(dist, 'rb')"
832,copy a file to dist,False,True,11,"shutil.copy2('<unk>', '..')"
833,copy a file to dist,False,False,10,"from shutil import copyfile
copyfile(src, dst)"
834,copy a file to dist,False,False,57,"┌──────────────────┬────────┬───────────┬───────┬────────────────┐
│     Function     │ Copies │   Copies  │Can use│   Destination  │
│                  │metadata│permissions│buffer │may be directory│
├──────────────────┼────────┼───────────┼───────┼────────────────┤
│shutil.copy       │   No   │    Yes    │   No  │      Yes       │
│shutil.copyfile   │   No   │     No    │   No  │       No       │
│shutil.copy2      │  Yes   │    Yes    │   No  │      Yes       │
│shutil.copyfileobj│   No   │     No    │  Yes  │       No       │
└──────────────────┴────────┴───────────┴───────┴────────────────┘"
835,copy a file to dist,False,False,28,"import shutil
shutil.copy2('/src/dir/file.ext', '/dst/dir/newname.ext') # complete target filename given
shutil.copy2('/src/file.ext', '/dst/dir') # target filename is /dst/dir/file.ext"
836,copy a file to dist,False,False,10,"import shutil
shutil.copy('/etc/hostname', '/var/tmp/testhostname')"
837,copy a file to dist,False,False,6,"import os
import shutil
import subprocess"
838,copy a file to dist,False,False,20,"shutil.copyfile(src_file, dest_file, *, follow_symlinks=True)

# example    
shutil.copyfile('source.txt', 'destination.txt')"
839,copy a file to dist,False,False,20,"shutil.copy(src_file, dest_file, *, follow_symlinks=True)

# example
shutil.copy('source.txt', 'destination.txt')"
840,make a folder recersively,False,True,7,os.chdir(os.path.dirname(__file__))
841,make a folder recersively,False,True,7,os.chdir(os.path.normpath(existGDBPath))
842,make a folder recersively,False,True,7,os.chdir(os.path.abspath(__file__))
843,make a folder recersively,False,True,3,os.getcwd()
844,make a folder recersively,False,True,4,os.walk(recersively)
845,make a folder recersively,False,True,9,"os.chdir(os.path.join(getarray, 1000))"
846,make a folder recersively,False,True,5,os.chdir('recersively')
847,make a folder recersively,False,False,16,"from pathlib import Path
Path(""/my/directory"").mkdir(parents=True, exist_ok=True)"
848,make a folder recersively,True,False,13,"import os
if not os.path.exists(directory):
    os.makedirs(directory)"
849,make a folder recersively,False,False,22,"import os, errno

try:
    os.makedirs(directory)
except OSError as e:
    if e.errno != errno.EEXIST:
        raise"
850,make a folder recersively,False,False,16,"try:
    os.makedirs(""path/to/directory"")
except FileExistsError:
    # directory already exists
    pass"
851,make a folder recersively,False,False,15,"os.makedirs(""path/to/directory"", exist_ok=True)  # succeeds even if directory exists."
852,make a folder recersively,False,False,22,"from pathlib import Path

for path in Path('src').rglob('*.c'):
    print(path.name)"
853,make a folder recersively,False,False,41,"import fnmatch
import os

matches = []
for root, dirnames, filenames in os.walk('src'):
    for filename in fnmatch.filter(filenames, '*.c'):
        matches.append(os.path.join(root, filename))"
854,a list of dictionary to pandas dataframe,False,True,15,"pd.DataFrame(data, columns=['farm', 'fruit'], axis=1)"
855,a list of dictionary to pandas dataframe,False,True,14,df['value'].apply(lambda x: x.tolist())
856,a list of dictionary to pandas dataframe,False,True,4,pd.DataFrame(data)
857,a list of dictionary to pandas dataframe,False,True,14,df.set_index('Date').apply(lambda x: x.tolist())
858,a list of dictionary to pandas dataframe,False,True,14,df.set_index('Date').agg(lambda x: x.tolist())
859,a list of dictionary to pandas dataframe,False,True,9,df.set_index('Date').head(0)
860,a list of dictionary to pandas dataframe,False,True,16,"df['value'].apply(lambda x: x.tolist(), axis=1)"
861,a list of dictionary to pandas dataframe,False,False,4,pd.DataFrame(d)
862,a list of dictionary to pandas dataframe,False,False,18,"pd.DataFrame(d)
ValueError: If using all scalar values, you must must pass an index"
863,a list of dictionary to pandas dataframe,False,False,78,"In [11]: pd.DataFrame(d.items())  # or list(d.items()) in python 3
Out[11]:
             0    1
0   2012-07-02  392
1   2012-07-06  392
2   2012-06-29  391
3   2012-06-28  391
...

In [12]: pd.DataFrame(d.items(), columns=['Date', 'DateValue'])
Out[12]:
          Date  DateValue
0   2012-07-02        392
1   2012-07-06        392
2   2012-06-29        391"
864,a list of dictionary to pandas dataframe,False,False,57,"In [21]: s = pd.Series(d, name='DateValue')
Out[21]:
2012-06-08    388
2012-06-09    388
2012-06-10    388

In [22]: s.index.name = 'Date'

In [23]: s.reset_index()
Out[23]:
          Date  DateValue
0   2012-06-08        388
1   2012-06-09        388
2   2012-06-10        388"
865,a list of dictionary to pandas dataframe,False,False,50,">>> df.set_index('ID').T.to_dict('list')
{'p': [1, 3, 2], 'q': [4, 3, 2], 'r': [4, 0, 9]}"
866,a list of dictionary to pandas dataframe,True,False,51,">>> df = pd.DataFrame({'a': ['red', 'yellow', 'blue'], 'b': [0.5, 0.25, 0.125]})
>>> df
        a      b
0     red  0.500
1  yellow  0.250
2    blue  0.125"
867,a list of dictionary to pandas dataframe,False,False,48,">>> df.to_dict('dict')
{'a': {0: 'red', 1: 'yellow', 2: 'blue'}, 
 'b': {0: 0.5, 1: 0.25, 2: 0.125}}"
868,list to an entry in pandas dataframe,False,True,3,df.get_text()
869,list to an entry in pandas dataframe,False,True,15,df.query('index < <unk> or index > <unk>')
870,list to an entry in pandas dataframe,False,True,8,df.setStyleSheet('<unk>')
871,list to an entry in pandas dataframe,False,True,7,"df.to_csv('index', columns=False)"
872,list to an entry in pandas dataframe,False,True,7,"df.to_csv('index', index=False)"
873,list to an entry in pandas dataframe,False,True,7,"pd.merge(entry, on='lower')"
874,list to an entry in pandas dataframe,False,True,10,"pd.merge(entry, entry, on=' ')"
875,list to an entry in pandas dataframe,False,False,50,"L = ['Thanks You', 'Its fine no problem', 'Are you sure']

#create new df 
df = pd.DataFrame({'col':L})
print (df)

                   col
0           Thanks You
1  Its fine no problem
2         Are you sure"
876,list to an entry in pandas dataframe,True,False,47,"df = pd.DataFrame({'oldcol':[1,2,3]})

#add column to existing df 
df['col'] = L
print (df)
   oldcol                  col
0       1           Thanks You
1       2  Its fine no problem
2       3         Are you sure"
877,list to an entry in pandas dataframe,False,False,28,"#default column name 0
df = pd.DataFrame(L)
print (df)
                     0
0           Thanks You
1  Its fine no problem
2         Are you sure"
878,list to an entry in pandas dataframe,False,False,198,">>> df
                samples  subject  trial_num
0  [-0.07, -2.9, -2.44]        1          1
1   [-1.52, -0.35, 0.1]        1          2
2  [-0.17, 0.57, -0.65]        1          3
3  [-0.82, -1.06, 0.47]        2          1
4   [0.79, 1.35, -0.09]        2          2
5   [1.17, 1.14, -1.79]        2          3
>>>
>>> s = df.apply(lambda x: pd.Series(x['samples']),axis=1).stack().reset_index(level=1, drop=True)
>>> s.name = 'sample'
>>>
>>> df.drop('samples', axis=1).join(s)
   subject  trial_num  sample
0        1          1   -0.07
0        1          1   -2.90
0        1          1   -2.44
1        1          2   -1.52
1        1          2   -0.35
1        1          2    0.10
2        1          3   -0.17
2        1          3    0.57
2        1          3   -0.65
3        2          1   -0.82
3        2          1   -1.06
3        2          1    0.47
4        2          2    0.79
4        2          2    1.35
4        2          2   -0.09
5        2          3    1.17
5        2          3    1.14
5        2          3   -1.79"
879,list to an entry in pandas dataframe,False,False,150,">>> res = df.set_index(['subject', 'trial_num'])['samples'].apply(pd.Series).stack()
>>> res = res.reset_index()
>>> res.columns = ['subject','trial_num','sample_num','sample']
>>> res
    subject  trial_num  sample_num  sample
0         1          1           0    1.89
1         1          1           1   -2.92
2         1          1           2    0.34
3         1          2           0    0.85
4         1          2           1    0.24
5         1          2           2    0.72
6         1          3           0   -0.96
7         1          3           1   -2.72
8         1          3           2   -0.11
9         2          1           0   -1.33
10        2          1           1    3.13
11        2          1           2   -0.65
12        2          2           0    0.10
13        2          2           1    0.65
14        2          2           2    0.15
15        2          3           0    0.64
16        2          3           1   -0.10
17        2          3           2   -0.76"
880,list to an entry in pandas dataframe,False,False,71,"df = pd.DataFrame(data={'A': [1, 2, 3], 'B': ['x', 'y', 'z']})

df.at[1, 'B'] = ['m', 'n']

df =
    A   B
0   1   x
1   2   [m, n]
2   3   z"
881,list to an entry in pandas dataframe,False,False,130,">>> df = pd.DataFrame(data={'A': [1, 2, 3], 'B': [1,2,3]})
>>> df.dtypes
A    int64
B    int64
dtype: object

>>> df.at[1, 'B'] = [1, 2, 3]
ValueError: setting an array element with a sequence

>>> df['B'] = df['B'].astype('object')
>>> df.at[1, 'B'] = [1, 2, 3]
>>> df
   A          B
0  1          1
1  2  [1, 2, 3]
2  3          3"
882,save `compan_df` dataframe to a file,False,True,7,"pandas.savefig('compan_df', shell=True)"
883,save `compan_df` dataframe to a file,False,True,10,"pandas.concat([compan_df, compan_df], ignore_index=True)"
884,save `compan_df` dataframe to a file,False,True,10,"pandas.concat([compan_df, compan_df], axis=1)"
885,save `compan_df` dataframe to a file,False,True,7,"pandas.set_option('display.max_columns', 5)"
886,save `compan_df` dataframe to a file,False,True,7,"pandas.set_option('display.max_columns', 7)"
887,save `compan_df` dataframe to a file,False,True,10,"pandas.concat([compan_df, compan_df], **columns)"
888,save `compan_df` dataframe to a file,False,True,7,"pandas.set_option('display.max_columns', compan_df)"
889,save `compan_df` dataframe to a file,True,False,7,"df.to_csv(file_name, sep='\t')"
890,save `compan_df` dataframe to a file,False,False,10,"df.to_csv(file_name, sep='\t', encoding='utf-8')"
891,save `compan_df` dataframe to a file,False,False,14,"df.to_pickle(file_name)  # where to save it, usually as a .pkl"
892,save `compan_df` dataframe to a file,False,False,6,df = pd.read_pickle(file_name)
893,save `compan_df` dataframe to a file,False,False,25,"store = HDFStore('store.h5')

store['df'] = df  # save it
store['df']  # load it"
894,save `compan_df` dataframe to a file,False,False,9,"df.to_csv(file_name, encoding='utf-8', index=False)"
895,save `compan_df` dataframe to a file,False,False,8,"Color  Number
0   red     22
1  blue     10"
896,save `compand_df` dataframe to a file,False,True,7,"pandas.savefig('compand_df', shell=True)"
897,save `compand_df` dataframe to a file,False,True,10,"pandas.concat([compand_df, compand_df], ignore_index=True)"
898,save `compand_df` dataframe to a file,False,True,10,"pandas.concat([compand_df, compand_df], axis=1)"
899,save `compand_df` dataframe to a file,False,True,7,"pandas.set_option('display.max_columns', 5)"
900,save `compand_df` dataframe to a file,False,True,7,"pandas.set_option('display.max_columns', 7)"
901,save `compand_df` dataframe to a file,False,True,10,"pandas.concat([compand_df, compand_df], **columns)"
902,save `compand_df` dataframe to a file,False,True,7,"pandas.set_option('display.max_columns', compand_df)"
903,save `compand_df` dataframe to a file,False,False,31,"import io

# text buffer
s_buf = io.StringIO()

# saving a data frame to a buffer (same as with a regular file):
df.to_csv(s_buf)"
904,save `compand_df` dataframe to a file,False,False,4,s_buf.seek(0)
905,save `compand_df` dataframe to a file,False,False,6,"cur.copy_from(s_buf, table)"
906,save `compand_df` dataframe to a file,False,False,10,"df_object.to_csv('xgboost.txt', sep='\t', index=False)"
907,save `compand_df` dataframe to a file,False,False,23,"np.savetxt('xgboost.txt', a.values, fmt='%d', delimiter=""\t"", header=""X\tY\tZ\tValue"")"
908,save `compand_df` dataframe to a file,False,False,17,"a.to_csv('xgboost.txt', header=True, index=False, sep='\t', mode='a')"
909,save `compand_df` dataframe to a file,True,False,8,"df.to_csv(""output.csv"", index=False)"
910,cast a float to two decimals,True,True,13,float('{0:.2f}'.format(cast))
911,cast a float to two decimals,False,True,13,float('{0:.2f}'.format(float))
912,cast a float to two decimals,False,True,24,"float('{0:.2f}'.format(cast, 'pushButton', '{0:.2f}'))"
913,cast a float to two decimals,False,True,6,"round(0.1, 2)"
914,cast a float to two decimals,False,True,6,"round(cast, 2)"
915,cast a float to two decimals,False,True,6,"round(a, 2)"
916,cast a float to two decimals,False,True,6,"round(10, 20)"
917,cast a float to two decimals,False,False,130,">>> 125650429603636838/(2**53)
13.949999999999999

>>> 234042163/(2**24)
13.949999988079071

>>> a = 13.946
>>> print(a)
13.946
>>> print(""%.2f"" % a)
13.95
>>> round(a,2)
13.949999999999999
>>> print(""%.2f"" % round(a, 2))
13.95
>>> print(""{:.2f}"".format(a))
13.95
>>> print(""{:.2f}"".format(round(a, 2)))
13.95
>>> print(""{:.15f}"".format(round(a, 2)))
13.949999999999999"
918,cast a float to two decimals,False,False,10,"""{:.2f}"".format(13.949999999999999)"
919,cast a float to two decimals,False,False,13,"float(""{:.2f}"".format(13.949999999999999))"
920,cast a float to two decimals,False,False,64,">>> x = 13.949999999999999999
>>> x
13.95
>>> g = float(""{:.2f}"".format(x))
>>> g
13.95
>>> x == g
True
>>> h = round(x, 2)
>>> h
13.95
>>> x == h
True"
921,cast a float to two decimals,False,False,11,"answer = str(round(answer, 2))"
922,cast a float to two decimals,False,False,10,">>> round(14.22222223, 2)
14.22"
923,cast a float to two decimals,False,False,10,"""{:.2f}"".format(5)"
924,cast a list to a dataframe,True,True,19,"pd.DataFrame(values, columns=['R_Number', 'C_Number', 'Avg', 'Std'])"
925,cast a list to a dataframe,False,True,13,"pd.DataFrame(data, columns=['farm', 'fruit'])"
926,cast a list to a dataframe,False,True,13,"pd.DataFrame(values, columns=['farm', 'fruit'])"
927,cast a list to a dataframe,False,True,16,"pd.DataFrame(data, columns=['farm', 'fruit', 'ob'])"
928,cast a list to a dataframe,False,True,15,"pd.DataFrame(data, columns=['x', 'y'])"
929,cast a list to a dataframe,False,True,15,"pd.DataFrame(data, columns=['farm', 'fruit'], DataFrame=False)"
930,cast a list to a dataframe,False,True,16,"pd.DataFrame(values, columns=['farm', 'fruit', 'ob'])"
931,cast a list to a dataframe,False,False,6,"do.call(rbind.data.frame, your_list)"
932,cast a list to a dataframe,False,False,20,"df <- data.frame(matrix(unlist(l), nrow=length(l), byrow=T))"
933,cast a list to a dataframe,False,False,19,"df <- data.frame(matrix(unlist(l), nrow=132, byrow=T),stringsAsFactors=FALSE)"
934,cast a list to a dataframe,False,False,76,"import pandas as pd
lst1 = range(100)
lst2 = range(100)
lst3 = range(100)
percentile_list = pd.DataFrame(
    {'lst1Title': lst1,
     'lst2Title': lst2,
     'lst3Title': lst3
    })

percentile_list
    lst1Title  lst2Title  lst3Title
0          0         0         0
1          1         1         1
2          2         2         2
3          3         3         3
4          4         4         4
5          5         5         5
6          6         6         6
..."
935,cast a list to a dataframe,False,False,31,"import numpy as np
percentile_list = pd.DataFrame(np.column_stack([lst1, lst2, lst3]), 
                               columns=['lst1Title', 'lst2Title', 'lst3Title'])"
936,cast a list to a dataframe,False,False,17,"df = pd.DataFrame(table, columns=headers)
df

   Heading1  Heading2
0         1         2
1         3         4"
937,cast a list to a dataframe,False,False,7,df['new_col'] = mylist
938,get the head of dataframe `df`,False,True,4,df.tail(1)
939,get the head of dataframe `df`,False,True,4,df.head(4)
940,get the head of dataframe `df`,False,True,4,df.realpath(df)
941,get the head of dataframe `df`,False,True,7,df.groupby(df).size()
942,get the head of dataframe `df`,False,True,10,df.apply(lambda x: x.get(1))
943,get the head of dataframe `df`,False,True,8,df['head'].values.tolist()
944,get the head of dataframe `df`,False,True,7,df.set_index(df).size()
945,get the head of dataframe `df`,True,False,4,list(my_dataframe.columns.values)
946,get the head of dataframe `df`,False,False,4,list(my_dataframe)
947,get the head of dataframe `df`,False,False,193,"In [1]: import numpy as np

In [2]: import pandas as pd

In [3]: df = pd.DataFrame(np.arange(12).reshape(4,3))

In [4]: df
Out[4]: 
   0  1  2
0  0  1  2
1  3  4  5
2  6  7  8
3  9  10 11

In [5]: df.shape
Out[5]: (4, 3)

In [6]: timeit df.shape
2.77 µs ± 644 ns per loop (mean ± std. dev. of 7 runs, 100000 loops each)

In [7]: timeit df[0].count()
348 µs ± 1.31 µs per loop (mean ± std. dev. of 7 runs, 1000 loops each)

In [8]: len(df.index)
Out[8]: 4

In [9]: timeit len(df.index)
990 ns ± 4.97 ns per loop (mean ± std. dev. of 7 runs, 100000 loops each)"
948,get the head of dataframe `df`,False,False,61,"In [3]: sub_df
Out[3]:
          A         B
2 -0.133653 -0.030854

In [4]: sub_df.iloc[0]
Out[4]:
A   -0.133653
B   -0.030854
Name: 2, dtype: float64

In [5]: sub_df.iloc[0]['A']
Out[5]: -0.13365288513107493"
949,get the head of dataframe `df`,False,False,3,my_dataframe.columns.values.tolist()
950,get the head of dataframe `df`,False,False,3,my_dataframe.columns.tolist()
951,get the head of dataframe `df`,False,False,54,"%timeit df.columns.tolist()
16.7 µs ± 317 ns per loop (mean ± std. dev. of 7 runs, 100000 loops each)

%timeit df.columns.values.tolist()
1.24 µs ± 12.3 ns per loop (mean ± std. dev. of 7 runs, 1000000 loops each)"
952,add a new column to a dataframe row,False,True,20,"df['score'] = list(range(1, len(df) + 1))"
953,add a new column to a dataframe row,False,True,20,df['column'] = df['farm'].apply(lambda x: x + y)
954,add a new column to a dataframe row,False,True,26,df['rot90'] = df['A'] + df['B'] + df['C']
955,add a new column to a dataframe row,False,True,21,df['a'] = df['farm'].apply(lambda x: x + y)
956,add a new column to a dataframe row,False,True,22,df['a'] = df['a'].apply(lambda x: x + 1)
957,add a new column to a dataframe row,False,True,34,df['a'] = df['a'].apply(lambda x: x[1] + x[2] + x['pixels'])
958,add a new column to a dataframe row,False,True,20,df['value'] = df['farm'].apply(lambda x: x + y)
959,add a new column to a dataframe row,False,False,16,"df1['e'] = pd.Series(np.random.randn(sLength), index=df1.index)"
960,add a new column to a dataframe row,False,False,79,">>> sLength = len(df1['a'])
>>> df1
          a         b         c         d
6 -0.269221 -0.026476  0.997517  1.294385
8  0.917438  0.847941  0.034235 -0.448948

>>> df1['e'] = pd.Series(np.random.randn(sLength), index=df1.index)
>>> df1
          a         b         c         d         e
6 -0.269221 -0.026476  0.997517  1.294385  1.757167
8  0.917438  0.847941  0.034235 -0.448948  2.228131

>>> p.version.short_version
'0.16.1'"
961,add a new column to a dataframe row,False,False,48,">>> df1.loc[:,'f'] = pd.Series(np.random.randn(sLength), index=df1.index)
>>> df1
          a         b         c         d         e         f
6 -0.269221 -0.026476  0.997517  1.294385  1.757167 -0.050927
8  0.917438  0.847941  0.034235 -0.448948  2.228131  0.006109
>>>"
962,add a new column to a dataframe row,True,False,13,df1 = df1.assign(e=pd.Series(np.random.randn(sLength)).values)
963,add a new column to a dataframe row,False,False,98,">>> import pandas as pd
>>> from numpy.random import randint

>>> df = pd.DataFrame(columns=['lib', 'qty1', 'qty2'])
>>> for i in range(5):
>>>     df.loc[i] = ['name' + str(i)] + list(randint(10, size=2))

>>> df
     lib qty1 qty2
0  name0    3    3
1  name1    2    4
2  name2    2    8
3  name3    2    1
4  name4    9    6"
964,add a new column to a dataframe row,False,False,38,"rows_list = []
for row in input_rows:

        dict1 = {}
        # get input row in dictionary format
        # key = col_name
        dict1.update(blah..) 

        rows_list.append(dict1)

df = pd.DataFrame(rows_list)"
965,add a new column to a dataframe row,False,False,118,"def label_race (row):
   if row['eri_hispanic'] == 1 :
      return 'Hispanic'
   if row['eri_afr_amer'] + row['eri_asian'] + row['eri_hawaiian'] + row['eri_nat_amer'] + row['eri_white'] > 1 :
      return 'Two Or More'
   if row['eri_nat_amer'] == 1 :
      return 'A/I AK Native'
   if row['eri_asian'] == 1:
      return 'Asian'
   if row['eri_afr_amer']  == 1:
      return 'Black/AA'
   if row['eri_hawaiian'] == 1:
      return 'Haw/Pac Isl.'
   if row['eri_white'] == 1:
      return 'White'
   return 'Other'"
966,create a dataframe from a list,False,True,9,"pd.DataFrame([a], method='bar')"
967,create a dataframe from a list,False,True,18,"pd.DataFrame.from_dict(data, on=['A', 'B'], how='outer')"
968,create a dataframe from a list,False,True,18,"pd.DataFrame(data, columns=['A', 'B'], how='outer')"
969,create a dataframe from a list,False,True,16,"pd.DataFrame.from_dict(data, on=['farm', 'fruit'], how='inner')"
970,create a dataframe from a list,False,True,9,"pd.DataFrame.DataFrame([a], method='ffill')"
971,create a dataframe from a list,True,True,17,"pd.DataFrame(data, columns=['x', 'y'], axis=1)"
972,create a dataframe from a list,False,True,18,"pd.DataFrame.DataFrame(a, columns=['A', 'B'], how='outer')"
973,create a dataframe from a list,False,False,24,"df['color'] = np.where(df['Set']=='Z', 'green', 'red')"
974,create a dataframe from a list,False,False,60,"import pandas as pd
import numpy as np

df = pd.DataFrame({'Type':list('ABBC'), 'Set':list('ZZXY')})
df['color'] = np.where(df['Set']=='Z', 'green', 'red')
print(df)"
975,create a dataframe from a list,False,False,19,"Set Type  color
0   Z    A  green
1   Z    B  green
2   X    B    red
3   Y    C    red"
976,create a dataframe from a list,False,False,118,"df = pd.DataFrame({'Type':list('ABBC'), 'Set':list('ZZXY')})
conditions = [
    (df['Set'] == 'Z') & (df['Type'] == 'A'),
    (df['Set'] == 'Z') & (df['Type'] == 'B'),
    (df['Type'] == 'B')]
choices = ['yellow', 'blue', 'purple']
df['color'] = np.select(conditions, choices, default='black')
print(df)"
977,create a dataframe from a list,False,False,19,"Set Type   color
0   Z    A  yellow
1   Z    B    blue
2   X    B  purple
3   Y    C   black"
978,create a dataframe from a list,False,False,47,"import datetime
import pandas as pd
import numpy as np

todays_date = datetime.datetime.now().date()
index = pd.date_range(todays_date-datetime.timedelta(10), periods=10, freq='D')

columns = ['A','B', 'C']"
979,create a dataframe from a list,False,False,20,"df_ = pd.DataFrame(index=index, columns=columns)
df_ = df_.fillna(0) # with 0s rather than NaNs"
980,sort dataframe `jdf` by `scores`,False,True,5,jdf.sort_values(by='scores')
981,sort dataframe `jdf` by `scores`,True,True,4,jdf.sort_values(by=scores.columns)
982,sort dataframe `jdf` by `scores`,False,True,4,jdf.sort_values(by=scores)
983,sort dataframe `jdf` by `scores`,False,True,4,jdf.sort_values(by=jdf.columns)
984,sort dataframe `jdf` by `scores`,False,True,8,jdf.sort_values(by=['scores'])
985,sort dataframe `jdf` by `scores`,False,True,4,jdf.sort(by=scores.columns)
986,sort dataframe `jdf` by `scores`,False,True,4,jdf.sort(scores)
987,sort dataframe `jdf` by `scores`,False,False,4,df.sample(frac=1)
988,sort dataframe `jdf` by `scores`,False,False,10,df = df.sample(frac=1).reset_index(drop=True)
989,sort dataframe `jdf` by `scores`,False,False,60,"$ python3 -m memory_profiler .\test.py
Filename: .\test.py

Line #    Mem usage    Increment   Line Contents
================================================
     5     68.5 MiB     68.5 MiB   @profile
     6                             def shuffle():
     7    847.8 MiB    779.3 MiB       df = pd.DataFrame(np.random.randn(100, 1000000))
     8    847.9 MiB      0.1 MiB       df = df.sample(frac=1).reset_index(drop=True)"
990,sort dataframe `jdf` by `scores`,False,False,10,"from sklearn.utils import shuffle
df = shuffle(df)"
991,sort dataframe `jdf` by `scores`,False,False,33,"df = pd.DataFrame(np.random.randn(100, 3))

from scipy import stats
df[(np.abs(stats.zscore(df)) < 3).all(axis=1)]"
992,sort dataframe `jdf` by `scores`,False,False,84,"df = pd.DataFrame({'Data':np.random.normal(size=200)})
# example dataset of normally distributed data. 

df[np.abs(df.Data-df.Data.mean()) <= (3*df.Data.std())]
# keep only the ones that are within +3 to -3 standard deviations in the column 'Data'.

df[~(np.abs(df.Data-df.Data.mean()) > (3*df.Data.std()))]
# or if you prefer the other way around"
993,sort dataframe `jdf` by `scores`,False,False,27,"S = pd.Series(np.random.normal(size=200))
S[~((S-S.mean()).abs() > 3*S.std())]"
994,sort dataframe `jdf` by the values of column 'scores',False,True,10,"jdf.sort_values(['scores', 'scores'])"
995,sort dataframe `jdf` by the values of column 'scores',True,True,5,jdf.sort_values(by='scores')
996,sort dataframe `jdf` by the values of column 'scores',False,True,5,jdf.sort_values(level='scores')
997,sort dataframe `jdf` by the values of column 'scores',False,True,17,"jdf.sort_values(['scores', 'scores'], ascending=[True, True])"
998,sort dataframe `jdf` by the values of column 'scores',False,True,5,jdf.sort_values('scores')
999,sort dataframe `jdf` by the values of column 'scores',False,True,17,"jdf.sort_values(['scores', 'scores'], ascending=[True, False])"
1000,sort dataframe `jdf` by the values of column 'scores',False,True,5,jdf.sort_values(**'scores')
1001,sort dataframe `jdf` by the values of column 'scores',False,False,53,"print df
   0  Bytes  Client             Ip
0  1      1    1000   192.168.10.2
1  0      0    2000  192.168.10.12
2  2      2     500   192.168.10.4
3  3      3     159  192.168.10.56

print df.nlargest(3, 'Client')
   0  Bytes  Client             Ip
1  0      0    2000  192.168.10.12
0  1      1    1000   192.168.10.2
2  2      2     500   192.168.10.4"
1002,sort dataframe `jdf` by the values of column 'scores',False,False,73,"df1 = df.sort_values('score',ascending = False).groupby('pidx').head(2)
print (df1)

    mainid pidx pidy  score
8        2    x    w     12
4        1    a    e      8
2        1    c    a      7
10       2    y    x      6
1        1    a    c      5
7        2    z    y      5
6        2    y    z      3
3        1    c    b      2
5        2    x    y      1"
1003,sort dataframe `jdf` by the values of column 'scores',False,False,81,"df = df.set_index(['mainid','pidy']).groupby('pidx')['score'].nlargest(2).reset_index() 
print (df)
  pidx  mainid pidy  score
0    a       1    e      8
1    a       1    c      5
2    c       1    a      7
3    c       1    b      2
4    x       2    w     12
5    x       2    y      1
6    y       2    x      6
7    y       2    z      3
8    z       2    y      5"
1004,sort dataframe `jdf` by the values of column 'scores',False,False,247,"np.random.seed(123)
N = 1000000

L1 = list('abcdefghijklmnopqrstu')
L2 = list('efghijklmnopqrstuvwxyz')
df = pd.DataFrame({'mainid':np.random.randint(1000, size=N),
                   'pidx': np.random.randint(10000, size=N),
                   'pidy': np.random.choice(L2, N),
                   'score':np.random.randint(1000, size=N)})
#print (df)

def epat(df):
    grouped = df.groupby('pidx')
    new_df = pd.DataFrame([], columns = df.columns)
    for key, values in grouped:
        new_df = pd.concat([new_df, grouped.get_group(key).sort_values('score', ascending=True)[:2]], 0)
    return (new_df)

print (epat(df))

In [133]: %timeit (df.sort_values('score',ascending = False).groupby('pidx').head(2))
1 loop, best of 3: 309 ms per loop

In [134]: %timeit (df.set_index(['mainid','pidy']).groupby('pidx')['score'].nlargest(2).reset_index())
1 loop, best of 3: 7.11 s per loop

In [147]: %timeit (epat(df))
1 loop, best of 3: 22 s per loop"
1005,sort dataframe `jdf` by the values of column 'scores',False,False,37,"In [6]: df.sort('Bytes', ascending=False)
Out[6]:
   0  Bytes      Client Ip
1  1   2000  192.168.10.12
0  0   1000   192.168.10.2
2  2    500   192.168.10.4
3  3    159  192.168.10.56"
1006,sort dataframe `jdf` by the values of column 'scores',False,False,122,"import pandas as pd

df = pd.DataFrame({'a': ['GOTV', 'Persuasion', 'Likely Supporter', 
                         'GOTV', 'Persuasion', 'Persuasion+GOTV']})

df.a = pd.Categorical(df.a, 
                      categories=[""Likely Supporter"",""GOTV"",""Persuasion"",""Persuasion+GOTV""],
                      ordered=True)

print (df)
                  a
0              GOTV
1        Persuasion
2  Likely Supporter
3              GOTV
4        Persuasion
5   Persuasion+GOTV

print (df.a)
0                GOTV
1          Persuasion
2    Likely Supporter
3                GOTV
4          Persuasion
5     Persuasion+GOTV
Name: a, dtype: category
Categories (4, object): [Likely Supporter < GOTV < Persuasion < Persuasion+GOTV]"
1007,sort dataframe `jdf` by the values of column 'scores',False,False,26,"df.sort_values('a', inplace=True)
print (df)
                  a
2  Likely Supporter
0              GOTV
3              GOTV
1        Persuasion
4        Persuasion
5   Persuasion+GOTV"
1008,linear regressor 5 folder cross validation,False,True,12,"np.array([line for line in rs], axis=1)"
1009,linear regressor 5 folder cross validation,False,True,21,"np.array([(key, val) for key, val in list(data.items())])"
1010,linear regressor 5 folder cross validation,False,True,21,"np.array([(k, v) for k, v in list(mydict.items())])"
1011,linear regressor 5 folder cross validation,False,True,21,"np.array([(key, val) for key, val in list(np.items())])"
1012,linear regressor 5 folder cross validation,False,True,27,"np.array([(key, val) for key, val in list(itertools.product(*list(data.keys
    ())))])"
1013,linear regressor 5 folder cross validation,False,True,21,"np.array([(k, v) for k, v in list(data.items())])"
1014,linear regressor 5 folder cross validation,False,True,15,np.array([int(x) for x in rs.items()])
1015,linear regressor 5 folder cross validation,False,False,111,"# Doing linear regression with leave one out cross val

from sklearn import cross_validation, linear_model
import numpy as np

# Including this to remind you that it is necessary to use numpy arrays rather 
# than lists otherwise you will get an error
X_digits = np.array(x)
Y_digits = np.array(y)

loo = cross_validation.LeaveOneOut(len(Y_digits))

regr = linear_model.LinearRegression()

scores = cross_validation.cross_val_score(regr, X_digits, Y_digits, scoring='mean_squared_error', cv=loo,)

# This will print the mean of the list of errors that were output and 
# provide your metric for evaluation
print scores.mean()"
1016,linear regressor 5 folder cross validation,False,False,21,"In [15]: iris['data'].shape
Out[15]: (150, 4)"
1017,linear regressor 5 folder cross validation,True,False,100,"from sklearn.linear_model import LogisticRegression
from sklearn import metrics, cross_validation
from sklearn import datasets
iris = datasets.load_iris()
predicted = cross_validation.cross_val_predict(LogisticRegression(), iris['data'], iris['target'], cv=10)
print metrics.accuracy_score(iris['target'], predicted)

Out [1] : 0.9537

print metrics.classification_report(iris['target'], predicted) 

Out [2] :
                     precision    recall  f1-score   support

                0       1.00      1.00      1.00        50
                1       0.96      0.90      0.93        50
                2       0.91      0.96      0.93        50

      avg / total       0.95      0.95      0.95       150"
1018,linear regressor 5 folder cross validation,False,False,35,"from sklearn import metrics, cross_validation
logreg=LogisticRegression()
predicted = cross_validation.cross_val_predict(logreg, X, y, cv=10)
print metrics.accuracy_score(y, predicted)
print metrics.classification_report(y, predicted)"
1019,linear regressor 5 folder cross validation,False,False,27,"from sklearn.model_selection import cross_val_score
scores = cross_val_score(clf, X_Train, Y_Train, scoring=""neg_mean_squared_error"", cv=10)
rmse_scores = np.sqrt(-scores)"
1020,linear regressor 5 folder cross validation,False,False,38,"def display_scores(scores):
    print(""Scores:"", scores)
    print(""Mean:"", scores.mean())
    print(""Standard deviation:"", scores.std())"
1021,linear regressor 5 folder cross validation,False,False,11,y = np.arange(100) + np.random.rand(100)
1022,"sklearn cross validation x, y for 5 folds",False,True,8,"plt.DataFrame(data, values=1, axis=0)"
1023,"sklearn cross validation x, y for 5 folds",False,True,3,plt.utcnow()
1024,"sklearn cross validation x, y for 5 folds",False,True,6,"plt.DataFrame(data, **pair)"
1025,"sklearn cross validation x, y for 5 folds",False,True,18,"plt.DataFrame({'x': 1, 'y': 4}, **5)"
1026,"sklearn cross validation x, y for 5 folds",False,True,12,"plt.DataFrame((1, 2, 3), **kwargs)"
1027,"sklearn cross validation x, y for 5 folds",False,True,6,"plt.DataFrame(data, **values)"
1028,"sklearn cross validation x, y for 5 folds",False,True,21,"plt.DataFrame(data, values=[0, 1, 2, 3, 4, 5], **100)"
1029,"sklearn cross validation x, y for 5 folds",False,False,6,ps = PredefinedSplit(test_fold=your_test_fold)
1030,"sklearn cross validation x, y for 5 folds",False,False,22,"kf = cross_validation.KFold(4, n_folds=2)
mylist = list(kf)
train, test = mylist[0]"
1031,"sklearn cross validation x, y for 5 folds",False,False,93,"from sklearn.model_selection import KFold
import numpy as np

kf = KFold(n_splits=4)

X = np.array([[1, 2], [3, 4], [1, 2], [3, 4]])


X_train, X_test = next(kf.split(X))

In [12]: X_train
Out[12]: array([2, 3])

In [13]: X_test
Out[13]: array([0, 1])"
1032,"sklearn cross validation x, y for 5 folds",False,False,133,"# Code from https://github.com/cgnorthcutt/hypopt
# Assuming you already have train, test, val sets and a model.
from hypopt import GridSearch
param_grid = [
  {'C': [1, 10, 100], 'kernel': ['linear']},
  {'C': [1, 10, 100], 'gamma': [0.001, 0.0001], 'kernel': ['rbf']},
 ]
# Grid-search all parameter combinations using a validation set.
opt = GridSearch(model = SVR(), param_grid = param_grid)
opt.fit(X_train, y_train, X_val, y_val)
print('Test Score for Optimized Parameters:', opt.score(X_test, y_test))"
1033,"sklearn cross validation x, y for 5 folds",False,False,28,"scores=parallel(delayed(_fit_and_score)(clone(estimator),X,y,scorer,
                                        train,test,verbose,None,fit_params)"
1034,"sklearn cross validation x, y for 5 folds",True,False,58,"from sklearn.svm import SVC
from sklearn.datasets import load_iris
from sklearn.model_selection import cross_validate
iris = load_iris()
scoring = ['precision', 'recall', 'f1']
clf = SVC(kernel='linear', C=1, random_state=0)
scores = cross_validate(clf, iris.data, iris.target == 1, cv=5,
                        scoring=scoring, return_train_score=False)"
1035,"sklearn cross validation x, y for 5 folds",False,False,44,"if not isinstance(score, numbers.Number):
        raise ValueError(""scoring must return a number, got %s (%s)""
                         "" instead."" % (str(score), type(score)))"
1036,set numpy random seed to 0,False,True,13,"random.sample(random.random(), random.randint(0, 2))"
1037,set numpy random seed to 0,False,True,12,"random.sample(numpy.arange(len(seed)), 2)"
1038,set numpy random seed to 0,False,True,8,"random.sample(random.random(), 2)"
1039,set numpy random seed to 0,False,True,9,"random.choice(numpy.tile(seed, 2))"
1040,set numpy random seed to 0,False,True,9,"random.sample(random.randint(0), 3)"
1041,set numpy random seed to 0,False,True,12,"random.sample(numpy.arange(random.randint(0)), 2)"
1042,set numpy random seed to 0,False,True,15,"random.sample(numpy.arange(len(seed)), random.randint(0))"
1043,set numpy random seed to 0,True,False,48,">>> numpy.random.seed(0) ; numpy.random.rand(4)
array([ 0.55,  0.72,  0.6 ,  0.54])
>>> numpy.random.seed(0) ; numpy.random.rand(4)
array([ 0.55,  0.72,  0.6 ,  0.54])"
1044,set numpy random seed to 0,False,False,38,">>> numpy.random.rand(4)
array([ 0.42,  0.65,  0.44,  0.89])
>>> numpy.random.rand(4)
array([ 0.96,  0.38,  0.79,  0.53])"
1045,set numpy random seed to 0,False,False,163,">>> import numpy as np
>>> np.random.seed(0) 
>>> perm = np.random.permutation(10) 
>>> print perm 
[2 8 4 9 1 6 7 3 0 5]
>>> np.random.seed(0) 
>>> print np.random.permutation(10) 
[2 8 4 9 1 6 7 3 0 5]
>>> np.random.seed(0) 
>>> print np.random.permutation(10) 
[2 8 4 9 1 6 7 3 0 5]
>>> np.random.seed(0) 
>>> print np.random.permutation(10) 
[2 8 4 9 1 6 7 3 0 5]
>>> np.random.seed(0) 
>>> print np.random.rand(4) 
[0.5488135  0.71518937 0.60276338 0.54488318]
>>> np.random.seed(0) 
>>> print np.random.rand(4) 
[0.5488135  0.71518937 0.60276338 0.54488318]"
1046,set numpy random seed to 0,False,False,135,">>> import numpy as np
>>> np.random.seed(0) 
>>> perm = np.random.permutation(10)
>>> print perm 
[2 8 4 9 1 6 7 3 0 5]
>>> np.random.seed(0) 
>>> print np.random.permutation(10)
[2 8 4 9 1 6 7 3 0 5]
>>> print np.random.permutation(10) 
[3 5 1 2 9 8 0 6 7 4]
>>> print np.random.permutation(10) 
[2 3 8 4 5 1 0 6 9 7]
>>> print np.random.rand(4) 
[0.64817187 0.36824154 0.95715516 0.14035078]
>>> print np.random.rand(4) 
[0.87008726 0.47360805 0.80091075 0.52047748]"
1047,set numpy random seed to 0,False,False,8,np.random.RandomState(seed=42).permutation(10)
1048,set numpy random seed to 0,False,False,41,"import numpy as np
from scipy.stats import pareto
b = 0.9
np.random.seed(seed=233423)
print pareto.rvs(b, loc=0, scale=1, size=5)
np.random.seed(seed=233423)
print pareto.rvs(b, loc=0, scale=1, size=5)"
1049,set numpy random seed to 0,False,False,8,"np.random.seed(42)
np.random.permutation(10)"
1050,datetime,False,True,17,"datetime.datetime.strptime('<unk>', '%d%b%Y')"
1051,datetime,True,True,25,"datetime.datetime.strptime('<unk>', '%Y-%m-%dT%H:%M:%S')"
1052,datetime,False,True,18,"datetime.datetime.strptime('<unk>', '%B %d, %Y')"
1053,datetime,False,True,16,"datetime.datetime.strptime('<unk>', '%a, %d')"
1054,datetime,False,True,6,time.mktime(datetime.datetime.now())
1055,datetime,False,True,30,"datetime.datetime.strptime('<unk>', '%a, %d %b %Y %H:%M:%S %Z')"
1056,datetime,False,True,5,now = datetime.datetime.now()
1057,datetime,False,False,38,">>> import datetime
>>> datetime.datetime.now()
datetime.datetime(2009, 1, 6, 15, 8, 24, 78915)

>>> print(datetime.datetime.now())
2009-01-06 15:08:24.789150"
1058,datetime,False,False,32,">>> datetime.datetime.now().time()
datetime.time(15, 8, 24, 78915)

>>> print(datetime.datetime.now().time())
15:08:24.789150"
1059,datetime,False,False,7,>>> from datetime import datetime
1060,datetime,False,False,6,datetime.datetime.now().date()
1061,datetime,False,False,38,">>> from time import gmtime, strftime
>>> strftime(""%Y-%m-%d %H:%M:%S"", gmtime())
'2009-01-05 22:14:39'"
1062,datetime,False,False,10,"for date in mylist :
    print str(date)"
1063,datetime,False,False,128,"import datetime
mylist = []
today = datetime.date.today()
mylist.append(today)
print mylist[0] # print the date object, not the container ;-)
2008-11-22

# It's better to always use str() because :

print ""This is a new day : "", mylist[0] # will work
>>> This is a new day : 2008-11-22

print ""This is a new day : "" + mylist[0] # will crash
>>> cannot concatenate 'str' and 'datetime.date' objects

print ""This is a new day : "" + str(mylist[0]) 
>>> This is a new day : 2008-11-22"
1064,get datetime,False,True,3,datetime.datetime.now()
1065,get datetime,False,True,4,datetime.datetime.now().year
1066,get datetime,False,True,1,datetime.datetime.now
1067,get datetime,False,True,4,datetime.datetime.now().microsecond
1068,get datetime,False,True,17,"datetime.datetime.strptime('<unk>', '%d%b%Y')"
1069,get datetime,False,True,1,datetime.datetime.datetime
1070,get datetime,False,True,4,datetime.datetime.now().text
1071,get datetime,False,False,38,">>> import datetime
>>> datetime.datetime.now()
datetime.datetime(2009, 1, 6, 15, 8, 24, 78915)

>>> print(datetime.datetime.now())
2009-01-06 15:08:24.789150"
1072,get datetime,False,False,32,">>> datetime.datetime.now().time()
datetime.time(15, 8, 24, 78915)

>>> print(datetime.datetime.now().time())
15:08:24.789150"
1073,get datetime,False,False,7,>>> from datetime import datetime
1074,get datetime,True,False,38,">>> from time import gmtime, strftime
>>> strftime(""%Y-%m-%d %H:%M:%S"", gmtime())
'2009-01-05 22:14:39'"
1075,get datetime,False,False,37,">>> import datetime
>>> datetime.datetime.today()
datetime.datetime(2012, 3, 23, 23, 24, 55, 173504)
>>> datetime.datetime.today().weekday()
4"
1076,get datetime,False,False,17,"import time
millis = int(round(time.time() * 1000))
print millis"
1077,get datetime,False,False,17,"import time

current_milli_time = lambda: int(round(time.time() * 1000))"
1078,time add,True,True,13,"datetime.datetime.now().time() + datetime.timedelta(days=1, hours=3)"
1079,time add,False,True,13,"datetime.datetime.now().time() + datetime.timedelta(days=1, hours=5)"
1080,time add,False,True,13,"datetime.datetime.now().time() - datetime.timedelta(days=1, hours=3)"
1081,time add,False,True,13,"datetime.datetime.now().time() - datetime.timedelta(days=1, hours=5)"
1082,time add,False,True,10,"datetime.datetime.now() - datetime.timedelta(days=1, hours=3)"
1083,time add,False,True,13,"datetime.datetime.now().time() - datetime.timedelta(days=1, hours=2)"
1084,time add,False,True,10,"datetime.datetime.now() + datetime.timedelta(days=1, hours=3)"
1085,time add,False,False,24,"import time

start = time.time()
print(""hello"")
end = time.time()
print(end - start)"
1086,time add,False,False,32,"from timeit import default_timer as timer

start = timer()
# ...
end = timer()
print(end - start) # Time in seconds, e.g. 5.38091952400282"
1087,time add,False,False,2,import datetime
1088,time add,False,False,23,"date_1 = datetime.datetime.strptime(start_date, ""%m/%d/%y"")

end_date = date_1 + datetime.timedelta(days=10)"
1089,time add,False,False,37,"import datetime
a = datetime.datetime(100,1,1,11,34,59)
b = a + datetime.timedelta(0,3) # days, seconds, then other fields.
print(a.time())
print(b.time())"
1090,time add,False,False,2,"11:34:59
11:35:02"
1091,time add,False,False,8,b = a + datetime.timedelta(seconds=3)
1092,format datetime,False,True,14,"""""""{:,}"""""".format(datetime)"
1093,format datetime,False,True,15,"""""""%m/%d/%Y"""""".format()"
1094,format datetime,False,True,22,"""""""mktime <unk> today"""""".strftime('%m/%d/%Y')"
1095,format datetime,False,True,22,"""""""mktime <unk> isoformat"""""".strftime('%m/%d/%Y')"
1096,format datetime,False,True,17,"""""""%m/%d/%Y"""""".format(isoformat='')"
1097,format datetime,False,True,15,"""""""{:,}"""""".format(isoformat='')"
1098,format datetime,False,True,15,"""""""mktime <unk> isoformat"""""".format(**dt)"
1099,format datetime,False,False,10,"for date in mylist :
    print str(date)"
1100,format datetime,False,False,128,"import datetime
mylist = []
today = datetime.date.today()
mylist.append(today)
print mylist[0] # print the date object, not the container ;-)
2008-11-22

# It's better to always use str() because :

print ""This is a new day : "", mylist[0] # will work
>>> This is a new day : 2008-11-22

print ""This is a new day : "" + mylist[0] # will crash
>>> cannot concatenate 'str' and 'datetime.date' objects

print ""This is a new day : "" + str(mylist[0]) 
>>> This is a new day : 2008-11-22"
1101,format datetime,False,False,26,"print today.strftime('We are the %d, %b %Y')
>>> 'We are the 22, Nov 2008'"
1102,format datetime,False,False,31,"print ""We are the {:%d, %b %Y}"".format(today)
>>> 'We are the 22, Nov 2008'"
1103,format datetime,False,False,22,"import datetime
f""{datetime.datetime.now():%Y-%m-%d}""
>>> '2017-06-15'"
1104,format datetime,False,False,18,"from datetime import datetime

datetime.today().strftime('%Y-%m-%d')"
1105,format datetime,True,False,22,datetime.today().strftime('%Y-%m-%d-%H:%M:%S')
1106,copy file,True,True,7,"shutil.copy2(file, 'rb')"
1107,copy file,False,True,6,"shutil.copy2(file, var_1)"
1108,copy file,False,True,6,"shutil.copy2(file, subdirname)"
1109,copy file,False,True,6,"shutil.copy2(file, out)"
1110,copy file,False,True,6,"shutil.copy2(file, stream)"
1111,copy file,False,True,6,"shutil.copy2(file, string)"
1112,copy file,False,True,6,"copyfile(file, var_1)"
1113,copy file,True,False,10,"from shutil import copyfile
copyfile(src, dst)"
1114,copy file,False,False,57,"┌──────────────────┬────────┬───────────┬───────┬────────────────┐
│     Function     │ Copies │   Copies  │Can use│   Destination  │
│                  │metadata│permissions│buffer │may be directory│
├──────────────────┼────────┼───────────┼───────┼────────────────┤
│shutil.copy       │   No   │    Yes    │   No  │      Yes       │
│shutil.copyfile   │   No   │     No    │   No  │       No       │
│shutil.copy2      │  Yes   │    Yes    │   No  │      Yes       │
│shutil.copyfileobj│   No   │     No    │  Yes  │       No       │
└──────────────────┴────────┴───────────┴───────┴────────────────┘"
1115,copy file,False,False,28,"import shutil
shutil.copy2('/src/dir/file.ext', '/dst/dir/newname.ext') # complete target filename given
shutil.copy2('/src/file.ext', '/dst/dir') # target filename is /dst/dir/file.ext"
1116,copy file,False,False,43,"import shutil, errno

def copyanything(src, dst):
    try:
        shutil.copytree(src, dst)
    except OSError as exc: # python >2.5
        if exc.errno == errno.ENOTDIR:
            shutil.copy(src, dst)
        else: raise"
1117,copy file,False,False,10,"import shutil
shutil.copy('/etc/hostname', '/var/tmp/testhostname')"
1118,copy file,False,False,6,"import os
import shutil
import subprocess"
1119,copy file,False,False,20,"shutil.copyfile(src_file, dest_file, *, follow_symlinks=True)

# example    
shutil.copyfile('source.txt', 'destination.txt')"
1120,readline encoding,False,True,3,sys.stdout.flush()
1121,readline encoding,False,True,5,buf.write('dog')
1122,readline encoding,False,True,5,var_1.write('str_2')
1123,readline encoding,False,True,5,lines.append('str_2')
1124,readline encoding,False,True,8,f.write('My <unk>')
1125,readline encoding,False,True,3,zip.stdout.flush()
1126,readline encoding,False,True,9,f.write('HTTP/1.0 200 <unk>')
1127,readline encoding,True,False,24,"import codecs
with codecs.open('unicode.rst', encoding='utf-8') as f:
    for line in f:
        print repr(line)"
1128,readline encoding,False,False,39,"with codecs.open('test', encoding='utf-8', mode='w+') as f:
    f.write(u'\u4500 blah blah blah\n')
    f.seek(0)
    print repr(f.readline()[:1])"
1129,readline encoding,False,False,34,">>> teststr
u'I don\xe2\x80\x98t like this'
>>> unicodedata.normalize('NFKD', teststr).encode('ascii', 'ignore')
'I donat like this'"
1130,readline encoding,False,False,13,"f = open('misc-notes.txt', encoding='utf-8', errors='ignore')"
1131,readline encoding,False,False,8,"your_string.decode('utf-8', 'replace')"
1132,readline encoding,False,False,8,"your_string.decode('utf-8', 'ignore')"
1133,readline encoding,False,False,21,"with open('evil_unicode.txt', 'r', errors='replace') as f:
    lines = f.readlines()"
1134,random,False,True,9,"random.choice(random.random.choice(random.choice), choice=None)"
1135,random,False,True,4,random.random.random(choice=random.random)
1136,random,False,True,4,random.random(choice=random.random)
1137,random,False,True,9,"random.choice(random.random.choice(random.random), choice=None)"
1138,random,False,True,16,"random.choice(random.random.choice(random.random.choice(random.random.
    choice, random.random)), choice=None)"
1139,random,False,True,10,random.random.random(random=random.choice(random.choice)).random()
1140,random,False,True,9,"random.choice(random.random.choice(random.choice), random=0.1)"
1141,random,True,False,31,"import random

foo = ['a', 'b', 'c', 'd', 'e']
print(random.choice(foo))"
1142,random,False,False,24,"import secrets

foo = ['battery', 'correct', 'horse', 'staple']
print(secrets.choice(foo))"
1143,random,False,False,14,"import random

secure_random = random.SystemRandom()
print(secure_random.choice(foo))"
1144,random,False,False,11,"from random import randrange
print(randrange(10))"
1145,random,False,False,9,"import random
print(random.randint(0,9))"
1146,random,False,False,6,"random.randint(a, b)"
1147,random,False,False,7,bool(random.getrandbits(1))
1148,random,False,True,9,"random.choice(random.random.choice(random.choice), choice=None)"
1149,random,False,True,4,random.random.random(choice=random.random)
1150,random,False,True,4,random.random(choice=random.random)
1151,random,False,True,9,"random.choice(random.random.choice(random.random), choice=None)"
1152,random,False,True,16,"random.choice(random.random.choice(random.random.choice(random.random.
    choice, random.random)), choice=None)"
1153,random,False,True,10,random.random.random(random=random.choice(random.choice)).random()
1154,random,False,True,9,"random.choice(random.random.choice(random.choice), random=0.1)"
1155,random,True,False,31,"import random

foo = ['a', 'b', 'c', 'd', 'e']
print(random.choice(foo))"
1156,random,False,False,24,"import secrets

foo = ['battery', 'correct', 'horse', 'staple']
print(secrets.choice(foo))"
1157,random,False,False,14,"import random

secure_random = random.SystemRandom()
print(secure_random.choice(foo))"
1158,random,False,False,11,"from random import randrange
print(randrange(10))"
1159,random,False,False,9,"import random
print(random.randint(0,9))"
1160,random,False,False,6,"random.randint(a, b)"
1161,random,False,False,53,"import random
group_of_items = {1, 2, 3, 4}               # a sequence or set will work here.
num_to_select = 2                           # set the number to select here.
list_of_random_items = random.sample(group_of_items, num_to_select)
first_random_item = list_of_random_items[0]
second_random_item = list_of_random_items[1]"
1162,random,False,True,9,"random.choice(random.random.choice(random.choice), choice=None)"
1163,random,False,True,4,random.random.random(choice=random.random)
1164,random,False,True,4,random.random(choice=random.random)
1165,random,False,True,9,"random.choice(random.random.choice(random.random), choice=None)"
1166,random,False,True,16,"random.choice(random.random.choice(random.random.choice(random.random.
    choice, random.random)), choice=None)"
1167,random,False,True,10,random.random.random(random=random.choice(random.choice)).random()
1168,random,False,True,9,"random.choice(random.random.choice(random.choice), random=0.1)"
1169,random,True,False,31,"import random

foo = ['a', 'b', 'c', 'd', 'e']
print(random.choice(foo))"
1170,random,False,False,24,"import secrets

foo = ['battery', 'correct', 'horse', 'staple']
print(secrets.choice(foo))"
1171,random,False,False,14,"import random

secure_random = random.SystemRandom()
print(secure_random.choice(foo))"
1172,random,False,False,11,"from random import randrange
print(randrange(10))"
1173,random,False,False,9,"import random
print(random.randint(0,9))"
1174,random,False,False,6,"random.randint(a, b)"
1175,random,False,False,7,bool(random.getrandbits(1))
1176,random characters,False,True,17,"random.choice(re.findall('<unk>', '<unk>'))"
1177,random characters,False,True,8,random.choice('<unk>')
1178,random characters,False,True,12,random.choice(''.join('<unk>'))
1179,random characters,False,True,9,"random.choice(string.maketrans('', ''))"
1180,random characters,False,True,8,random.choice(''.join(random))
1181,random characters,False,True,7,random.choice(string.split(''))
1182,random characters,False,True,13,"random.choice(string.maketrans('', '<unk>'))"
1183,random characters,False,False,31,"import random

foo = ['a', 'b', 'c', 'd', 'e']
print(random.choice(foo))"
1184,random characters,False,False,24,"import secrets

foo = ['battery', 'correct', 'horse', 'staple']
print(secrets.choice(foo))"
1185,random characters,False,False,14,"import random

secure_random = random.SystemRandom()
print(secure_random.choice(foo))"
1186,random characters,False,False,16,''.join(random.choice(string.ascii_uppercase + string.digits) for _ in range(N))
1187,random characters,False,False,11,"''.join(random.choices(string.ascii_uppercase + string.digits, k=N))"
1188,random characters,False,False,19,''.join(random.SystemRandom().choice(string.ascii_uppercase + string.digits) for _ in range(N))
1189,random characters,True,False,61,">>> import string
>>> import random
>>> def id_generator(size=6, chars=string.ascii_uppercase + string.digits):
...    return ''.join(random.choice(chars) for _ in range(size))
...
>>> id_generator()
'G5G74W'
>>> id_generator(3, ""6793YUIO"")
'Y3U'"
1190,defaultdict,False,True,9,print(sum(defaultdict.values()))
1191,defaultdict,False,True,9,print(sum(defaultdict.keys()))
1192,defaultdict,False,True,12,print(dict(list(defaultdict.var_1())))
1193,defaultdict,False,True,9,print(list(defaultdict.var_1()))
1194,defaultdict,False,True,6,"getattr(defaultdict, int)"
1195,defaultdict,False,True,9,dict(list(defaultdict.var_1()))
1196,defaultdict,False,True,15,print(sum(defaultdict.dumps(list(defaultdict.keys()))))
1197,defaultdict,False,False,9,defaultdict(lambda: defaultdict(int))
1198,defaultdict,False,False,34,"somedict = {}
print(somedict[3]) # KeyError

someddict = defaultdict(int)
print(someddict[3]) # print int(), thus 0"
1199,defaultdict,True,False,7,>>> from collections import defaultdict
1200,defaultdict,False,False,86,">>> d_int = defaultdict(int)
>>> d_list = defaultdict(list)
>>> def foo():
...     return 'default value'
... 
>>> d_foo = defaultdict(foo)
>>> d_int
defaultdict(<type 'int'>, {})
>>> d_list
defaultdict(<type 'list'>, {})
>>> d_foo
defaultdict(<function foo at 0x7f34a0a69578>, {})"
1201,defaultdict,False,False,47,">>> d_int = defaultdict(int, a=10, b=12, c=13)
>>> d_int
defaultdict(<type 'int'>, {'a': 10, 'c': 13, 'b': 12})"
1202,defaultdict,False,False,58,">>> kwargs = {'a':10,'b':12,'c':13}
>>> d_int = defaultdict(int, **kwargs)
>>> d_int
defaultdict(<type 'int'>, {'a': 10, 'c': 13, 'b': 12})"
1203,defaultdict,False,False,56,">>> d_int['a']
10
>>> d_int['d']
0
>>> d_int
defaultdict(<type 'int'>, {'a': 10, 'c': 13, 'b': 12, 'd': 0})"
1204,sort key of dict,True,True,17,"sorted(list(dict.items()), key=lambda x: x[1])"
1205,sort key of dict,False,True,20,"sorted(list(dict.items()), key=lambda x: x[1][0])"
1206,sort key of dict,False,True,20,"sorted(list(dict.items()), key=lambda tup: tup[1][0])"
1207,sort key of dict,False,True,24,"sorted(list(dict.items()), key=lambda x: x[1]['b'], reverse=True)"
1208,sort key of dict,False,True,17,"sorted(list(dict.items()), key=lambda tup: tup[1])"
1209,sort key of dict,False,True,15,"sorted(list(dict.items()), **operator.itemgetter('key'))"
1210,sort key of dict,False,True,16,"sorted(list(dict.items()), **iter(d.items()))"
1211,sort key of dict,False,False,68,"x = {1: 2, 3: 4, 4: 3, 2: 1, 0: 0}
{k: v for k, v in sorted(x.items(), key=lambda item: item[1])}
{0: 0, 2: 1, 1: 2, 4: 3, 3: 4}"
1212,sort key of dict,False,False,38,"import operator
x = {1: 2, 3: 4, 4: 3, 2: 1, 0: 0}
sorted_x = sorted(x.items(), key=operator.itemgetter(1))"
1213,sort key of dict,False,False,38,"import operator
x = {1: 2, 3: 4, 4: 3, 2: 1, 0: 0}
sorted_x = sorted(x.items(), key=operator.itemgetter(0))"
1214,sort key of dict,False,False,39,"x = {1: 2, 3: 4, 4: 3, 2: 1, 0: 0}
sorted_x = sorted(x.items(), key=lambda kv: kv[1])"
1215,sort key of dict,False,False,8,"import collections

sorted_dict = collections.OrderedDict(sorted_x)"
1216,sort key of dict,False,False,15,"newlist = sorted(list_to_be_sorted, key=lambda k: k['name'])"
1217,sort key of dict,False,False,16,"from operator import itemgetter
newlist = sorted(list_to_be_sorted, key=itemgetter('name'))"
1218,print list,False,True,19,"print('%s, <unk>' % (1, 2, 3))"
1219,print list,False,True,22,"print('<unk> %s, <unk>' % (1, 2, 3))"
1220,print list,True,True,10,"print('%s,' % my_list)"
1221,print list,False,True,12,print([x.strip() for x in list])
1222,print list,False,True,16,"print('%s, <unk>' % (display.max_columns,))"
1223,print list,False,True,4,concatenate.my_list(my_list)
1224,print list,False,True,14,print([x.split('=') for x in list])
1225,print list,False,False,7,"print(*myList, sep='\n')"
1226,print list,False,False,7,for p in myList: print p
1227,print list,False,False,12,print '\n'.join(str(p) for p in myList)
1228,print list,False,False,32,"mylist = ['x', 3, 'b']
print '[%s]' % ', '.join(map(str, mylist))"
1229,print list,False,False,34,"mylist = ['x', 3, 'b']
print('[%s]' % ', '.join(map(str, mylist)))"
1230,print list,False,False,7,"[x, 3, b]"
1231,print list,False,False,8,"from pprint import pprint
pprint(the_list)"
1232,print list elements,False,True,19,"print('%s, <unk>' % (1, 2, 3))"
1233,print list elements,False,True,17,"print('%s, <unk>' % (1, 3))"
1234,print list elements,False,True,22,"print('<unk> %s, <unk>' % (1, 2, 3))"
1235,print list elements,False,True,17,print([('%5.3f' % sublist) for sublist in my_list])
1236,print list elements,False,True,10,"print('%s,' % my_list)"
1237,print list elements,False,True,20,"print('<unk> %s, <unk>' % (1, 3))"
1238,print list elements,False,True,20,"print('<unk> %s, <unk>' % (i, j))"
1239,print list elements,True,False,7,"print(*myList, sep='\n')"
1240,print list elements,False,False,7,for p in myList: print p
1241,print list elements,False,False,12,print '\n'.join(str(p) for p in myList)
1242,print list elements,False,False,4,print(*L)
1243,print list elements,False,False,75,">>> L = [1, 2, 3, 4, 5]
>>> print(*L)
1 2 3 4 5
>>> print(*L, sep=', ')
1, 2, 3, 4, 5
>>> print(*L, sep=' -> ')
1 -> 2 -> 3 -> 4 -> 5"
1244,print list elements,False,False,26,"joined_string = ' '.join([str(v) for v in L])
print(joined_string)
# do other things with joined_string"
1245,print list elements,False,False,38,"from __future__ import print_function  # Py 2.6+; In Py 3k not needed

mylist = ['10', 12, '14']    # Note that 12 is an int

print(*mylist,sep='\n')"
1246,read all files under a folder,True,True,8,os.listdir('<unk>')
1247,read all files under a folder,False,True,3,os.getcwd()
1248,read all files under a folder,False,True,4,os.removedirs(__file__)
1249,read all files under a folder,False,True,4,os.removedirs(file_name)
1250,read all files under a folder,False,True,7,os.chdir(os.path.dirname(__file__))
1251,read all files under a folder,False,True,7,os.chdir(os.path.abspath(existGDBPath))
1252,read all files under a folder,False,True,6,print(os.getcwd())
1253,read all files under a folder,False,False,32,"from os import listdir
from os.path import isfile, join
onlyfiles = [f for f in listdir(mypath) if isfile(join(mypath, f))]"
1254,read all files under a folder,False,False,27,"from os import walk

f = []
for (dirpath, dirnames, filenames) in walk(mypath):
    f.extend(filenames)
    break"
1255,read all files under a folder,False,False,11,"import glob
print(glob.glob(""/home/adam/*.txt""))"
1256,read all files under a folder,False,False,10,"['/home/adam/file1.txt', '/home/adam/file2.txt', .... ]"
1257,read all files under a folder,False,False,29,"import os
 arr = os.listdir()
 print(arr)

 >>> ['$RECYCLE.BIN', 'work.txt', '3ebooks.txt', 'documents']"
1258,read all files under a folder,False,False,20,"import glob

txtfiles = []
for file in glob.glob(""*.txt""):
    txtfiles.append(file)"
1259,read all files under a folder,False,False,16,"import glob

mylist = [f for f in glob.glob(""*.txt"")]"
1260,open text file,True,True,27,"with open('file.txt', 'r') as f:
    f = f.open('open', 'r', encoding='utf-8')"
1261,open text file,True,True,27,"with open('file.txt', 'r') as f:
    f = f.open('file.txt', 'r', encoding='utf-8')"
1262,open text file,False,True,24,"with open('file.txt', 'r') as f:
    f = f.open('open', 'r')"
1263,open text file,False,True,18,"with open('file.txt', 'r') as f:
    f = f.readlines()"
1264,open text file,False,True,24,"with open('file.txt', 'r') as f:
    f = f.open('file.txt', 'r')"
1265,open text file,False,True,17,"with open(file, 'r') as f:
    write = f.read()"
1266,open text file,False,True,17,"with open(file, 'r') as f:
    write = f.readlines()"
1267,open text file,False,False,25,"with open('data.txt', 'r') as file:
    data = file.read().replace('\n', '')"
1268,open text file,False,False,18,"with open('data.txt', 'r') as myfile:
  data = myfile.read()"
1269,open text file,False,False,61,"# Read in the file
with open('file.txt', 'r') as file :
  filedata = file.read()

# Replace the target string
filedata = filedata.replace('ram', 'abcd')

# Write the file out again
with open('file.txt', 'w') as file:
  file.write(filedata)"
1270,open text file,False,False,36,"#!/usr/bin/env python3
import fileinput

with fileinput.FileInput(filename, inplace=True, backup='.bak') as file:
    for line in file:
        print(line.replace(text_to_search, replacement_text), end='')"
1271,open text file,False,False,40,"import urllib2  # the lib that handles the url stuff

data = urllib2.urlopen(target_url) # it's a file like object and works just like a file
for line in data: # files are iterable
    print line"
1272,open text file,False,False,12,"import urllib2

for line in urllib2.urlopen(target_url):
    print line"
1273,open text file,False,False,43,"import urllib2

data = urllib2.urlopen(""http://www.google.com"").read(20000) # read only 20 000 chars
data = data.split(""\n"") # then split it into lines

for line in data:
    print line"
1274,open text file,True,True,27,"with open('file.txt', 'r') as f:
    f = f.open('open', 'r', encoding='utf-8')"
1275,open text file,True,True,27,"with open('file.txt', 'r') as f:
    f = f.open('file.txt', 'r', encoding='utf-8')"
1276,open text file,False,True,24,"with open('file.txt', 'r') as f:
    f = f.open('open', 'r')"
1277,open text file,False,True,18,"with open('file.txt', 'r') as f:
    f = f.readlines()"
1278,open text file,False,True,24,"with open('file.txt', 'r') as f:
    f = f.open('file.txt', 'r')"
1279,open text file,False,True,17,"with open(file, 'r') as f:
    write = f.read()"
1280,open text file,False,True,17,"with open(file, 'r') as f:
    write = f.readlines()"
1281,open text file,False,False,43,"with open(filename) as f:
    content = f.readlines()
# you may also want to remove whitespace characters like `\n` at the end of each line
content = [x.strip() for x in content]"
1282,open text file,False,False,25,"with open('data.txt', 'r') as file:
    data = file.read().replace('\n', '')"
1283,open text file,False,False,14,"with open('filename') as f:
    lines = f.readlines()"
1284,open text file,False,False,20,"with open('filename') as f:
    lines = [line.rstrip() for line in f]"
1285,open text file,False,False,18,"with open('data.txt', 'r') as myfile:
  data = myfile.read()"
1286,open text file,False,False,23,"with open(""file.txt"") as file_in:
    lines = []
    for line in file_in:
        lines.append(line)"
1287,open text file,False,False,61,"# Read in the file
with open('file.txt', 'r') as file :
  filedata = file.read()

# Replace the target string
filedata = filedata.replace('ram', 'abcd')

# Write the file out again
with open('file.txt', 'w') as file:
  file.write(filedata)"
1288,copy file,True,True,7,"shutil.copy2(file, 'rb')"
1289,copy file,False,True,6,"shutil.copy2(file, var_1)"
1290,copy file,False,True,6,"shutil.copy2(file, subdirname)"
1291,copy file,False,True,6,"shutil.copy2(file, out)"
1292,copy file,False,True,6,"shutil.copy2(file, stream)"
1293,copy file,False,True,6,"shutil.copy2(file, string)"
1294,copy file,False,True,6,"copyfile(file, var_1)"
1295,copy file,True,False,10,"from shutil import copyfile
copyfile(src, dst)"
1296,copy file,False,False,57,"┌──────────────────┬────────┬───────────┬───────┬────────────────┐
│     Function     │ Copies │   Copies  │Can use│   Destination  │
│                  │metadata│permissions│buffer │may be directory│
├──────────────────┼────────┼───────────┼───────┼────────────────┤
│shutil.copy       │   No   │    Yes    │   No  │      Yes       │
│shutil.copyfile   │   No   │     No    │   No  │       No       │
│shutil.copy2      │  Yes   │    Yes    │   No  │      Yes       │
│shutil.copyfileobj│   No   │     No    │  Yes  │       No       │
└──────────────────┴────────┴───────────┴───────┴────────────────┘"
1297,copy file,False,False,28,"import shutil
shutil.copy2('/src/dir/file.ext', '/dst/dir/newname.ext') # complete target filename given
shutil.copy2('/src/file.ext', '/dst/dir') # target filename is /dst/dir/file.ext"
1298,copy file,False,False,43,"import shutil, errno

def copyanything(src, dst):
    try:
        shutil.copytree(src, dst)
    except OSError as exc: # python >2.5
        if exc.errno == errno.ENOTDIR:
            shutil.copy(src, dst)
        else: raise"
1299,copy file,False,False,10,"import shutil
shutil.copy('/etc/hostname', '/var/tmp/testhostname')"
1300,copy file,False,False,6,"import os
import shutil
import subprocess"
1301,copy file,False,False,20,"shutil.copyfile(src_file, dest_file, *, follow_symlinks=True)

# example    
shutil.copyfile('source.txt', 'destination.txt')"
1302,remove heading white space,False,True,13,"re.sub('<unk>', ' ', text)"
1303,remove heading white space,False,True,19,"re.sub(' <unk>', ' ', your_string).strip().strip()"
1304,remove heading white space,False,True,19,"re.sub('<unk>', ' ', your_string).strip().strip()"
1305,remove heading white space,False,True,21,"re.sub(' ?\\(\\w+\\)', ' ', s).strip().strip()"
1306,remove heading white space,False,True,19,"re.sub('<unk>', ' ', s).strip().strip()"
1307,remove heading white space,False,True,22,"str(re.sub('<unk>', ' ', s)).strip().strip()"
1308,remove heading white space,False,True,16,"re.sub('<unk>', ' ', your_string).strip()"
1309,remove heading white space,False,False,14,"sentence = ' hello  apple'
sentence.strip()
>>> 'hello  apple'"
1310,remove heading white space,False,False,18,"sentence = ' hello  apple'
sentence.replace("" "", """")
>>> 'helloapple'"
1311,remove heading white space,False,False,19,"sentence = ' hello  apple'
"" "".join(sentence.split())
>>> 'hello apple'"
1312,remove heading white space,False,False,13,"s = ""  \t a string example\t  ""
s = s.strip()"
1313,remove heading white space,False,False,5,s = s.rstrip()
1314,remove heading white space,True,False,5,s = s.lstrip()
1315,remove heading white space,False,False,8,s = s.strip(' \t\n\r')
1316,read csv file,True,True,14,"df = pd.read_csv('myfile.txt', sep=',', header=None)"
1317,read csv file,False,True,17,"df = pd.read_csv('<unk>', quotechar=',', header=None)"
1318,read csv file,False,True,17,"df = pd.read_csv('<unk>', sep=',', header=None)"
1319,read csv file,False,True,14,"df = pd.read_csv('myfile.txt', delimiter=',', header=None)"
1320,read csv file,False,True,17,"df = pd.read_csv('myfile.txt', quotechar=',', delimiter=',')"
1321,read csv file,False,True,12,"df = pd.read_csv('myfile.txt', quotechar=',')"
1322,read csv file,False,True,14,"df = pd.read_csv('myfile.txt', quotechar=',', header=None)"
1323,read csv file,False,False,73,"import csv

def getstuff(filename, criterion):
    with open(filename, ""rb"") as csvfile:
        datareader = csv.reader(csvfile)
        yield next(datareader)  # yield the header row
        count = 0
        for row in datareader:
            if row[3] == criterion:
                yield row
                count += 1
            elif count:
                # done when having read a consecutive series of rows 
                return"
1324,read csv file,False,False,121,"import csv
from itertools import dropwhile, takewhile

def getstuff(filename, criterion):
    with open(filename, ""rb"") as csvfile:
        datareader = csv.reader(csvfile)
        yield next(datareader)  # yield the header row
        # first row, plus any subsequent rows that match, then stop
        # reading altogether
        # Python 2: use `for row in takewhile(...): yield row` instead
        # instead of `yield from takewhile(...)`.
        yield from takewhile(
            lambda r: r[3] == criterion,
            dropwhile(lambda r: r[3] != criterion, datareader))
        return"
1325,read csv file,False,False,25,"def getdata(filename, criteria):
    for criterion in criteria:
        for row in getstuff(filename, criterion):
            yield row"
1326,read csv file,False,False,13,"for row in getdata(somefilename, sequence_of_criteria):
    # process row"
1327,read csv file,False,False,49,"import pandas as pd
print pd.read_csv('value.txt')

        Date    price  factor_1  factor_2
0  2012-06-11  1600.20     1.255     1.548
1  2012-06-12  1610.02     1.258     1.554
2  2012-06-13  1618.07     1.249     1.552
3  2012-06-14  1624.40     1.253     1.556
4  2012-06-15  1626.15     1.258     1.552
5  2012-06-16  1626.15     1.263     1.558
6  2012-06-17  1626.15     1.264     1.572"
1328,read csv file,False,False,52,"import csv

with open(""test.csv"", ""r"") as f:
    reader = csv.reader(f, delimiter=""\t"")
    for i, line in enumerate(reader):
        print 'line[{}] = {}'.format(i, line)"
1329,read csv file,False,False,98,"line[0] = ['Year:', 'Dec:', 'Jan:']
line[1] = ['1', '50', '60']
line[2] = ['2', '25', '50']
line[3] = ['3', '30', '30']
line[4] = ['4', '40', '20']
line[5] = ['5', '10', '10']"
1330,pandas dropnan,False,True,11,"df.apply(lambda x: x.tolist(), axis=1)"
1331,pandas dropnan,False,True,20,df['dropnan'] = df['dropnan'].apply(lambda x: x.tolist())
1332,pandas dropnan,False,True,17,df['dropnan'] = df['dropnan'] / df['dropnan']
1333,pandas dropnan,False,True,7,df['dropnan'] = 0
1334,pandas dropnan,False,True,17,df['dropnan'] = df['dropnan'] + df['dropnan']
1335,pandas dropnan,False,True,11,"df.apply(lambda x: x.tolist(), **True)"
1336,pandas dropnan,False,True,22,df['dropnan'] = df['dropnan'].apply(lambda x: x.tolist()) - 1
1337,pandas dropnan,False,False,97,"In [24]: df = pd.DataFrame(np.random.randn(10,3))

In [25]: df.iloc[::2,0] = np.nan; df.iloc[::4,1] = np.nan; df.iloc[::3,2] = np.nan;

In [26]: df
Out[26]:
          0         1         2
0       NaN       NaN       NaN
1  2.677677 -1.466923 -0.750366
2       NaN  0.798002 -0.906038
3  0.672201  0.964789       NaN
4       NaN       NaN  0.050742
5 -1.250970  0.030561 -2.678622
6       NaN  1.036043       NaN
7  0.049896 -0.308003  0.823295
8       NaN       NaN  0.637482
9 -0.310130  0.078891       NaN"
1338,pandas dropnan,False,False,37,"In [27]: df.dropna()     #drop all rows that have any NaN values
Out[27]:
          0         1         2
1  2.677677 -1.466923 -0.750366
5 -1.250970  0.030561 -2.678622
7  0.049896 -0.308003  0.823295"
1339,pandas dropnan,False,False,62,"In [28]: df.dropna(how='all')     #drop only if ALL columns are NaN
Out[28]:
          0         1         2
1  2.677677 -1.466923 -0.750366
2       NaN  0.798002 -0.906038
3  0.672201  0.964789       NaN
4       NaN       NaN  0.050742
5 -1.250970  0.030561 -2.678622
6       NaN  1.036043       NaN
7  0.049896 -0.308003  0.823295
8       NaN       NaN  0.637482
9 -0.310130  0.078891       NaN"
1340,pandas dropnan,False,False,57,"In [29]: df.dropna(thresh=2)   #Drop row if it does not have at least two values that are **not** NaN
Out[29]:
          0         1         2
1  2.677677 -1.466923 -0.750366
2       NaN  0.798002 -0.906038
3  0.672201  0.964789       NaN
5 -1.250970  0.030561 -2.678622
7  0.049896 -0.308003  0.823295
9 -0.310130  0.078891       NaN"
1341,pandas dropnan,True,False,63,"In [30]: df.dropna(subset=[1])   #Drop only if NaN in specific column (as asked in the question)
Out[30]:
          0         1         2
1  2.677677 -1.466923 -0.750366
2       NaN  0.798002 -0.906038
3  0.672201  0.964789       NaN
5 -1.250970  0.030561 -2.678622
6       NaN  1.036043       NaN
7  0.049896 -0.308003  0.823295
9 -0.310130  0.078891       NaN"
1342,pandas dropnan,False,False,13,df = df[df['EPS'].notna()]
1343,pandas dropnan,False,False,17,"import pandas as pd
df = df[pd.notnull(df['EPS'])]"
1344,pandas group by,False,True,12,df.groupby(pd.TimeGrouper(freq='<unk>'))
1345,pandas group by,False,True,18,df.groupby(df['x'].apply(lambda x: x.tolist()))
1346,pandas group by,False,True,27,"df.groupby(['A', '<unk>'])['id'].agg(lambda x: x.tolist())"
1347,pandas group by,False,True,12,df.groupby(df['product'].map(str))
1348,pandas group by,False,True,18,df.groupby(df['a'].map(lambda x: x.tolist()))
1349,pandas group by,False,True,13,df.groupby(df['x'].map(str))
1350,pandas group by,False,True,10,"df.groupby(['key', 'bar'])"
1351,pandas group by,False,False,64,"In [19]: type(g1)
Out[19]: pandas.core.frame.DataFrame

In [20]: g1.index
Out[20]: 
MultiIndex([('Alice', 'Seattle'), ('Bob', 'Seattle'), ('Mallory', 'Portland'),
       ('Mallory', 'Seattle')], dtype=object)"
1352,pandas group by,False,False,42,"In [21]: g1.add_suffix('_Count').reset_index()
Out[21]: 
      Name      City  City_Count  Name_Count
0    Alice   Seattle           1           1
1      Bob   Seattle           2           2
2  Mallory  Portland           2           2
3  Mallory   Seattle           1           1"
1353,pandas group by,True,False,55,"In [36]: DataFrame({'count' : df1.groupby( [ ""Name"", ""City""] ).size()}).reset_index()
Out[36]: 
      Name      City  count
0    Alice   Seattle      1
1      Bob   Seattle      2
2  Mallory  Portland      2
3  Mallory   Seattle      1"
1354,pandas group by,False,False,182,"In [1]: df = pd.DataFrame( {'a':['A','A','B','B','B','C'], 'b':[1,2,5,5,4,6]})
        df

Out[1]: 
   a  b
0  A  1
1  A  2
2  B  5
3  B  5
4  B  4
5  C  6

In [2]: df.groupby('a')['b'].apply(list)
Out[2]: 
a
A       [1, 2]
B    [5, 5, 4]
C          [6]
Name: b, dtype: object

In [3]: df1 = df.groupby('a')['b'].apply(list).reset_index(name='new')
        df1
Out[3]: 
   a        new
0  A     [1, 2]
1  B  [5, 5, 4]
2  C        [6]"
1355,pandas group by,False,False,44,"df.groupby(['Fruit','Name']).sum()

Out[31]: 
               Number
Fruit   Name         
Apples  Bob        16
        Mike        9
        Steve      10
Grapes  Bob        35
        Tom        87
        Tony       15
Oranges Bob        67
        Mike       57
        Tom        15
        Tony        1"
1356,pandas group by,False,False,19,"df.groupby(['Name', 'Fruit'])['Number'].agg('sum')"
1357,pandas group by,False,False,149,"import pandas as pd

df1 = pd.DataFrame({""Name"":[""Alice"", ""Bob"", ""Mallory"", ""Mallory"", ""Bob"" , ""Mallory""],
                    ""City"":[""Seattle"",""Seattle"",""Portland"",""Seattle"",""Seattle"",""Portland""]})
print df1
#
#       City     Name
#0   Seattle    Alice
#1   Seattle      Bob
#2  Portland  Mallory
#3   Seattle  Mallory
#4   Seattle      Bob
#5  Portland  Mallory
#
g1 = df1.groupby([""Name"", ""City""], as_index=False).count()
print g1
#
#                  City  Name
#Name    City
#Alice   Seattle      1     1
#Bob     Seattle      2     2
#Mallory Portland     2     2
#        Seattle      1     1
#"
1358,pandas output csv,False,True,14,"df = pd.read_csv('output', sep=',', header=None)"
1359,pandas output csv,False,True,8,"df = pd.DataFrame(df.columns, columns=df.index)"
1360,pandas output csv,False,True,16,"df = pd.read_csv('csv df executable', sep='.', index=None)"
1361,pandas output csv,False,True,8,"df = pd.DataFrame(df.columns, columns=df.columns)"
1362,pandas output csv,False,True,8,"df = pd.DataFrame(df.columns, index=df.index)"
1363,pandas output csv,False,True,14,"df = pd.read_csv('csv', sep=',', header=None)"
1364,pandas output csv,False,True,12,"df = pd.read_csv('csv df %z', header=None)"
1365,pandas output csv,True,False,7,"df.to_csv(file_name, sep='\t')"
1366,pandas output csv,False,False,10,"df.to_csv(file_name, sep='\t', encoding='utf-8')"
1367,pandas output csv,False,False,9,"df.to_csv(file_name, encoding='utf-8', index=False)"
1368,pandas output csv,False,False,8,"Color  Number
0   red     22
1  blue     10"
1369,pandas output csv,False,False,5,"Color,Number
red,22
blue,10"
1370,pandas output csv,False,False,10,",Color,Number
0,red,22
1,blue,10"
1371,pandas output csv,False,False,14,"df.to_csv(filename, date_format='%Y%m%d')"
1372,pandas to csv,False,True,10,"pd.concat([df1, df2], axis=1)"
1373,pandas to csv,True,True,10,"df.to_csv('<unk>', index=False)"
1374,pandas to csv,False,True,7,"df.to_csv('utf8', index=False)"
1375,pandas to csv,False,True,15,"df = pd.read_csv('<unk>', sep=',')"
1376,pandas to csv,False,True,7,"df.to_csv('index', index=False)"
1377,pandas to csv,False,True,12,df = pd.DataFrame(index=lambda x: x[1])
1378,pandas to csv,False,True,10,"pd.concat([df] * 5, ignore_index=True)"
1379,pandas to csv,False,False,7,"df.to_csv(file_name, sep='\t')"
1380,pandas to csv,False,False,10,"df.to_csv(file_name, sep='\t', encoding='utf-8')"
1381,pandas to csv,False,False,12,"df.to_csv('my_csv.csv', mode='a', header=False)"
1382,pandas to csv,False,False,19,"with open('my_csv.csv', 'a') as f:
    df.to_csv(f, header=False)"
1383,pandas to csv,False,False,8,",A,B,C
0,1,2,3
1,4,5,6"
1384,pandas to csv,False,False,89,"In [1]: df = pd.read_csv('foo.csv', index_col=0)

In [2]: df
Out[2]:
   A  B  C
0  1  2  3
1  4  5  6

In [3]: df + 6
Out[3]:
    A   B   C
0   7   8   9
1  10  11  12

In [4]: with open('foo.csv', 'a') as f:
             (df + 6).to_csv(f, header=False)"
1385,pandas to csv,False,False,10,",A,B,C
0,1,2,3
1,4,5,6
0,7,8,9
1,10,11,12"
1386,average by group pandas,False,True,17,"df.groupby(np.arange(len(df.columns)) // 2, axis=1).mean()"
1387,average by group pandas,True,True,15,df.groupby(np.arange(len(df.columns)) // 3).mean()
1388,average by group pandas,False,True,17,"df.groupby(np.arange(len(df)) // 2, axis=1).mean()"
1389,average by group pandas,False,True,17,"df.groupby(np.arange(len(pandas)) // 2, axis=1).mean()"
1390,average by group pandas,False,True,17,df.groupby(np.arange(len(df.columns)) // 2 / 2).mean()
1391,average by group pandas,False,True,14,"df.groupby(np.arange(len(df.columns)) // 2, axis=1)"
1392,average by group pandas,False,True,15,df.groupby(np.arange(len(df.columns)) // 2).mean()
1393,average by group pandas,False,False,13,"df.groupby(['col1','col2']).size()"
1394,average by group pandas,False,False,18,"df.groupby(['col1', 'col2']).size().reset_index(name='counts')"
1395,average by group pandas,False,False,87,"In [2]: df
Out[2]: 
  col1 col2  col3  col4  col5  col6
0    A    B  0.20 -0.61 -0.49  1.49
1    A    B -1.53 -1.01 -0.39  1.82
2    A    B -0.44  0.27  0.72  0.11
3    A    B  0.28 -1.32  0.38  0.18
4    C    D  0.12  0.59  0.81  0.66
5    C    D -0.13 -1.65 -1.64  0.50
6    C    D -1.42 -0.11 -0.18 -0.44
7    E    F -0.00  1.42 -0.26  1.17
8    E    F  0.91 -0.47  1.35 -0.34
9    G    H  1.48 -0.63 -1.14  0.17"
1396,average by group pandas,False,False,40,"In [3]: df.groupby(['col1', 'col2']).size()
Out[3]: 
col1  col2
A     B       4
C     D       3
E     F       2
G     H       1
dtype: int64"
1397,average by group pandas,False,False,47,"In [4]: df.groupby(['col1', 'col2']).size().reset_index(name='counts')
Out[4]: 
  col1 col2  counts
0    A    B       4
1    C    D       3
2    E    F       2
3    G    H       1"
1398,average by group pandas,False,False,99,"In [5]: (df
   ...: .groupby(['col1', 'col2'])
   ...: .agg({
   ...:     'col3': ['mean', 'count'], 
   ...:     'col4': ['median', 'min', 'count']
   ...: }))
Out[5]: 
            col4                  col3      
          median   min count      mean count
col1 col2                                   
A    B    -0.810 -1.32     4 -0.372500     4
C    D    -0.110 -1.65     3 -0.476667     3
E    F     0.475 -0.47     2  0.455000     2
G    H    -0.630 -0.63     1  1.480000     1"
1399,average by group pandas,False,False,160,"In [6]: gb = df.groupby(['col1', 'col2'])
   ...: counts = gb.size().to_frame(name='counts')
   ...: (counts
   ...:  .join(gb.agg({'col3': 'mean'}).rename(columns={'col3': 'col3_mean'}))
   ...:  .join(gb.agg({'col4': 'median'}).rename(columns={'col4': 'col4_median'}))
   ...:  .join(gb.agg({'col4': 'min'}).rename(columns={'col4': 'col4_min'}))
   ...:  .reset_index()
   ...: )
   ...: 
Out[6]: 
  col1 col2  counts  col3_mean  col4_median  col4_min
0    A    B       4  -0.372500       -0.810     -1.32
1    C    D       3  -0.476667       -0.110     -1.65
2    E    F       2   0.455000        0.475     -0.47
3    G    H       1   1.480000       -0.630     -0.63"
1400,pandas round value,True,True,3,df.round()
1401,pandas round value,False,True,5,df.round(style='wb')
1402,pandas round value,False,True,4,df.round(1)
1403,pandas round value,False,True,4,df.round(axis=1)
1404,pandas round value,False,True,5,df.round('value')
1405,pandas round value,False,True,12,"df.apply(lambda x: x.round(1), axis=1)"
1406,pandas round value,False,True,4,df.round(10)
1407,pandas round value,False,False,50,"In [479]: df
Out[479]: 
         ID  birthyear    weight
0    619040       1962  0.123123
1    600161       1963  0.981742
2  25602033       1963  1.312312
3    624870       1987  0.942120

In [480]: df[""weight""].mean()
Out[480]: 0.83982437500000007"
1408,pandas round value,False,False,40,"In[2]: 
    df.value1 = df.value1.round()
    print df

Out[2]:
    item  value1  value2
    0    a       1     1.3
    1    a       2     2.5
    2    a       0     0.0
    3    b       3    -1.0
    4    b       5    -1.0"
1409,pandas round value,False,False,26,"decimals = 2    
df['column'] = df['column'].apply(lambda x: round(x, decimals))"
1410,pandas round value,False,False,8,df.round(0).astype(int)
1411,pandas round value,False,False,18,"data.mean().astype(int)  # Truncates mean to integer, e.g. 1.95 = 1"
1412,pandas round value,False,False,23,"data.mean().round(0)  # Rounds mean to nearest integer, e.g. 1.95 = 2 and 1.05 = 1"
1413,pandas round value,False,False,53,"df.round(2)
      0     1     2     3
0  0.06  0.67  0.77  0.71
1  0.80  0.56  0.97  0.15
2  0.03  0.59  0.11  0.95
3  0.33  0.19  0.46  0.92

df
          0         1         2         3
0  0.057116  0.669422  0.767117  0.708115
1  0.796867  0.557761  0.965837  0.147157
2  0.029647  0.593893  0.114066  0.950810
3  0.325707  0.193619  0.457812  0.920403"
1414,two deciaml place,False,True,10,any(i == 0 for i in 1)
1415,two deciaml place,False,True,11,sum(1 for i in range(3))
1416,two deciaml place,False,True,10,any(x == 0 for x in 1)
1417,two deciaml place,False,True,11,sum(1 for x in range(3))
1418,two deciaml place,False,True,17,"sum(1 for x in zip(a, b) if 2 in y)"
1419,two deciaml place,False,True,18,"sum(1 for x in zip(a, b) if a != 2)"
1420,two deciaml place,False,True,15,sum(1 for x in range(3) if x > 5)
1421,two deciaml place,False,False,130,">>> 125650429603636838/(2**53)
13.949999999999999

>>> 234042163/(2**24)
13.949999988079071

>>> a = 13.946
>>> print(a)
13.946
>>> print(""%.2f"" % a)
13.95
>>> round(a,2)
13.949999999999999
>>> print(""%.2f"" % round(a, 2))
13.95
>>> print(""{:.2f}"".format(a))
13.95
>>> print(""{:.2f}"".format(round(a, 2)))
13.95
>>> print(""{:.15f}"".format(round(a, 2)))
13.949999999999999"
1422,two deciaml place,True,False,10,"""{:.2f}"".format(13.949999999999999)"
1423,two deciaml place,False,False,13,"float(""{:.2f}"".format(13.949999999999999))"
1424,two deciaml place,False,False,64,">>> x = 13.949999999999999999
>>> x
13.95
>>> g = float(""{:.2f}"".format(x))
>>> g
13.95
>>> x == g
True
>>> h = round(x, 2)
>>> h
13.95
>>> x == h
True"
1425,two deciaml place,False,False,27,">>> from math import pi  # pi ~ 3.141592653589793
>>> '{0:.2f}'.format(pi)
'3.14'"
1426,two deciaml place,False,False,14,">>> f'{pi:.2f}'
'3.14'"
1427,two deciaml place,False,False,11,"answer = str(round(answer, 2))"
1428,pandas to csv decimal,False,True,10,"pd.concat([df1, df2], ignore_index=True)"
1429,pandas to csv decimal,False,True,10,"pd.concat([df1, df2], axis=1)"
1430,pandas to csv decimal,False,True,14,"pd.read_csv('<unk>', sep='\t', lineterminator='\r')"
1431,pandas to csv decimal,False,True,11,"pd.read_csv('<unk>', sep='\t')"
1432,pandas to csv decimal,False,True,10,"pd.concat([csv, df], ignore_index=True)"
1433,pandas to csv decimal,False,True,10,"pd.concat([df, df], ignore_index=True)"
1434,pandas to csv decimal,False,True,16,"pd.read_csv('<unk>', sep=',', lineterminator='\r')"
1435,pandas to csv decimal,False,False,37,"df_data['vals'] = df_data['vals'].map(lambda x: '%2.1f' % x)

df_data.to_csv(outfile, index=False, header=False, float_format='%11.6f')"
1436,pandas to csv decimal,True,False,36,"with open('foo.csv', 'w') as f:
    data.to_csv(f, index=True, header=True, decimal=',', sep=' ', float_format='%.3f')"
1437,pandas to csv decimal,False,False,27,"data.reset_index().to_csv('foo.csv', index=False, header=True, decimal=',', sep=' ', float_format='%.3f')"
1438,pandas to csv decimal,False,False,36,"import pandas as pd

df_in  = pd.read_csv(source_file, float_precision='round_trip')
df_out = ... # some processing of df_in
df_out.to_csv(target_file, float_format=""%.3f"") # for 3 decimal places"
1439,pandas to csv decimal,False,False,139,"import pandas as pd
import io
import decimal as D

temp = u""""""a,b,c,d
           1,1,1,1.0""""""

# after testing replace io.StringIO(temp) to filename
df = pd.read_csv(io.StringIO(temp), 
                 dtype={'a': int, 'b': float}, 
                 converters={'c': D.Decimal, 'd': D.Decimal})

print (df)
       a    b  c    d
    0  1  1.0  1  1.0

for i, v in df.iterrows():
    print(type(v.a), type(v.b), type(v.c), type(v.d))

    <class 'int'> <class 'float'> <class 'decimal.Decimal'> <class 'decimal.Decimal'>"
1440,pandas to csv decimal,False,False,27,df_data['vals'] = df_data['vals'].map(lambda x: '{0:.1}'.format(x))
1441,pandas to csv decimal,False,False,27,df_data['vals'] = df_data['vals'].map(lambda x: '{0:.1f}'.format(x))
1442,sort pandas dataframe,False,True,18,"df.sort_values(['A', '\\1\\2'], ascending=[True, False])"
1443,sort pandas dataframe,False,True,18,"df.sort_values(['A', '\\1'], ascending=[True, False])"
1444,sort pandas dataframe,False,True,19,"df.sort_values(['x', 'y'], ascending=[True, False])"
1445,sort pandas dataframe,False,True,18,"df.sort_values(['A', 'X2'], ascending=[True, False])"
1446,sort pandas dataframe,False,True,21,"df.sort_values(['x', 'y'], ascending=[True, False], inplace=True)"
1447,sort pandas dataframe,True,True,5,df.sort_values(by='*')
1448,sort pandas dataframe,False,True,8,df.sort_values(by='%d')
1449,sort pandas dataframe,False,False,19,"df.sort_values(['a', 'b'], ascending=[True, False])"
1450,sort pandas dataframe,False,False,19,"df.sort(['a', 'b'], ascending=[True, False])"
1451,sort pandas dataframe,False,False,92,"In [11]: df1 = pd.DataFrame(np.random.randint(1, 5, (10,2)), columns=['a','b'])

In [12]: df1.sort(['a', 'b'], ascending=[True, False])
Out[12]:
   a  b
2  1  4
7  1  3
1  1  2
3  1  2
4  3  2
6  4  4
0  4  3
9  4  3
5  4  1
8  4  1"
1452,sort pandas dataframe,False,False,21,"df1 = df1.sort(['a', 'b'], ascending=[True, False])"
1453,sort pandas dataframe,False,False,21,"df1.sort(['a', 'b'], ascending=[True, False], inplace=True)"
1454,sort pandas dataframe,False,False,67,"In [18]:
df.sort_values('2')

Out[18]:
        0          1     2
4    85.6    January   1.0
3    95.5   February   2.0
7   104.8      March   3.0
0   354.7      April   4.0
8   283.5        May   5.0
6   238.7       June   6.0
5   152.0       July   7.0
1    55.4     August   8.0
11  212.7  September   9.0
10  249.6    October  10.0
9   278.8   November  11.0
2   176.5   December  12.0"
1455,sort pandas dataframe,False,False,13,"final_df = df.sort_values(by=['2'], ascending=False)"
1456,group by range pandas,False,True,19,df.groupby(df.groupby(np.arange(len(group))).sum().unstack())
1457,group by range pandas,False,True,10,df.groupby(np.arange(len(group)))
1458,group by range pandas,False,True,19,df.groupby(df.groupby(['<unk>']).sum().unstack())
1459,group by range pandas,False,True,19,"df.groupby(df.groupby(['size', 'group']).sum().unstack())"
1460,group by range pandas,False,True,16,df.groupby(df.groupby(['size']).sum().unstack())
1461,group by range pandas,False,True,10,df.groupby(np.arange(len(df.loc)))
1462,group by range pandas,False,True,10,df.groupby(np.arange(len(df.columns)))
1463,group by range pandas,False,False,86,">>> df.groupby(pd.cut(df[""B""], np.arange(0, 1.0+0.155, 0.155))).sum()
                      A         B
B                                
(0, 0.155]     2.775458  0.246394
(0.155, 0.31]  1.123989  0.471618
(0.31, 0.465]  2.051814  1.882763
(0.465, 0.62]  2.277960  1.528492
(0.62, 0.775]  1.577419  2.810723
(0.775, 0.93]  0.535100  1.694955
(0.93, 1.085]       NaN       NaN

[7 rows x 2 columns]"
1464,group by range pandas,False,False,27,In [10]: df.groupby('indx').transform(lambda x: (x - x.mean()) / x.std())
1465,group by range pandas,False,False,87,">>> df[""rank""] = df.groupby(""group_ID"")[""value""].rank(""dense"", ascending=False)
>>> df
     group_ID item_ID  value  rank
0  0S00A1HZEy      AB     10     2
1  0S00A1HZEy      AY      4     3
2  0S00A1HZEy      AC     35     1
3  0S03jpFRaS      AY     90     1
4  0S03jpFRaS      A5      3     5
5  0S03jpFRaS      A3     10     2
6  0S03jpFRaS      A2      8     4
7  0S03jpFRaS      A4      9     3
8  0S03jpFRaS      A6      2     6
9  0S03jpFRaS      AX      0     7"
1466,group by range pandas,True,False,102,"np.random.seed(0)
df = pd.DataFrame({""a"": np.random.random_integers(1, high=100, size=100)})
ranges = [0,10,20,30,40,50,60,70,80,90,100]
df.groupby(pd.cut(df.a, ranges)).count()

            a
a            
(0, 10]    11
(10, 20]   10
(20, 30]    8
(30, 40]   13
(40, 50]   11
(50, 60]    9
(60, 70]   10
(70, 80]   11
(80, 90]   13
(90, 100]   4"
1467,group by range pandas,False,False,51,"def normalize_by_group(df, by):
    groups = df.groupby(by)
    # computes group-wise mean/std,
    # then auto broadcasts to size of group chunk
    mean = groups.transform(np.mean)
    std = groups.transform(np.std)
    return (df[mean.columns] - mean) / std"
1468,group by range pandas,False,False,89,"def gen_data(N, num_groups):
    m = 3
    data = np.random.normal(size=(N,m)) + np.random.normal(size=(N,m))**3
    indx = np.random.randint(0,num_groups,size=N).astype(np.int32)

    df = pd.DataFrame(np.hstack((data, indx[:,None])), 
                      columns=['a%s' % k for k in range(m)] + [ 'indx'])
    return df"
1469,group by range pandas,False,False,101,"In: df2g = gen_data(10000, 2)  # 3 cols, 10000 rows, 2 groups

In: %timeit normalize_by_group(df2g, ""indx"")
6.61 ms ± 72.8 µs per loop (mean ± std. dev. of 7 runs, 100 loops each)

In: %timeit df2g.groupby('indx').transform(lambda x: (x - x.mean()) / x.std())
12.3 ms ± 130 µs per loop (mean ± std. dev. of 7 runs, 100 loops each)"
1470,rename column pandas,True,True,13,"df.rename(columns={'row': 'row'}, inplace=True)"
1471,rename column pandas,False,True,13,"df.rename(columns={'value': 'value'}, inplace=True)"
1472,rename column pandas,False,True,13,"df.rename(columns={'columns': 'row'}, inplace=True)"
1473,rename column pandas,False,True,15,"df = df.rename(columns={'row': 'row'}, inplace=True)"
1474,rename column pandas,False,True,13,"df.rename(columns={'row': 'value'}, inplace=True)"
1475,rename column pandas,False,True,15,"df.rename(columns={'row': 'row'}, axis=1, inplace=True)"
1476,rename column pandas,False,True,28,"df['df'] = df['row'].rename(**{'row': 'row', 'row': 'row'})"
1477,rename column pandas,False,False,51,"df = df.rename(columns={'oldName1': 'newName1', 'oldName2': 'newName2'})
# Or rename the existing DataFrame (rather than creating a copy) 
df.rename(columns={'oldName1': 'newName1', 'oldName2': 'newName2'}, inplace=True)"
1478,rename column pandas,False,False,43,"df = pd.DataFrame('x', index=range(3), columns=list('abcde'))
df

   a  b  c  d  e
0  x  x  x  x  x
1  x  x  x  x  x
2  x  x  x  x  x"
1479,rename column pandas,False,False,102,"df2 = df.rename({'a': 'X', 'b': 'Y'}, axis=1)  # new method
df2 = df.rename({'a': 'X', 'b': 'Y'}, axis='columns')
df2 = df.rename(columns={'a': 'X', 'b': 'Y'})  # old method  

df2

   X  Y  c  d  e
0  x  x  x  x  x
1  x  x  x  x  x
2  x  x  x  x  x"
1480,rename column pandas,False,False,48,"df.rename({'a': 'X', 'b': 'Y'}, axis=1, inplace=True)
df

   X  Y  c  d  e
0  x  x  x  x  x
1  x  x  x  x  x
2  x  x  x  x  x"
1481,rename column pandas,False,False,54,"df2 = df.set_axis(['V', 'W', 'X', 'Y', 'Z'], axis=1, inplace=False)
df2

   V  W  X  Y  Z
0  x  x  x  x  x
1  x  x  x  x  x
2  x  x  x  x  x"
1482,rename column pandas,False,False,47,"df.columns = ['V', 'W', 'X', 'Y', 'Z']
df

   V  W  X  Y  Z
0  x  x  x  x  x
1  x  x  x  x  x
2  x  x  x  x  x"
1483,rename column pandas,False,False,53,">>> df = pd.DataFrame({'$a':[1,2], '$b': [10,20]})
>>> df.columns = ['a', 'b']
>>> df
   a   b
0  1  10
1  2  20"
1484,column to integer pandas,True,True,12,"df.apply(lambda row: int(row), axis=1)"
1485,column to integer pandas,False,True,10,"pd.DataFrame([column] * 5, axis=1)"
1486,column to integer pandas,False,True,19,"df.apply(lambda x: int(int(x)[-2:]), axis=1)"
1487,column to integer pandas,False,True,14,"df.apply(lambda row: int(row) - 1, axis=1)"
1488,column to integer pandas,False,True,14,"df.apply(lambda x: int(x, -1), axis=1)"
1489,column to integer pandas,False,True,12,"df.apply(lambda x: int(x), axis=1)"
1490,column to integer pandas,False,True,10,"pd.DataFrame([x] * 5, axis=1)"
1491,column to integer pandas,False,False,74,">>> s = pd.Series([""8"", 6, ""7.5"", 3, ""0.9""]) # mixed string and numeric values
>>> s
0      8
1      6
2    7.5
3      3
4    0.9
dtype: object

>>> pd.to_numeric(s) # convert everything to float values
0    8.0
1    6.0
2    7.5
3    3.0
4    0.9
dtype: float64"
1492,column to integer pandas,False,False,34,"# convert Series
my_series = pd.to_numeric(my_series)

# convert column ""a"" of a DataFrame
df[""a""] = pd.to_numeric(df[""a""])"
1493,column to integer pandas,False,False,58,"# convert all columns of DataFrame
df = df.apply(pd.to_numeric) # convert all columns of DataFrame

# convert just columns ""a"" and ""b""
df[[""a"", ""b""]] = df[[""a"", ""b""]].apply(pd.to_numeric)"
1494,column to integer pandas,False,False,44,">>> s = pd.Series(['1', '2', '4.7', 'pandas', '10'])
>>> s
0         1
1         2
2       4.7
3    pandas
4        10
dtype: object"
1495,column to integer pandas,False,False,22,">>> pd.to_numeric(s) # or pd.to_numeric(s, errors='raise')
ValueError: Unable to parse string"
1496,column to integer pandas,False,False,23,">>> pd.to_numeric(s, errors='coerce')
0     1.0
1     2.0
2     4.7
3     NaN
4    10.0
dtype: float64"
1497,column to integer pandas,False,False,17,">>> pd.to_numeric(s, errors='ignore')
# the original Series is returned untouched"
1498,import matplotlib,False,True,6,globals().set_trace()
1499,import matplotlib,False,True,12,"globals().myfile.txt(figsize=(1, 1))"
1500,import matplotlib,False,True,7,globals().reset_index(numpoints=1)
1501,import matplotlib,False,True,6,globals().plt()
1502,import matplotlib,False,True,6,globals().get_xydata()
1503,import matplotlib,False,True,12,"globals().myfile.txt(figsize=(1, 2))"
1504,import matplotlib,False,True,12,"globals().myfile.txt(figsize=(11.69, 8.27))"
1505,import matplotlib,False,False,4,sudo apt-get install python-matplotlib
1506,import matplotlib,False,False,3,pip install matplotlib
1507,import matplotlib,False,False,2,easy_install matplotlib
1508,import matplotlib,True,False,23,"from matplotlib import pyplot as plt

import matplotlib.pyplot as plt1

print(dir(plt) == dir(plt1))
True"
1509,import matplotlib,False,False,4,sudo apt-get install python-matplotlib
1510,import matplotlib,False,False,15,"import sys
sys.path.append(""<the install path here>"")
import pandas"
1511,import matplotlib,False,False,24,"lines = plt.plot(x, 'linear', 'g:+', x, 'square','r-o')"
1512,bar graph side by side,False,True,8,"graph.update((bar, bar))"
1513,bar graph side by side,False,True,3,graph.bar()
1514,bar graph side by side,False,True,14,"graph.update((bar[0], bar[0]))"
1515,bar graph side by side,False,True,4,graph.bar(*bar)
1516,bar graph side by side,False,True,10,"graph.update((bar, bar, bar))"
1517,bar graph side by side,False,True,21,"graph.update({'bar': ((1, 2), (-1, -1))})"
1518,bar graph side by side,False,True,14,"print((bar[0], bar[0]))"
1519,bar graph side by side,True,False,195,"import numpy as np
import matplotlib.pyplot as plt

N = 5
menMeans = (20, 35, 30, 35, 27)
menStd =   (2, 3, 4, 1, 2)

ind = np.arange(N)  # the x locations for the groups
width = 0.35       # the width of the bars

fig = plt.figure()
ax = fig.add_subplot(111)
rects1 = ax.bar(ind, menMeans, width, color='royalblue', yerr=menStd)

womenMeans = (25, 32, 34, 20, 25)
womenStd =   (3, 5, 2, 3, 3)
rects2 = ax.bar(ind+width, womenMeans, width, color='seagreen', yerr=womenStd)

# add some
ax.set_ylabel('Scores')
ax.set_title('Scores by group and gender')
ax.set_xticks(ind + width / 2)
ax.set_xticklabels( ('G1', 'G2', 'G3', 'G4', 'G5') )

ax.legend( (rects1[0], rects2[0]), ('Men', 'Women') )

plt.show()"
1520,bar graph side by side,False,False,108,"import numpy as np
import matplotlib.pyplot as plt

#The data
womenMeans = (25, 32, 34, 20, 25)
menMeans = (20, 35, 30, 35, 27)
indices = [5.5,6,7,8.5,8.9]
#Calculate optimal width
width = np.min(np.diff(indices))/3

fig = plt.figure()
ax = fig.add_subplot(111)
ax.bar(indices-width,womenMeans,width,color='b',label='-Ymin')
ax.bar(indices,menMeans,width,color='r',label='Ymax')
ax.set_xlabel('Test histogram')
plt.show()"
1521,bar graph side by side,False,False,149,"#
import numpy as np
import matplotlib.pyplot as plt

# The data
womenMeans = (25, 32, 34, 20, 25)
menMeans = (20, 35, 30, 35, 27)
indices = range(len(womenMeans))
names = ['Asian','European','North Amercian','African','Austrailian','Martian']
# Calculate optimal width
width = np.min(np.diff(indices))/3.

fig = plt.figure()
ax = fig.add_subplot(111)
ax.bar(indices-width/2.,womenMeans,width,color='b',label='-Ymin')
ax.bar(indices+width/2.,menMeans,width,color='r',label='Ymax')
#tiks = ax.get_xticks().tolist()
ax.axes.set_xticklabels(names)
ax.set_xlabel('Test histogram')
plt.show()"
1522,bar graph side by side,False,False,200,"# Numbers of pairs of bars you want
N = 3

# Data on X-axis

# Specify the values of blue bars (height)
blue_bar = (23, 25, 17)
# Specify the values of orange bars (height)
orange_bar = (19, 18, 14)

# Position of bars on x-axis
ind = np.arange(N)

# Figure size
plt.figure(figsize=(10,5))

# Width of a bar 
width = 0.3       

# Plotting
plt.bar(ind, blue_bar , width, label='Blue bar label')
plt.bar(ind + width, orange_bar, width, label='Orange bar label')

plt.ylabel('Here goes y-axis label')
plt.title('Here goes title of the plot')

# xticks()
# First argument - A list of positions at which ticks should be placed
# Second argument -  A list of labels to place at the given locations
plt.xticks(ind + width / 2, ('Xtick1', 'Xtick3', 'Xtick3'))

# Finding the best position for legends and putting it
plt.legend(loc='best')
plt.show()"
1523,bar graph side by side,False,False,43,"df_g = df.groupby(['Pclass', 'Sex'])['Survived'].agg([np.mean, lambda x: 1-np.mean(x)])
df_g.columns = ['Survived', 'Died']
df_g.plot.bar(stacked=True)"
1524,bar graph side by side,False,False,23,"df.groupby(['Pclass', 'Sex'])['Survived'].mean().unstack().plot.bar()"
1525,bar graph side by side,False,False,244,"import numpy as np
from matplotlib import ticker

df_g = df.groupby(['Pclass', 'Sex'])['Survived'].agg([np.mean, lambda x: 1-np.mean(x)])
df_g.columns = ['Survived', 'Died']
ax = df_g.plot.bar(stacked=True)

# Move back every second patch
for i in range(6):
    new_x = ax.patches[i].get_x() - (i%2)/2
    ax.patches[i].set_x(new_x)
    ax.patches[i+6].set_x(new_x)

# Update tick locations correspondingly
minor_tick_locs = [x.get_x()+1/4 for x in ax.patches[:6]]
major_tick_locs = np.array([x.get_x()+1/4 for x in ax.patches[:6]]).reshape(3, 2).mean(axis=1)
ax.set_xticks(minor_tick_locs, minor=True)
ax.set_xticks(major_tick_locs)

# Use indices from dataframe as tick labels
minor_tick_labels = df_g.index.levels[1][df_g.index.labels[1]].values
major_tick_labels = df_g.index.levels[0].values
ax.xaxis.set_ticklabels(minor_tick_labels, minor=True)
ax.xaxis.set_ticklabels(major_tick_labels)

# Remove ticks and organize tick labels to avoid overlap
ax.tick_params(axis='x', which='both', bottom='off')
ax.tick_params(axis='x', which='minor', rotation=45)
ax.tick_params(axis='x', which='major', pad=35, rotation=0)"
1526,pyplot subplots,False,True,6,"fig.subplots_adjust(wspace=0, hspace=0)"
1527,pyplot subplots,False,True,6,"plt.subplots_adjust(wspace=0, hspace=0)"
1528,pyplot subplots,False,True,6,"fig.subplots_adjust(**10, hspace=0)"
1529,pyplot subplots,True,True,8,"fig.add_subplot(1, 1, 1)"
1530,pyplot subplots,False,True,6,"fig.subplots_adjust(**10, wspace=0)"
1531,pyplot subplots,False,True,8,"fig.subplots_adjust(**10, wspace=0, hspace=0)"
1532,pyplot subplots,False,True,6,"fig.subplots_adjust(**10, **fig.fig)"
1533,pyplot subplots,False,False,8,"f.set_figheight(15)
f.set_figwidth(15)"
1534,pyplot subplots,False,False,13,"f, axs = plt.subplots(2,2,figsize=(15,15))"
1535,pyplot subplots,False,False,29,"import matplotlib.pyplot as plt

fig, axes = plt.subplots(nrows=4, ncols=4)
fig.tight_layout() # Or equivalently,  ""plt.tight_layout()""

plt.show()"
1536,pyplot subplots,False,False,14,"subplots_adjust(left=None, bottom=None, right=None, top=None, wspace=None, hspace=None)"
1537,pyplot subplots,False,False,78,"left  = 0.125  # the left side of the subplots of the figure
right = 0.9    # the right side of the subplots of the figure
bottom = 0.1   # the bottom of the subplots of the figure
top = 0.9      # the top of the subplots of the figure
wspace = 0.2   # the amount of width reserved for blank space between subplots
hspace = 0.2   # the amount of height reserved for white space between subplots"
1538,pyplot subplots,False,False,56,"import matplotlib.pyplot as plt
import numpy as np

fig=plt.figure()
data=np.arange(900).reshape((30,30))
for i in range(1,5):
    ax=fig.add_subplot(2,2,i)        
    ax.imshow(data)

fig.suptitle('Main title') # or plt.suptitle('Main title')
plt.show()"
1539,pyplot subplots,False,False,194,"import random
import matplotlib.pyplot as plt

x = range(1, 101)
y1 = [random.randint(1, 100) for _ in xrange(len(x))]
y2 = [random.randint(1, 100) for _ in xrange(len(x))]

fig = plt.figure()
ax = fig.add_subplot(111)    # The big subplot
ax1 = fig.add_subplot(211)
ax2 = fig.add_subplot(212)

# Turn off axis lines and ticks of the big subplot
ax.spines['top'].set_color('none')
ax.spines['bottom'].set_color('none')
ax.spines['left'].set_color('none')
ax.spines['right'].set_color('none')
ax.tick_params(labelcolor='w', top=False, bottom=False, left=False, right=False)

ax1.loglog(x, y1)
ax2.loglog(x, y2)

# Set common labels
ax.set_xlabel('common xlabel')
ax.set_ylabel('common ylabel')

ax1.set_title('ax1 title')
ax2.set_title('ax2 title')

plt.savefig('common_labels.png', dpi=300)"
1540,select row pandas,False,True,17,"df.loc[df['A'].isin([3, 6])]"
1541,select row pandas,False,True,16,"df.loc[df['row'].isin([3, 6])]"
1542,select row pandas,False,True,21,"df.loc[df['A'].isin(['A', 'B'])]"
1543,select row pandas,False,True,17,"df.join[df['A'].isin([3, 6])]"
1544,select row pandas,False,True,20,"df.loc[df['farm'].isin(['A', 'B'])]"
1545,select row pandas,False,True,21,"df.loc[df['select A'].isin(['A', 'B'])]"
1546,select row pandas,False,True,17,"df.loc[df['select A'].isin([3, 6])]"
1547,select row pandas,True,False,10,df.loc[df['column_name'] == some_value]
1548,select row pandas,False,False,12,df.loc[df['column_name'].isin(some_values)]
1549,select row pandas,False,False,24,df.loc[(df['column_name'] >= A) & (df['column_name'] <= B)]
1550,select row pandas,False,False,17,df['column_name'] >= A & df['column_name'] <= B
1551,select row pandas,False,False,19,df['column_name'] >= (A & df['column_name']) <= B
1552,select row pandas,False,False,11,df.loc[df['column_name'] != some_value]
1553,select row pandas,False,False,12,df.loc[~df['column_name'].isin(some_values)]
1554,random character between a and z,False,True,10,"re.findall('<unk>', z)"
1555,random character between a and z,False,True,16,"re.sub('<unk>', '<unk>', z)"
1556,random character between a and z,False,True,6,"random.randint(x, y)"
1557,random character between a and z,False,True,6,"random.randint(h, h)"
1558,random character between a and z,False,True,6,"random.randint(0, 1)"
1559,random character between a and z,False,True,6,"random.randint(h, n)"
1560,random character between a and z,False,True,6,"random.randint(0, 10)"
1561,random character between a and z,True,False,16,''.join(random.choice(string.ascii_uppercase + string.digits) for _ in range(N))
1562,random character between a and z,False,False,11,"''.join(random.choices(string.ascii_uppercase + string.digits, k=N))"
1563,random character between a and z,False,False,19,''.join(random.SystemRandom().choice(string.ascii_uppercase + string.digits) for _ in range(N))
1564,random character between a and z,False,False,61,">>> import string
>>> import random
>>> def id_generator(size=6, chars=string.ascii_uppercase + string.digits):
...    return ''.join(random.choice(chars) for _ in range(size))
...
>>> id_generator()
'G5G74W'
>>> id_generator(3, ""6793YUIO"")
'Y3U'"
1565,random character between a and z,False,False,18,">>> string.ascii_uppercase
'ABCDEFGHIJKLMNOPQRSTUVWXYZ'
>>> string.digits
'0123456789'
>>> string.ascii_uppercase + string.digits
'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'"
1566,random character between a and z,False,False,62,">>> range(4) # range create a list of 'n' numbers
[0, 1, 2, 3]
>>> ['elem' for _ in range(4)] # we use range to create 4 times 'elem'
['elem', 'elem', 'elem', 'elem']"
1567,random character between a and z,False,False,33,">>> random.choice(""abcde"")
'a'
>>> random.choice(""abcde"")
'd'
>>> random.choice(""abcde"")
'b'"
1568,random integer between 1 and 20,True,True,9,"print(random.randint(0, 9))"
1569,random integer between 1 and 20,False,True,9,"int(random.randint(0, 9))"
1570,random integer between 1 and 20,False,True,6,"random.randint(0, 9)"
1571,random integer between 1 and 20,False,True,11,"int(random.randint(0, 9), key=int)"
1572,random integer between 1 and 20,False,True,8,"int(random.random(), num=5)"
1573,random integer between 1 and 20,False,True,12,"int(random.randint(0, 9), key='isinstance')"
1574,random integer between 1 and 20,False,True,13,"int(''.join(random.randint(0, 9)))"
1575,random integer between 1 and 20,False,False,21,"Random number:    1  2  3  4  5  6  7  8
Result:           1  2  3  4  7  8  9 10"
1576,random integer between 1 and 20,False,False,23,"import random
numbers = range(a,b) + range(c,d)
r = random.choice(numbers)"
1577,random integer between 1 and 20,False,False,25,">>> import random
>>> random.uniform(-1, 1)
0.4779007751444888
>>> random.uniform(-1, 1)
-0.10028581710574902"
1578,random integer between 1 and 20,False,False,29,"def NormalWORange(a, b, sigma):
    r = random.normalvariate(a,sigma)
    if r < a:
        return r-b
    else:
        return r+b"
1579,random integer between 1 and 20,False,False,42,"def RangeWORange(a, b, c, d):
    r = random.randrange(c,d-2*b) # 2*b because two intervals of length b to exclude
    if r >= a-b:
        return r+2*b
    else:
        return r"
1580,random integer between 1 and 20,False,False,32,"def rand(exclude):
    r = None
    while r in exclude or r is None:
         r = random.randrange(1,10)
    return r

rand([1,3,9])"
1581,random integer between 1 and 20,False,False,10,return 1 if random.random() < 0.5 else -1
1582,print list as string,False,True,19,"print([''.join(map(str, s)) for s in input])"
1583,print list as string,False,True,26,"print(' '.join([str(' '.join(map(str, s))) for s in input]))"
1584,print list as string,False,True,17,print(' '.join([str(s) for s in l]))
1585,print list as string,False,True,19,"print([''.join(map(str, s)) for s in l])"
1586,print list as string,False,True,20,"print('\n'.join(' '.join(map(str, item)) for item in list))"
1587,print list as string,False,True,20,"print('<unk> %s, <unk>' % (name, value))"
1588,print list as string,False,True,20,"print('\n'.join('  '.join(map(str, item)) for item in list))"
1589,print list as string,True,False,22,"list1 = ['1', '2', '3']
str1 = ''.join(list1)"
1590,print list as string,False,False,23,"list1 = [1, 2, 3]
str1 = ''.join(str(e) for e in list1)"
1591,print list as string,False,False,29,">>> L = [1,2,3]       
>>> "" "".join(str(x) for x in L)
'1 2 3'"
1592,print list as string,False,False,32,"mylist = ['x', 3, 'b']
print '[%s]' % ', '.join(map(str, mylist))"
1593,print list as string,False,False,34,"mylist = ['x', 3, 'b']
print('[%s]' % ', '.join(map(str, mylist)))"
1594,print list as string,False,False,7,"[x, 3, b]"
1595,print list as string,False,False,58,">>> s = '{0} BLAH BLAH {1} BLAH {2} BLAH BLIH BLEH'
>>> x = ['1', '2', '3']
>>> print s.format(*x)
'1 BLAH BLAH 2 BLAH 3 BLAH BLIH BLEH'"
1596,trim heading whitespace,True,True,9,"re.sub('\\s+', '', string)"
1597,trim heading whitespace,False,True,12,"re.sub('\\s+', '', b).strip()"
1598,trim heading whitespace,False,True,9,"re.sub('\\s+', '', b)"
1599,trim heading whitespace,False,True,9,"re.sub('\\s+', '', text)"
1600,trim heading whitespace,False,True,14,"l = re.sub('\\s+', '', b).strip()"
1601,trim heading whitespace,False,True,13,"pattern = re.sub('\\s+', '', locale, flags=re.UNICODE)"
1602,trim heading whitespace,False,True,9,"re.sub('\\s+', '', your_string)"
1603,trim heading whitespace,False,False,48,">>> ' Hello '.strip()
'Hello'
>>> ' Hello'.strip()
'Hello'
>>> 'Bob has a cat'.strip()
'Bob has a cat'
>>> '   Hello   '.strip()  # ALL consecutive spaces at both ends removed
'Hello'"
1604,trim heading whitespace,False,False,48,"def strip_one_space(s):
    if s.endswith("" ""): s = s[:-1]
    if s.startswith("" ""): s = s[1:]
    return s

>>> strip_one_space(""   Hello "")
'  Hello'"
1605,trim heading whitespace,False,False,13,">>> ""  Hello\n"".strip("" "")
'Hello\n'"
1606,trim heading whitespace,False,False,14,"sentence = ' hello  apple'
sentence.strip()
>>> 'hello  apple'"
1607,trim heading whitespace,False,False,18,"sentence = ' hello  apple'
sentence.replace("" "", """")
>>> 'helloapple'"
1608,trim heading whitespace,False,False,19,"sentence = ' hello  apple'
"" "".join(sentence.split())
>>> 'hello apple'"
1609,trim heading whitespace,False,False,13,"s = ""  \t a string example\t  ""
s = s.strip()"
1610,normalize newlines to \n,True,True,8,os.path.chr().encode('utf-8')
1611,normalize newlines to \n,False,True,10,os.path.encode('utf-8').encode('utf-8')
1612,normalize newlines to \n,False,True,13,"os.path.replace('str_0', 'str_0').encode('utf-8')"
1613,normalize newlines to \n,False,True,13,os.path.chr(i.encode('utf-8')).encode('utf-8')
1614,normalize newlines to \n,False,True,8,datetime.datetime.now().encode('utf-8')
1615,normalize newlines to \n,False,True,10,os.path.quote('str_0').encode('utf-8')
1616,normalize newlines to \n,False,True,13,os.path.chr(i.rstrip('utf-8')).encode('utf-8')
1617,normalize newlines to \n,False,False,9,print('First line \n Second line')
1618,normalize newlines to \n,False,False,4,"First line
 Second line"
1619,normalize newlines to \n,False,False,17,"mytext = ""<br />"".join(mytext.split(""\n""))"
1620,normalize newlines to \n,False,False,12,"infile = open(""filename"", 'r')"
1621,normalize newlines to \n,False,False,11,"infile = open(""filename"", 'rt')"
1622,normalize newlines to \n,False,False,11,"infile = open(""filename"", 'rb')"
1623,normalize newlines to \n,False,False,11,"infile = open(""filename"", 'rU')"
1624,list of filenames from a folder,True,True,4,os.walk(filenames)
1625,list of filenames from a folder,False,True,9,"os.path.basename(os.path.join(var_1, filename))"
1626,list of filenames from a folder,False,True,11,os.path.basename(os.path.expanduser('<unk>'))
1627,list of filenames from a folder,False,True,7,os.path.basename(os.path.abspath(__file__))
1628,list of filenames from a folder,False,True,8,os.walk('<unk>')
1629,list of filenames from a folder,False,True,11,"open('file.txt', 'rb').read()"
1630,list of filenames from a folder,False,True,4,os.path.basename(var_1)
1631,list of filenames from a folder,False,False,32,"from os import listdir
from os.path import isfile, join
onlyfiles = [f for f in listdir(mypath) if isfile(join(mypath, f))]"
1632,list of filenames from a folder,False,False,27,"from os import walk

f = []
for (dirpath, dirnames, filenames) in walk(mypath):
    f.extend(filenames)
    break"
1633,list of filenames from a folder,False,False,11,"import glob
print(glob.glob(""/home/adam/*.txt""))"
1634,list of filenames from a folder,False,False,10,"['/home/adam/file1.txt', '/home/adam/file2.txt', .... ]"
1635,list of filenames from a folder,False,False,29,"import os
 arr = os.listdir()
 print(arr)

 >>> ['$RECYCLE.BIN', 'work.txt', '3ebooks.txt', 'documents']"
1636,list of filenames from a folder,False,False,20,"import glob

txtfiles = []
for file in glob.glob(""*.txt""):
    txtfiles.append(file)"
1637,list of filenames from a folder,False,False,16,"import glob

mylist = [f for f in glob.glob(""*.txt"")]"
1638,check length of line,False,True,7,len(len(line))
1639,check length of line,False,True,7,'line' in len(line)
1640,check length of line,False,True,7,len(set(line))
1641,check length of line,False,True,8,len(line.rstrip('\n'))
1642,check length of line,False,True,6,len(fileinput.input())
1643,check length of line,False,True,9,"'line' in range(0, 7)"
1644,check length of line,False,True,7,'black' in len(line)
1645,check length of line,True,False,18,"a = dostuff(blahblah1, blahblah2, blahblah3, blahblah4, blahblah5, 
            blahblah6, blahblah7)"
1646,check length of line,False,False,9,"if a == True and \
   b == False"
1647,check length of line,False,False,22,"a = '1' + '2' + '3' + \
    '4' + '5'"
1648,check length of line,False,False,23,"a = ('1' + '2' + '3' +
    '4' + '5')"
1649,check length of line,False,False,14,num_lines = sum(1 for line in open('myfile.txt'))
1650,check length of line,False,False,8,sum(1 for x in generator)
1651,check length of line,False,False,28,"with open('/path/to/some/file/you/want/to/read') as file_1, \
        open('/path/to/some/file/being/written', 'w') as file_2:
    file_2.write(file_1.read())"
1652,cross validation using logistic regression sklearn,False,True,3,plt.utcnow()
1653,cross validation using logistic regression sklearn,False,True,6,"plt.fit(X, y)"
1654,cross validation using logistic regression sklearn,False,True,8,"plt.yscale('log', nonposy='clip')"
1655,cross validation using logistic regression sklearn,False,True,5,plt.yscale('X2')
1656,cross validation using logistic regression sklearn,False,True,5,plt.yscale('log')
1657,cross validation using logistic regression sklearn,False,True,9,"plt.yscale('X', norm='X2')"
1658,cross validation using logistic regression sklearn,False,True,8,"plt.yscale('X', flt=None)"
1659,cross validation using logistic regression sklearn,False,False,15,"proba = cross_val_predict(logreg, X, y, cv=cv, method='predict_proba')"
1660,cross validation using logistic regression sklearn,False,False,4,from sklearn.model_selection import cross_val_predict
1661,cross validation using logistic regression sklearn,True,False,111,"# Doing linear regression with leave one out cross val

from sklearn import cross_validation, linear_model
import numpy as np

# Including this to remind you that it is necessary to use numpy arrays rather 
# than lists otherwise you will get an error
X_digits = np.array(x)
Y_digits = np.array(y)

loo = cross_validation.LeaveOneOut(len(Y_digits))

regr = linear_model.LinearRegression()

scores = cross_validation.cross_val_score(regr, X_digits, Y_digits, scoring='mean_squared_error', cv=loo,)

# This will print the mean of the list of errors that were output and 
# provide your metric for evaluation
print scores.mean()"
1662,cross validation using logistic regression sklearn,False,False,21,"class proba_logreg(LogisticRegression):
    def predict(self, X):
        return LogisticRegression.predict_proba(self, X)"
1663,cross validation using logistic regression sklearn,False,False,18,"# cross validation probabilities
probas = cross_val_predict(proba_logreg(), X, y, cv=cv)"
1664,cross validation using logistic regression sklearn,False,False,21,"In [15]: iris['data'].shape
Out[15]: (150, 4)"
1665,cross validation using logistic regression sklearn,False,False,100,"from sklearn.linear_model import LogisticRegression
from sklearn import metrics, cross_validation
from sklearn import datasets
iris = datasets.load_iris()
predicted = cross_validation.cross_val_predict(LogisticRegression(), iris['data'], iris['target'], cv=10)
print metrics.accuracy_score(iris['target'], predicted)

Out [1] : 0.9537

print metrics.classification_report(iris['target'], predicted) 

Out [2] :
                     precision    recall  f1-score   support

                0       1.00      1.00      1.00        50
                1       0.96      0.90      0.93        50
                2       0.91      0.96      0.93        50

      avg / total       0.95      0.95      0.95       150"
1666,generate random numbers,False,True,10,print(random.choice(range(10)))
1667,generate random numbers,False,True,6,"random.randint(0, 10)"
1668,generate random numbers,False,True,7,random.choice(range(10))
1669,generate random numbers,False,True,10,print(random.choice(range(100)))
1670,generate random numbers,True,True,6,"random.randint(0, 7)"
1671,generate random numbers,False,True,10,print(random.choice(range(9)))
1672,generate random numbers,False,True,9,"print(random.randint(0, 7))"
1673,generate random numbers,True,False,11,"from random import randrange
print(randrange(10))"
1674,generate random numbers,False,False,9,"import random
print(random.randint(0,9))"
1675,generate random numbers,False,False,6,"random.randint(a, b)"
1676,generate random numbers,False,False,26,">>> import random
>>> random.sample(range(1, 100), 3)
[77, 52, 45]"
1677,generate random numbers,False,False,38,">>> try:
...   random.sample(range(1, 2), 3)
... except ValueError:
...   print('Sample size exceeded population size.')
... 
Sample size exceeded population size"
1678,generate random numbers,False,False,8,"import random
random.uniform(0, 1)"
1679,generate random numbers,False,False,11,"import random
random.sample(range(100), 10)"
1680,generate random letters,False,True,10,print(random.choice(range(10)))
1681,generate random letters,False,True,12,print(random.choice(list(random.choice())))
1682,generate random letters,False,True,12,"print(random.choice(range(7, 7)))"
1683,generate random letters,False,True,13,print(random.choice(list(random.choice(letters))))
1684,generate random letters,False,True,9,"print(random.randint(0, 9))"
1685,generate random letters,False,True,12,"print(random.choice(range(7, 8)))"
1686,generate random letters,False,True,7,print(random.choice(letters))
1687,generate random letters,False,False,16,''.join(random.choice(string.ascii_uppercase + string.digits) for _ in range(N))
1688,generate random letters,True,False,11,"''.join(random.choices(string.ascii_uppercase + string.digits, k=N))"
1689,generate random letters,False,False,19,''.join(random.SystemRandom().choice(string.ascii_uppercase + string.digits) for _ in range(N))
1690,generate random letters,False,False,61,">>> import string
>>> import random
>>> def id_generator(size=6, chars=string.ascii_uppercase + string.digits):
...    return ''.join(random.choice(chars) for _ in range(size))
...
>>> id_generator()
'G5G74W'
>>> id_generator(3, ""6793YUIO"")
'Y3U'"
1691,generate random letters,False,False,18,">>> string.ascii_uppercase
'ABCDEFGHIJKLMNOPQRSTUVWXYZ'
>>> string.digits
'0123456789'
>>> string.ascii_uppercase + string.digits
'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'"
1692,generate random letters,False,False,62,">>> range(4) # range create a list of 'n' numbers
[0, 1, 2, 3]
>>> ['elem' for _ in range(4)] # we use range to create 4 times 'elem'
['elem', 'elem', 'elem', 'elem']"
1693,generate random letters,False,False,33,">>> random.choice(""abcde"")
'a'
>>> random.choice(""abcde"")
'd'
>>> random.choice(""abcde"")
'b'"
1694,generate random letters,False,True,10,print(random.choice(range(10)))
1695,generate random letters,False,True,12,print(random.choice(list(random.choice())))
1696,generate random letters,False,True,12,"print(random.choice(range(7, 7)))"
1697,generate random letters,False,True,13,print(random.choice(list(random.choice(letters))))
1698,generate random letters,False,True,9,"print(random.randint(0, 9))"
1699,generate random letters,False,True,12,"print(random.choice(range(7, 8)))"
1700,generate random letters,False,True,7,print(random.choice(letters))
1701,generate random letters,False,False,16,''.join(random.choice(string.ascii_uppercase + string.digits) for _ in range(N))
1702,generate random letters,True,False,11,"''.join(random.choices(string.ascii_uppercase + string.digits, k=N))"
1703,generate random letters,False,False,19,''.join(random.SystemRandom().choice(string.ascii_uppercase + string.digits) for _ in range(N))
1704,generate random letters,False,False,61,">>> import string
>>> import random
>>> def id_generator(size=6, chars=string.ascii_uppercase + string.digits):
...    return ''.join(random.choice(chars) for _ in range(size))
...
>>> id_generator()
'G5G74W'
>>> id_generator(3, ""6793YUIO"")
'Y3U'"
1705,generate random letters,False,False,18,">>> string.ascii_uppercase
'ABCDEFGHIJKLMNOPQRSTUVWXYZ'
>>> string.digits
'0123456789'
>>> string.ascii_uppercase + string.digits
'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'"
1706,generate random letters,False,False,62,">>> range(4) # range create a list of 'n' numbers
[0, 1, 2, 3]
>>> ['elem' for _ in range(4)] # we use range to create 4 times 'elem'
['elem', 'elem', 'elem', 'elem']"
1707,generate random letters,False,False,33,">>> random.choice(""abcde"")
'a'
>>> random.choice(""abcde"")
'd'
>>> random.choice(""abcde"")
'b'"
1708,get current datetime,False,True,3,datetime.datetime.now()
1709,get current datetime,False,True,6,datetime.datetime.now().datetime()
1710,get current datetime,False,True,6,datetime.datetime.now().date()
1711,get current datetime,False,True,14,datetime.datetime.now().strftime('%Y-%m-%d')
1712,get current datetime,False,True,6,datetime.datetime.now().isoformat()
1713,get current datetime,False,True,16,datetime.datetime.now().strftime('%H:%M:%S')
1714,get current datetime,False,True,6,datetime.datetime.now().total_seconds()
1715,get current datetime,True,False,38,">>> import datetime
>>> datetime.datetime.now()
datetime.datetime(2009, 1, 6, 15, 8, 24, 78915)

>>> print(datetime.datetime.now())
2009-01-06 15:08:24.789150"
1716,get current datetime,False,False,32,">>> datetime.datetime.now().time()
datetime.time(15, 8, 24, 78915)

>>> print(datetime.datetime.now().time())
15:08:24.789150"
1717,get current datetime,False,False,7,>>> from datetime import datetime
1718,get current datetime,False,False,38,">>> from time import gmtime, strftime
>>> strftime(""%Y-%m-%d %H:%M:%S"", gmtime())
'2009-01-05 22:14:39'"
1719,get current datetime,False,False,37,">>> import datetime
>>> datetime.datetime.today()
datetime.datetime(2012, 3, 23, 23, 24, 55, 173504)
>>> datetime.datetime.today().weekday()
4"
1720,get current datetime,False,False,26,"from datetime import datetime
datetime.now().strftime('%Y-%m-%d %H:%M:%S')"
1721,get current datetime,False,False,18,"from datetime import datetime

datetime.today().strftime('%Y-%m-%d')"
1722,add a week to a datetime,False,True,18,"datetime.datetime.strptime('January 11, 2010', '%B %d, %Y')"
1723,add a week to a datetime,False,True,16,"datetime.datetime.combine(datetime.date.today(), '%B %d, %Y')"
1724,add a week to a datetime,False,True,6,datetime.datetime.combine(datetime.date.today())
1725,add a week to a datetime,False,True,19,"datetime.datetime.strptime('January 11, 2010', '%Y, <unk> %w')"
1726,add a week to a datetime,False,True,25,"datetime.datetime.strptime('January 11, 2010', '%B %d, %Y').strftime('%a')"
1727,add a week to a datetime,False,True,16,"datetime.datetime.strptime('1/1/2014', '%B %d, %Y')"
1728,add a week to a datetime,False,True,9,"datetime.datetime.combine('January 2010 2010', 1)"
1729,add a week to a datetime,False,False,37,">>> import datetime
>>> datetime.datetime.today()
datetime.datetime(2012, 3, 23, 23, 24, 55, 173504)
>>> datetime.datetime.today().weekday()
4"
1730,add a week to a datetime,False,False,2,import datetime
1731,add a week to a datetime,True,False,23,"date_1 = datetime.datetime.strptime(start_date, ""%m/%d/%y"")

end_date = date_1 + datetime.timedelta(days=10)"
1732,add a week to a datetime,False,False,37,"import datetime
a = datetime.datetime(100,1,1,11,34,59)
b = a + datetime.timedelta(0,3) # days, seconds, then other fields.
print(a.time())
print(b.time())"
1733,add a week to a datetime,False,False,2,"11:34:59
11:35:02"
1734,add a week to a datetime,False,False,8,b = a + datetime.timedelta(seconds=3)
1735,add a week to a datetime,False,False,62,"import datetime

def addSecs(tm, secs):
    fulldate = datetime.datetime(100, 1, 1, tm.hour, tm.minute, tm.second)
    fulldate = fulldate + datetime.timedelta(seconds=secs)
    return fulldate.time()

a = datetime.datetime.now().time()
b = addSecs(a, 300)
print(a)
print(b)"
1736,convert date timezone,False,True,10,"datetime.datetime.combine(datetime.date.today(), datetime.now())"
1737,convert date timezone,False,True,10,"datetime.datetime.combine(datetime.datetime.now(), datetime.now())"
1738,convert date timezone,False,True,17,"datetime.datetime.combine(datetime.datetime.now(), '%H:%M:%S')"
1739,convert date timezone,False,True,16,datetime.datetime.now().strftime('%H:%M:%S')
1740,convert date timezone,False,True,11,"datetime.datetime.combine(datetime.date.today(), datetime.timedelta(hours=3))"
1741,convert date timezone,False,True,20,"time.strftime('%H:%M:%S', time.gmtime(datetime.time.now()))"
1742,convert date timezone,False,True,6,datetime.datetime.combine(datetime.datetime.now())
1743,convert date timezone,False,False,12,"import datetime
datetime.datetime.now().isoformat()
>>> 2020-03-20T14:28:23.382748"
1744,convert date timezone,False,False,12,"import datetime
datetime.datetime.utcnow().isoformat()
>>> 2020-03-20T01:30:08.180856"
1745,convert date timezone,False,False,16,"import datetime
datetime.datetime.now().replace(microsecond=0).isoformat()
>>> 2020-03-20T14:30:43"
1746,convert date timezone,True,False,16,"import datetime
datetime.datetime.utcnow().replace(tzinfo=datetime.timezone.utc).isoformat()
>>> 2020-03-20T01:31:12.467113+00:00"
1747,convert date timezone,False,False,19,"import datetime
datetime.datetime.now().astimezone().replace(microsecond=0).isoformat()
>>> 2020-03-20T14:31:43+13:00"
1748,convert date timezone,False,False,15,"import datetime
datetime.datetime.now().astimezone().isoformat()
>>> 2020-03-20T14:32:16.458361+13:00"
1749,convert date timezone,False,False,12,datetime.datetime.utcnow().astimezone().isoformat() #Incorrect result
1750,format datetime 24 hour,False,True,18,"datetime.datetime.strptime('<unk>', '%B %d, %Y')"
1751,format datetime 24 hour,False,True,24,"""""""{0.month}/{0.day}/{0.year}"""""".strftime('%s')"
1752,format datetime 24 hour,False,True,25,"datetime.datetime.strptime('<unk>', '%B %d, %Y').strftime('%A')"
1753,format datetime 24 hour,False,True,30,"datetime.datetime.strptime('<unk>', '%a, %d %b %Y %H:%M:%S %Z')"
1754,format datetime 24 hour,False,True,15,"('January isoformat 12' % (365, 12)).isoformat()"
1755,format datetime 24 hour,False,True,18,"datetime.datetime.strptime('January 11, 2010', '%B %d, %Y')"
1756,format datetime 24 hour,False,True,19,"datetime.datetime.strptime('<unk>', '%Y, <unk> %w')"
1757,format datetime 24 hour,False,False,10,"return fechaHora.Value.ToString(""HH:mm"");"
1758,format datetime 24 hour,False,False,12,"String s = curr.ToString(""HH:mm"");"
1759,format datetime 24 hour,False,False,34,"date.ToString(""HH:mm:ss""); // for 24hr format
date.ToString(""hh:mm:ss""); // for 12hr format, it shows AM/PM"
1760,format datetime 24 hour,False,False,80,">>> from datetime import datetime
>>> d = datetime.strptime(""10:30"", ""%H:%M"")
>>> d.strftime(""%I:%M %p"")
'10:30 AM'
>>> d = datetime.strptime(""22:30"", ""%H:%M"")
>>> d.strftime(""%I:%M %p"")
'10:30 PM'"
1761,format datetime 24 hour,True,False,36,">>> import datetime
>>> '{0:%Y-%m-%d %H:%M:%S}'.format(datetime.datetime.now())
'2014-02-07 11:52:21'"
1762,format datetime 24 hour,False,False,92,"from datetime import datetime


def validate_date(d):
    try:
        datetime.strptime(d, '%m/%d/%Y %I:%M %p')
        return True
    except ValueError:
        return False


print validate_date('2/26/2009 3:00 PM')  # prints True
print validate_date('2/26/2009 13:00 PM')  # prints false
print validate_date('2/26/2009')  # prints False
print validate_date(""Should I use regex for validating dates in Python?"")  # prints False"
1763,format datetime 24 hour,False,False,15,"TimeSpan timeOfDay = fechaHora.TimeOfDay;
int hour = timeOfDay.Hours;
int minute = timeOfDay.Minutes;"
1764,read csv pure python,False,True,10,"np.genfromtxt('myfile.txt', delimiter=',')"
1765,read csv pure python,False,True,9,"df = pd.read_csv('my.csv', header=None)"
1766,read csv pure python,False,True,10,"pd.read_csv('to_csv', sep='\t', header=None)"
1767,read csv pure python,False,True,4,writer.writerow(line)
1768,read csv pure python,False,True,13,np.array([i for i in range(100)])
1769,read csv pure python,False,True,4,writer.writerow(row)
1770,read csv pure python,False,True,10,"np.loadtxt('myfile.txt', delimiter=',')"
1771,read csv pure python,False,False,13,"import pandas as pd
data = pd.read_csv('https://example.com/passkey=wedsmdjsjmdd')"
1772,read csv pure python,True,False,52,"import csv

with open(""test.csv"", ""r"") as f:
    reader = csv.reader(f, delimiter=""\t"")
    for i, line in enumerate(reader):
        print 'line[{}] = {}'.format(i, line)"
1773,read csv pure python,False,False,98,"line[0] = ['Year:', 'Dec:', 'Jan:']
line[1] = ['1', '50', '60']
line[2] = ['2', '25', '50']
line[3] = ['3', '30', '30']
line[4] = ['4', '40', '20']
line[5] = ['5', '10', '10']"
1774,read csv pure python,False,False,28,"import csv
import urllib2

url = 'http://winterolympicsmedals.com/medals.csv'
response = urllib2.urlopen(url)
cr = csv.reader(response)

for row in cr:
    print row"
1775,read csv pure python,False,False,49,"Year,City,Sport,Discipline,NOC,Event,Event gender,Medal
1924,Chamonix,Skating,Figure skating,AUT,individual,M,Silver
1924,Chamonix,Skating,Figure skating,AUT,individual,W,Gold
..."
1776,read csv pure python,False,False,180,"import csv

# Define data
data = [
    (1, ""A towel,"", 1.0),
    (42, "" it says, "", 2.0),
    (1337, ""is about the most "", -1),
    (0, ""massively useful thing "", 123),
    (-2, ""an interstellar hitchhiker can have."", 3),
]

# Write CSV file
with open(""test.csv"", ""wt"") as fp:
    writer = csv.writer(fp, delimiter="","")
    # writer.writerow([""your"", ""header"", ""foo""])  # write header
    writer.writerows(data)

# Read CSV file
with open(""test.csv"") as fp:
    reader = csv.reader(fp, delimiter="","", quotechar='""')
    # next(reader, None)  # skip the headers
    data_read = [row for row in reader]

print(data_read)"
1777,read csv pure python,False,False,77,"[['1', 'A towel,', '1.0'],
 ['42', ' it says, ', '2.0'],
 ['1337', 'is about the most ', '-1'],
 ['0', 'massively useful thing ', '123'],
 ['-2', 'an interstellar hitchhiker can have.', '3']]"
1778,python make dir,False,True,4,self.xaxis.set_ticks_position(top)
1779,python make dir,False,True,4,self.ax.append(self)
1780,python make dir,False,True,3,self.self.set()
1781,python make dir,False,True,3,self.ax.set()
1782,python make dir,False,True,3,len()
1783,python make dir,False,True,3,self.var_1.set()
1784,python make dir,False,True,4,len(self.dir)
1785,python make dir,False,False,16,"from pathlib import Path
Path(""/my/directory"").mkdir(parents=True, exist_ok=True)"
1786,python make dir,True,False,13,"import os
if not os.path.exists(directory):
    os.makedirs(directory)"
1787,python make dir,False,False,22,"import os, errno

try:
    os.makedirs(directory)
except OSError as e:
    if e.errno != errno.EEXIST:
        raise"
1788,python make dir,False,False,16,"try:
    os.makedirs(""path/to/directory"")
except FileExistsError:
    # directory already exists
    pass"
1789,python make dir,False,False,15,"os.makedirs(""path/to/directory"", exist_ok=True)  # succeeds even if directory exists."
1790,python make dir,False,False,13,"import pathlib
pathlib.Path('/my/directory').mkdir(parents=True, exist_ok=True)"
1791,python make dir,False,False,8,"import os
os.makedirs(path, exist_ok=True)"
1792,get all files in directory,True,True,36,"for dirname, dirnames, filenames in os.walk('<unk>'):
    for subdirname in dirnames:
        print(os.path.join(dirname, subdirname))
    for filename in filenames:
        pass"
1793,get all files in directory,False,True,33,"for dirname, dirnames, filenames in os.walk('file.txt'):
    for subdirname in dirnames:
        print(os.path.join(dirname, subdirname))
    for filename in filenames:
        pass"
1794,get all files in directory,False,True,5,glob.glob('*')
1795,get all files in directory,False,True,8,os.listdir('<unk>')
1796,get all files in directory,False,True,5,os.listdir('..')
1797,get all files in directory,False,True,8,os.walk('<unk>')
1798,get all files in directory,False,True,4,os.walk(directory)
1799,get all files in directory,True,False,32,"from os import listdir
from os.path import isfile, join
onlyfiles = [f for f in listdir(mypath) if isfile(join(mypath, f))]"
1800,get all files in directory,False,False,27,"from os import walk

f = []
for (dirpath, dirnames, filenames) in walk(mypath):
    f.extend(filenames)
    break"
1801,get all files in directory,False,False,24,"import glob, os
os.chdir(""/mydir"")
for file in glob.glob(""*.txt""):
    print(file)"
1802,get all files in directory,False,False,31,"import os
for file in os.listdir(""/mydir""):
    if file.endswith("".txt""):
        print(os.path.join(""/mydir"", file))"
1803,get all files in directory,False,False,38,"import os
for root, dirs, files in os.walk(""/mydir""):
    for file in files:
        if file.endswith("".txt""):
             print(os.path.join(root, file))"
1804,get all files in directory,False,False,11,"import glob
print(glob.glob(""/home/adam/*.txt""))"
1805,get all files in directory,False,False,10,"['/home/adam/file1.txt', '/home/adam/file2.txt', .... ]"
1806,get all files in directory,True,True,36,"for dirname, dirnames, filenames in os.walk('<unk>'):
    for subdirname in dirnames:
        print(os.path.join(dirname, subdirname))
    for filename in filenames:
        pass"
1807,get all files in directory,False,True,33,"for dirname, dirnames, filenames in os.walk('file.txt'):
    for subdirname in dirnames:
        print(os.path.join(dirname, subdirname))
    for filename in filenames:
        pass"
1808,get all files in directory,False,True,5,glob.glob('*')
1809,get all files in directory,False,True,8,os.listdir('<unk>')
1810,get all files in directory,False,True,5,os.listdir('..')
1811,get all files in directory,False,True,8,os.walk('<unk>')
1812,get all files in directory,False,True,4,os.walk(directory)
1813,get all files in directory,True,False,32,"from os import listdir
from os.path import isfile, join
onlyfiles = [f for f in listdir(mypath) if isfile(join(mypath, f))]"
1814,get all files in directory,False,False,27,"from os import walk

f = []
for (dirpath, dirnames, filenames) in walk(mypath):
    f.extend(filenames)
    break"
1815,get all files in directory,False,False,24,"import glob, os
os.chdir(""/mydir"")
for file in glob.glob(""*.txt""):
    print(file)"
1816,get all files in directory,False,False,31,"import os
for file in os.listdir(""/mydir""):
    if file.endswith("".txt""):
        print(os.path.join(""/mydir"", file))"
1817,get all files in directory,False,False,38,"import os
for root, dirs, files in os.walk(""/mydir""):
    for file in files:
        if file.endswith("".txt""):
             print(os.path.join(root, file))"
1818,get all files in directory,False,False,11,"import glob
print(glob.glob(""/home/adam/*.txt""))"
1819,get all files in directory,False,False,10,"['/home/adam/file1.txt', '/home/adam/file2.txt', .... ]"
1820,convert file encoding,False,True,8,os.listdir('<unk>')
1821,convert file encoding,False,True,7,print(f.read(1))
1822,convert file encoding,False,True,8,f.write(''.join(l))
1823,convert file encoding,False,True,9,"struct.pack('<I', 1633837924)"
1824,convert file encoding,False,True,9,"io.open('file.txt', 'w')"
1825,convert file encoding,False,True,17,"struct.pack('<I', open('file.txt', 'w'))"
1826,convert file encoding,False,True,8,f.write(''.join(lines))
1827,convert file encoding,False,False,18,">>> def tell_me_about(s): return (type(s), s)"
1828,convert file encoding,False,False,76,">>> v = ""\xC4pple"" # iso-8859-1 aka latin1 encoded string

>>> tell_me_about(v)
(<type 'str'>, '\xc4pple')

>>> v
'\xc4pple'        # representation in memory

>>> print v
?pple             # map the iso-8859-1 in-memory to iso-8859-1 chars
                  # note that '\xc4' has no representation in iso-8859-1, 
                  # so is printed as ""?""."
1829,convert file encoding,False,False,93,">>> uv = v.decode(""iso-8859-1"")
>>> uv
u'\xc4pple'       # decoding iso-8859-1 becomes unicode, in memory

>>> tell_me_about(uv)
(<type 'unicode'>, u'\xc4pple')

>>> print v.decode(""iso-8859-1"")
Äpple             # convert unicode to the default character set
                  # (utf-8, based on sys.stdout.encoding)

>>> v.decode('iso-8859-1') == u'\xc4pple'
True              # one could have just used a unicode representation 
                  # from the start"
1830,convert file encoding,False,False,106,">>> u""Ä"" == u""\xc4""
True              # the native unicode char and escaped versions are the same

>>> ""Ä"" == u""\xc4""  
False             # the native unicode char is '\xc3\x84' in latin1

>>> ""Ä"".decode('utf8') == u""\xc4""
True              # one can decode the string to get unicode

>>> ""Ä"" == ""\xc4""
False             # the native character and the escaped string are
                  # of course not equal ('\xc3\x84' != '\xc4')."
1831,convert file encoding,False,False,121,">>> u8 = v.decode(""iso-8859-1"").encode(""utf-8"")
>>> u8
'\xc3\x84pple'    # convert iso-8859-1 to unicode to utf-8

>>> tell_me_about(u8)
(<type 'str'>, '\xc3\x84pple')

>>> u16 = v.decode('iso-8859-1').encode('utf-16')
>>> tell_me_about(u16)
(<type 'str'>, '\xff\xfe\xc4\x00p\x00p\x00l\x00e\x00')

>>> tell_me_about(u8.decode('utf8'))
(<type 'unicode'>, u'\xc4pple')

>>> tell_me_about(u16.decode('utf16'))
(<type 'unicode'>, u'\xc4pple')"
1832,convert file encoding,False,False,134,">>> print u8
Äpple             # printing utf-8 - because of the encoding we now know
                  # how to print the characters

>>> print u8.decode('utf-8') # printing unicode
Äpple

>>> print u16     # printing 'bytes' of u16
���pple

>>> print u16.decode('utf16')
Äpple             # printing unicode

>>> v == u8
False             # v is a iso8859-1 string; u8 is a utf-8 string

>>> v.decode('iso8859-1') == u8
False             # v.decode(...) returns unicode

>>> u8.decode('utf-8') == v.decode('latin1') == u16.decode('utf-16')
True              # all decode to the same unicode memory representation
                  # (latin1 is iso-8859-1)"
1833,convert file encoding,True,False,153,">>> u8.encode('iso8859-1')
Traceback (most recent call last):
  File ""<stdin>"", line 1, in <module>
UnicodeDecodeError: 'ascii' codec can't decode byte 0xc3 in position 0:
  ordinal not in range(128)

>>> u16.encode('iso8859-1')
Traceback (most recent call last):
  File ""<stdin>"", line 1, in <module>
UnicodeDecodeError: 'ascii' codec can't decode byte 0xff in position 0:
  ordinal not in range(128)

>>> v.encode('iso8859-1')
Traceback (most recent call last):
  File ""<stdin>"", line 1, in <module>
UnicodeDecodeError: 'ascii' codec can't decode byte 0xc4 in position 0:
  ordinal not in range(128)"
1834,check file encoding,False,True,8,os.listdir('<unk>')
1835,check file encoding,False,True,10,os.path.getmtime('fish').encode('utf-8')
1836,check file encoding,False,True,10,os.path.getmtime('sys').encode('utf-8')
1837,check file encoding,False,True,10,"os.path.isfile('a', 'b')"
1838,check file encoding,False,True,9,"os.path.isfile('a', 'ignore')"
1839,check file encoding,False,True,11,"open.ParseFile(open('file', 'rb'))"
1840,check file encoding,False,True,7,os.path.basename(os.path.getmtime(f))
1841,check file encoding,True,False,40,"def whatisthis(s):
    if isinstance(s, str):
        print ""ordinary string""
    elif isinstance(s, unicode):
        print ""unicode string""
    else:
        print ""not a string"""
1842,check file encoding,False,False,33,"try:
    mystring.decode('ascii')
except UnicodeDecodeError:
    print ""it was not a ascii-encoded unicode string""
else:
    print ""It may have been an ascii-encoded unicode string"""
1843,check file encoding,False,False,20,"def is_ascii(s):
    return all(ord(c) < 128 for c in s)"
1844,check file encoding,False,False,17,"def isascii(s)
    return len(s) == len(s.encode())"
1845,check file encoding,False,False,20,">>> isascii(""♥O◘♦♥O◘♦"")
False
>>> isascii(""Python"")
True"
1846,check file encoding,False,False,38,">>> type(u'abc')  # Python 2 unicode string literal
<type 'unicode'>
>>> type('abc')   # Python 2 byte string literal
<type 'str'>"
1847,check file encoding,False,False,38,">>> type('abc')   # Python 3 unicode string literal
<class 'str'>
>>> type(b'abc')  # Python 3 byte string literal
<class 'bytes'>"
1848,copy file,True,True,7,"shutil.copy2(file, 'rb')"
1849,copy file,False,True,6,"shutil.copy2(file, var_1)"
1850,copy file,False,True,6,"shutil.copy2(file, subdirname)"
1851,copy file,False,True,6,"shutil.copy2(file, out)"
1852,copy file,False,True,6,"shutil.copy2(file, stream)"
1853,copy file,False,True,6,"shutil.copy2(file, string)"
1854,copy file,False,True,6,"copyfile(file, var_1)"
1855,copy file,True,False,10,"from shutil import copyfile
copyfile(src, dst)"
1856,copy file,False,False,57,"┌──────────────────┬────────┬───────────┬───────┬────────────────┐
│     Function     │ Copies │   Copies  │Can use│   Destination  │
│                  │metadata│permissions│buffer │may be directory│
├──────────────────┼────────┼───────────┼───────┼────────────────┤
│shutil.copy       │   No   │    Yes    │   No  │      Yes       │
│shutil.copyfile   │   No   │     No    │   No  │       No       │
│shutil.copy2      │  Yes   │    Yes    │   No  │      Yes       │
│shutil.copyfileobj│   No   │     No    │  Yes  │       No       │
└──────────────────┴────────┴───────────┴───────┴────────────────┘"
1857,copy file,False,False,28,"import shutil
shutil.copy2('/src/dir/file.ext', '/dst/dir/newname.ext') # complete target filename given
shutil.copy2('/src/file.ext', '/dst/dir') # target filename is /dst/dir/file.ext"
1858,copy file,False,False,35,"import os
import shutil
src_files = os.listdir(src)
for file_name in src_files:
    full_file_name = os.path.join(src, file_name)
    if os.path.isfile(full_file_name):
        shutil.copy(full_file_name, dest)"
1859,copy file,False,False,10,"import shutil
shutil.copy('/etc/hostname', '/var/tmp/testhostname')"
1860,copy file,False,False,6,"import os
import shutil
import subprocess"
1861,copy file,False,False,20,"shutil.copyfile(src_file, dest_file, *, follow_symlinks=True)

# example    
shutil.copyfile('source.txt', 'destination.txt')"
1862,current time,False,True,18,now = datetime.datetime.now().strftime('%H:%M:%S')
1863,current time,False,True,8,now = datetime.datetime.now().time()
1864,current time,True,True,6,datetime.datetime.now().time()
1865,current time,False,True,16,datetime.datetime.now().strftime('%H:%M:%S')
1866,current time,False,True,8,now = datetime.datetime.now().date()
1867,current time,False,True,6,datetime.time(datetime.datetime.now())
1868,current time,False,True,5,time = datetime.now()
1869,current time,False,False,38,">>> import datetime
>>> datetime.datetime.now()
datetime.datetime(2009, 1, 6, 15, 8, 24, 78915)

>>> print(datetime.datetime.now())
2009-01-06 15:08:24.789150"
1870,current time,False,False,32,">>> datetime.datetime.now().time()
datetime.time(15, 8, 24, 78915)

>>> print(datetime.datetime.now().time())
15:08:24.789150"
1871,current time,False,False,7,>>> from datetime import datetime
1872,current time,False,False,38,">>> from time import gmtime, strftime
>>> strftime(""%Y-%m-%d %H:%M:%S"", gmtime())
'2009-01-05 22:14:39'"
1873,current time,False,False,103,"Python 2.7.3 (default, Apr 24 2012, 00:00:54) 
[GCC 4.7.0 20120414 (prerelease)] on linux2
Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.
>>> import time
>>> ts = time.time()
>>> print ts
1355563265.81
>>> import datetime
>>> st = datetime.datetime.fromtimestamp(ts).strftime('%Y-%m-%d %H:%M:%S')
>>> print st
2012-12-15 01:21:05
>>>"
1874,current time,False,False,17,"import time
millis = int(round(time.time() * 1000))
print millis"
1875,current time,False,False,17,"import time

current_milli_time = lambda: int(round(time.time() * 1000))"
1876,date and time,False,True,8,"datetime.datetime.combine(datetime.date.today(), time)"
1877,date and time,False,True,8,"datetime.datetime.combine(datetime.datetime.now(), datetime.time)"
1878,date and time,False,True,10,"datetime.datetime.combine(datetime.date.today(), datetime.date.now())"
1879,date and time,False,True,8,"datetime.datetime.combine(datetime.date.today(), datetime.time)"
1880,date and time,False,True,10,"datetime.datetime.combine(datetime.date.today(), datetime.time())"
1881,date and time,False,True,10,"datetime.datetime.combine(datetime.date.today(), datetime.datetime.now())"
1882,date and time,False,True,16,datetime.datetime.now().strftime('%H:%M:%S')
1883,date and time,False,False,38,">>> import datetime
>>> datetime.datetime.now()
datetime.datetime(2009, 1, 6, 15, 8, 24, 78915)

>>> print(datetime.datetime.now())
2009-01-06 15:08:24.789150"
1884,date and time,False,False,32,">>> datetime.datetime.now().time()
datetime.time(15, 8, 24, 78915)

>>> print(datetime.datetime.now().time())
15:08:24.789150"
1885,date and time,False,False,7,>>> from datetime import datetime
1886,date and time,True,False,6,datetime.datetime.now().date()
1887,date and time,False,False,38,">>> from time import gmtime, strftime
>>> strftime(""%Y-%m-%d %H:%M:%S"", gmtime())
'2009-01-05 22:14:39'"
1888,date and time,False,False,20,"from datetime import date
from datetime import datetime

dt = datetime.combine(date.today(), datetime.min.time())"
1889,date and time,False,False,39,"import os.path, time
print(""last modified: %s"" % time.ctime(os.path.getmtime(file)))
print(""created: %s"" % time.ctime(os.path.getctime(file)))"
1890,get curren time,False,True,3,datetime.datetime.now()
1891,get curren time,False,True,16,datetime.datetime.now().strftime('%H:%M:%S')
1892,get curren time,True,True,6,datetime.datetime.now().time()
1893,get curren time,False,True,6,datetime.datetime.t(datetime.datetime.now())
1894,get curren time,False,True,17,"time.strftime('%H:%M:%S', time.gmtime())"
1895,get curren time,False,True,20,"time.strftime('%H:%M:%S', time.gmtime(datetime.time.now()))"
1896,get curren time,False,True,13,time.strftime('%H:%M:%S')
1897,get curren time,False,False,38,">>> import datetime
>>> datetime.datetime.now()
datetime.datetime(2009, 1, 6, 15, 8, 24, 78915)

>>> print(datetime.datetime.now())
2009-01-06 15:08:24.789150"
1898,get curren time,False,False,32,">>> datetime.datetime.now().time()
datetime.time(15, 8, 24, 78915)

>>> print(datetime.datetime.now().time())
15:08:24.789150"
1899,get curren time,False,False,7,>>> from datetime import datetime
1900,get curren time,False,False,38,">>> from time import gmtime, strftime
>>> strftime(""%Y-%m-%d %H:%M:%S"", gmtime())
'2009-01-05 22:14:39'"
1901,get curren time,False,False,17,"import time
millis = int(round(time.time() * 1000))
print millis"
1902,get curren time,False,False,17,"import time

current_milli_time = lambda: int(round(time.time() * 1000))"
1903,get curren time,False,False,7,">>> current_milli_time()
1378761833768"
1904,get a random letter,False,True,8,"output = random.randint(0, 9)"
1905,get a random letter,True,True,10,s = random.choice('<unk>')
1906,get a random letter,False,True,10,output = random.choice('<unk>')
1907,get a random letter,False,True,6,s = random.choice(string.lowercase)
1908,get a random letter,False,True,8,output = random.sample()[0]
1909,get a random letter,False,True,6,s = random.choice(s)
1910,get a random letter,False,True,10,pat = random.choice('<unk>')
1911,get a random letter,False,False,31,"import random

foo = ['a', 'b', 'c', 'd', 'e']
print(random.choice(foo))"
1912,get a random letter,False,False,24,"import secrets

foo = ['battery', 'correct', 'horse', 'staple']
print(secrets.choice(foo))"
1913,get a random letter,False,False,14,"import random

secure_random = random.SystemRandom()
print(secure_random.choice(foo))"
1914,get a random letter,False,False,16,''.join(random.choice(string.ascii_uppercase + string.digits) for _ in range(N))
1915,get a random letter,False,False,11,"''.join(random.choices(string.ascii_uppercase + string.digits, k=N))"
1916,get a random letter,False,False,19,''.join(random.SystemRandom().choice(string.ascii_uppercase + string.digits) for _ in range(N))
1917,get a random letter,False,False,61,">>> import string
>>> import random
>>> def id_generator(size=6, chars=string.ascii_uppercase + string.digits):
...    return ''.join(random.choice(chars) for _ in range(size))
...
>>> id_generator()
'G5G74W'
>>> id_generator(3, ""6793YUIO"")
'Y3U'"
1918,random number,False,True,7,random.choice(random.randrange(0))
1919,random number,False,True,7,random.choice(random.choice(random))
1920,random number,False,True,11,"random.choice(random.choice([0, 1]))"
1921,random number,False,True,9,"random.choice(random.randrange(0, 10))"
1922,random number,False,True,9,"random.choice(random.randrange(0, 7))"
1923,random number,True,True,9,"random.choice(random.randint(0, 10))"
1924,random number,False,True,7,random.choice(random.choice(10))
1925,random number,False,False,11,"from random import randrange
print(randrange(10))"
1926,random number,False,False,10,">>> random.uniform(1.5, 1.9)
1.8733202628557872"
1927,random number,False,False,9,"import random
print(random.randint(0,9))"
1928,random number,False,False,6,"random.randint(a, b)"
1929,random number,False,False,8,"import random
random.uniform(0, 1)"
1930,random number,False,False,11,"import random
random.sample(range(100), 10)"
1931,random number,False,False,21,"all_lines = f1.readlines()
for i in range(50):
    lines = random.sample(all_lines, 40)"
1932,pandas read csv,True,True,21,"df = pd.read_csv('my.csv', na_values=['%H:%M:%S'])"
1933,pandas read csv,False,True,14,"df = pd.read_csv('myfile.txt', sep=',', header=None)"
1934,pandas read csv,False,True,15,"df = pd.read_csv('my.csv', na_values=['%d'])"
1935,pandas read csv,False,True,13,"df = pd.read_csv('my.csv', na_values=['Date'])"
1936,pandas read csv,False,True,14,"df = pd.read_csv('to_csv', sep=',', header=None)"
1937,pandas read csv,False,True,17,"df = pd.read_csv('<unk>', sep=',', header=None)"
1938,pandas read csv,False,True,13,"df = pd.read_csv('my.csv', na_values=['utf8'])"
1939,pandas read csv,False,False,19,"chunksize = 10 ** 6
for chunk in pd.read_csv(filename, chunksize=chunksize):
    process(chunk)"
1940,pandas read csv,False,False,14,"import pandas as pd

url=""https://raw.githubusercontent.com/cs109/2014_data/master/countries.csv""
c=pd.read_csv(url)"
1941,pandas read csv,False,False,30,"import pandas as pd
import io
import requests
url=""https://raw.githubusercontent.com/cs109/2014_data/master/countries.csv""
s=requests.get(url).content
c=pd.read_csv(io.StringIO(s.decode('utf-8')))"
1942,pandas read csv,False,False,49,"import pandas as pd
print pd.read_csv('value.txt')

        Date    price  factor_1  factor_2
0  2012-06-11  1600.20     1.255     1.548
1  2012-06-12  1610.02     1.258     1.554
2  2012-06-13  1618.07     1.249     1.552
3  2012-06-14  1624.40     1.253     1.556
4  2012-06-15  1626.15     1.258     1.552
5  2012-06-16  1626.15     1.263     1.558
6  2012-06-17  1626.15     1.264     1.572"
1943,pandas read csv,False,False,14,"import pandas as pd
df = pd.read_csv('file_name.csv', engine='python')"
1944,pandas read csv,False,False,14,"import pandas as pd
data = pd.read_csv('file_name.csv', encoding='utf-8')"
1945,pandas read csv,False,False,10,"encoding = ""cp1252""
encoding = ""ISO-8859-1"""
1946,"pandas read csv named ""data.csv""",False,True,10,"pd.read_csv('data.csv', sep='data.csv', header=None)"
1947,"pandas read csv named ""data.csv""",True,True,10,"df = pd.read_csv('data.csv', sep='data.csv')"
1948,"pandas read csv named ""data.csv""",False,True,18,"df = pd.read_csv('data.csv', sep='data.csv', header={'data.csv': 1})"
1949,"pandas read csv named ""data.csv""",False,True,12,"df = pd.read_csv('data.csv', sep='data.csv', header=None)"
1950,"pandas read csv named ""data.csv""",False,True,13,df.index = df.index.map(lambda x: x.startswith('data.csv'))
1951,"pandas read csv named ""data.csv""",False,True,8,"pd.read_csv('data.csv', sep='data.csv')"
1952,"pandas read csv named ""data.csv""",False,True,10,"df = pd.read_csv('data.csv', quotechar='data.csv')"
1953,"pandas read csv named ""data.csv""",False,False,16,"from numpy import genfromtxt
my_data = genfromtxt('my_file.csv', delimiter=',')"
1954,"pandas read csv named ""data.csv""",False,False,39,"import pandas as pd
df=pd.read_csv('myfile.csv', sep=',',header=None)
df.values
array([[ 1. ,  2. ,  3. ],
       [ 4. ,  5.5,  6. ]])"
1955,"pandas read csv named ""data.csv""",False,False,24,"1.0, 2, 3
4, 5.5, 6

import numpy as np
np.genfromtxt('myfile.csv',delimiter=',')"
1956,"pandas read csv named ""data.csv""",False,False,22,"array([[ 1. ,  2. ,  3. ],
       [ 4. ,  5.5,  6. ]])"
1957,"pandas read csv named ""data.csv""",False,False,12,"np.genfromtxt('myfile.csv',delimiter=',',dtype=None)"
1958,"pandas read csv named ""data.csv""",False,False,53,"array([(1.0, 2.0, 3), (4.0, 5.5, 6)], 
      dtype=[('f0', '<f8'), ('f1', '<f8'), ('f2', '<i4')])"
1959,"pandas read csv named ""data.csv""",False,False,19,"from numpy import genfromtxt
genfromtxt(fname = dest_file, dtype = (<whatever options>))"
1960,save this dataframe to a csv,False,True,10,"pd.concat([a, b], ignore_index=True)"
1961,save this dataframe to a csv,False,True,9,"pd.merge(csv, csv, sep='\t')"
1962,save this dataframe to a csv,True,True,7,"df.to_csv('skiprows', index=False)"
1963,save this dataframe to a csv,False,True,10,"pd.concat([df1, df2], axis=1)"
1964,save this dataframe to a csv,False,True,10,"pd.concat([a] * 5, ignore_index=True)"
1965,save this dataframe to a csv,False,True,10,"pandas.concat([a, b], ignore_index=True)"
1966,save this dataframe to a csv,False,True,7,"df.to_csv('*', index=False)"
1967,save this dataframe to a csv,False,False,7,"df.to_csv(file_name, sep='\t')"
1968,save this dataframe to a csv,False,False,10,"df.to_csv(file_name, sep='\t', encoding='utf-8')"
1969,save this dataframe to a csv,False,False,9,"df.to_csv(file_name, encoding='utf-8', index=False)"
1970,save this dataframe to a csv,False,False,8,"Color  Number
0   red     22
1  blue     10"
1971,save this dataframe to a csv,False,False,5,"Color,Number
red,22
blue,10"
1972,save this dataframe to a csv,False,False,10,",Color,Number
0,red,22
1,blue,10"
1973,save this dataframe to a csv,False,False,44,"header = True
for chunk in chunks:

    chunk.to_csv(os.path.join(folder, new_folder, ""new_file_"" + filename),
        header=header, cols=[['TIME','STUFF']], mode='a')

    header = False"
1974,"make directory ""output"" if it doesn't exist",False,True,9,os.path.join([output]).show()
1975,"make directory ""output"" if it doesn't exist",False,True,9,os.path.join(__location__).encode('ascii')
1976,"make directory ""output"" if it doesn't exist",False,True,7,os.path.dirname(os.path.abspath(__file__))
1977,"make directory ""output"" if it doesn't exist",False,True,12,"os.path.join(__location__, '%Y').get()"
1978,"make directory ""output"" if it doesn't exist",False,True,9,"os.chdir(os.path.join(dirname, __file__))"
1979,"make directory ""output"" if it doesn't exist",False,True,9,os.path.join([output]).start()
1980,"make directory ""output"" if it doesn't exist",False,True,7,os.chdir(os.path.abspath(__file__))
1981,"make directory ""output"" if it doesn't exist",False,False,16,"from pathlib import Path
Path(""/my/directory"").mkdir(parents=True, exist_ok=True)"
1982,"make directory ""output"" if it doesn't exist",True,False,13,"import os
if not os.path.exists(directory):
    os.makedirs(directory)"
1983,"make directory ""output"" if it doesn't exist",False,False,22,"import os, errno

try:
    os.makedirs(directory)
except OSError as e:
    if e.errno != errno.EEXIST:
        raise"
1984,"make directory ""output"" if it doesn't exist",False,False,16,"try:
    os.makedirs(""path/to/directory"")
except FileExistsError:
    # directory already exists
    pass"
1985,"make directory ""output"" if it doesn't exist",False,False,15,"os.makedirs(""path/to/directory"", exist_ok=True)  # succeeds even if directory exists."
1986,"make directory ""output"" if it doesn't exist",False,False,13,"import pathlib
pathlib.Path('/my/directory').mkdir(parents=True, exist_ok=True)"
1987,"make directory ""output"" if it doesn't exist",False,False,8,"import os
os.makedirs(path, exist_ok=True)"
1988,read a json file named `f`,True,True,6,data = json.loads(f)
1989,read a json file named `f`,False,True,6,json = json.load(f)
1990,read a json file named `f`,False,True,21,data = json.dumps([line.decode('utf8') for line in open('f')])
1991,read a json file named `f`,False,True,11,"return HttpResponse(json.dumps(f), content_type='application/json')"
1992,read a json file named `f`,False,True,6,data = json.loads(f.dic)
1993,read a json file named `f`,False,True,15,"content_type = json.dumps(open('f', 'r'))"
1994,read a json file named `f`,False,True,20,json = json.dumps([json.dumps(f) for line in open('f')])
1995,read a json file named `f`,False,False,21,"import json

with open('strings.json') as f:
    d = json.load(f)
    print(d)"
1996,read a json file named `f`,False,False,40,"import json
data = json.loads('{""one"" : ""1"", ""two"" : ""2"", ""three"" : ""3""}')
print data['two']"
1997,read a json file named `f`,False,False,22,"import json

with open(""test.json"") as json_file:
    json_data = json.load(json_file)
    print(json_data)"
1998,read a json file named `f`,False,False,29,"{
    ""a"": [1,3,""asdf"",true],
    ""b"": {
        ""Hello"": ""world""
    }
}"
1999,read a json file named `f`,False,False,9,j = urllib2.urlopen('http://site.com/data.json')
2000,read a json file named `f`,False,False,6,j_obj = json.load(j)
2001,read a json file named `f`,False,False,69,"import json

with open('data.json', 'r+') as f:
    data = json.load(f)
    data['id'] = 134 # <--- add `id` value.
    f.seek(0)        # <--- should reset file position to the beginning.
    json.dump(data, f, indent=4)
    f.truncate()     # remove remaining part"
2002,write json in `ret` to file `outfile`,False,True,14,"outfile.write(open('ret', 'rb').read())"
2003,write json in `ret` to file `outfile`,False,True,10,outfile.write(json.dumps(ret).json())
2004,write json in `ret` to file `outfile`,False,True,4,outfile.write(ret)
2005,write json in `ret` to file `outfile`,False,True,18,json.dumps([dict(list(ret.items())) for outfile in ret])
2006,write json in `ret` to file `outfile`,False,True,11,outfile.write(open('ret').read())
2007,write json in `ret` to file `outfile`,False,True,11,outfile.write(ret.decode('write').json())
2008,write json in `ret` to file `outfile`,False,True,4,outfile.writerow(ret)
2009,write json in `ret` to file `outfile`,True,False,21,"import json
with open('data.json', 'w') as f:
    json.dump(data, f)"
2010,write json in `ret` to file `outfile`,False,False,28,"import json
with open('data.json', 'w', encoding='utf-8') as f:
    json.dump(data, f, ensure_ascii=False, indent=4)"
2011,write json in `ret` to file `outfile`,False,False,29,"import io, json
with io.open('data.txt', 'w', encoding='utf-8') as f:
  f.write(json.dumps(data, ensure_ascii=False))"
2012,write json in `ret` to file `outfile`,False,False,23,"import json
with open('data.txt', 'w') as f:
  json.dump(data, f, ensure_ascii=False)"
2013,write json in `ret` to file `outfile`,False,False,31,"import json, codecs
with open('data.txt', 'wb') as f:
    json.dump(data, codecs.getwriter('utf-8')(f), ensure_ascii=False)"
2014,write json in `ret` to file `outfile`,False,False,89,">>> json.dumps({'price': '€10'})
'{""price"": ""\\u20ac10""}'
>>> json.dumps({'price': '€10'}, ensure_ascii=False)
'{""price"": ""€10""}'

>>> len(json.dumps({'абвгд': 1}))
37
>>> len(json.dumps({'абвгд': 1}, ensure_ascii=False).encode('utf8'))
17"
2015,write json in `ret` to file `outfile`,False,False,31,"with open('data.txt', 'w') as outfile:
     json.dump(jsonData, outfile, sort_keys = True, indent = 4,
               ensure_ascii = False)"
2016,load json from a file,False,True,9,"json.loads(os.path.join(dirname, subdirname))"
2017,load json from a file,False,True,4,json.loads(data)
2018,load json from a file,False,True,4,json.loads(filename)
2019,load json from a file,False,True,4,json.loads(url)
2020,load json from a file,False,True,6,json = json.load(open)
2021,load json from a file,False,True,6,json = json.loads(file)
2022,load json from a file,False,True,9,"json.loads(os.path.join(file, filename))"
2023,load json from a file,True,False,21,"import json

with open('strings.json') as f:
    d = json.load(f)
    print(d)"
2024,load json from a file,False,False,27,"import json

data = []
with open('file') as f:
    for line in f:
        data.append(json.loads(line))"
2025,load json from a file,False,False,22,"import json

with open(""test.json"") as json_file:
    json_data = json.load(json_file)
    print(json_data)"
2026,load json from a file,False,False,29,"{
    ""a"": [1,3,""asdf"",true],
    ""b"": {
        ""Hello"": ""world""
    }
}"
2027,load json from a file,False,False,69,"import json

with open('data.json', 'r+') as f:
    data = json.load(f)
    data['id'] = 134 # <--- add `id` value.
    f.seek(0)        # <--- should reset file position to the beginning.
    json.dump(data, f, indent=4)
    f.truncate()     # remove remaining part"
2028,load json from a file,False,False,19,"with open('strings.json') as json_data:
    d = json.load(json_data)
    pprint(d)"
2029,load json from a file,False,False,66,"import json
import os

filename = 'data.json'
with open(filename, 'r') as f:
    data = json.load(f)
    data['id'] = 134 # <--- add `id` value.

os.remove(filename)
with open(filename, 'w') as f:
    json.dump(data, f, indent=4)"
2030,numpy load from csv,True,True,13,"np.genfromtxt('<unk>', delimiter=',')"
2031,numpy load from csv,False,True,10,"np.concatenate((a, b), axis=0)"
2032,numpy load from csv,False,True,21,"np.delete(numpy, list(range(0, len(row) + 1)), axis=1)"
2033,numpy load from csv,False,True,18,"np.loadtxt(open('file.txt', 'rb'), delimiter=',', skiprows=1)"
2034,numpy load from csv,False,True,14,"np.concatenate((numpy, numpy, numpy, numpy), axis=0)"
2035,numpy load from csv,False,True,16,"np.loadtxt(open('file.txt', 'rb'), delimiter=',')"
2036,numpy load from csv,False,True,21,"np.delete(numpy, list(range(0, len(row) + 1)), **row)"
2037,numpy load from csv,False,False,16,"from numpy import genfromtxt
my_data = genfromtxt('my_file.csv', delimiter=',')"
2038,numpy load from csv,False,False,39,"import pandas as pd
df=pd.read_csv('myfile.csv', sep=',',header=None)
df.values
array([[ 1. ,  2. ,  3. ],
       [ 4. ,  5.5,  6. ]])"
2039,numpy load from csv,False,False,24,"1.0, 2, 3
4, 5.5, 6

import numpy as np
np.genfromtxt('myfile.csv',delimiter=',')"
2040,numpy load from csv,False,False,22,"array([[ 1. ,  2. ,  3. ],
       [ 4. ,  5.5,  6. ]])"
2041,numpy load from csv,False,False,12,"np.genfromtxt('myfile.csv',delimiter=',',dtype=None)"
2042,numpy load from csv,False,False,53,"array([(1.0, 2.0, 3), (4.0, 5.5, 6)], 
      dtype=[('f0', '<f8'), ('f1', '<f8'), ('f2', '<i4')])"
2043,numpy load from csv,False,False,20,"numpy.loadtxt(open(""test.csv"", ""rb""), delimiter="","", skiprows=1)"
2044,sklearn ignore warnings,False,True,6,warnings.Workbook('?')
2045,sklearn ignore warnings,False,True,9,warnings.draw_networkx_labels(freq='<unk>')
2046,sklearn ignore warnings,False,True,6,warnings.gca().unique()
2047,sklearn ignore warnings,False,True,6,"warnings.xticks(lines, **rows)"
2048,sklearn ignore warnings,False,True,11,"warnings.xticks(lines, **list(dct.keys()))"
2049,sklearn ignore warnings,False,True,11,"warnings.draw_networkx_labels(freq='<unk>', **0.05)"
2050,sklearn ignore warnings,False,True,1,pass
2051,sklearn ignore warnings,True,False,7,"import warnings
warnings.filterwarnings('ignore')"
2052,sklearn ignore warnings,False,False,5,warnings.filterwarnings(action='once')
2053,sklearn ignore warnings,False,False,29,"import warnings

def fxn():
    warnings.warn(""deprecated"", DeprecationWarning)

with warnings.catch_warnings():
    warnings.simplefilter(""ignore"")
    fxn()"
2054,sklearn ignore warnings,False,False,8,"import warnings
warnings.filterwarnings(""ignore"")"
2055,sklearn ignore warnings,False,False,67,">>> import warnings
>>> def f():
...  print('before')
...  warnings.warn('you are warned!')
...  print('after')
>>> f()
before
__main__:3: UserWarning: you are warned!
after
>>> warnings.filterwarnings(""ignore"")
>>> f()
before
after"
2056,sklearn ignore warnings,False,False,10,"import warnings
warnings.filterwarnings(""ignore"", category=DeprecationWarning)"
2057,sklearn ignore warnings,False,False,36,"/home/eddyp/virtualenv/lib/python2.6/site-packages/Twisted-8.2.0-py2.6-linux-x86_64.egg/twisted/persisted/sob.py:12:
DeprecationWarning: the md5 module is deprecated; use hashlib instead import os, md5, sys

/home/eddyp/virtualenv/lib/python2.6/site-packages/Twisted-8.2.0-py2.6-linux-x86_64.egg/twisted/python/filepath.py:12:
DeprecationWarning: the sha module is deprecated; use the hashlib module instead import sha"
2058,open file,False,True,19,"with open(file) as f:
    f = f.open('open', 'r')"
2059,open file,True,True,10,"f = open(file, 'r')"
2060,open file,False,True,11,"f = open('file')
print(line)"
2061,open file,False,True,11,"f = open('open', 'r')"
2062,open file,False,True,11,"f = open('file.txt', 'r')"
2063,open file,False,True,18,"with open(file) as f:
    f = f.open(file, 'r')"
2064,open file,True,True,13,"with open(file) as f:
    f = f.readlines()"
2065,open file,False,False,40,"import os
for filename in os.listdir(os.getcwd()):
   with open(os.path.join(os.cwd(), filename), 'r') as f: # open in readonly mode
      # do your stuff"
2066,open file,False,False,39,"import glob
for filename in glob.glob('*.txt'):
   with open(os.path.join(os.cwd(), filename), 'r') as f: # open in readonly mode
      # do your stuff"
2067,open file,False,False,45,"path = '/some/path/to/file'
for filename in glob.glob(os.path.join(path, '*.txt')):
   with open(os.path.join(os.cwd(), filename), 'r') as f: # open in readonly mode
      # do your stuff"
2068,open file,False,False,13,"import fileinput
for line in fileinput.input():
    # do your stuff"
2069,open file,False,False,5,ls -1 | python parse.py
2070,open file,False,False,152,"def filter(txt, oldfile, newfile):
    '''\
    Read a list of names from a file line by line into an output file.
    If a line begins with a particular name, insert a string of text
    after the name before appending the line to the output file.
    '''

    with open(newfile, 'w') as outfile, open(oldfile, 'r', encoding='utf-8') as infile:
        for line in infile:
            if line.startswith(txt):
                line = line[0:len(txt)] + ' - Truly a great person!\n'
            outfile.write(line)

# input the name you want to check against
text = input('Please enter the name of a great person: ')    
letsgo = filter(text,'Spanish', 'Spanish2')"
2071,open file,False,False,33,">>> f = open('/tmp/generic.png','r')
>>> f.name
'/tmp/generic.png'
>>> import os
>>> os.path.basename(f.name)
'generic.png'"
2072,file to csv,False,True,4,writer.writerow(line)
2073,file to csv,False,True,14,"writer.writerow(open('file', 'rb') + '\n')"
2074,file to csv,False,True,13,"writer.writerow(open('file', 'rb') | pd.DataFrame)"
2075,file to csv,False,True,9,writer.writerow([line] + '\n')
2076,file to csv,False,True,9,writer.writerow([file] + '\n')
2077,file to csv,False,True,16,"writer.writerow(open('file', 'rb') | np.genfromtxt, sep='\t')"
2078,file to csv,False,True,4,writer.writerow(row)
2079,file to csv,True,False,7,"df.to_csv(file_name, sep='\t')"
2080,file to csv,False,False,10,"df.to_csv(file_name, sep='\t', encoding='utf-8')"
2081,file to csv,False,False,9,"df.to_csv(file_name, encoding='utf-8', index=False)"
2082,file to csv,False,False,8,"Color  Number
0   red     22
1  blue     10"
2083,file to csv,False,False,5,"Color,Number
red,22
blue,10"
2084,file to csv,False,False,10,",Color,Number
0,red,22
1,blue,10"
2085,file to csv,False,False,8,"df.to_csv('file.csv',encoding='utf-8-sig')"
2086,open file,False,True,19,"with open(file) as f:
    f = f.open('open', 'r')"
2087,open file,True,True,10,"f = open(file, 'r')"
2088,open file,False,True,11,"f = open('file')
print(line)"
2089,open file,False,True,11,"f = open('open', 'r')"
2090,open file,False,True,11,"f = open('file.txt', 'r')"
2091,open file,False,True,18,"with open(file) as f:
    f = f.open(file, 'r')"
2092,open file,True,True,13,"with open(file) as f:
    f = f.readlines()"
2093,open file,False,False,43,"with open(filename) as f:
    content = f.readlines()
# you may also want to remove whitespace characters like `\n` at the end of each line
content = [x.strip() for x in content]"
2094,open file,False,False,14,"with open('filename') as f:
    lines = f.readlines()"
2095,open file,False,False,20,"with open('filename') as f:
    lines = [line.rstrip() for line in f]"
2096,open file,False,False,23,"with open(""file.txt"") as file_in:
    lines = []
    for line in file_in:
        lines.append(line)"
2097,open file,False,False,40,"import os
for filename in os.listdir(os.getcwd()):
   with open(os.path.join(os.cwd(), filename), 'r') as f: # open in readonly mode
      # do your stuff"
2098,open file,False,False,39,"import glob
for filename in glob.glob('*.txt'):
   with open(os.path.join(os.cwd(), filename), 'r') as f: # open in readonly mode
      # do your stuff"
2099,open file,False,False,45,"path = '/some/path/to/file'
for filename in glob.glob(os.path.join(path, '*.txt')):
   with open(os.path.join(os.cwd(), filename), 'r') as f: # open in readonly mode
      # do your stuff"
2100,open file,False,True,19,"with open(file) as f:
    f = f.open('open', 'r')"
2101,open file,True,True,10,"f = open(file, 'r')"
2102,open file,False,True,11,"f = open('file')
print(line)"
2103,open file,False,True,11,"f = open('open', 'r')"
2104,open file,False,True,11,"f = open('file.txt', 'r')"
2105,open file,False,True,18,"with open(file) as f:
    f = f.open(file, 'r')"
2106,open file,True,True,13,"with open(file) as f:
    f = f.readlines()"
2107,open file,False,False,43,"with open(filename) as f:
    content = f.readlines()
# you may also want to remove whitespace characters like `\n` at the end of each line
content = [x.strip() for x in content]"
2108,open file,False,False,14,"with open('filename') as f:
    lines = f.readlines()"
2109,open file,False,False,20,"with open('filename') as f:
    lines = [line.rstrip() for line in f]"
2110,open file,False,False,23,"with open(""file.txt"") as file_in:
    lines = []
    for line in file_in:
        lines.append(line)"
2111,open file,False,False,40,"import os
for filename in os.listdir(os.getcwd()):
   with open(os.path.join(os.cwd(), filename), 'r') as f: # open in readonly mode
      # do your stuff"
2112,open file,False,False,39,"import glob
for filename in glob.glob('*.txt'):
   with open(os.path.join(os.cwd(), filename), 'r') as f: # open in readonly mode
      # do your stuff"
2113,open file,False,False,45,"path = '/some/path/to/file'
for filename in glob.glob(os.path.join(path, '*.txt')):
   with open(os.path.join(os.cwd(), filename), 'r') as f: # open in readonly mode
      # do your stuff"
2114,plot bar,True,True,5,bar.plot(kind='bar')
2115,plot bar,False,True,8,"plot.plot(x='bar', color='color')"
2116,plot bar,False,True,8,"plot.plot(x='bar', color='bar')"
2117,plot bar,False,True,8,"plot.plot(x='bar', color='green')"
2118,plot bar,False,True,7,plot.plot(kind='bar colour plot')
2119,plot bar,False,True,10,"plt.plot(plot.plot(x), 'bar')"
2120,plot bar,False,True,13,"plt.plot(plot.plot(x), 'bar', color='bar')"
2121,plot bar,False,False,102,"import matplotlib.pyplot as plt

D = {u'Label1':26, u'Label2': 17, u'Label3':30}

plt.bar(range(len(D)), list(D.values()), align='center')
plt.xticks(range(len(D)), list(D.keys()))
# # for python 2.x:
# plt.bar(range(len(D)), D.values(), align='center')  # python 2.x
# plt.xticks(range(len(D)), D.keys())  # in python 2.x

plt.show()"
2122,plot bar,False,False,145,"import matplotlib.pyplot as plt
from matplotlib.dates import date2num
import datetime

x = [
    datetime.datetime(2011, 1, 4, 0, 0),
    datetime.datetime(2011, 1, 5, 0, 0),
    datetime.datetime(2011, 1, 6, 0, 0)
]
x = date2num(x)

y = [4, 9, 2]
z = [1, 2, 3]
k = [11, 12, 13]

ax = plt.subplot(111)
ax.bar(x-0.2, y, width=0.2, color='b', align='center')
ax.bar(x, z, width=0.2, color='g', align='center')
ax.bar(x+0.2, k, width=0.2, color='r', align='center')
ax.xaxis_date()

plt.show()"
2123,plot bar,False,False,67,"ax = plt.subplot(111)
w = 0.3
ax.bar(x-w, y, width=w, color='b', align='center')
ax.bar(x, z, width=w, color='g', align='center')
ax.bar(x+w, k, width=w, color='r', align='center')
ax.xaxis_date()
ax.autoscale(tight=True)

plt.show()"
2124,plot bar,False,False,222,"import numpy as np
import matplotlib.pyplot as plt

N = 3
ind = np.arange(N)  # the x locations for the groups
width = 0.27       # the width of the bars

fig = plt.figure()
ax = fig.add_subplot(111)

yvals = [4, 9, 2]
rects1 = ax.bar(ind, yvals, width, color='r')
zvals = [1,2,3]
rects2 = ax.bar(ind+width, zvals, width, color='g')
kvals = [11,12,13]
rects3 = ax.bar(ind+width*2, kvals, width, color='b')

ax.set_ylabel('Scores')
ax.set_xticks(ind+width)
ax.set_xticklabels( ('2011-Jan-4', '2011-Jan-5', '2011-Jan-6') )
ax.legend( (rects1[0], rects2[0], rects3[0]), ('y', 'z', 'k') )

def autolabel(rects):
    for rect in rects:
        h = rect.get_height()
        ax.text(rect.get_x()+rect.get_width()/2., 1.05*h, '%d'%int(h),
                ha='center', va='bottom')

autolabel(rects1)
autolabel(rects2)
autolabel(rects3)

plt.show()"
2125,plot bar,False,False,53,"import matplotlib.pyplot as plt

D = {u'Label1':26, u'Label2': 17, u'Label3':30}

plt.bar(range(len(D)), D.values(), align='center')
plt.xticks(range(len(D)), list(D.keys()))

plt.show()"
2126,plot bar,False,False,28,"import matplotlib.pyplot as plt

D = {u'Label1':26, u'Label2': 17, u'Label3':30}
plt.bar(*zip(*D.items()))
plt.show()"
2127,plot bar,False,False,51,"weekdays = ['Mon', 'Tues', 'Weds', 'Thurs', 'Fri', 'Sat', 'Sun']
mapping = {day: i for i, day in enumerate(weekdays)}
key = df['day'].map(mapping)"
2128,plot size,False,True,4,plot.plot(x=plot)
2129,plot size,False,True,10,"plt.savefig('<unk>', dpi=100)"
2130,plot size,False,True,6,"plt.plot(x, y)"
2131,plot size,False,True,8,"plt.ylim([0, 10])"
2132,plot size,False,True,10,"plt.savefig('<unk>', dpi=1000)"
2133,plot size,False,True,8,"plt.ylim([0, 100])"
2134,plot size,False,True,10,"plt.savefig('<unk>', dpi=300)"
2135,plot size,False,False,27,"from matplotlib.pyplot import figure
figure(num=None, figsize=(8, 6), dpi=80, facecolor='w', edgecolor='k')"
2136,plot size,False,False,18,"fig = matplotlib.pyplot.gcf()
fig.set_size_inches(18.5, 10.5)
fig.savefig('test2png.png', dpi=100)"
2137,plot size,False,False,8,"fig.set_size_inches(18.5, 10.5, forward=True)"
2138,plot size,False,False,8,"f.set_figheight(15)
f.set_figwidth(15)"
2139,plot size,True,False,13,"f, axs = plt.subplots(2,2,figsize=(15,15))"
2140,plot size,False,False,46,"# doubling the width of markers
x = [0,2,4,6,8,10]
y = [0]*len(x)
s = [20*4**n for n in range(len(x))]
plt.scatter(x,y,s=s)
plt.show()"
2141,plot size,False,False,46,"# doubling the area of markers
x = [0,2,4,6,8,10]
y = [0]*len(x)
s = [20*2**n for n in range(len(x))]
plt.scatter(x,y,s=s)
plt.show()"
2142,plot title,False,True,11,plot.set_xlabel('Temperature ($^\\circ$C)')
2143,plot title,False,True,8,"plt.savefig('col_name_2', style='r1')"
2144,plot title,False,True,10,"plt.savefig('col_name_2', style='o')"
2145,plot title,False,True,7,"plot.legend(ax.set_xlabel, 'WWW-Authenticate')"
2146,plot title,False,True,6,"plot.subplots_adjust(state=title, lines=False)"
2147,plot title,False,True,8,"plt.plot(np.dt.cumcount(), style=plt.exc)"
2148,plot title,False,True,10,"plt.subplots_adjust(state='http://www.google.com.br', color='r1')"
2149,plot title,False,False,42,"from matplotlib import pyplot as plt    

fig = plt.figure()
plt.plot(data)
fig.suptitle('test title', fontsize=20)
plt.xlabel('xlabel', fontsize=18)
plt.ylabel('ylabel', fontsize=16)
fig.savefig('test.jpg')"
2150,plot title,False,False,20,"axes.titlesize      : large   # fontsize of the axes title
axes.labelsize      : medium  # fontsize of the x any y labels"
2151,plot title,False,False,56,"import matplotlib.pyplot as plt
import numpy as np

fig=plt.figure()
data=np.arange(900).reshape((30,30))
for i in range(1,5):
    ax=fig.add_subplot(2,2,i)        
    ax.imshow(data)

fig.suptitle('Main title') # or plt.suptitle('Main title')
plt.show()"
2152,plot title,True,False,85,"import matplotlib.pyplot as plt

if __name__ == ""__main__"":
    data = [1, 2, 3, 4, 5]

    fig = plt.figure()
    fig.suptitle(""Title for whole figure"", fontsize=16)
    ax = plt.subplot(""211"")
    ax.set_title(""Title for first plot"")
    ax.plot(data)

    ax = plt.subplot(""212"")
    ax.set_title(""Title for second plot"")
    ax.plot(data)

    plt.show()"
2153,plot title,False,False,56,"fig = plt.figure()
ax1 = fig.add_subplot(221)
ax2 = fig.add_subplot(222)
ax3 = fig.add_subplot(223)
ax4 = fig.add_subplot(224)
ax1.title.set_text('First Plot')
ax2.title.set_text('Second Plot')
ax3.title.set_text('Third Plot')
ax4.title.set_text('Fourth Plot')
plt.show()"
2154,plot title,False,False,252,"import matplotlib.pyplot as plt
import numpy as np

# Simple data to display in various forms
x = np.linspace(0, 2 * np.pi, 400)
y = np.sin(x ** 2)

fig, axarr = plt.subplots(2, 2)
fig.suptitle(""This Main Title is Nicely Formatted"", fontsize=16)

axarr[0, 0].plot(x, y)
axarr[0, 0].set_title('Axis [0,0] Subtitle')
axarr[0, 1].scatter(x, y)
axarr[0, 1].set_title('Axis [0,1] Subtitle')
axarr[1, 0].plot(x, y ** 2)
axarr[1, 0].set_title('Axis [1,0] Subtitle')
axarr[1, 1].scatter(x, y ** 2)
axarr[1, 1].set_title('Axis [1,1] Subtitle')

# # Fine-tune figure; hide x ticks for top plots and y ticks for right plots
plt.setp([a.get_xticklabels() for a in axarr[0, :]], visible=False)
plt.setp([a.get_yticklabels() for a in axarr[:, 1]], visible=False)

# Tight layout often produces nice results
# but requires the title to be spaced accordingly
fig.tight_layout()
fig.subplots_adjust(top=0.88)

plt.show()"
2155,plot title,False,False,55,"import matplotlib.pylab as pylab
params = {'legend.fontsize': 'x-large',
          'figure.figsize': (15, 5),
         'axes.labelsize': 'x-large',
         'axes.titlesize':'x-large',
         'xtick.labelsize':'x-large',
         'ytick.labelsize':'x-large'}
pylab.rcParams.update(params)"
2156,import library random,False,True,11,"random.sample(range(1, 50), 2)"
2157,import library random,False,True,6,random.choice(os.getcwd())
2158,import library random,False,True,11,"random.sample(range(1, 50), 6)"
2159,import library random,False,True,11,"random.sample(range(1, 50), 3)"
2160,import library random,False,True,11,"random.sample(range(1, 7), 2)"
2161,import library random,False,True,7,random.choice(os.path.normpath(__file__))
2162,import library random,False,True,11,random.choice(os.path.normpath('<unk>'))
2163,import library random,False,False,157,"# === birthday.py ===========================================
#
from math import log10, factorial

PV=4500          # Number of possible values
SS=100           # Sample size

# These intermediate results are exceedingly large numbers;
# Python automatically starts using bignums behind the scenes.
#
numerator = factorial (PV)          
denominator = (PV ** SS) * factorial (PV - SS)

# Now we need to get from bignums to floats without intermediate
# values too large to cast into a double.  Taking the logs and 
# subtracting them is equivalent to division.
#  
log_prob_no_pair = log10 (numerator) - log10 (denominator)

# We've just calculated the log of the probability that *NO*
# two matching pairs occur in the sample.  The probability
# of at least one collision is 1.0 - the probability that no 
# matching pairs exist.
#
print 1.0 - (10 ** log_prob_no_pair)"
2164,import library random,False,False,11,">>> import my_module
>>> my_module.__file__
'/Users/myUser/.virtualenvs/foobar/lib/python2.7/site-packages/my_module/__init__.pyc'"
2165,import library random,False,False,20,"print(""%s: I was imported from %s"" %(__name__, __file__))"
2166,import library random,True,False,2,import random
2167,import library random,False,False,9,os.urandom(16).encode('hex')
2168,import library random,False,False,4,from random import random
2169,import library random,False,False,35,">>> import sys
>>> import random
>>> rng = random.SystemRandom()
>>> rng.random()
0.7195432667967437
>>> rng.randint(0, sys.maxint)
3614556690529452993"
2170,loop on numbers from 0 to 100,False,True,13,[int(x) for x in range(100)]
2171,loop on numbers from 0 to 100,False,True,13,[int(i) for i in range(100)]
2172,loop on numbers from 0 to 100,False,True,18,[int(x) for x in range(100) if i != 0]
2173,loop on numbers from 0 to 100,False,True,18,[int(x) for x in range(100) if v != 0]
2174,loop on numbers from 0 to 100,False,True,17,[int(x) for x in range(100) if v == 0]
2175,loop on numbers from 0 to 100,False,True,17,[int(x) for x in range(100) if v == 100]
2176,loop on numbers from 0 to 100,False,True,15,"[int(i) for i in itertools.range(0, 10)]"
2177,loop on numbers from 0 to 100,False,False,8,"range(10, 0, -1)"
2178,loop on numbers from 0 to 100,False,False,21,"[10, 9, 8, 7, 6, 5, 4, 3, 2, 1]"
2179,loop on numbers from 0 to 100,False,False,8,"xrange(10, 0, -1)"
2180,loop on numbers from 0 to 100,False,False,11,"import random
random.sample(range(100), 10)"
2181,loop on numbers from 0 to 100,False,False,21,"all_lines = f1.readlines()
for i in range(50):
    lines = random.sample(all_lines, 40)"
2182,loop on numbers from 0 to 100,False,False,11,"for x in reversed(whatever):
    do_something()"
2183,loop on numbers from 0 to 100,True,False,16,"for x in range(0, 100, 2):
    print(x)"
2184,generate random between 0 and 20,False,True,9,"print(random.randint(0, 9))"
2185,generate random between 0 and 20,False,True,9,"print(random.randint(0, 1))"
2186,generate random between 0 and 20,False,True,9,"print(range(0, -1))"
2187,generate random between 0 and 20,False,True,9,"print(random.randint(0, 0))"
2188,generate random between 0 and 20,False,True,9,"print(range(0, 9))"
2189,generate random between 0 and 20,True,True,9,"random.randint(0, 9)[0]"
2190,generate random between 0 and 20,False,True,9,"int(random.randint(0, 9))"
2191,generate random between 0 and 20,False,False,8,"import random
random.uniform(0, 1)"
2192,generate random between 0 and 20,False,False,22,"df = pd.DataFrame(np.random.randint(0,100,size=(100, 4)), columns=list('ABCD'))"
2193,generate random between 0 and 20,False,False,30,"import numpy as np
import pandas as pd
df = pd.DataFrame(np.random.randint(0,100,size=(100, 4)), columns=list('ABCD'))"
2194,generate random between 0 and 20,False,False,44,"A   B   C   D
0   45  88  44  92
1   62  34   2  86
2   85  65  11  31
3   74  43  42  56
4   90  38  34  93
5    0  94  45  10
6   58  23  23  60
..  ..  ..  ..  .."
2195,generate random between 0 and 20,False,False,34,">>> import random
>>> for i in range(10):
...     print(random.random())
... 
0.908047338626
0.0199900075962
0.904058545833
0.321508119045
0.657086320195
0.714084413092
0.315924955063
0.696965958019
0.93824013683
0.484207425759"
2196,generate random between 0 and 20,False,False,32,">>> import os
>>> int.from_bytes(os.urandom(8), byteorder=""big"") / ((1 << 64) - 1)
0.7409674234050893"
2197,generate random between 0 and 20,False,False,16,"nums = numpy.ones(1000)
nums[:100] = 0
numpy.random.shuffle(nums)"
2198,create empty dictionary,False,True,16,"dict((v, k) for k, v in d.items())"
2199,create empty dictionary,False,True,28,"dict((k, list(v.values())[0]) for k in ['1', '2'])"
2200,create empty dictionary,False,True,16,"dict((k, v) for k, v in d.items())"
2201,create empty dictionary,False,True,22,"dict((k, list(v.values())[k]) for v in d.values())"
2202,create empty dictionary,False,True,22,"dict((k, list(v.values())[0]) for v in d.values())"
2203,create empty dictionary,False,True,16,"dict((key, value) for key, value in d.items())"
2204,create empty dictionary,False,True,28,"dict((k, list(v.values())[k]) for k in ['1', '2'])"
2205,create empty dictionary,True,False,5,new_dict = dict()
2206,create empty dictionary,False,False,4,new_dict = {}
2207,create empty dictionary,False,False,48,">>> d = {}
>>> d['dict1'] = {}
>>> d['dict1']['innerkey'] = 'value'
>>> d
{'dict1': {'innerkey': 'value'}}"
2208,create empty dictionary,False,False,86,">>> import collections
>>> d = collections.defaultdict(dict)
>>> d['dict1']['innerkey'] = 'value'
>>> d  # currently a defaultdict type
defaultdict(<type 'dict'>, {'dict1': {'innerkey': 'value'}})
>>> dict(d)  # but is exactly like a normal dictionary.
{'dict1': {'innerkey': 'value'}}"
2209,create empty dictionary,False,False,65,"d = {}  # can use defaultdict(dict) instead

for row in file_map:
    # derive row key from something 
    # when using defaultdict, we can skip the next step creating a dictionary on row_key
    d[row_key] = {} 
    for idx, col in enumerate(row):
        d[row_key][idx] = col"
2210,create empty dictionary,False,False,188,"a_file = ""path/to/a.csv""
b_file = ""path/to/b.csv""

# read from file a.csv
with open(a_file) as f:
    # skip headers
    f.next()
    # get first colum as keys
    keys = (line.split(',')[0] for line in f) 

# create empty dictionary:
d = {}

# read from file b.csv
with open(b_file) as f:
    # gather headers except first key header
    headers = f.next().split(',')[1:]
    # iterate lines
    for line in f:
        # gather the colums
        cols = line.strip().split(',')
        # check to make sure this key should be mapped.
        if cols[0] not in keys:
            continue
        # add key to dict
        d[cols[0]] = dict(
            # inner keys are the header names, values are columns
            (headers[idx], v) for idx, v in enumerate(cols[1:]))"
2211,create empty dictionary,False,False,45,">>> keys = [1,2,3,5,6,7]
>>> {key: None for key in keys}
{1: None, 2: None, 3: None, 5: None, 6: None, 7: None}"
2212,for loop on range 100,False,True,7,list(range(100))
2213,for loop on range 100,False,True,21,"print([y for x in range(100) for y in [x, x]])"
2214,for loop on range 100,False,True,17,"print(list(itertools.combinations({'100': 100}, 100)))"
2215,for loop on range 100,False,True,7,print(random.choice(100))
2216,for loop on range 100,False,True,9,"random.choice(range(100), range=100)"
2217,for loop on range 100,False,True,24,"print(list(itertools.combinations([1, 2, 3, 4, 5, 6], 100)))"
2218,for loop on range 100,False,True,17,print([x for x in range(100) if y == 100])
2219,for loop on range 100,False,False,8,"range(10, 0, -1)"
2220,for loop on range 100,False,False,21,"[10, 9, 8, 7, 6, 5, 4, 3, 2, 1]"
2221,for loop on range 100,False,False,8,"xrange(10, 0, -1)"
2222,for loop on range 100,False,False,11,"for x in reversed(whatever):
    do_something()"
2223,for loop on range 100,False,False,10,"for k in range(1,c+1,2):"
2224,for loop on range 100,True,False,16,"for x in range(0, 100, 2):
    print(x)"
2225,for loop on range 100,False,False,16,"for x in range(1, 100, 2):
    print(x)"
2226,check if file ends with .json,False,True,9,os.popen('.json').group(0)
2227,check if file ends with .json,False,True,11,os.popen('.json').decode('?')
2228,check if file ends with .json,False,True,10,os.popen('.json').decode('utf-16')
2229,check if file ends with .json,False,True,10,os.popen('.json').decode('string_escape')
2230,check if file ends with .json,False,True,13,"os.path.join(file, 'r').decode('unicode-escape')"
2231,check if file ends with .json,False,True,10,os.popen('.json').decode('utf-8')
2232,check if file ends with .json,False,True,10,os.popen('.json').decode('utf8')
2233,check if file ends with .json,False,False,16,"if m.endswith('.mp3'):
...
elif m.endswith('.flac'):
..."
2234,check if file ends with .json,True,False,16,"m.lower().endswith(('.png', '.jpg', '.jpeg'))"
2235,check if file ends with .json,False,False,208,"import json

jsonData = """"""{""from"": {""id"": ""8"", ""name"": ""Mary Pinter""}, ""message"": ""How ARE you?"", ""comments"": {""count"": 0}, ""updated_time"": ""2012-05-01"", ""created_time"": ""2012-05-01"", ""to"": {""data"": [{""id"": ""1543"", ""name"": ""Honey Pinter""}]}, ""type"": ""status"", ""id"": ""id_7""}""""""

def getTargetIds(jsonData):
    data = json.loads(jsonData)
    if 'to' not in data:
        raise ValueError(""No target in given data"")
    if 'data' not in data['to']:
        raise ValueError(""No data for target"")

    for dest in data['to']['data']:
        if 'id' not in dest:
            continue
        targetId = dest['id']
        print(""to_id:"", targetId)"
2236,check if file ends with .json,False,False,12,"In [9]: getTargetIds(s)
to_id: 1543"
2237,check if file ends with .json,False,False,25,"import json

def is_json(myjson):
  try:
    json_object = json.loads(myjson)
  except ValueError as e:
    return False
  return True"
2238,check if file ends with .json,False,False,107,"print is_json(""{}"")                          #prints True
print is_json(""{asdf}"")                      #prints False
print is_json('{ ""age"":100}')                #prints True
print is_json(""{'age':100 }"")                #prints False
print is_json(""{\""age\"":100 }"")              #prints True
print is_json('{""age"":100 }')                #prints True
print is_json('{""foo"":[5,6.8],""foo"":""bar""}') #prints True"
2239,check if file ends with .json,False,False,50,"import json
mydict = json.loads('{""foo"":""bar""}')
print(mydict['foo'])    #prints bar

mylist = json.loads(""[5,6,7]"")
print(mylist)
[5, 6, 7]"
2240,import json parsing library,False,True,6,data = json.loads(data)
2241,import json parsing library,False,True,7,json.loads(json.loads(url))
2242,import json parsing library,False,True,11,json.loads(url.get('<unk>'))
2243,import json parsing library,False,True,12,"globals().split(',')[0]"
2244,import json parsing library,False,True,7,json.loads(json.loads(data))
2245,import json parsing library,False,True,11,json.loads(request.POST.get('<unk>'))
2246,import json parsing library,False,True,7,json.loads(json.loads(json))
2247,import json parsing library,True,False,40,"import json
data = json.loads('{""one"" : ""1"", ""two"" : ""2"", ""three"" : ""3""}')
print data['two']"
2248,import json parsing library,False,False,51,"import requests

url = 'http://maps.googleapis.com/maps/api/directions/json'

params = dict(
    origin='Chicago,IL',
    destination='Los+Angeles,CA',
    waypoints='Joplin,MO|Oklahoma+City,OK',
    sensor='false'
)

resp = requests.get(url=url, params=params)
data = resp.json() # Check the JSON Response Content documentation below"
2249,import json parsing library,False,False,33,"import urllib.request, json 
with urllib.request.urlopen(""http://maps.googleapis.com/maps/api/geocode/json?address=google"") as url:
    data = json.loads(url.read().decode())
    print(data)"
2250,import json parsing library,False,False,29,"import urllib, json
url = ""http://maps.googleapis.com/maps/api/geocode/json?address=google""
response = urllib.urlopen(url)
data = json.loads(response.read())
print data"
2251,import json parsing library,False,False,84,"{
""results"" : [
    {
    ""address_components"" : [
        {
            ""long_name"" : ""Charleston and Huff"",
            ""short_name"" : ""Charleston and Huff"",
            ""types"" : [ ""establishment"", ""point_of_interest"" ]
        },
        {
            ""long_name"" : ""Mountain View"",
            ""short_name"" : ""Mountain View"",
            ""types"" : [ ""locality"", ""political"" ]
        },
        {
..."
2252,import json parsing library,False,False,41,">>> import requests
>>> r = requests.get('https://github.com/timeline.json')
>>> r.json()
[{u'repository': {u'open_issues': 0, u'url': 'https://github.com/..."
2253,import json parsing library,False,False,20,"jsonurl = urlopen(url)
text = json.loads(jsonurl.read()) # <-- read from it"
2254,find character,True,True,10,"re.findall('<unk>', character)"
2255,find character,False,True,13,"re.findall('<unk>', character)[0]"
2256,find character,False,True,14,"re.findall('<unk>', '<unk>')"
2257,find character,False,True,13,"re.findall('<unk>', character)[-1]"
2258,find character,False,True,13,"re.findall('<unk>', find)[-1]"
2259,find character,False,True,13,"re.findall('<unk>', find)[0]"
2260,find character,False,True,10,"re.search('<unk>', character)"
2261,find character,False,False,37,">>> ord('a')
97
>>> chr(97)
'a'
>>> chr(ord('a') + 3)
'd'
>>>"
2262,find character,False,False,19,">>> unichr(97)
u'a'
>>> unichr(1234)
u'\u04d2'"
2263,find character,False,False,28,">>> myString = 'Position of a character'
>>> myString.find('s')
2
>>> myString.find('x')
-1"
2264,find character,False,False,54,">>> myString = 'Position of a character'
>>> myString.index('s')
2
>>> myString.index('x')
Traceback (most recent call last):
  File ""<stdin>"", line 1, in <module>
ValueError: substring not found"
2265,find character,False,False,48,"'$' in s        # found
'$' not in s    # not found

# original answer given, but less Pythonic than the above...
s.find('$')==-1 # not found
s.find('$')!=-1 # found"
2266,find character,False,False,27,"pattern = re.compile(r'\d\$,')
if pattern.findall(s):
    print('Found')
else
    print('Not found')"
2267,find character,False,False,36,"chars = set('0123456789$,')
if any((c in chars) for c in s):
    print('Found')
else:
    print('Not Found')"
2268,travverse list of files,False,True,10,"f.extend([1, 2, 3])"
2269,travverse list of files,False,True,5,glob.glob('*')
2270,travverse list of files,True,True,4,shutil.from_iterable(my_list)
2271,travverse list of files,False,True,7,f.write('\n'.join(filenames))
2272,travverse list of files,False,True,4,f.write(filenames)
2273,travverse list of files,False,True,6,f.extend([files])
2274,travverse list of files,False,True,17,f.extend([f.read().split(' ') for f in filenames])
2275,travverse list of files,False,False,32,"from os import listdir
from os.path import isfile, join
onlyfiles = [f for f in listdir(mypath) if isfile(join(mypath, f))]"
2276,travverse list of files,False,False,27,"from os import walk

f = []
for (dirpath, dirnames, filenames) in walk(mypath):
    f.extend(filenames)
    break"
2277,travverse list of files,False,False,11,"import glob
print(glob.glob(""/home/adam/*.txt""))"
2278,travverse list of files,False,False,10,"['/home/adam/file1.txt', '/home/adam/file2.txt', .... ]"
2279,travverse list of files,False,False,29,"import os
 arr = os.listdir()
 print(arr)

 >>> ['$RECYCLE.BIN', 'work.txt', '3ebooks.txt', 'documents']"
2280,travverse list of files,False,False,20,"import glob

txtfiles = []
for file in glob.glob(""*.txt""):
    txtfiles.append(file)"
2281,travverse list of files,False,False,16,"import glob

mylist = [f for f in glob.glob(""*.txt"")]"
2282,traverse a directory,False,True,4,os.path.dirname(__file__)
2283,traverse a directory,False,True,7,os.path.dirname(os.path.realpath(__file__))
2284,traverse a directory,False,True,4,os.path.realpath(__file__)
2285,traverse a directory,False,True,7,os.path.basename(os.path.realpath(__file__))
2286,traverse a directory,False,True,7,os.path.dirname(os.path.normpath(__file__))
2287,traverse a directory,False,True,7,os.path.dirname(os.path.abspath(__file__))
2288,traverse a directory,False,True,13,"os.path.join(os.path.realpath(__file__), '<unk>')"
2289,traverse a directory,False,False,32,"from os import listdir
from os.path import isfile, join
onlyfiles = [f for f in listdir(mypath) if isfile(join(mypath, f))]"
2290,traverse a directory,False,False,27,"from os import walk

f = []
for (dirpath, dirnames, filenames) in walk(mypath):
    f.extend(filenames)
    break"
2291,traverse a directory,False,False,11,"import glob
print(glob.glob(""/home/adam/*.txt""))"
2292,traverse a directory,False,False,10,"['/home/adam/file1.txt', '/home/adam/file2.txt', .... ]"
2293,traverse a directory,True,False,29,"import os
 arr = os.listdir()
 print(arr)

 >>> ['$RECYCLE.BIN', 'work.txt', '3ebooks.txt', 'documents']"
2294,traverse a directory,False,False,20,"import glob

txtfiles = []
for file in glob.glob(""*.txt""):
    txtfiles.append(file)"
2295,traverse a directory,False,False,16,"import glob

mylist = [f for f in glob.glob(""*.txt"")]"
2296,open file,False,True,19,"with open(file) as f:
    f = f.open('open', 'r')"
2297,open file,True,True,10,"f = open(file, 'r')"
2298,open file,False,True,11,"f = open('file')
print(line)"
2299,open file,False,True,11,"f = open('open', 'r')"
2300,open file,False,True,11,"f = open('file.txt', 'r')"
2301,open file,False,True,18,"with open(file) as f:
    f = f.open(file, 'r')"
2302,open file,True,True,13,"with open(file) as f:
    f = f.readlines()"
2303,open file,False,False,40,"import os
for filename in os.listdir(os.getcwd()):
   with open(os.path.join(os.cwd(), filename), 'r') as f: # open in readonly mode
      # do your stuff"
2304,open file,False,False,39,"import glob
for filename in glob.glob('*.txt'):
   with open(os.path.join(os.cwd(), filename), 'r') as f: # open in readonly mode
      # do your stuff"
2305,open file,False,False,45,"path = '/some/path/to/file'
for filename in glob.glob(os.path.join(path, '*.txt')):
   with open(os.path.join(os.cwd(), filename), 'r') as f: # open in readonly mode
      # do your stuff"
2306,open file,False,False,13,"import fileinput
for line in fileinput.input():
    # do your stuff"
2307,open file,False,False,5,ls -1 | python parse.py
2308,open file,False,False,53,"import subprocess, os, platform
if platform.system() == 'Darwin':       # macOS
    subprocess.call(('open', filepath))
elif platform.system() == 'Windows':    # Windows
    os.startfile(filepath)
else:                                   # linux variants
    subprocess.call(('xdg-open', filepath))"
2309,open file,False,False,82,"$ ls -la chardet-1.0.1.tgz
-rwxr-xr-x 1 vinko vinko 179218 2008-10-20 17:49 chardet-1.0.1.tgz
$ python
Python 2.5.1 (r251:54863, Jul 31 2008, 22:53:39)
[GCC 4.1.2 (Ubuntu 4.1.2-0ubuntu4)] on linux2
Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.
>>> f = open('chardet-1.0.1.tgz','rb')
>>> f.seek(0,2)
>>> f.tell()
179218L"
2310,convert binary decoded string to ascii,False,True,11,chr(ord('<unk>'))
2311,convert binary decoded string to ascii,False,True,4,chr(3)
2312,convert binary decoded string to ascii,False,True,8,ord('<unk>')
2313,convert binary decoded string to ascii,False,True,6,ord('c')
2314,convert binary decoded string to ascii,False,True,22,""""""""""""".join(chr(ord(c)) for c in '3')"
2315,convert binary decoded string to ascii,False,True,19,""""""""""""".join(chr(i) for i in '3')"
2316,convert binary decoded string to ascii,False,True,12,""""""""""""".join([string])"
2317,convert binary decoded string to ascii,True,False,15,">>> b'a string'.decode('ascii')
'a string'"
2318,convert binary decoded string to ascii,False,False,15,">>> 'a string'.encode('ascii')
b'a string'"
2319,convert binary decoded string to ascii,False,False,14,">>> ""7061756c"".decode(""hex"")
'paul'"
2320,convert binary decoded string to ascii,False,False,23,">>> import binascii
>>> bin(int(binascii.hexlify('hello'), 16))
'0b110100001100101011011000110110001101111'"
2321,convert binary decoded string to ascii,False,False,26,">>> n = int('0b110100001100101011011000110110001101111', 2)
>>> binascii.unhexlify('%x' % n)
'hello'"
2322,convert binary decoded string to ascii,False,False,17,">>> bin(int.from_bytes('hello'.encode(), 'big'))
'0b110100001100101011011000110110001101111'"
2323,convert binary decoded string to ascii,False,False,35,">>> n = int('0b110100001100101011011000110110001101111', 2)
>>> n.to_bytes((n.bit_length() + 7) // 8, 'big').decode()
'hello'"
2324,convert latin-1 to utf-8,False,True,14,"unicodedata.normalize('NFKD', latin - 1).encode('utf8')"
2325,convert latin-1 to utf-8,False,True,17,"unicodedata.normalize('NFKD', latin - 1).encode('ascii', 'ignore')"
2326,convert latin-1 to utf-8,False,True,17,"unicodedata.normalize('NFKD', utf - 8).encode('ascii', 'ignore')"
2327,convert latin-1 to utf-8,False,True,17,"print(unicodedata.normalize('NFKD', latin - 1).encode('utf8'))"
2328,convert latin-1 to utf-8,False,True,12,"print(unicodedata.normalize('NFKD', latin - 1))"
2329,convert latin-1 to utf-8,False,True,20,"print(unicodedata.normalize('NFKD', latin - 1).encode('ascii', 'ignore'))"
2330,convert latin-1 to utf-8,False,True,17,"print(unicodedata.normalize('NFKD', latin - 1).decode('utf8'))"
2331,convert latin-1 to utf-8,False,False,44,">>> plain_string = ""Hi!""
>>> unicode_string = u""Hi!""
>>> type(plain_string), type(unicode_string)
(<type 'str'>, <type 'unicode'>)"
2332,convert latin-1 to utf-8,True,False,22,">>> s = ""Hello!""
>>> u = unicode(s, ""utf-8"")"
2333,convert latin-1 to utf-8,False,False,18,">>> def tell_me_about(s): return (type(s), s)"
2334,convert latin-1 to utf-8,False,False,76,">>> v = ""\xC4pple"" # iso-8859-1 aka latin1 encoded string

>>> tell_me_about(v)
(<type 'str'>, '\xc4pple')

>>> v
'\xc4pple'        # representation in memory

>>> print v
?pple             # map the iso-8859-1 in-memory to iso-8859-1 chars
                  # note that '\xc4' has no representation in iso-8859-1, 
                  # so is printed as ""?""."
2335,convert latin-1 to utf-8,False,False,93,">>> uv = v.decode(""iso-8859-1"")
>>> uv
u'\xc4pple'       # decoding iso-8859-1 becomes unicode, in memory

>>> tell_me_about(uv)
(<type 'unicode'>, u'\xc4pple')

>>> print v.decode(""iso-8859-1"")
Äpple             # convert unicode to the default character set
                  # (utf-8, based on sys.stdout.encoding)

>>> v.decode('iso-8859-1') == u'\xc4pple'
True              # one could have just used a unicode representation 
                  # from the start"
2336,convert latin-1 to utf-8,False,False,106,">>> u""Ä"" == u""\xc4""
True              # the native unicode char and escaped versions are the same

>>> ""Ä"" == u""\xc4""  
False             # the native unicode char is '\xc3\x84' in latin1

>>> ""Ä"".decode('utf8') == u""\xc4""
True              # one can decode the string to get unicode

>>> ""Ä"" == ""\xc4""
False             # the native character and the escaped string are
                  # of course not equal ('\xc3\x84' != '\xc4')."
2337,convert latin-1 to utf-8,False,False,121,">>> u8 = v.decode(""iso-8859-1"").encode(""utf-8"")
>>> u8
'\xc3\x84pple'    # convert iso-8859-1 to unicode to utf-8

>>> tell_me_about(u8)
(<type 'str'>, '\xc3\x84pple')

>>> u16 = v.decode('iso-8859-1').encode('utf-16')
>>> tell_me_about(u16)
(<type 'str'>, '\xff\xfe\xc4\x00p\x00p\x00l\x00e\x00')

>>> tell_me_about(u8.decode('utf8'))
(<type 'unicode'>, u'\xc4pple')

>>> tell_me_about(u16.decode('utf16'))
(<type 'unicode'>, u'\xc4pple')"
2338,convert str to utf-8,False,True,29,""""""""""""".join(str(x) for x in str('\\xc3\\x85あ'.encode('utf8'))).decode('utf8')"
2339,convert str to utf-8,False,True,17,"""""""\\xc3\\x85あ"""""".encode('utf8').decode('utf8')"
2340,convert str to utf-8,False,True,27,""""""""""""".join(str(x.decode('utf8')) for x in 'str').decode('utf8')"
2341,convert str to utf-8,True,True,23,""""""""""""".join(str(c) for c in 'AndrÃ©').decode('utf8')"
2342,convert str to utf-8,False,True,29,""""""""""""".join(str(x) for x in str('\\xc3\\x85あ'.encode('utf8'))).encode('utf8')"
2343,convert str to utf-8,False,True,27,""""""""""""".join(str(s.decode('utf8')) for s in 'str').decode('utf8')"
2344,convert str to utf-8,False,True,42,""""""""""""".join(str(x) for x in str(','.join(str(x.encode('utf8')) for x in 'str'))
    ).decode('utf8')"
2345,convert str to utf-8,False,False,37,"title = u""Klüft skräms inför på fédéral électoral große""
import unicodedata
unicodedata.normalize('NFKD', title).encode('ascii', 'ignore')
'Kluft skrams infor pa federal electoral groe'"
2346,convert str to utf-8,False,False,37,"my_str = ""hello world""
my_str_as_bytes = str.encode(my_str)
type(my_str_as_bytes) # ensure it is byte representation
my_decoded_str = my_str_as_bytes.decode()
type(my_decoded_str) # ensure it is string representation"
2347,convert str to utf-8,False,False,54,">>> a=u""aaaàçççñññ""
>>> type(a)
<type 'unicode'>
>>> a.encode('ascii','ignore')
'aaa'
>>> a.encode('ascii','replace')
'aaa???????'
>>>"
2348,convert str to utf-8,False,False,44,">>> plain_string = ""Hi!""
>>> unicode_string = u""Hi!""
>>> type(plain_string), type(unicode_string)
(<type 'str'>, <type 'unicode'>)"
2349,convert str to utf-8,False,False,22,">>> s = ""Hello!""
>>> u = unicode(s, ""utf-8"")"
2350,convert str to utf-8,False,False,5,b = mystring.encode()
2351,convert str to utf-8,False,False,92,"In [1]: %timeit -r 10 'abc'.encode('utf-8')
The slowest run took 38.07 times longer than the fastest. 
This could mean that an intermediate result is being cached.
10000000 loops, best of 10: 183 ns per loop

In [2]: %timeit -r 10 'abc'.encode()
The slowest run took 27.34 times longer than the fastest. 
This could mean that an intermediate result is being cached.
10000000 loops, best of 10: 137 ns per loop"
2352,write into txt file,False,True,14,"f.write(open('file', 'rb').read())"
2353,write into txt file,False,True,14,"f.write(open('file.txt', 'rb').read())"
2354,write into txt file,False,True,21,shutil.write('\n'.join([line.split('\n') for line in open('file')]))
2355,write into txt file,False,True,19,shutil.write('\n'.join(line.rstrip('\n') for line in open('file')))
2356,write into txt file,False,True,8,"os.rename(line, f.read())"
2357,write into txt file,False,True,9,"os.rename(line, os.path.basename(line))"
2358,write into txt file,False,True,11,"os.rename(line, os.path.join(para, ins))"
2359,write into txt file,True,False,27,"text_file = open(""Output.txt"", ""w"")
text_file.write(""Purchase Amount: %s"" % TotalAmount)
text_file.close()"
2360,write into txt file,False,False,26,"with open(""Output.txt"", ""w"") as text_file:
    text_file.write(""Purchase Amount: %s"" % TotalAmount)"
2361,write into txt file,False,False,29,"with open(""Output.txt"", ""w"") as text_file:
    text_file.write(""Purchase Amount: {0}"".format(TotalAmount))"
2362,write into txt file,False,False,30,"with open(""Output.txt"", ""w"") as text_file:
    print(""Purchase Amount: {}"".format(TotalAmount), file=text_file)"
2363,write into txt file,False,False,28,"with open(""Output.txt"", ""w"") as text_file:
    print(f""Purchase Amount: {TotalAmount}"", file=text_file)"
2364,write into txt file,False,False,18,"with open('somefile.txt', 'a') as the_file:
    the_file.write('Hello\n')"
2365,write into txt file,False,False,19,"from __future__ import print_function  # Only needed for Python 2
print(""hi there"", file=f)"
2366,load json file,True,True,7,json.loads(json.loads(json))
2367,load json file,False,True,4,json.loads(data)
2368,load json file,False,True,4,json.loads(url)
2369,load json file,False,True,7,json.loads(json.loads(data))
2370,load json file,False,True,7,json.loads(json.dumps(data))
2371,load json file,False,True,11,json.loads(request.POST.get('<unk>'))
2372,load json file,True,True,4,json.loads(file)
2373,load json file,False,False,45,">>> json.JSONDecoder(object_pairs_hook=collections.OrderedDict).decode('{""foo"":1, ""bar"": 2}')
OrderedDict([('foo', 1), ('bar', 2)])
>>>"
2374,load json file,False,False,62,">>> import json
>>> from collections import OrderedDict
>>> data = json.loads('{""foo"":1, ""bar"": 2}', object_pairs_hook=OrderedDict)
>>> print json.dumps(data, indent=4)
{
    ""foo"": 1,
    ""bar"": 2
}
>>>"
2375,load json file,False,False,15,">>> data = json.load(open('config.json'), object_pairs_hook=OrderedDict)"
2376,load json file,False,False,21,"import json

with open('strings.json') as f:
    d = json.load(f)
    print(d)"
2377,load json file,False,False,27,"import json

data = []
with open('file') as f:
    for line in f:
        data.append(json.loads(line))"
2378,load json file,False,False,8,"my_ordered_dict = json.loads(json_str, object_pairs_hook=collections.OrderedDict)"
2379,load json file,False,False,14,"import simplejson as json
import ordereddict

my_ordered_dict = json.loads(json_str, object_pairs_hook=ordereddict.OrderedDict)"
2380,convert dict to string,False,True,31,""""""""""""".join('{}{}'.format(key, val) for key, val in list(d.items()))"
2381,convert dict to string,False,True,31,""""""""""""".join('{}{}'.format(key, val) for key, val in sorted(d.items()))"
2382,convert dict to string,False,True,31,""""""""""""".join('{}{}'.format(key, val) for key, val in list(data.items()))"
2383,convert dict to string,False,True,22,""""""""""""".join(str(x) for x in list(d.items()))"
2384,convert dict to string,False,True,31,""""""" """""".join('{}{}'.format(key, val) for key, val in list(d.items()))"
2385,convert dict to string,False,True,31,""""""""""""".join('{}{}'.format(key, val) for key, val in list(dict.items()))"
2386,convert dict to string,False,True,28,""""""""""""".join('='.join((k, v)) for k, v in list(d.items()))"
2387,convert dict to string,True,False,17,">>> str(10)
'10'
>>> int('10')
10"
2388,convert dict to string,True,False,39,">>> import ast
>>> ast.literal_eval(""{'muffin' : 'lolz', 'foo' : 'kitty'}"")
{'muffin': 'lolz', 'foo': 'kitty'}"
2389,convert dict to string,False,False,169,">>> eval(""shutil.rmtree('mongo')"")
Traceback (most recent call last):
  File ""<stdin>"", line 1, in <module>
  File ""<string>"", line 1, in <module>
  File ""/opt/Python-2.6.1/lib/python2.6/shutil.py"", line 208, in rmtree
    onerror(os.listdir, path, sys.exc_info())
  File ""/opt/Python-2.6.1/lib/python2.6/shutil.py"", line 206, in rmtree
    names = os.listdir(path)
OSError: [Errno 2] No such file or directory: 'mongo'
>>> ast.literal_eval(""shutil.rmtree('mongo')"")
Traceback (most recent call last):
  File ""<stdin>"", line 1, in <module>
  File ""/opt/Python-2.6.1/lib/python2.6/ast.py"", line 68, in literal_eval
    return _convert(node_or_string)
  File ""/opt/Python-2.6.1/lib/python2.6/ast.py"", line 67, in _convert
    raise ValueError('malformed string')
ValueError: malformed string"
2390,convert dict to string,False,False,6,"import json
json.dumps(dict)"
2391,convert dict to string,False,False,54,"import json
s = ""{'muffin' : 'lolz', 'foo' : 'kitty'}""
json_acceptable_string = s.replace(""'"", ""\"""")
d = json.loads(json_acceptable_string)
# d = {u'muffin': u'lolz', u'foo': u'kitty'}"
2392,convert dict to string,False,False,36,"dict1 = {'one':1, 'two':2, 'three': {'three.1': 3.1, 'three.2': 3.2 }}
str1 = str(dict1)

dict2 = eval(str1)

print dict1==dict2"
2393,convert dict to string,False,False,27,"import json

# convert to string
input = json.dumps({'id': id })

# load to dict
my_dict = json.loads(input)"
2394,convert dict to string,False,True,31,""""""""""""".join('{}{}'.format(key, val) for key, val in list(d.items()))"
2395,convert dict to string,False,True,31,""""""""""""".join('{}{}'.format(key, val) for key, val in sorted(d.items()))"
2396,convert dict to string,False,True,31,""""""""""""".join('{}{}'.format(key, val) for key, val in list(data.items()))"
2397,convert dict to string,False,True,22,""""""""""""".join(str(x) for x in list(d.items()))"
2398,convert dict to string,False,True,31,""""""" """""".join('{}{}'.format(key, val) for key, val in list(d.items()))"
2399,convert dict to string,False,True,31,""""""""""""".join('{}{}'.format(key, val) for key, val in list(dict.items()))"
2400,convert dict to string,False,True,28,""""""""""""".join('='.join((k, v)) for k, v in list(d.items()))"
2401,convert dict to string,True,False,39,">>> import ast
>>> ast.literal_eval(""{'muffin' : 'lolz', 'foo' : 'kitty'}"")
{'muffin': 'lolz', 'foo': 'kitty'}"
2402,convert dict to string,False,False,169,">>> eval(""shutil.rmtree('mongo')"")
Traceback (most recent call last):
  File ""<stdin>"", line 1, in <module>
  File ""<string>"", line 1, in <module>
  File ""/opt/Python-2.6.1/lib/python2.6/shutil.py"", line 208, in rmtree
    onerror(os.listdir, path, sys.exc_info())
  File ""/opt/Python-2.6.1/lib/python2.6/shutil.py"", line 206, in rmtree
    names = os.listdir(path)
OSError: [Errno 2] No such file or directory: 'mongo'
>>> ast.literal_eval(""shutil.rmtree('mongo')"")
Traceback (most recent call last):
  File ""<stdin>"", line 1, in <module>
  File ""/opt/Python-2.6.1/lib/python2.6/ast.py"", line 68, in literal_eval
    return _convert(node_or_string)
  File ""/opt/Python-2.6.1/lib/python2.6/ast.py"", line 67, in _convert
    raise ValueError('malformed string')
ValueError: malformed string"
2403,convert dict to string,False,False,6,"import json
json.dumps(dict)"
2404,convert dict to string,False,False,54,"import json
s = ""{'muffin' : 'lolz', 'foo' : 'kitty'}""
json_acceptable_string = s.replace(""'"", ""\"""")
d = json.loads(json_acceptable_string)
# d = {u'muffin': u'lolz', u'foo': u'kitty'}"
2405,convert dict to string,False,False,36,"dict1 = {'one':1, 'two':2, 'three': {'three.1': 3.1, 'three.2': 3.2 }}
str1 = str(dict1)

dict2 = eval(str1)

print dict1==dict2"
2406,convert dict to string,False,False,27,"import json

# convert to string
input = json.dumps({'id': id })

# load to dict
my_dict = json.loads(input)"
2407,convert dict to string,False,False,67,">>> import json
>>> h = '{""foo"":""bar"", ""foo2"":""bar2""}'
>>> d = json.loads(h)
>>> d
{u'foo': u'bar', u'foo2': u'bar2'}
>>> type(d)
<type 'dict'>"
2408,add json file to a list,True,True,6,data = json.loads(data)
2409,add json file to a list,False,True,16,data = [int(line) for line in open('file')]
2410,add json file to a list,False,True,6,data = json.loads(json)
2411,add json file to a list,False,True,6,data = json.loads(my_data)
2412,add json file to a list,False,True,16,data = [str(line) for line in open('file')]
2413,add json file to a list,False,True,5,my_data = [file]
2414,add json file to a list,False,True,4,data = []
2415,add json file to a list,False,False,21,"import json
with open('data.json', 'w') as f:
    json.dump(data, f)"
2416,add json file to a list,False,False,28,"import json
with open('data.json', 'w', encoding='utf-8') as f:
    json.dump(data, f, ensure_ascii=False, indent=4)"
2417,add json file to a list,False,False,29,"import io, json
with io.open('data.txt', 'w', encoding='utf-8') as f:
  f.write(json.dumps(data, ensure_ascii=False))"
2418,add json file to a list,False,False,23,"import json
with open('data.txt', 'w') as f:
  json.dump(data, f, ensure_ascii=False)"
2419,add json file to a list,False,False,31,"import json, codecs
with open('data.txt', 'wb') as f:
    json.dump(data, codecs.getwriter('utf-8')(f), ensure_ascii=False)"
2420,add json file to a list,False,False,89,">>> json.dumps({'price': '€10'})
'{""price"": ""\\u20ac10""}'
>>> json.dumps({'price': '€10'}, ensure_ascii=False)
'{""price"": ""€10""}'

>>> len(json.dumps({'абвгд': 1}))
37
>>> len(json.dumps({'абвгд': 1}, ensure_ascii=False).encode('utf8'))
17"
2421,add json file to a list,False,False,31,"with open('data.txt', 'w') as outfile:
     json.dump(jsonData, outfile, sort_keys = True, indent = 4,
               ensure_ascii = False)"
2422,check email correctness,False,True,10,print(str(email).getcode())
2423,check email correctness,False,True,12,print(str(email).decode('utf8'))
2424,check email correctness,False,True,9,print(getresponse().getcode())
2425,check email correctness,False,True,12,print(search(email).decode('utf8'))
2426,check email correctness,False,True,12,print(str(email).decode('ascii'))
2427,check email correctness,False,True,11,print(getresponse().decode('utf8'))
2428,check email correctness,False,True,11,print(getresponse().decode('\n'))
2429,check email correctness,False,False,4,python -m py_compile script.py
2430,check email correctness,False,False,17,[^@]+@[^@]+\.[^@]+
2431,check email correctness,False,False,19,"import re

if not re.match(r""... regex here ..."", email):
  # whatever"
2432,check email correctness,True,False,23,"import re

EMAIL_REGEX = re.compile(r""... regex here ..."")

if not EMAIL_REGEX.match(email):
  # whatever"
2433,check email correctness,False,False,240,"class EmailValidator(RegexValidator):

    def __call__(self, value):
        try:
            super(EmailValidator, self).__call__(value)
        except ValidationError, e:
            # Trivial case failed. Try for possible IDN domain-part
            if value and u'@' in value:
                parts = value.split(u'@')
                domain_part = parts[-1]
                try:
                    parts[-1] = parts[-1].encode('idna')
                except UnicodeError:
                    raise e
                super(EmailValidator, self).__call__(u'@'.join(parts))
            else:
                raise

email_re = re.compile(
    r""(^[-!#$%&'*+/=?^_`{}|~0-9A-Z]+(\.[-!#$%&'*+/=?^_`{}|~0-9A-Z]+)*""  # dot-atom
    r'|^""([\001-\010\013\014\016-\037!#-\[\]-\177]|\\[\001-011\013\014\016-\177])*""' # quoted-string
    r')@(?:[A-Z0-9](?:[A-Z0-9-]{0,61}[A-Z0-9])?\.)+[A-Z]{2,6}\.?$', re.IGNORECASE)  # domain
validate_email = EmailValidator(email_re, _(u'Enter a valid e-mail address.'), 'invalid')"
2434,check email correctness,False,False,27,"def validateEmail( email ):
    from django.core.validators import validate_email
    from django.core.exceptions import ValidationError
    try:
        validate_email( email )
        return True
    except ValidationError:
        return False"
2435,check email correctness,False,False,47,"from django.core.exceptions import ValidationError
from django.core.validators import validate_email

value = ""foo.bar@baz.qux""

try:
    validate_email(value)
except ValidationError as e:
    print(""bad email, details:"", e)
else:
    print(""good email"")"
2436,squence of integers from 1 to 20 inclusive,False,True,3,os.path.isdigit()
2437,squence of integers from 1 to 20 inclusive,False,True,9,"os.path.translate(len(input), 1)"
2438,squence of integers from 1 to 20 inclusive,False,True,9,"os.path.commonprefix(['hello', 1])"
2439,squence of integers from 1 to 20 inclusive,False,True,9,"os.path.translate(len(input), 0)"
2440,squence of integers from 1 to 20 inclusive,False,True,11,"os.path.translate(int(__file__), '.')"
2441,squence of integers from 1 to 20 inclusive,False,True,6,os.path.decode('9')
2442,squence of integers from 1 to 20 inclusive,False,True,12,os.path.basename(os.path.normpath(len(input) / 2))
2443,squence of integers from 1 to 20 inclusive,True,False,48,"In [46]: import numpy as np
In [47]: np.linspace(0,5,10)
Out[47]: 
array([ 0.        ,  0.55555556,  1.11111111,  1.66666667,  2.22222222,
        2.77777778,  3.33333333,  3.88888889,  4.44444444,  5.        ])"
2444,squence of integers from 1 to 20 inclusive,False,False,40,"In [48]: np.linspace(0,5,10,endpoint=False)
Out[48]: array([ 0. ,  0.5,  1. ,  1.5,  2. ,  2.5,  3. ,  3.5,  4. ,  4.5])"
2445,squence of integers from 1 to 20 inclusive,False,False,16,[lower + x*(upper-lower)/length for x in range(length)]
2446,squence of integers from 1 to 20 inclusive,False,False,44,"def inclusive_slice(myList, slice_from=None, slice_to=None, step=1):
    if slice_to is not None:
        slice_to += 1 if step > 0 else -1
    if slice_to == 0:
        slice_to = None
    return myList[slice_from:slice_to:step]"
2447,squence of integers from 1 to 20 inclusive,False,False,67,"def text2range(text):
    m = re.match(r""from (\d+) to (\d+)"",text)
    start,end = int(m.groups(1)),int(m.groups(2))+1

def range2text(start,end):
    print ""from %d to %d""%(start,end-1)"
2448,squence of integers from 1 to 20 inclusive,False,False,125,">>> import numpy as np
>>> a = np.arange(0,5, 0.5)
>>> a
array([ 0. ,  0.5,  1. ,  1.5,  2. ,  2.5,  3. ,  3.5,  4. ,  4.5])
>>> a = np.arange(0,5, 0.5) # returns a numpy array
>>> a
array([ 0. ,  0.5,  1. ,  1.5,  2. ,  2.5,  3. ,  3.5,  4. ,  4.5])
>>> a.tolist() # if you prefer it as a list
[0.0, 0.5, 1.0, 1.5, 2.0, 2.5, 3.0, 3.5, 4.0, 4.5]"
2449,squence of integers from 1 to 20 inclusive,False,False,39,">>> def integers(a, b):
         return list(range(a, b+1))
>>> integers(2, 5)
[2, 3, 4, 5]"
2450,loop over a range of `count`,False,True,15,"return list(range(0, len(count) + 1))"
2451,loop over a range of `count`,False,True,10,"return list(range(0, 7))"
2452,loop over a range of `count`,True,True,11,"for x in range(0, 10):
    pass"
2453,loop over a range of `count`,False,True,14,"list(range(0, len(count) + 1))"
2454,loop over a range of `count`,False,True,9,"for x in range(0):
    pass"
2455,loop over a range of `count`,False,True,7,list(range(10))
2456,loop over a range of `count`,False,True,27,"for x in range(0, 10):
    print(list(range(0, len(count) + 1)))"
2457,loop over a range of `count`,False,False,10,"for idx,item in enumerate(list):"
2458,loop over a range of `count`,False,False,21,"for single_date in (start_date + timedelta(n) for n in range(day_count)):
    print ..."
2459,loop over a range of `count`,False,False,81,"from datetime import timedelta, date

def daterange(start_date, end_date):
    for n in range(int((end_date - start_date).days)):
        yield start_date + timedelta(n)

start_date = date(2013, 1, 1)
end_date = date(2015, 6, 2)
for single_date in daterange(start_date, end_date):
    print(single_date.strftime(""%Y-%m-%d""))"
2460,loop over a range of `count`,False,False,55,"from datetime import date, timedelta

start_date = date(2019, 1, 1)
end_date = date(2020, 1, 1)
delta = timedelta(days=1)
while start_date <= end_date:
    print (start_date.strftime(""%Y-%m-%d""))
    start_date += delta"
2461,loop over a range of `count`,False,False,54,"from datetime import date
from dateutil.rrule import rrule, DAILY

a = date(2009, 5, 30)
b = date(2009, 6, 9)

for dt in rrule(DAILY, dtstart=a, until=b):
    print dt.strftime(""%Y-%m-%d"")"
2462,loop over a range of `count`,False,False,38,"#count=0
for idx, item in enumerate(list):
    print item
    #count +=1
    #if count % 10 == 0:
    if (idx+1) % 10 == 0:
        print 'did ten'"
2463,loop over a range of `count`,False,False,12,"import pandas as pd
daterange = pd.date_range(start_date, end_date)"
2464,randomly pick an item from `seq`,False,True,8,random.choice(random.split(' '))
2465,randomly pick an item from `seq`,False,True,9,"random.choice(itertools.range(1, 7))"
2466,randomly pick an item from `seq`,False,True,6,random.choice(choice.values())
2467,randomly pick an item from `seq`,True,True,7,random.choice(random.choice(seq.random))
2468,randomly pick an item from `seq`,False,True,9,"random.choice(random.randint(0, 7))"
2469,randomly pick an item from `seq`,False,True,6,random.choice(itertools.TimeGrouper())
2470,randomly pick an item from `seq`,False,True,6,random.choice(random.pair())
2471,randomly pick an item from `seq`,False,False,31,"import random

foo = ['a', 'b', 'c', 'd', 'e']
print(random.choice(foo))"
2472,randomly pick an item from `seq`,False,False,24,"import secrets

foo = ['battery', 'correct', 'horse', 'staple']
print(secrets.choice(foo))"
2473,randomly pick an item from `seq`,False,False,14,"import random

secure_random = random.SystemRandom()
print(secure_random.choice(foo))"
2474,randomly pick an item from `seq`,False,False,14,"from numpy.random import choice
draw = choice(list_of_candidates, number_of_items_to_pick,
              p=probability_distribution)"
2475,randomly pick an item from `seq`,False,False,26,"import random
d = {'VENEZUELA':'CARACAS', 'CANADA':'OTTAWA'}
random.choice(list(d.values()))"
2476,randomly pick an item from `seq`,False,False,13,"country, capital = random.choice(list(d.items()))"
2477,randomly pick an item from `seq`,False,False,210,"Python 3.6.1 (v3.6.1:69c0db5050, Mar 21 2017, 01:21:04)
Type 'copyright', 'credits' or 'license' for more information
IPython 6.0.0 -- An enhanced Interactive Python. Type '?' for help.

In [1]: import random

In [2]: random.choices(
...:     population=[['a','b'], ['b','a'], ['c','b']],
...:     weights=[0.2, 0.2, 0.6],
...:     k=10
...: )

Out[2]:
[['c', 'b'],
 ['c', 'b'],
 ['b', 'a'],
 ['c', 'b'],
 ['c', 'b'],
 ['b', 'a'],
 ['c', 'b'],
 ['b', 'a'],
 ['c', 'b'],
 ['c', 'b']]"
2478,call `pick_with_replacement`,False,True,5,pick_with_replacement.call(pick_with_replacement='pick_with_replacement')
2479,call `pick_with_replacement`,False,True,4,pick_with_replacement.call(**pick_with_replacement)
2480,call `pick_with_replacement`,False,True,6,call(pick_with_replacement.pick_with_replacement())
2481,call `pick_with_replacement`,False,True,4,pick_with_replacement.pick_with_replacement(**pick_with_replacement)
2482,call `pick_with_replacement`,False,True,6,"pick_with_replacement.pick_with_replacement(pick_with_replacement=
    'pick_with_replacement')"
2483,call `pick_with_replacement`,False,True,5,call(pick_with_replacement='pick_with_replacement')
2484,call `pick_with_replacement`,True,True,3,pick_with_replacement()
2485,call `pick_with_replacement`,False,False,7,>>> x = []
2486,call `pick_with_replacement`,False,False,21,"def append_one(li):
    li.append(1)
x = [0]
append_one(x)
print x"
2487,call `pick_with_replacement`,False,False,24,"def append_one(li):
    li = [0, 1]
x = [0]
append_one(x)
print x"
2488,call `pick_with_replacement`,False,False,33,"def foo(y):
  y[0] = y[0]**2

x = [5]
foo(x)
print x[0]  # prints 25"
2489,call `pick_with_replacement`,False,False,36,"def foo(x, y):
   return x**2, y**2

a = 2
b = 3
a, b = foo(a, b)  # a == 4; b == 9"
2490,call `pick_with_replacement`,False,False,46,"def clear_a(x):
  x = []

def clear_b(x):
  while x: x.pop()

z = [1,2,3]
clear_a(z) # z will not be changed
clear_b(z) # z will be emptied"
2491,call `pick_with_replacement`,False,False,29,"np.random.choice(
  ['pooh', 'rabbit', 'piglet', 'Christopher'], 
  5,
  p=[0.5, 0.1, 0.1, 0.3]
)"
2492,zip `hundred_characters` with `hundred_numbers`,False,True,18,"[(x + hundred_numbers) for x, y in zip(hundred_characters, hundred_numbers)]"
2493,zip `hundred_characters` with `hundred_numbers`,False,True,18,"[(x + hundred_numbers) for x, hundred_numbers in zip(hundred_characters,
    hundred_numbers)]"
2494,zip `hundred_characters` with `hundred_numbers`,False,True,18,"[(hundred_characters + hundred_numbers) for i, j in zip(hundred_characters,
    hundred_numbers)]"
2495,zip `hundred_characters` with `hundred_numbers`,True,True,18,"[(x + y) for x, y in zip(hundred_characters, hundred_numbers)]"
2496,zip `hundred_characters` with `hundred_numbers`,False,True,28,"[(x + ((hundred_numbers,) & set(hundred_characters))) for x, y in zip(
    hundred_characters, hundred_numbers)]"
2497,zip `hundred_characters` with `hundred_numbers`,False,True,27,"[(x + ((hundred_numbers,) & hundred_characters + hundred_numbers)) for x, y in
    zip(hundred_characters, hundred_numbers)]"
2498,zip `hundred_characters` with `hundred_numbers`,False,True,23,"[(x + hundred_numbers(hundred_numbers, hundred_numbers)) for x, y in zip(
    hundred_characters, hundred_numbers)]"
2499,zip `hundred_characters` with `hundred_numbers`,False,False,140,"import numpy as np

a = np.array([1,2,3,4,5])
b = np.array([6,7,8,9,10])

c = np.dstack((a,b))
#or
d = np.column_stack((a,b))

>>> c
array([[[ 1,  6],
        [ 2,  7],
        [ 3,  8],
        [ 4,  9],
        [ 5, 10]]])
>>> d
array([[ 1,  6],
       [ 2,  7],
       [ 3,  8],
       [ 4,  9],
       [ 5, 10]])

>>> c.shape
(1, 5, 2)
>>> d.shape
(5, 2)"
2500,zip `hundred_characters` with `hundred_numbers`,False,False,55,"A = [1,2,3,4,5,6,7,8,9]
B = [""A"",""B"",""C""]

from itertools import cycle
zip_list = zip(A, cycle(B)) if len(A) > len(B) else zip(cycle(A), B)"
2501,zip `hundred_characters` with `hundred_numbers`,False,False,67,">>> np.dstack((a,b))
array([[[0, 0],
        [1, 1],
        [2, 2],
        [3, 3]],

       [[4, 4],
        [5, 5],
        [6, 6],
        [7, 7]]])"
2502,zip `hundred_characters` with `hundred_numbers`,False,False,107,">>> np.array(zip(a.ravel(),b.ravel()), dtype=('i4,i4')).reshape(a.shape)
array([[(0, 0), (1, 1), (2, 2), (3, 3)],
       [(4, 4), (5, 5), (6, 6), (7, 7)]],
      dtype=[('f0', '<i4'), ('f1', '<i4')])"
2503,zip `hundred_characters` with `hundred_numbers`,False,False,110,">>> np.array(list(zip(a.ravel(),b.ravel())), dtype=('i4,i4')).reshape(a.shape)
array([[(0, 0), (1, 1), (2, 2), (3, 3)],
       [(4, 4), (5, 5), (6, 6), (7, 7)]],
      dtype=[('f0', '<i4'), ('f1', '<i4')])"
2504,zip `hundred_characters` with `hundred_numbers`,False,False,12,"np.array(list(zip(a,b)))"
2505,zip `hundred_characters` with `hundred_numbers`,False,False,28,"list(zip(a,b,zip(c[0::2],c[1::2]),d))"
2506,list all text files in the data directory,False,True,8,glob.glob('<unk>')
2507,list all text files in the data directory,True,True,49,"for dirname, dirnames, filenames in os.walk('<unk>'):
    for line in f:
        e = f.read()
    for line in os.listdir('<unk>'):
        e = f.read()
    for line in filenames:
        pass"
2508,list all text files in the data directory,False,True,43,"for dirname, dirnames, filenames in os.walk('<unk>'):
    for line in f:
        e = f.read()
    for line in os.listdir('<unk>'):
        e = f.read()"
2509,list all text files in the data directory,False,True,29,"for dirname, line in os.walk('<unk>'):
    for line in ins:
        print(line.replace('\r', ''))"
2510,list all text files in the data directory,False,True,46,"for dirname, dirnames, filenames in os.walk('<unk>'):
    for line in ins:
        print(line.path.join(dirname, line))
    for line in open('file.txt').read():
        print(line)"
2511,list all text files in the data directory,False,True,31,"for dirname, dirnames, filenames in os.walk('<unk>'):
    for line in ins:
        print(line.replace('\r', ''))"
2512,list all text files in the data directory,False,True,23,"f = []
for dirpath, dirnames, filenames in walk('f'):
    f.write('\n')"
2513,list all text files in the data directory,False,False,32,"from os import listdir
from os.path import isfile, join
onlyfiles = [f for f in listdir(mypath) if isfile(join(mypath, f))]"
2514,list all text files in the data directory,False,False,27,"from os import walk

f = []
for (dirpath, dirnames, filenames) in walk(mypath):
    f.extend(filenames)
    break"
2515,list all text files in the data directory,False,False,24,"import glob, os
os.chdir(""/mydir"")
for file in glob.glob(""*.txt""):
    print(file)"
2516,list all text files in the data directory,False,False,31,"import os
for file in os.listdir(""/mydir""):
    if file.endswith("".txt""):
        print(os.path.join(""/mydir"", file))"
2517,list all text files in the data directory,True,False,38,"import os
for root, dirs, files in os.walk(""/mydir""):
    for file in files:
        if file.endswith("".txt""):
             print(os.path.join(root, file))"
2518,list all text files in the data directory,False,False,11,"import glob
print(glob.glob(""/home/adam/*.txt""))"
2519,list all text files in the data directory,False,False,10,"['/home/adam/file1.txt', '/home/adam/file2.txt', .... ]"
2520,list all text files in the data directory,False,True,8,glob.glob('<unk>')
2521,list all text files in the data directory,True,True,49,"for dirname, dirnames, filenames in os.walk('<unk>'):
    for line in f:
        e = f.read()
    for line in os.listdir('<unk>'):
        e = f.read()
    for line in filenames:
        pass"
2522,list all text files in the data directory,False,True,43,"for dirname, dirnames, filenames in os.walk('<unk>'):
    for line in f:
        e = f.read()
    for line in os.listdir('<unk>'):
        e = f.read()"
2523,list all text files in the data directory,False,True,29,"for dirname, line in os.walk('<unk>'):
    for line in ins:
        print(line.replace('\r', ''))"
2524,list all text files in the data directory,False,True,46,"for dirname, dirnames, filenames in os.walk('<unk>'):
    for line in ins:
        print(line.path.join(dirname, line))
    for line in open('file.txt').read():
        print(line)"
2525,list all text files in the data directory,False,True,31,"for dirname, dirnames, filenames in os.walk('<unk>'):
    for line in ins:
        print(line.replace('\r', ''))"
2526,list all text files in the data directory,False,True,23,"f = []
for dirpath, dirnames, filenames in walk('f'):
    f.write('\n')"
2527,list all text files in the data directory,False,False,32,"from os import listdir
from os.path import isfile, join
onlyfiles = [f for f in listdir(mypath) if isfile(join(mypath, f))]"
2528,list all text files in the data directory,False,False,27,"from os import walk

f = []
for (dirpath, dirnames, filenames) in walk(mypath):
    f.extend(filenames)
    break"
2529,list all text files in the data directory,False,False,24,"import glob, os
os.chdir(""/mydir"")
for file in glob.glob(""*.txt""):
    print(file)"
2530,list all text files in the data directory,False,False,31,"import os
for file in os.listdir(""/mydir""):
    if file.endswith("".txt""):
        print(os.path.join(""/mydir"", file))"
2531,list all text files in the data directory,True,False,38,"import os
for root, dirs, files in os.walk(""/mydir""):
    for file in files:
        if file.endswith("".txt""):
             print(os.path.join(root, file))"
2532,list all text files in the data directory,False,False,11,"import glob
print(glob.glob(""/home/adam/*.txt""))"
2533,list all text files in the data directory,False,False,10,"['/home/adam/file1.txt', '/home/adam/file2.txt', .... ]"
2534,read a file and iterate over its contents,False,True,10,"f = open('file', 'rb')"
2535,read a file and iterate over its contents,False,True,15,"print(os.open('file', 'r').read())"
2536,read a file and iterate over its contents,False,True,14,"print(open('file', 'rb').read())"
2537,read a file and iterate over its contents,False,True,14,"print(os.open('file', 'rb').read())"
2538,read a file and iterate over its contents,False,True,13,print(re.compile('aaabcabccd').unicode - escape())
2539,read a file and iterate over its contents,False,True,11,"f = open('file', 'r')"
2540,read a file and iterate over its contents,False,True,11,print(f.read().split(' '))
2541,read a file and iterate over its contents,False,False,43,"with open(filename) as f:
    content = f.readlines()
# you may also want to remove whitespace characters like `\n` at the end of each line
content = [x.strip() for x in content]"
2542,read a file and iterate over its contents,False,False,14,"with open('filename') as f:
    lines = f.readlines()"
2543,read a file and iterate over its contents,False,False,20,"with open('filename') as f:
    lines = [line.rstrip() for line in f]"
2544,read a file and iterate over its contents,True,False,23,"with open(""file.txt"") as file_in:
    lines = []
    for line in file_in:
        lines.append(line)"
2545,read a file and iterate over its contents,False,False,13,"lines = tuple(open(filename, 'r'))"
2546,read a file and iterate over its contents,False,False,13,"with open(fname) as f:
    content = f.readlines()"
2547,read a file and iterate over its contents,False,False,16,"with open(fname) as f:
    content = f.read().splitlines()"
2548,walke all files in a directory,True,True,5,os.listdir('..')
2549,walke all files in a directory,False,True,5,glob.glob('*')
2550,walke all files in a directory,False,True,6,print(f.read())
2551,walke all files in a directory,False,True,6,print(os.getcwd())
2552,walke all files in a directory,False,True,15,print([f.read() for dirname in os.walk(directory)])
2553,walke all files in a directory,False,True,5,f.listdir('..')
2554,walke all files in a directory,False,True,19,print([f.read() for f in open('file.txt').read()])
2555,walke all files in a directory,False,False,32,"from os import listdir
from os.path import isfile, join
onlyfiles = [f for f in listdir(mypath) if isfile(join(mypath, f))]"
2556,walke all files in a directory,False,False,27,"from os import walk

f = []
for (dirpath, dirnames, filenames) in walk(mypath):
    f.extend(filenames)
    break"
2557,walke all files in a directory,False,False,11,"import glob
print(glob.glob(""/home/adam/*.txt""))"
2558,walke all files in a directory,False,False,10,"['/home/adam/file1.txt', '/home/adam/file2.txt', .... ]"
2559,walke all files in a directory,False,False,29,"import os
 arr = os.listdir()
 print(arr)

 >>> ['$RECYCLE.BIN', 'work.txt', '3ebooks.txt', 'documents']"
2560,walke all files in a directory,False,False,20,"import glob

txtfiles = []
for file in glob.glob(""*.txt""):
    txtfiles.append(file)"
2561,walke all files in a directory,False,False,16,"import glob

mylist = [f for f in glob.glob(""*.txt"")]"
2562,list all filepaths in a directory,True,True,5,glob.glob('*')
2563,list all filepaths in a directory,False,True,5,glob.glob('Date')
2564,list all filepaths in a directory,False,True,11,print(' '.join(os.walk(filepaths)))
2565,list all filepaths in a directory,False,True,4,sys.path(0)
2566,list all filepaths in a directory,False,True,5,ast.literal_eval('filepaths')
2567,list all filepaths in a directory,False,True,6,glob.glob('?')
2568,list all filepaths in a directory,False,True,4,sys.path(1)
2569,list all filepaths in a directory,False,False,32,"from os import listdir
from os.path import isfile, join
onlyfiles = [f for f in listdir(mypath) if isfile(join(mypath, f))]"
2570,list all filepaths in a directory,False,False,27,"from os import walk

f = []
for (dirpath, dirnames, filenames) in walk(mypath):
    f.extend(filenames)
    break"
2571,list all filepaths in a directory,False,False,24,"import glob, os
os.chdir(""/mydir"")
for file in glob.glob(""*.txt""):
    print(file)"
2572,list all filepaths in a directory,False,False,31,"import os
for file in os.listdir(""/mydir""):
    if file.endswith("".txt""):
        print(os.path.join(""/mydir"", file))"
2573,list all filepaths in a directory,False,False,38,"import os
for root, dirs, files in os.walk(""/mydir""):
    for file in files:
        if file.endswith("".txt""):
             print(os.path.join(root, file))"
2574,list all filepaths in a directory,False,False,11,"import glob
print(glob.glob(""/home/adam/*.txt""))"
2575,list all filepaths in a directory,False,False,10,"['/home/adam/file1.txt', '/home/adam/file2.txt', .... ]"
2576,walk all files in a directory,False,True,7,os.path.dirname(os.path.abspath(__file__))
2577,walk all files in a directory,False,True,10,"os.path.join(os.getcwd(), 'A')"
2578,walk all files in a directory,False,True,9,"os.path.join(os.path.dirname(__file__), '')"
2579,walk all files in a directory,False,True,11,"os.path.join(os.path.dirname(__file__), 'A')"
2580,walk all files in a directory,False,True,7,os.path.dirname(os.path.abspath(existGDBPath))
2581,walk all files in a directory,False,True,9,"os.path.join(os.path.dirname(subdirname), '')"
2582,walk all files in a directory,False,True,9,"os.path.join(imp.fileno(pid), '')"
2583,walk all files in a directory,True,False,32,"from os import listdir
from os.path import isfile, join
onlyfiles = [f for f in listdir(mypath) if isfile(join(mypath, f))]"
2584,walk all files in a directory,False,False,27,"from os import walk

f = []
for (dirpath, dirnames, filenames) in walk(mypath):
    f.extend(filenames)
    break"
2585,walk all files in a directory,False,False,24,"import glob, os
os.chdir(""/mydir"")
for file in glob.glob(""*.txt""):
    print(file)"
2586,walk all files in a directory,False,False,31,"import os
for file in os.listdir(""/mydir""):
    if file.endswith("".txt""):
        print(os.path.join(""/mydir"", file))"
2587,walk all files in a directory,False,False,38,"import os
for root, dirs, files in os.walk(""/mydir""):
    for file in files:
        if file.endswith("".txt""):
             print(os.path.join(root, file))"
2588,walk all files in a directory,False,False,11,"import glob
print(glob.glob(""/home/adam/*.txt""))"
2589,walk all files in a directory,False,False,10,"['/home/adam/file1.txt', '/home/adam/file2.txt', .... ]"
2590,"walk all nested files in the directory ""data""",False,True,5,os.listdir('data')
2591,"walk all nested files in the directory ""data""",False,True,8,os.chdir(os.path.normpath('data'))
2592,"walk all nested files in the directory ""data""",False,True,7,os.chdir(os.path.abspath(__file__))
2593,"walk all nested files in the directory ""data""",False,True,7,os.chdir(os.path.realpath(__file__))
2594,"walk all nested files in the directory ""data""",False,True,5,os.chdir('data')
2595,"walk all nested files in the directory ""data""",False,True,7,os.chdir(os.path.abspath(data))
2596,"walk all nested files in the directory ""data""",False,True,5,os.walk('data')
2597,"walk all nested files in the directory ""data""",True,False,32,"import os
rootdir = 'C:/Users/sid/Desktop/test'

for subdir, dirs, files in os.walk(rootdir):
    for file in files:
        print os.path.join(subdir, file)"
2598,"walk all nested files in the directory ""data""",False,False,34,"import os
rootdir = 'C:/Users/sid/Desktop/test'

for subdir, dirs, files in os.walk(rootdir):
    for file in files:
        print(os.path.join(subdir, file))"
2599,"walk all nested files in the directory ""data""",False,False,79,"#!/usr/bin/python

import os

# traverse root directory, and list directories as dirs and files as files
for root, dirs, files in os.walk("".""):
    path = root.split(os.sep)
    print((len(path) - 1) * '---', os.path.basename(root))
    for file in files:
        print(len(path) * '---', file)"
2600,"walk all nested files in the directory ""data""",False,False,24,"for path, subdirs, files in os.walk(root):
    for name in files:
        print os.path.join(path, name)"
2601,"walk all nested files in the directory ""data""",False,False,6,"pathlib.PurePath(path, name)"
2602,"walk all nested files in the directory ""data""",False,False,90,"import os

def list_files(startpath):
    for root, dirs, files in os.walk(startpath):
        level = root.replace(startpath, '').count(os.sep)
        indent = ' ' * 4 * (level)
        print('{}{}/'.format(indent, os.path.basename(root)))
        subindent = ' ' * 4 * (level + 1)
        for f in files:
            print('{}{}'.format(subindent, f))"
2603,"walk all nested files in the directory ""data""",False,False,33,"for root, dirs, files in os.walk(path):
    for name in files:
        if name.endswith(("".html"", "".htm"")):
            # whatever"
2604,search all matches in a string,True,True,14,"re.findall('<unk>', '<unk>')"
2605,search all matches in a string,False,True,11,"re.findall('<unk>', 'Hello')"
2606,search all matches in a string,True,True,10,"re.findall('<unk>', s)"
2607,search all matches in a string,False,True,11,"re.findall('<unk>', 'test')"
2608,search all matches in a string,False,True,12,"re.findall('<unk>', 'a')"
2609,search all matches in a string,False,True,11,"re.findall('<unk>', 'bar')"
2610,search all matches in a string,False,True,11,"re.findall('<unk>', 'hello')"
2611,search all matches in a string,False,False,82,"re.findall( r'all (.*?) are', 'all cats are smarter than dogs, all dogs are dumber than cats')
# Output: ['cats', 'dogs']

[x.group() for x in re.finditer( r'all (.*?) are', 'all cats are smarter than dogs, all dogs are dumber than cats')]
# Output: ['all cats are', 'all dogs are']"
2612,search all matches in a string,False,False,31,"import re
[m.start() for m in re.finditer('test', 'test test test test')]
#[0, 5, 10, 15]"
2613,search all matches in a string,False,False,26,"[m.start() for m in re.finditer('(?=tt)', 'ttt')]
#[0, 1]"
2614,search all matches in a string,False,False,54,"search = 'tt'
[m.start() for m in re.finditer('(?=%s)(?!.{1,%d}%s)' % (search, len(search)-1, search), 'ttt')]
#[1]"
2615,search all matches in a string,False,False,68,">>> p = re.compile(""name (.*) is valid"")
>>> result = p.search(s)
>>> result
<_sre.SRE_Match object at 0x10555e738>
>>> result.group(1)     # group(1) will return the 1st capture.
                        # group(0) will returned the entire matched text.
'my_user_name'"
2616,search all matches in a string,False,False,30,">>> help(str.find)
Help on method_descriptor:

find(...)
    S.find(sub [,start [,end]]) -> int"
2617,search all matches in a string,False,False,69,"def find_all(a_str, sub):
    start = 0
    while True:
        start = a_str.find(sub, start)
        if start == -1: return
        yield start
        start += len(sub) # use start += 1 to find overlapping matches

list(find_all('spam spam spam spam', 'spam')) # [0, 5, 10, 15]"
2618,search all matches in a string,True,True,14,"re.findall('<unk>', '<unk>')"
2619,search all matches in a string,False,True,11,"re.findall('<unk>', 'Hello')"
2620,search all matches in a string,True,True,10,"re.findall('<unk>', s)"
2621,search all matches in a string,False,True,11,"re.findall('<unk>', 'test')"
2622,search all matches in a string,False,True,12,"re.findall('<unk>', 'a')"
2623,search all matches in a string,False,True,11,"re.findall('<unk>', 'bar')"
2624,search all matches in a string,False,True,11,"re.findall('<unk>', 'hello')"
2625,search all matches in a string,False,False,82,"re.findall( r'all (.*?) are', 'all cats are smarter than dogs, all dogs are dumber than cats')
# Output: ['cats', 'dogs']

[x.group() for x in re.finditer( r'all (.*?) are', 'all cats are smarter than dogs, all dogs are dumber than cats')]
# Output: ['all cats are', 'all dogs are']"
2626,search all matches in a string,False,False,31,"import re
[m.start() for m in re.finditer('test', 'test test test test')]
#[0, 5, 10, 15]"
2627,search all matches in a string,False,False,26,"[m.start() for m in re.finditer('(?=tt)', 'ttt')]
#[0, 1]"
2628,search all matches in a string,False,False,54,"search = 'tt'
[m.start() for m in re.finditer('(?=%s)(?!.{1,%d}%s)' % (search, len(search)-1, search), 'ttt')]
#[1]"
2629,search all matches in a string,False,False,16,"if any(ext in url_string for ext in extensionsToCheck):
    print(url_string)"
2630,search all matches in a string,False,False,10,"re.finditer(pattern, string[, flags])"
2631,search all matches in a string,False,False,22,"[(m.start(0), m.end(0)) for m in re.finditer(pattern, string)]"
2632,search all matches in a string,True,True,14,"re.findall('<unk>', '<unk>')"
2633,search all matches in a string,False,True,11,"re.findall('<unk>', 'Hello')"
2634,search all matches in a string,True,True,10,"re.findall('<unk>', s)"
2635,search all matches in a string,False,True,11,"re.findall('<unk>', 'test')"
2636,search all matches in a string,False,True,12,"re.findall('<unk>', 'a')"
2637,search all matches in a string,False,True,11,"re.findall('<unk>', 'bar')"
2638,search all matches in a string,False,True,11,"re.findall('<unk>', 'hello')"
2639,search all matches in a string,False,False,82,"re.findall( r'all (.*?) are', 'all cats are smarter than dogs, all dogs are dumber than cats')
# Output: ['cats', 'dogs']

[x.group() for x in re.finditer( r'all (.*?) are', 'all cats are smarter than dogs, all dogs are dumber than cats')]
# Output: ['all cats are', 'all dogs are']"
2640,search all matches in a string,False,False,31,"import re
[m.start() for m in re.finditer('test', 'test test test test')]
#[0, 5, 10, 15]"
2641,search all matches in a string,False,False,26,"[m.start() for m in re.finditer('(?=tt)', 'ttt')]
#[0, 1]"
2642,search all matches in a string,False,False,54,"search = 'tt'
[m.start() for m in re.finditer('(?=%s)(?!.{1,%d}%s)' % (search, len(search)-1, search), 'ttt')]
#[1]"
2643,search all matches in a string,False,False,16,"if any(ext in url_string for ext in extensionsToCheck):
    print(url_string)"
2644,search all matches in a string,False,False,68,">>> p = re.compile(""name (.*) is valid"")
>>> result = p.search(s)
>>> result
<_sre.SRE_Match object at 0x10555e738>
>>> result.group(1)     # group(1) will return the 1st capture.
                        # group(0) will returned the entire matched text.
'my_user_name'"
2645,search all matches in a string,False,False,30,">>> help(str.find)
Help on method_descriptor:

find(...)
    S.find(sub [,start [,end]]) -> int"
2646,regex digit python,False,True,10,"re.findall('<unk>', string)"
2647,regex digit python,False,True,14,"re.findall('<unk>', '<unk>')"
2648,regex digit python,False,True,10,"re.findall('<unk>', regex)"
2649,regex digit python,False,True,10,"re.findall('<unk>', text)"
2650,regex digit python,False,True,10,"re.findall('<unk>', str)"
2651,regex digit python,False,True,10,"re.findall('<unk>', re)"
2652,regex digit python,False,True,13,"re.findall('<unk>', 'digit', text)"
2653,regex digit python,True,False,43,">>> import re
>>> s=""four digits 1234 five digits 56789 six digits 012345""
>>> re.findall(r""\D(\d{5})\D"", s)
['56789']"
2654,regex digit python,False,False,23,">>> re.findall(r""\D(\d{5})\D"", "" ""+s+"" "")"
2655,regex digit python,False,False,4,"\d{4,7}"
2656,regex digit python,False,False,5,^\d{15}$
2657,regex digit python,False,False,6,^\D*\d{15}\D*$
2658,regex digit python,False,False,55,">>> s = ""This must not b3 delet3d, but the number at the end yes 134411""
>>> s = re.sub("" \d+"", "" "", s)
>>> s
'This must not b3 delet3d, but the number at the end yes '"
2659,regex digit python,False,False,14,"s = re.sub(""^\d+\s|\s\d+\s|\s\d+$"", "" "", s)"
2660,regex digit python,False,True,10,"re.findall('<unk>', string)"
2661,regex digit python,False,True,14,"re.findall('<unk>', '<unk>')"
2662,regex digit python,False,True,10,"re.findall('<unk>', regex)"
2663,regex digit python,False,True,10,"re.findall('<unk>', text)"
2664,regex digit python,False,True,10,"re.findall('<unk>', str)"
2665,regex digit python,False,True,10,"re.findall('<unk>', re)"
2666,regex digit python,False,True,13,"re.findall('<unk>', 'digit', text)"
2667,regex digit python,True,False,43,">>> import re
>>> s=""four digits 1234 five digits 56789 six digits 012345""
>>> re.findall(r""\D(\d{5})\D"", s)
['56789']"
2668,regex digit python,False,False,23,">>> re.findall(r""\D(\d{5})\D"", "" ""+s+"" "")"
2669,regex digit python,False,False,4,"\d{4,7}"
2670,regex digit python,False,False,5,^\d{15}$
2671,regex digit python,False,False,6,^\D*\d{15}\D*$
2672,regex digit python,False,False,55,">>> s = ""This must not b3 delet3d, but the number at the end yes 134411""
>>> s = re.sub("" \d+"", "" "", s)
>>> s
'This must not b3 delet3d, but the number at the end yes '"
2673,regex digit python,False,False,14,"s = re.sub(""^\d+\s|\s\d+\s|\s\d+$"", "" "", s)"
2674,extract year month day from string regex,False,True,14,"re.sub('<unk>', '.', year)"
2675,extract year month day from string regex,False,True,13,"re.sub('<unk>', 'today', year)"
2676,extract year month day from string regex,False,True,11,"re.findall('<unk>', 'today')"
2677,extract year month day from string regex,False,True,8,"re.findall('today', 'today')"
2678,extract year month day from string regex,False,True,11,"re.sub('today', '.', year)"
2679,extract year month day from string regex,False,True,14,"re.sub('<unk>', '.', url)"
2680,extract year month day from string regex,False,True,12,"re.sub('<unk>', '', url)"
2681,extract year month day from string regex,False,False,42,"In [1]: import dateutil.parser as dparser

In [18]: dparser.parse(""monkey 2010-07-10 love banana"",fuzzy=True)
Out[18]: datetime.datetime(2010, 7, 10, 0, 0)"
2682,extract year month day from string regex,False,False,26,"In [19]: dparser.parse(""monkey 2010-07-32 love banana"",fuzzy=True)
# ValueError: day is out of range for month"
2683,extract year month day from string regex,False,False,33,"In [20]: dparser.parse(""monkey 20/01/1980 love banana"",fuzzy=True)
Out[20]: datetime.datetime(1980, 1, 20, 0, 0)"
2684,extract year month day from string regex,False,False,33,"In [23]: dparser.parse(""monkey 10/01/1980 love banana"",fuzzy=True)
Out[23]: datetime.datetime(1980, 10, 1, 0, 0)"
2685,extract year month day from string regex,False,False,35,"In [21]: dparser.parse(""monkey 10/01/1980 love banana"",fuzzy=True, dayfirst=True)
Out[21]: datetime.datetime(1980, 1, 10, 0, 0)"
2686,extract year month day from string regex,True,False,46,"import re
from datetime import datetime

match = re.search(r'\d{4}-\d{2}-\d{2}', text)
date = datetime.strptime(match.group(), '%Y-%m-%d').date()"
2687,extract year month day from string regex,False,False,74,"In [140]: datetime.datetime.strptime(""11/12/98"",""%m/%d/%y"")
Out[140]: datetime.datetime(1998, 11, 12, 0, 0)

In [141]: datetime.datetime.strptime(""11/12/98"",""%d/%m/%y"")
Out[141]: datetime.datetime(1998, 12, 11, 0, 0)"
2688,move file,False,True,8,os.listdir('<unk>')
2689,move file,False,True,14,"shutil.copy2('<unk>', '<unk>')"
2690,move file,False,True,5,os.listdir('file')
2691,move file,False,True,4,os.chdir(file)
2692,move file,True,True,7,"shutil.copy2(file, 'filenames')"
2693,move file,False,True,8,"shutil.copy2('file', 'rb')"
2694,move file,False,True,6,"os.rename(file, file)"
2695,move file,False,False,34,"import os
import shutil

os.rename(""path/to/current/file.foo"", ""path/to/new/destination/for/file.foo"")
shutil.move(""path/to/current/file.foo"", ""path/to/new/destination/for/file.foo"")
os.replace(""path/to/current/file.foo"", ""path/to/new/destination/for/file.foo"")"
2696,move file,False,False,27,"import shutil
import os

source = '/path/to/source_folder'
dest1 = '/path/to/dest_folder'

files = os.listdir(source)

for f in files:
    shutil.move(source+f, dest1)"
2697,move file,False,False,50,"in /opt/awesome
○ → ls
source
○ → ls source
awesome.txt

python 
>>> source = '/opt/awesome/source'
>>> destination = '/opt/awesome/destination'
>>> import os
>>> os.rename(source, destination)
>>> os.listdir('/opt/awesome')
['destination']"
2698,move file,False,False,26,">>> import shutil
>>> shutil.move(destination, source)
>>> os.listdir('/opt/awesome/source')
['awesome.txt']"
2699,move file,False,False,16,"from pathlib import Path

Path(""path/to/current/file.foo"").rename(""path/to/new/destination/for/file.foo"")"
2700,move file,False,False,21,"import boto

c = boto.connect_s3()
src = c.get_bucket('my_source_bucket')
dst = c.get_bucket('my_destination_bucket')"
2701,move file,False,False,31,"for k in src.list():
    # copy stuff to your destination here
    dst.copy_key(k.key.name, src.name, k.key.name)
    # then delete the source key
    k.delete()"
2702,argparse subprogram,False,True,8,"parser.add_argument('filename', nargs='*')"
2703,argparse subprogram,False,True,3,db.sys.exit()
2704,argparse subprogram,False,True,10,"parser.add_argument('filename', nargs='Q')"
2705,argparse subprogram,False,True,8,"parser.add_argument('Name', nargs='*')"
2706,argparse subprogram,False,True,4,db.sys.exit('')
2707,argparse subprogram,False,True,3,p.xaxis.tick_top()
2708,argparse subprogram,False,True,8,"parser.add_argument('filename', nargs='Name')"
2709,argparse subprogram,False,False,15,"parser = argparse.ArgumentParser()
subparsers = parser.add_subparsers(dest='cmd')
subparsers.required = True"
2710,argparse subprogram,False,False,27,"1909:~/mypy$ argdev/python3 stack23349349.py
usage: stack23349349.py [-h] {foo} ...
stack23349349.py: error: the following arguments are required: cmd"
2711,argparse subprogram,False,False,132,"import argparse

## This function takes the 'extra' attribute from global namespace and re-parses it to create separate namespaces for all other chained commands.
def parse_extra (parser, namespace):
  namespaces = []
  extra = namespace.extra
  while extra:
    n = parser.parse_args(extra)
    extra = n.extra
    namespaces.append(n)

  return namespaces

argparser=argparse.ArgumentParser()
subparsers = argparser.add_subparsers(help='sub-command help', dest='subparser_name')

parser_a = subparsers.add_parser('command_a', help = ""command_a help"")
## Setup options for parser_a

## Add nargs=""*"" for zero or more other commands
argparser.add_argument('extra', nargs = ""*"", help = 'Other commands')

## Do similar stuff for other sub-parsers"
2712,argparse subprogram,False,False,120,"parent_parser = argparse.ArgumentParser(add_help=False)                                                                                                  
parent_parser.add_argument('--user', '-u',                                                                                                               
                    default=getpass.getuser(),                                                                                                           
                    help='username')                                                                                                                     
parent_parser.add_argument('--debug', default=False, required=False,                                                                                     
                           action='store_true', dest=""debug"", help='debug flag')                                                                         
main_parser = argparse.ArgumentParser()                                                                                                                  
service_subparsers = main_parser.add_subparsers(title=""service"",                                                                                         
                    dest=""service_command"")                                                                                                              
service_parser = service_subparsers.add_parser(""first"", help=""first"",                                                                                    
                    parents=[parent_parser])                                                                                                             
action_subparser = service_parser.add_subparsers(title=""action"",                                                                                         
                    dest=""action_command"")                                                                                                               
action_parser = action_subparser.add_parser(""second"", help=""second"",                                                                                     
                    parents=[parent_parser])                                                                                                             

args = main_parser.parse_args()"
2713,argparse subprogram,False,False,18,"import argparse

parser = argparse.ArgumentParser()
print('parser.prog: {}'.format(parser.prog))"
2714,argparse subprogram,True,False,100,"import argparse
parser = argparse.ArgumentParser()
parser.add_argument('--foo')
sub = parser.add_subparsers()
for i in range(1,4):
    sp = sub.add_parser('cmd%i'%i)
    sp.add_argument('--foo%i'%i) # optionals have to be distinct

rest = '--foo 0 cmd2 --foo2 2 cmd3 --foo3 3 cmd1 --foo1 1'.split() # or sys.argv
args = argparse.Namespace()
while rest:
    args,rest =  parser.parse_known_args(rest,namespace=args)
    print args, rest"
2715,argparse subprogram,False,False,91,"Namespace(foo='0', foo2='2') ['cmd3', '--foo3', '3', 'cmd1', '--foo1', '1']
Namespace(foo='0', foo2='2', foo3='3') ['cmd1', '--foo1', '1']
Namespace(foo='0', foo1='1', foo2='2', foo3='3') []"
2716,request with params,False,True,8,urllib.request.urlopen('<unk>')
2717,request with params,False,True,14,"urllib.request.url('<unk>', '<unk>')"
2718,request with params,False,True,14,requests.session.query('<unk> <unk> <unk>')
2719,request with params,False,True,6,urllib.request.urlopen('test test')
2720,request with params,False,True,7,urllib.request.urlopen('test test test')
2721,request with params,False,True,5,urllib.request.urlopen('test')
2722,request with params,False,True,10,"request.GET.get('<unk>', '')"
2723,request with params,False,False,19,"r=requests.get(""http://www.example.com/"", headers={""content-type"":""text""})"
2724,request with params,False,False,20,"params = {'sessionKey': '9ebbd0b25760557393a43064a92bae539d962103', 'format': 'xml', 'platformId': 1}"
2725,request with params,True,False,76,"import requests

url = 'http://192.168.3.45:8080/api/v2/event/log'

data = {""eventType"": ""AAS_PORTAL_START"", ""data"": {""uid"": ""hfe3hf45huf33545"", ""aid"": ""1"", ""vid"": ""1""}}
params = {'sessionKey': '9ebbd0b25760557393a43064a92bae539d962103', 'format': 'xml', 'platformId': 1}

requests.post(url, params=params, json=data)"
2726,request with params,False,False,92,"import requests
import json

headers = {'content-type': 'application/json'}
url = 'http://192.168.3.45:8080/api/v2/event/log'

data = {""eventType"": ""AAS_PORTAL_START"", ""data"": {""uid"": ""hfe3hf45huf33545"", ""aid"": ""1"", ""vid"": ""1""}}
params = {'sessionKey': '9ebbd0b25760557393a43064a92bae539d962103', 'format': 'xml', 'platformId': 1}

requests.post(url, params=params, data=json.dumps(data), headers=headers)"
2727,request with params,False,False,33,"data = {'name': 'hello', 'data[]': ['hello', 'world']}
response = requests.get('http://example.com/api/add.json', params=data)"
2728,request with params,False,False,70,"try:
    # Python 3
    from urllib.parse import urlparse, parse_qs
except ImportError:
    # Python 2
    from urlparse import urlparse, parse_qs

o = urlparse(url)
query = parse_qs(o.query)
# extract the URL without query parameters
url = o._replace(query=None).geturl()

if 'token' in query:
    query['token'] = 'NEW_TOKEN'

requests.get(url, params=query)"
2729,request with params,False,False,176,">>> from urllib.parse import urlparse, parse_qs
>>> url = ""http://httpbin.org/get?token=TOKEN_TO_REPLACE&param2=c""
>>> o = urlparse(url)
>>> query = parse_qs(o.query)
>>> url = o._replace(query=None).geturl()
>>> if 'token' in query:
...     query['token'] = 'NEW_TOKEN'
... 
>>> response = requests.get(url, params=query)
>>> print(response.text)
{
  ""args"": {
    ""param2"": ""c"", 
    ""token"": ""NEW_TOKEN""
  }, 
  ""headers"": {
    ""Accept"": ""*/*"", 
    ""Accept-Encoding"": ""gzip, deflate"", 
    ""Host"": ""httpbin.org"", 
    ""User-Agent"": ""python-requests/2.5.1 CPython/3.4.2 Darwin/14.1.0""
  }, 
  ""origin"": ""188.29.165.245"", 
  ""url"": ""http://httpbin.org/get?token=NEW_TOKEN&param2=c""
}"
2730,assign current date and time to `now`,True,True,5,now = datetime.now()
2731,assign current date and time to `now`,False,True,5,now = datetime.datetime.now()
2732,assign current date and time to `now`,False,True,5,t = datetime.now()
2733,assign current date and time to `now`,False,True,5,t = datetime.datetime.now()
2734,assign current date and time to `now`,False,True,6,now = datetime.time(hours=5)
2735,assign current date and time to `now`,False,True,6,now = datetime.time(time=5)
2736,assign current date and time to `now`,False,True,5,now = datetime.time()
2737,assign current date and time to `now`,False,False,38,">>> import datetime
>>> datetime.datetime.now()
datetime.datetime(2009, 1, 6, 15, 8, 24, 78915)

>>> print(datetime.datetime.now())
2009-01-06 15:08:24.789150"
2738,assign current date and time to `now`,False,False,32,">>> datetime.datetime.now().time()
datetime.time(15, 8, 24, 78915)

>>> print(datetime.datetime.now().time())
15:08:24.789150"
2739,assign current date and time to `now`,False,False,7,>>> from datetime import datetime
2740,assign current date and time to `now`,False,False,38,">>> from time import gmtime, strftime
>>> strftime(""%Y-%m-%d %H:%M:%S"", gmtime())
'2009-01-05 22:14:39'"
2741,assign current date and time to `now`,False,False,20,"from datetime import date
from datetime import datetime

dt = datetime.combine(date.today(), datetime.min.time())"
2742,assign current date and time to `now`,False,False,26,"from datetime import datetime
datetime.now().strftime('%Y-%m-%d %H:%M:%S')"
2743,assign current date and time to `now`,False,False,18,"from datetime import datetime

datetime.today().strftime('%Y-%m-%d')"
2744,add days to time,False,True,10,"datetime.datetime.now() + datetime.timedelta(days=1, hours=3)"
2745,add days to time,False,True,17,"time.strftime('%H:%M:%S', datetime.time())"
2746,add days to time,True,True,8,datetime.datetime.now() + datetime.timedelta(days=1)
2747,add days to time,False,True,18,"time.strftime('%H:%M:%S', datetime.timedelta(hours=3))"
2748,add days to time,False,True,20,"time.strftime('%H:%M:%S', time.gmtime(datetime.datetime.now()))"
2749,add days to time,False,True,10,"datetime.datetime.now() - datetime.timedelta(days=1, hours=3)"
2750,add days to time,False,True,6,time.mktime(datetime.datetime.now())
2751,add days to time,False,False,2,import datetime
2752,add days to time,False,False,23,"date_1 = datetime.datetime.strptime(start_date, ""%m/%d/%y"")

end_date = date_1 + datetime.timedelta(days=10)"
2753,add days to time,False,False,33,"from datetime import datetime, timedelta

nine_hours_from_now = datetime.now() + timedelta(hours=9)
#datetime.datetime(2012, 12, 3, 23, 24, 31, 774118)"
2754,add days to time,False,False,21,">>> '{:%H:%M:%S}'.format(nine_hours_from_now)
'23:24:31'"
2755,add days to time,False,False,20,">>> format(nine_hours_from_now, '%H:%M:%S')
'23:24:31'"
2756,add days to time,False,False,24,"date = datetime.datetime(2003,8,1,12,4,5)
for i in range(5): 
    date += datetime.timedelta(days=1)
    print(date)"
2757,add days to time,False,False,6,"from datetime import timedelta, date"
2758,convert `week_date` to GMT timezone and assign to `GMT_week_date`,False,True,6,GMT_week_date = datetime.datetime.fromtimestamp(week_date)
2759,convert `week_date` to GMT timezone and assign to `GMT_week_date`,True,True,9,"GMT_week_date = datetime.datetime.strptime(week_date, 'GMT_week_date')"
2760,convert `week_date` to GMT timezone and assign to `GMT_week_date`,False,True,9,GMT_week_date = datetime.datetime.fromtimestamp(isoformat(week_date))
2761,convert `week_date` to GMT timezone and assign to `GMT_week_date`,False,True,8,GMT_week_date = time.mktime(week_date.timetuple())
2762,convert `week_date` to GMT timezone and assign to `GMT_week_date`,False,True,10,"GMT_week_date = datetime.datetime.combine(datetime.date.today(), week_date)"
2763,convert `week_date` to GMT timezone and assign to `GMT_week_date`,False,True,8,GMT_week_date = datetime.datetime.fromtimestamp(utcnow())
2764,convert `week_date` to GMT timezone and assign to `GMT_week_date`,False,True,13,"GMT_week_date = datetime.datetime.fromtimestamp(range(1970, 50, 7))"
2765,convert `week_date` to GMT timezone and assign to `GMT_week_date`,False,False,6,datetime.datetime.now().date()
2766,convert `week_date` to GMT timezone and assign to `GMT_week_date`,False,False,23,">>> import datetime
>>> datetime.date(2010, 6, 16).isocalendar()[1]
24"
2767,convert `week_date` to GMT timezone and assign to `GMT_week_date`,False,False,114,"from datetime import datetime
from dateutil import tz

# METHOD 1: Hardcode zones:
from_zone = tz.gettz('UTC')
to_zone = tz.gettz('America/New_York')

# METHOD 2: Auto-detect zones:
from_zone = tz.tzutc()
to_zone = tz.tzlocal()

# utc = datetime.utcnow()
utc = datetime.strptime('2011-01-21 02:37:21', '%Y-%m-%d %H:%M:%S')

# Tell the datetime object that it's in UTC time zone since 
# datetime objects are 'naive' by default
utc = utc.replace(tzinfo=from_zone)

# Convert time zone
central = utc.astimezone(to_zone)"
2768,convert `week_date` to GMT timezone and assign to `GMT_week_date`,False,False,25,">>> import datetime
>>> datetime.date(2010, 6, 16).strftime(""%V"")
'24'"
2769,convert `week_date` to GMT timezone and assign to `GMT_week_date`,False,False,63,"In [4]: t = pd.date_range(start=""2013-05-18 12:00:00"", periods=2, freq='H',
                          tz= ""Europe/Brussels"")

In [5]: t
Out[5]: DatetimeIndex(['2013-05-18 12:00:00+02:00', '2013-05-18 13:00:00+02:00'],
                       dtype='datetime64[ns, Europe/Brussels]', freq='H')"
2770,convert `week_date` to GMT timezone and assign to `GMT_week_date`,False,False,37,"In [6]: t.tz_localize(None)
Out[6]: DatetimeIndex(['2013-05-18 12:00:00', '2013-05-18 13:00:00'], 
                      dtype='datetime64[ns]', freq='H')"
2771,convert `week_date` to GMT timezone and assign to `GMT_week_date`,False,False,37,"In [7]: t.tz_convert(None)
Out[7]: DatetimeIndex(['2013-05-18 10:00:00', '2013-05-18 11:00:00'], 
                      dtype='datetime64[ns]', freq='H')"
2772,display `week_date` in format mm-dd-yyyy hh:mm,True,True,23,"time.strftime('%Y-%m-%d %H:%M:%S', gmtime())"
2773,display `week_date` in format mm-dd-yyyy hh:mm,False,True,6,time.mktime(x.timetuple())
2774,display `week_date` in format mm-dd-yyyy hh:mm,False,True,22,"time.strftime('%l:%M%p %z on %b %d, %Y')"
2775,display `week_date` in format mm-dd-yyyy hh:mm,False,True,6,time.mktime(s.timetuple())
2776,display `week_date` in format mm-dd-yyyy hh:mm,False,True,8,time.mktime(time.gmtime('time'))
2777,display `week_date` in format mm-dd-yyyy hh:mm,False,True,11,time.strftime('%m/%d/%Y')
2778,display `week_date` in format mm-dd-yyyy hh:mm,False,True,6,time.mktime(time.timetuple())
2779,display `week_date` in format mm-dd-yyyy hh:mm,False,False,18,"from datetime import datetime

datetime.today().strftime('%Y-%m-%d')"
2780,display `week_date` in format mm-dd-yyyy hh:mm,False,False,22,datetime.today().strftime('%Y-%m-%d-%H:%M:%S')
2781,display `week_date` in format mm-dd-yyyy hh:mm,False,False,19,"from datetime import date
today = str(date.today())
print(today)   # '2017-12-26'"
2782,display `week_date` in format mm-dd-yyyy hh:mm,False,False,28,"import datetime

datetime.datetime.strptime(""21/12/2008"", ""%d/%m/%Y"").strftime(""%Y-%m-%d"")"
2783,display `week_date` in format mm-dd-yyyy hh:mm,False,False,19,"time.strftime('%m/%d/%Y', time.gmtime(os.path.getmtime(file)))"
2784,display `week_date` in format mm-dd-yyyy hh:mm,False,False,100,">>> from datetime import datetime
>>> inDate = ""29-Apr-2013-15:59:02""
>>> d = datetime.strptime(inDate, ""%d-%b-%Y-%H:%M:%S"")
>>> d
datetime.datetime(2013, 4, 29, 15, 59, 2)
>>> d.strftime(""YYYYMMDD HH:mm:ss (%Y%m%d %H:%M:%S)"")
'YYYYMMDD HH:mm:ss (20130429 15:59:02)'"
2785,display `week_date` in format mm-dd-yyyy hh:mm,False,False,18,">>> import arrow
>>> arrow.now().format('YYYY-MM-DD')
'2017-02-17'"
2786,change datetime format of `week_date` to mm-dd-yyyy hh:mm,True,True,16,week_date.strftime('%Y-%m-%d %H:%M')
2787,change datetime format of `week_date` to mm-dd-yyyy hh:mm,False,True,6,time.mktime(week_date.timetuple())
2788,change datetime format of `week_date` to mm-dd-yyyy hh:mm,False,True,10,time.mktime(datetime.datetime.fromtimestamp(week_date).timetuple())
2789,change datetime format of `week_date` to mm-dd-yyyy hh:mm,False,True,11,week_date.strftime('%m/%d/%Y')
2790,change datetime format of `week_date` to mm-dd-yyyy hh:mm,False,True,5,week_date.strftime('Series')
2791,change datetime format of `week_date` to mm-dd-yyyy hh:mm,False,True,30,"time.strftime('%H:%M:%S', week_date.strftime('%Y-%m-%d %H:%M'))"
2792,change datetime format of `week_date` to mm-dd-yyyy hh:mm,False,True,19,week_date.strftime('%Y-%m-%d %H:%M:%S')
2793,change datetime format of `week_date` to mm-dd-yyyy hh:mm,False,False,18,"from datetime import datetime

datetime.today().strftime('%Y-%m-%d')"
2794,change datetime format of `week_date` to mm-dd-yyyy hh:mm,False,False,22,datetime.today().strftime('%Y-%m-%d-%H:%M:%S')
2795,change datetime format of `week_date` to mm-dd-yyyy hh:mm,False,False,26,"datetime.datetime.strptime(""2013-1-25"", '%Y-%m-%d').strftime('%m/%d/%y')"
2796,change datetime format of `week_date` to mm-dd-yyyy hh:mm,False,False,40,"dt = datetime.datetime.strptime(""2013-1-25"", '%Y-%m-%d')
print '{0}/{1}/{2:02}'.format(dt.month, dt.day, dt.year % 100)"
2797,change datetime format of `week_date` to mm-dd-yyyy hh:mm,False,False,26,"datetime.datetime.strptime(""2013-1-25"", '%Y-%m-%d').strftime('%m/%d/%y')"
2798,change datetime format of `week_date` to mm-dd-yyyy hh:mm,False,False,19,"from datetime import date
today = str(date.today())
print(today)   # '2017-12-26'"
2799,change datetime format of `week_date` to mm-dd-yyyy hh:mm,False,False,28,"import datetime

datetime.datetime.strptime(""21/12/2008"", ""%d/%m/%Y"").strftime(""%Y-%m-%d"")"
2800,"read csv file ""data.csv""",True,True,14,"df = pd.read_csv('data.csv', sep=',', header=None)"
2801,"read csv file ""data.csv""",False,True,14,"df = pd.read_csv('data.csv', sep=',', **None)"
2802,"read csv file ""data.csv""",False,True,26,"with open('data.csv', 'rb') as ins:
    writer = pd.read_csv('data.csv', sep=',', header=None)"
2803,"read csv file ""data.csv""",False,True,26,"with open('data.csv', 'rb') as f:
    df = pd.read_csv('data.csv', sep=',', header=None)"
2804,"read csv file ""data.csv""",False,True,33,"with open('data.csv', 'rb') as f:
    df = pd.read_csv('data.csv', dtype={'data.csv': np.float64}, na_values=
        ['data.csv'])"
2805,"read csv file ""data.csv""",False,True,26,"with open('data.csv', 'rb') as line:
    df = pd.read_csv('data.csv', sep=',', header=None)"
2806,"read csv file ""data.csv""",False,True,26,"with open('data.csv', 'rb') as f:
    df = pd.read_csv('data.csv', sep=',', **None)"
2807,"read csv file ""data.csv""",False,False,16,"from numpy import genfromtxt
my_data = genfromtxt('my_file.csv', delimiter=',')"
2808,"read csv file ""data.csv""",False,False,39,"import pandas as pd
df=pd.read_csv('myfile.csv', sep=',',header=None)
df.values
array([[ 1. ,  2. ,  3. ],
       [ 4. ,  5.5,  6. ]])"
2809,"read csv file ""data.csv""",False,False,24,"1.0, 2, 3
4, 5.5, 6

import numpy as np
np.genfromtxt('myfile.csv',delimiter=',')"
2810,"read csv file ""data.csv""",False,False,22,"array([[ 1. ,  2. ,  3. ],
       [ 4. ,  5.5,  6. ]])"
2811,"read csv file ""data.csv""",False,False,12,"np.genfromtxt('myfile.csv',delimiter=',',dtype=None)"
2812,"read csv file ""data.csv""",False,False,53,"array([(1.0, 2.0, 3), (4.0, 5.5, 6)], 
      dtype=[('f0', '<f8'), ('f1', '<f8'), ('f2', '<i4')])"
2813,"read csv file ""data.csv""",False,False,19,"from numpy import genfromtxt
genfromtxt(fname = dest_file, dtype = (<whatever options>))"
2814,number of columns of csv,True,True,4,len(df.columns)
2815,number of columns of csv,False,True,16,sum(row[0] for row in list(row.values()))
2816,number of columns of csv,False,True,15,sum(len(row) for row in row.split(' '))
2817,number of columns of csv,False,True,4,len(np.columns)
2818,number of columns of csv,False,True,6,"len(df.columns, axis=1)"
2819,number of columns of csv,False,True,18,sum(len(row) for row in row.split(' <unk>'))
2820,number of columns of csv,False,True,16,sum(row[0] for row in list(csv.TimeGrouper()))
2821,number of columns of csv,False,False,39,"import pandas as pd
df = pd.DataFrame({""pear"": [1,2,3], ""apple"": [2,3,4], ""orange"": [3,4,5]})

len(df.columns)
3"
2822,number of columns of csv,False,False,20,"for row in reader:
    content = list(row[i] for i in included_cols)
print content"
2823,number of columns of csv,False,False,20,"for row in reader:
        content = list(row[i] for i in included_cols)
        print content"
2824,number of columns of csv,False,False,23,"import pandas as pd
df = pd.read_csv(csv_file)
saved_column = df.column_name #you can also use df['column_name']"
2825,number of columns of csv,False,False,3,names = df.Names
2826,number of columns of csv,False,False,4,df.shape[1]
2827,number of columns of csv,False,False,131,"import csv
from collections import defaultdict

columns = defaultdict(list) # each value in each column is appended to a list

with open('file.txt') as f:
    reader = csv.DictReader(f) # read rows into a dictionary format
    for row in reader: # read a row as {column1: value1, column2: value2,...}
        for (k,v) in row.items(): # go over each column name and value 
            columns[k].append(v) # append the value into the appropriate list
                                 # based on column name k

print(columns['name'])
print(columns['phone'])
print(columns['street'])"
2828,"write csv `output_f` to file ""output/output.csv""",True,True,7,"output_f.to_csv('output/output.csv', index=False)"
2829,"write csv `output_f` to file ""output/output.csv""",False,True,7,"output_f.to_csv('output/output.csv', **False)"
2830,"write csv `output_f` to file ""output/output.csv""",False,True,14,"output_f.to_csv('output/output.csv', **{'namelist': ' '})"
2831,"write csv `output_f` to file ""output/output.csv""",False,True,14,"output_f.to_csv('output/output.csv', **{'enumerate': 'output/output.csv'})"
2832,"write csv `output_f` to file ""output/output.csv""",False,True,13,"output_f.to_csv('output/output.csv', **{'namelist': ''})"
2833,"write csv `output_f` to file ""output/output.csv""",False,True,14,"output_f.to_csv('output/output.csv', **{'namelist': 'output/output.csv'})"
2834,"write csv `output_f` to file ""output/output.csv""",False,True,7,"output_f.to_csv(output_f, date_format='output/output.csv')"
2835,"write csv `output_f` to file ""output/output.csv""",False,False,546,"jQuery.fn.table2CSV = function(options) {
    var options = jQuery.extend({
        separator: ',',
        header: [],
        delivery: 'popup' // popup, value
    },
    options);

    var csvData = [];
    var headerArr = [];
    var el = this;

    //header
    var numCols = options.header.length;
    var tmpRow = []; // construct header avalible array

    if (numCols > 0) {
        for (var i = 0; i < numCols; i++) {
            tmpRow[tmpRow.length] = formatData(options.header[i]);
        }
    } else {
        $(el).filter(':visible').find('th').each(function() {
            if ($(this).css('display') != 'none') tmpRow[tmpRow.length] = formatData($(this).html());
        });
    }

    row2CSV(tmpRow);

    // actual data
    $(el).find('tr').each(function() {
        var tmpRow = [];
        $(this).filter(':visible').find('td').each(function() {
            if ($(this).css('display') != 'none') tmpRow[tmpRow.length] = formatData($(this).html());
        });
        row2CSV(tmpRow);
    });
    if (options.delivery == 'popup') {
        var mydata = csvData.join('\n');
        return popup(mydata);
    } else {
        var mydata = csvData.join('\n');
        return mydata;
    }

    function row2CSV(tmpRow) {
        var tmp = tmpRow.join('') // to remove any blank rows
        // alert(tmp);
        if (tmpRow.length > 0 && tmp != '') {
            var mystr = tmpRow.join(options.separator);
            csvData[csvData.length] = mystr;
        }
    }
    function formatData(input) {
        // replace "" with “
        var regexp = new RegExp(/[""]/g);
        var output = input.replace(regexp, ""“"");
        //HTML
        var regexp = new RegExp(/\<[^\<]+\>/g);
        var output = output.replace(regexp, """");
        if (output == """") return '';
        return '""' + output + '""';
    }
    function popup(data) {
        var generator = window.open('', 'csv', 'height=400,width=600');
        generator.document.write('<html><head><title>CSV</title>');
        generator.document.write('</head><body >');
        generator.document.write('<textArea cols=70 rows=15 wrap=""off"" >');
        generator.document.write(data);
        generator.document.write('</textArea>');
        generator.document.write('</body></html>');
        generator.document.close();
        return true;
    }
};"
2836,"write csv `output_f` to file ""output/output.csv""",False,False,28,"<script type=""text/javascript"" src=""jquery-1.3.2.js"" ></script>

<script type=""text/javascript"" src=""html2CSV.js"" ></script>"
2837,"write csv `output_f` to file ""output/output.csv""",False,False,175,"<table id=""example1"" border=""1""  style=""background-color:#FFFFCC"" width=""0%"" cellpadding=""3"" cellspacing=""3"">

    <tr>

        <th>Title</th>

        <th>Name</th>

        <th>Phone</th>

    </tr>

    <tr>

        <td>Mr.</td>

        <td>John</td>

        <td>07868785831</td>

    </tr>

    <tr>

        <td>Miss</td>

        <td><i>Linda</i></td>

        <td>0141-2244-5566</td>

    </tr>

    <tr>

        <td>Master</td>

        <td>Jack</td>

        <td>0142-1212-1234</td>

    </tr>

    <tr>

        <td>Mr.</td>

        <td>Bush</td>

        <td>911-911-911</td>

    </tr>

</table>"
2838,"write csv `output_f` to file ""output/output.csv""",False,False,42,"<input value=""Export as CSV 2"" type=""button"" onclick=""$('#example1').table2CSV({header:['prefix','Employee Name','Contact']})"">"
2839,"write csv `output_f` to file ""output/output.csv""",False,False,387,"function exportTableToCSV($table, filename) {

    var $rows = $table.find('tr:has(td),tr:has(th)'),

        // Temporary delimiter characters unlikely to be typed by keyboard
        // This is to avoid accidentally splitting the actual contents
        tmpColDelim = String.fromCharCode(11), // vertical tab character
        tmpRowDelim = String.fromCharCode(0), // null character

        // actual delimiter characters for CSV format
        colDelim = '"",""',
        rowDelim = '""\r\n""',

        // Grab text from table into CSV formatted string
        csv = '""' + $rows.map(function (i, row) {
            var $row = $(row), $cols = $row.find('td,th');

            return $cols.map(function (j, col) {
                var $col = $(col), text = $col.text();

                return text.replace(/""/g, '""""'); // escape double quotes

            }).get().join(tmpColDelim);

        }).get().join(tmpRowDelim)
            .split(tmpRowDelim).join(rowDelim)
            .split(tmpColDelim).join(colDelim) + '""',



        // Data URI
        csvData = 'data:application/csv;charset=utf-8,' + encodeURIComponent(csv);

        console.log(csv);

        if (window.navigator.msSaveBlob) { // IE 10+
            //alert('IE' + csv);
            window.navigator.msSaveOrOpenBlob(new Blob([csv], {type: ""text/plain;charset=utf-8;""}), ""csvname.csv"")
        } 
        else {
            $(this).attr({ 'download': filename, 'href': csvData, 'target': '_blank' }); 
        }
}

// This must be a hyperlink
$(""#xx"").on('click', function (event) {

    exportTableToCSV.apply(this, [$('#projectSpreadsheet'), 'export.csv']);

    // IF CSV, don't do event.preventDefault() or return false
    // We actually need this to be a typical hyperlink
});"
2840,"write csv `output_f` to file ""output/output.csv""",False,False,43,"<a href=""#"" id=""xx"" style=""text-decoration:none;color:#000;background-color:#ddd;border:1px solid #ccc;padding:8px;"">Export Table data into Excel</a>"
2841,"write csv `output_f` to file ""output/output.csv""",False,False,56,"csv = []
for row in $('#sometable tr')
  csv.push (""\""#{col.innerText}\"""" for col in $(row).find('td,th')).join(',')
output = csv.join(""\n"")"
2842,"if directory ""output"" exists",False,True,8,print(os.path.isfile('output'))
2843,"if directory ""output"" exists",False,True,8,print(os.path.exists('output'))
2844,"if directory ""output"" exists",False,True,6,print(os.path.isdigit())
2845,"if directory ""output"" exists",False,True,8,print(os.path.defDEF('output'))
2846,"if directory ""output"" exists",False,True,5,os.listdir('output')
2847,"if directory ""output"" exists",False,True,8,print(os.path.duplicated('output'))
2848,"if directory ""output"" exists",False,True,11,print(os.path.defDEF(os.path.expanduser('output')))
2849,"if directory ""output"" exists",False,False,16,"from pathlib import Path
Path(""/my/directory"").mkdir(parents=True, exist_ok=True)"
2850,"if directory ""output"" exists",True,False,13,"import os
if not os.path.exists(directory):
    os.makedirs(directory)"
2851,"if directory ""output"" exists",False,False,22,"import os, errno

try:
    os.makedirs(directory)
except OSError as e:
    if e.errno != errno.EEXIST:
        raise"
2852,"if directory ""output"" exists",False,False,16,"try:
    os.makedirs(""path/to/directory"")
except FileExistsError:
    # directory already exists
    pass"
2853,"if directory ""output"" exists",False,False,15,"os.makedirs(""path/to/directory"", exist_ok=True)  # succeeds even if directory exists."
2854,"if directory ""output"" exists",False,False,6,"import os.path
os.path.isfile(fname)"
2855,"if directory ""output"" exists",False,False,20,"from pathlib import Path

my_file = Path(""/path/to/file"")
if my_file.is_file():
    # file exists"
2856,print csv without row numbers,False,True,7,print('\n'.join(row))
2857,print csv without row numbers,False,True,4,writer.writerow(row)
2858,print csv without row numbers,False,True,7,"writer.to_csv('head', index=False)"
2859,print csv without row numbers,False,True,10,"writer.to_csv(l, index=False, sep=' ')"
2860,print csv without row numbers,False,True,10,"pd.concat([row, row], ignore_index=True)"
2861,print csv without row numbers,False,True,11,"writer.writerow(map(int, sublist) + 1)"
2862,print csv without row numbers,False,True,13,"print(pd.concat([row, row], **row))"
2863,print csv without row numbers,True,False,7,"df.to_csv('your.csv', index=False)"
2864,print csv without row numbers,False,False,10,"write.csv(t, ""t.csv"", row.names=FALSE)"
2865,print csv without row numbers,False,False,36,"row.names: either a logical value indicating whether the row names of
          ‘x’ are to be written along with ‘x’, or a character vector
          of row names to be written."
2866,print csv without row numbers,False,False,5,print df.to_string(index=False)
2867,print csv without row numbers,False,False,9,print(df.loc[[159220]])
2868,print csv without row numbers,False,False,13,"import pandas as pd
df = pd.read_csv('file.csv', index_col=0)"
2869,print csv without row numbers,False,False,7,"df.to_csv('file.csv', index=False)"
2870,check if file `output_file` exists,False,True,4,os.path.isfile(output_file)
2871,check if file `output_file` exists,True,True,4,os.path.exists(output_file)
2872,check if file `output_file` exists,False,True,11,'output_file' in os.stat('<unk>')
2873,check if file `output_file` exists,False,True,8,'output_file' in os.listdir('output_file')
2874,check if file `output_file` exists,False,True,11,"'output_file' in file.open('output_file', 'rb')"
2875,check if file `output_file` exists,False,True,6,'output_file' in output_file.os()
2876,check if file `output_file` exists,False,True,11,'output_file' in file.open('<unk>')
2877,check if file `output_file` exists,False,False,16,"from pathlib import Path
Path(""/my/directory"").mkdir(parents=True, exist_ok=True)"
2878,check if file `output_file` exists,False,False,13,"import os
if not os.path.exists(directory):
    os.makedirs(directory)"
2879,check if file `output_file` exists,False,False,22,"import os, errno

try:
    os.makedirs(directory)
except OSError as e:
    if e.errno != errno.EEXIST:
        raise"
2880,check if file `output_file` exists,False,False,16,"try:
    os.makedirs(""path/to/directory"")
except FileExistsError:
    # directory already exists
    pass"
2881,check if file `output_file` exists,False,False,15,"os.makedirs(""path/to/directory"", exist_ok=True)  # succeeds even if directory exists."
2882,check if file `output_file` exists,False,False,6,"import os.path
os.path.isfile(fname)"
2883,check if file `output_file` exists,False,False,20,"from pathlib import Path

my_file = Path(""/path/to/file"")
if my_file.is_file():
    # file exists"
2884,add entry to json file,False,True,4,json.load(f)
2885,add entry to json file,True,True,7,"json.dumps(entry, content_type='application/json')"
2886,add entry to json file,False,True,7,"json.dumps(file, content_type='application/json')"
2887,add entry to json file,False,True,7,"json.dumps(file, content_type='gzip')"
2888,add entry to json file,False,True,7,"json.load(f, content_type='application/json')"
2889,add entry to json file,False,True,6,json.dumps([entry])
2890,add entry to json file,False,True,8,"json.dumps([add, entry])"
2891,add entry to json file,False,False,30,"with open('data.txt', 'a') as outfile:
    for hostDict in ....:
        json.dump(hostDict, outfile)
        outfile.write('\n')"
2892,add entry to json file,False,False,21,"with open('data.txt', 'a') as outfile:
    json.dump(hostDict, outfile, indent=2)"
2893,add entry to json file,False,False,69,"import json

with open('data.json', 'r+') as f:
    data = json.load(f)
    data['id'] = 134 # <--- add `id` value.
    f.seek(0)        # <--- should reset file position to the beginning.
    json.dump(data, f, indent=4)
    f.truncate()     # remove remaining part"
2894,add entry to json file,False,False,11,data[0]['f'] = var
2895,add entry to json file,False,False,66,"import json
import os

filename = 'data.json'
with open(filename, 'r') as f:
    data = json.load(f)
    data['id'] = 134 # <--- add `id` value.

os.remove(filename)
with open(filename, 'w') as f:
    json.dump(data, f, indent=4)"
2896,add entry to json file,False,False,23,"with open(DATA_FILENAME, mode='w', encoding='utf-8') as f:
    json.dump([], f)"
2897,add entry to json file,False,False,39,"with open(DATA_FILENAME, mode='w', encoding='utf-8') as feedsjson:
    entry = {'name': args.name, 'url': args.url}
    feeds.append(entry)
    json.dump(feeds, feedsjson)"
2898,load json file,True,True,7,json.loads(json.loads(json))
2899,load json file,False,True,4,json.loads(data)
2900,load json file,False,True,4,json.loads(url)
2901,load json file,False,True,7,json.loads(json.loads(data))
2902,load json file,False,True,7,json.loads(json.dumps(data))
2903,load json file,False,True,11,json.loads(request.POST.get('<unk>'))
2904,load json file,True,True,4,json.loads(file)
2905,load json file,False,False,45,">>> json.JSONDecoder(object_pairs_hook=collections.OrderedDict).decode('{""foo"":1, ""bar"": 2}')
OrderedDict([('foo', 1), ('bar', 2)])
>>>"
2906,load json file,False,False,62,">>> import json
>>> from collections import OrderedDict
>>> data = json.loads('{""foo"":1, ""bar"": 2}', object_pairs_hook=OrderedDict)
>>> print json.dumps(data, indent=4)
{
    ""foo"": 1,
    ""bar"": 2
}
>>>"
2907,load json file,False,False,15,">>> data = json.load(open('config.json'), object_pairs_hook=OrderedDict)"
2908,load json file,False,False,21,"import json

with open('strings.json') as f:
    d = json.load(f)
    print(d)"
2909,load json file,False,False,27,"import json

data = []
with open('file') as f:
    for line in f:
        data.append(json.loads(line))"
2910,load json file,False,False,8,"my_ordered_dict = json.loads(json_str, object_pairs_hook=collections.OrderedDict)"
2911,load json file,False,False,14,"import simplejson as json
import ordereddict

my_ordered_dict = json.loads(json_str, object_pairs_hook=ordereddict.OrderedDict)"
2912,"GET request to ""https://jsonplaceholder.typicode.com/posts"" with argument userId",True,True,11,"r = requests.get('https://jsonplaceholder.typicode.com/posts', params=userid)"
2913,"GET request to ""https://jsonplaceholder.typicode.com/posts"" with argument userId",False,True,9,r = requests.get('https://jsonplaceholder.typicode.com/posts')
2914,"GET request to ""https://jsonplaceholder.typicode.com/posts"" with argument userId",False,True,13,"requests.get('https://jsonplaceholder.typicode.com/posts', HTTPConnection=
    'https://jsonplaceholder.typicode.com/posts')"
2915,"GET request to ""https://jsonplaceholder.typicode.com/posts"" with argument userId",False,True,14,"r = requests.get('https://jsonplaceholder.typicode.com/posts', params=
    https://jsonplaceholder.typicode.com/posts)"
2916,"GET request to ""https://jsonplaceholder.typicode.com/posts"" with argument userId",False,True,18,"r = requests.get('https://jsonplaceholder.typicode.com/posts', headers={
    'Authorization': 'str_1'})"
2917,"GET request to ""https://jsonplaceholder.typicode.com/posts"" with argument userId",False,True,18,"r = requests.get('https://jsonplaceholder.typicode.com/posts', headers={
    'Authorization': 'str_3'})"
2918,"GET request to ""https://jsonplaceholder.typicode.com/posts"" with argument userId",False,True,13,"requests.get('https://jsonplaceholder.typicode.com/posts', url=
    'https://jsonplaceholder.typicode.com/posts')"
2919,"GET request to ""https://jsonplaceholder.typicode.com/posts"" with argument userId",False,False,22,"text = raw_input(""prompt"")  # Python 2
text = input(""prompt"")  # Python 3"
2920,"GET request to ""https://jsonplaceholder.typicode.com/posts"" with argument userId",False,False,6,"import sys
print (sys.argv)"
2921,"GET request to ""https://jsonplaceholder.typicode.com/posts"" with argument userId",False,False,18,"var = raw_input(""Please enter something: "")
print ""you entered"", var"
2922,"GET request to ""https://jsonplaceholder.typicode.com/posts"" with argument userId",False,False,21,"var = input(""Please enter something: "")
print(""You entered: "" + var)"
2923,"GET request to ""https://jsonplaceholder.typicode.com/posts"" with argument userId",False,False,19,"input_var = input(""Enter something: "")
print (""you entered "" + input_var)"
2924,"GET request to ""https://jsonplaceholder.typicode.com/posts"" with argument userId",False,False,85,"headers = {""W-Token"": ""Ilovemyboss""}
data = [
    {
        'url': '/rest/shifts',
        'params': {'user_id': 0, 'other_stuff': 'value'},
        'method': 'post',
    },
    {
        'url': '/rest/shifts',
        'params': {'user_id': 1,'other_stuff': 'value'},
        'method':'post',
    },
]
requests.post(url, json=data, headers=headers)"
2925,"GET request to ""https://jsonplaceholder.typicode.com/posts"" with argument userId",False,False,15,"headers = {'Content-Type': 'application/json', 'Accept':'application/json'}"
2926,print format,True,True,20,"print('<unk> %s, <unk>' % (1, 2))"
2927,print format,False,True,22,"print('<unk> %s, <unk>' % (1, 2, 3))"
2928,print format,False,True,13,"print('%5.3f' % (1, 2))"
2929,print format,False,True,25,"print('%5.3f' % ('%5.3f', '%H:%M:%S'))"
2930,print format,False,True,17,"print('%5.3f' % ('%5.3f', 'unicode_escape'))"
2931,print format,False,True,23,"print('<unk> %s, <unk>' % ('3.5', '+20'))"
2932,print format,False,True,24,"print('<unk> %s, <unk>' % ('%5.3f', '20'))"
2933,print format,False,False,47,"import numpy as np
x=np.random.random(10)
print(x)
# [ 0.07837821  0.48002108  0.41274116  0.82993414  0.77610352  0.1023732
#   0.51303098  0.4617183   0.33487207  0.71162095]

np.set_printoptions(precision=3)
print(x)
# [ 0.078  0.48   0.413  0.83   0.776  0.102  0.513  0.462  0.335  0.712]"
2934,print format,False,False,32,"y=np.array([1.5e-10,1.5,1500])
print(y)
# [  1.500e-10   1.500e+00   1.500e+03]
np.set_printoptions(suppress=True)
print(y)
# [    0.      1.5  1500. ]"
2935,print format,False,False,31,"x = np.random.random(10)
with np.printoptions(precision=3, suppress=True):
    print(x)
    # [ 0.073  0.461  0.689  0.754  0.624  0.901  0.049  0.582  0.557  0.348]"
2936,print format,False,False,18,"print(x)    
# [ 0.07334334  0.46132615  0.68935231  0.75379645  0.62424021  0.90115836
#   0.04879837  0.58207504  0.55694118  0.34768638]"
2937,print format,False,False,67,"import numpy as np
import contextlib

@contextlib.contextmanager
def printoptions(*args, **kwargs):
    original = np.get_printoptions()
    np.set_printoptions(*args, **kwargs)
    try:
        yield
    finally: 
        np.set_printoptions(**original)

x = np.random.random(10)
with printoptions(precision=3, suppress=True):
    print(x)
    # [ 0.073  0.461  0.689  0.754  0.624  0.901  0.049  0.582  0.557  0.348]"
2938,print format,False,False,19,"np.set_printoptions(formatter={'float': '{: 0.3f}'.format})
print(x)"
2939,print format,False,False,12,[ 0.078  0.480  0.413  0.830  0.776  0.102  0.513  0.462  0.335  0.712]
2940,exit program,True,True,3,sys.exit()
2941,exit program,False,True,6,print(sys.exit())
2942,exit program,False,True,3,quit()
2943,exit program,False,True,7,print(sys.exit(10))
2944,exit program,False,True,3,exit()
2945,exit program,False,True,7,print(sys.exit(2))
2946,exit program,False,True,22,"exec(compile(open('<unk>').read(), 'range', 2))"
2947,exit program,False,False,5,"import sys
sys.exit()"
2948,exit program,False,False,20,">>> print (quit)
Use quit() or Ctrl-Z plus Return to exit
>>>"
2949,exit program,False,False,20,">>> print (exit)
Use exit() or Ctrl-Z plus Return to exit
>>>"
2950,exit program,False,False,2,raise SystemExit
2951,exit program,False,False,11,"#do stuff
if this == that:
  quit()"
2952,exit program,False,False,49,"import sys, traceback

def main():
    try:
        do main program stuff here
        ....
    except KeyboardInterrupt:
        print ""Shutdown requested...exiting""
    except Exception:
        traceback.print_exc(file=sys.stdout)
    sys.exit(0)

if __name__ == ""__main__"":
    main()"
2953,exit program,False,False,2,raise SystemExit
2954,get current time,True,True,6,datetime.datetime.now().time()
2955,get current time,False,True,6,datetime.datetime.time(datetime.datetime.now())
2956,get current time,False,True,16,datetime.datetime.now().strftime('%H:%M:%S')
2957,get current time,False,True,6,datetime.now().time()
2958,get current time,False,True,6,datetime.time(datetime.datetime.now())
2959,get current time,False,True,16,datetime.now().strftime('%H:%M:%S')
2960,get current time,False,True,9,print(datetime.datetime.now().time())
2961,get current time,False,False,38,">>> import datetime
>>> datetime.datetime.now()
datetime.datetime(2009, 1, 6, 15, 8, 24, 78915)

>>> print(datetime.datetime.now())
2009-01-06 15:08:24.789150"
2962,get current time,False,False,32,">>> datetime.datetime.now().time()
datetime.time(15, 8, 24, 78915)

>>> print(datetime.datetime.now().time())
15:08:24.789150"
2963,get current time,False,False,7,>>> from datetime import datetime
2964,get current time,False,False,38,">>> from time import gmtime, strftime
>>> strftime(""%Y-%m-%d %H:%M:%S"", gmtime())
'2009-01-05 22:14:39'"
2965,get current time,False,False,17,"import time
millis = int(round(time.time() * 1000))
print millis"
2966,get current time,False,False,17,"import time

current_milli_time = lambda: int(round(time.time() * 1000))"
2967,get current time,False,False,7,">>> current_milli_time()
1378761833768"
2968,load csv data,True,True,6,"pd.read_csv(data, header=None)"
2969,load csv data,False,True,6,"pd.read_csv(csv, header=None)"
2970,load csv data,False,True,9,"pd.read_csv(data, sep='\t', header=None)"
2971,load csv data,False,True,4,writer.writerow(row)
2972,load csv data,False,True,10,"pd.read_csv(data, header=None, sep=' ')"
2973,load csv data,False,True,7,"pd.read_csv(data, sep='\t')"
2974,load csv data,False,True,10,"pd.read_csv('csv', sep='\t', header=None)"
2975,load csv data,False,False,16,"from numpy import genfromtxt
my_data = genfromtxt('my_file.csv', delimiter=',')"
2976,load csv data,False,False,39,"import pandas as pd
df=pd.read_csv('myfile.csv', sep=',',header=None)
df.values
array([[ 1. ,  2. ,  3. ],
       [ 4. ,  5.5,  6. ]])"
2977,load csv data,False,False,24,"1.0, 2, 3
4, 5.5, 6

import numpy as np
np.genfromtxt('myfile.csv',delimiter=',')"
2978,load csv data,False,False,22,"array([[ 1. ,  2. ,  3. ],
       [ 4. ,  5.5,  6. ]])"
2979,load csv data,False,False,12,"np.genfromtxt('myfile.csv',delimiter=',',dtype=None)"
2980,load csv data,False,False,53,"array([(1.0, 2.0, 3), (4.0, 5.5, 6)], 
      dtype=[('f0', '<f8'), ('f1', '<f8'), ('f2', '<i4')])"
2981,load csv data,False,False,15,"spark.read.csv(
    ""some_input_file.csv"", header=True, mode=""DROPMALFORMED"", schema=schema
)"
2982,copy a file,False,True,6,"copyfile(a, b)"
2983,copy a file,False,True,6,"copyfile(file, str_3)"
2984,copy a file,False,True,6,"copyfile(copy, subdirname)"
2985,copy a file,False,True,6,"copyfile(file, subdirname)"
2986,copy a file,False,True,6,"copyfile(file, h)"
2987,copy a file,False,True,6,"copyfile(file, filename)"
2988,copy a file,False,True,8,"copyfile(file, a + b)"
2989,copy a file,True,False,10,"from shutil import copyfile
copyfile(src, dst)"
2990,copy a file,False,False,57,"┌──────────────────┬────────┬───────────┬───────┬────────────────┐
│     Function     │ Copies │   Copies  │Can use│   Destination  │
│                  │metadata│permissions│buffer │may be directory│
├──────────────────┼────────┼───────────┼───────┼────────────────┤
│shutil.copy       │   No   │    Yes    │   No  │      Yes       │
│shutil.copyfile   │   No   │     No    │   No  │       No       │
│shutil.copy2      │  Yes   │    Yes    │   No  │      Yes       │
│shutil.copyfileobj│   No   │     No    │  Yes  │       No       │
└──────────────────┴────────┴───────────┴───────┴────────────────┘"
2991,copy a file,False,False,28,"import shutil
shutil.copy2('/src/dir/file.ext', '/dst/dir/newname.ext') # complete target filename given
shutil.copy2('/src/file.ext', '/dst/dir') # target filename is /dst/dir/file.ext"
2992,copy a file,True,False,43,"import shutil, errno

def copyanything(src, dst):
    try:
        shutil.copytree(src, dst)
    except OSError as exc: # python >2.5
        if exc.errno == errno.ENOTDIR:
            shutil.copy(src, dst)
        else: raise"
2993,copy a file,False,False,10,"import shutil
shutil.copy('/etc/hostname', '/var/tmp/testhostname')"
2994,copy a file,False,False,6,"import os
import shutil
import subprocess"
2995,copy a file,False,False,20,"shutil.copyfile(src_file, dest_file, *, follow_symlinks=True)

# example    
shutil.copyfile('source.txt', 'destination.txt')"
2996,how to split dataset  in scikit learn,False,True,7,"like_count.delete('size-allocate', axis=1)"
2997,how to split dataset  in scikit learn,False,True,3,con.Counter()
2998,how to split dataset  in scikit learn,False,True,14,con.Counter(str(p) for p in range(100))
2999,how to split dataset  in scikit learn,False,True,14,con.Counter(str(p) for p in range(16))
3000,how to split dataset  in scikit learn,False,True,4,conn.Counter(split)
3001,how to split dataset  in scikit learn,False,True,9,"plt.errorbar(x, y, yerr='err')"
3002,how to split dataset  in scikit learn,False,True,9,"plt.savefig('ulimit -s', nonposy='clip')"
3003,how to split dataset  in scikit learn,True,False,22,"from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y,
                                                    stratify=y, 
                                                    test_size=0.25)"
3004,how to split dataset  in scikit learn,False,False,37,"import numpy
# x is your dataset
x = numpy.random.rand(100, 5)
numpy.random.shuffle(x)
training, test = x[:80,:], x[80:,:]"
3005,how to split dataset  in scikit learn,False,False,55,"import numpy
# x is your dataset
x = numpy.random.rand(100, 5)
indices = numpy.random.permutation(x.shape[0])
training_idx, test_idx = indices[:80], indices[80:]
training, test = x[training_idx,:], x[test_idx,:]"
3006,how to split dataset  in scikit learn,False,False,54,"import numpy
# x is your dataset
x = numpy.random.rand(100, 5)
training_idx = numpy.random.randint(x.shape[0], size=80)
test_idx = numpy.random.randint(x.shape[0], size=20)
training, test = x[training_idx,:], x[test_idx,:]"
3007,how to split dataset  in scikit learn,False,False,43,"from sklearn.model_selection import train_test_split

data, labels = np.arange(10).reshape((5, 2)), range(5)

data_train, data_test, labels_train, labels_test = train_test_split(data, labels, test_size=0.20, random_state=42)"
3008,how to split dataset  in scikit learn,False,False,46,"from sklearn.cross_validation import train_test_split

X = get_my_X()
y = get_my_y()
x_train, x_test, y_train, y_test = train_test_split(X, y, test_size=0.3)
x_test, x_val, y_test, y_val = train_test_split(x_test, y_test, test_size=0.5)"
3009,how to split dataset  in scikit learn,False,False,93,">>> skf = cross_validation.StratifiedKFold(y, n_folds=2) #2-fold cross validation
>>> len(skf)
2
>>> for train_index, test_index in skf:
...    print(""TRAIN:"", train_index, ""TEST:"", test_index)
...    X_train, X_test = X[train_index], X[test_index]
...    y_train, y_test = y[train_index], y[test_index]
...    #fit and predict with X_train/test. Use accuracy metrics to check validation performance"
3010,how to split dataset in scikit learn,False,True,7,"like_count.delete('size-allocate', axis=1)"
3011,how to split dataset in scikit learn,False,True,3,con.Counter()
3012,how to split dataset in scikit learn,False,True,14,con.Counter(str(p) for p in range(100))
3013,how to split dataset in scikit learn,False,True,14,con.Counter(str(p) for p in range(16))
3014,how to split dataset in scikit learn,False,True,4,conn.Counter(split)
3015,how to split dataset in scikit learn,False,True,9,"plt.errorbar(x, y, yerr='err')"
3016,how to split dataset in scikit learn,False,True,9,"plt.savefig('ulimit -s', nonposy='clip')"
3017,how to split dataset in scikit learn,True,False,22,"from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y,
                                                    stratify=y, 
                                                    test_size=0.25)"
3018,how to split dataset in scikit learn,False,False,37,"import numpy
# x is your dataset
x = numpy.random.rand(100, 5)
numpy.random.shuffle(x)
training, test = x[:80,:], x[80:,:]"
3019,how to split dataset in scikit learn,False,False,55,"import numpy
# x is your dataset
x = numpy.random.rand(100, 5)
indices = numpy.random.permutation(x.shape[0])
training_idx, test_idx = indices[:80], indices[80:]
training, test = x[training_idx,:], x[test_idx,:]"
3020,how to split dataset in scikit learn,False,False,54,"import numpy
# x is your dataset
x = numpy.random.rand(100, 5)
training_idx = numpy.random.randint(x.shape[0], size=80)
test_idx = numpy.random.randint(x.shape[0], size=20)
training, test = x[training_idx,:], x[test_idx,:]"
3021,how to split dataset in scikit learn,False,False,70,"from sklearn.model_selection import train_test_split
import numpy as np
n_samples, n_features, n_classes = 10, 2, 2
data = np.random.randn(n_samples, n_features)  # 10 training examples
labels = np.random.randint(n_classes, size=n_samples)  # 10 labels
indices = np.arange(n_samples)
x1, x2, y1, y2, idx1, idx2 = train_test_split(
    data, labels, indices, test_size=0.2)"
3022,how to split dataset in scikit learn,False,False,43,"from sklearn.model_selection import train_test_split

data, labels = np.arange(10).reshape((5, 2)), range(5)

data_train, data_test, labels_train, labels_test = train_test_split(data, labels, test_size=0.20, random_state=42)"
3023,how to split dataset in scikit learn,False,False,10,"X_imputed_df = pd.DataFrame(X_imputed, columns = X_train.columns)"
3024,how to determine cross validation mean in scikit learn,False,True,4,mean.mean(axis=0)
3025,how to determine cross validation mean in scikit learn,False,True,7,mean.fit(values='X')
3026,how to determine cross validation mean in scikit learn,False,True,7,mean.mean(axis=1).mean()
3027,how to determine cross validation mean in scikit learn,False,True,14,mean.set_index('Date').agg(lambda x: x.mean())
3028,how to determine cross validation mean in scikit learn,False,True,5,mean.fit(values='mean')
3029,how to determine cross validation mean in scikit learn,False,True,9,mean.update({'key': 1})
3030,how to determine cross validation mean in scikit learn,False,True,7,mean.reset_index().fit(mean)
3031,how to determine cross validation mean in scikit learn,False,False,164,"import pandas as pd
from sklearn.datasets import load_iris
from sklearn.cluster import KMeans
import matplotlib.pyplot as plt

iris = load_iris()
X = pd.DataFrame(iris.data, columns=iris['feature_names'])
#print(X)
data = X[['sepal length (cm)', 'sepal width (cm)', 'petal length (cm)']]

sse = {}
for k in range(1, 10):
    kmeans = KMeans(n_clusters=k, max_iter=1000).fit(data)
    data[""clusters""] = kmeans.labels_
    #print(data[""clusters""])
    sse[k] = kmeans.inertia_ # Inertia: Sum of distances of samples to their closest cluster center
plt.figure()
plt.plot(list(sse.keys()), list(sse.values()))
plt.xlabel(""Number of cluster"")
plt.ylabel(""SSE"")
plt.show()"
3032,how to determine cross validation mean in scikit learn,False,False,80,"from sklearn.metrics import silhouette_score
from sklearn.datasets import load_iris
from sklearn.cluster import KMeans

X = load_iris().data
y = load_iris().target

for n_cluster in range(2, 11):
    kmeans = KMeans(n_clusters=n_cluster).fit(X)
    label = kmeans.labels_
    sil_coeff = silhouette_score(X, label, metric='euclidean')
    print(""For n_clusters={}, The Silhouette Coefficient is {}"".format(n_cluster, sil_coeff))"
3033,how to determine cross validation mean in scikit learn,False,False,111,"# Doing linear regression with leave one out cross val

from sklearn import cross_validation, linear_model
import numpy as np

# Including this to remind you that it is necessary to use numpy arrays rather 
# than lists otherwise you will get an error
X_digits = np.array(x)
Y_digits = np.array(y)

loo = cross_validation.LeaveOneOut(len(Y_digits))

regr = linear_model.LinearRegression()

scores = cross_validation.cross_val_score(regr, X_digits, Y_digits, scoring='mean_squared_error', cv=loo,)

# This will print the mean of the list of errors that were output and 
# provide your metric for evaluation
print scores.mean()"
3034,how to determine cross validation mean in scikit learn,False,False,65,"from sklearn.model_selection import KFold
kf = KFold(n_splits=10)
clf = MLPClassifier(solver='lbfgs', alpha=1e-5, hidden_layer_sizes=(5, 2), random_state=1)

for train_indices, test_indices in kf.split(X):
    clf.fit(X[train_indices], y[train_indices])
    print(clf.score(X[test_indices], y[test_indices]))"
3035,how to determine cross validation mean in scikit learn,False,False,10,"from sklearn import metrics
metrics.roc_auc_score(ytest, ypred)"
3036,how to determine cross validation mean in scikit learn,True,False,218,"import numpy as np
from sklearn.cross_validation import cross_val_score
from sklearn.metrics import precision_score
from sklearn.cross_validation import KFold
from sklearn.pipeline import make_pipeline
from sklearn.svm import SVC

np.random.seed(1337)

X = np.random.rand(1000,5)

y = np.random.randint(0,2,1000)

kf = KFold(n=len(y), n_folds=10, shuffle=True, random_state=42)
pipe= make_pipeline(SVC(random_state=42))
for train_index, test_index in kf:
    X_train, X_test = X[train_index], X[test_index]
    y_train, y_test = y[train_index], y[test_index]

print ('Precision',np.mean(cross_val_score(pipe, X_train, y_train, scoring='precision')))
# Here you are evaluating precision score on X_train.

#Second Approach
clf = SVC(random_state=42)
clf.fit(X_train,y_train)
y_pred = clf.predict(X_test)
print ('Precision:', precision_score(y_test, y_pred, average='binary'))

# here you are evaluating precision score on X_test

#Third approach
pipe= make_pipeline(SVC())
print('Precision',np.mean(cross_val_score(pipe, X, y, cv=kf, scoring='precision')))

# Here you are splitting the data again and evaluating mean on each fold"
3037,how to determine cross validation mean in scikit learn,False,False,4,from sklearn.model_selection import cross_validate
3038,cross validation mean accuracy,False,True,10,mean.update({'var_1': 'filenames'})
3039,cross validation mean accuracy,False,True,6,"mean.mean(level=0, reverse=True)"
3040,cross validation mean accuracy,False,True,9,mean.update({'var_1': False})
3041,cross validation mean accuracy,False,True,4,mean.mean(level=0)
3042,cross validation mean accuracy,False,True,5,plt.mean(level='mean')
3043,cross validation mean accuracy,False,True,4,plt.mean(**mean)
3044,cross validation mean accuracy,False,True,11,"mean.update({'mean': False}, level=1)"
3045,cross validation mean accuracy,True,False,18,"predicted = cross_val_predict(clf, iris.data, iris.target, cv=10) 
metrics.accuracy_score(iris.target, predicted)"
3046,cross validation mean accuracy,False,False,39,">>> scores = cross_val_score(clf, X, y, cv=cv)
>>> scores                                              
array([ 0.96...,  1.  ...,  0.96...,  0.96...,  1.        ])"
3047,cross validation mean accuracy,False,False,36,">>> print(""Accuracy: %0.2f (+/- %0.2f)"" % (scores.mean(), scores.std() * 2))
Accuracy: 0.98 (+/- 0.03)"
3048,cross validation mean accuracy,False,False,85,"from sklearn.model_selection import KFold
from sklearn.svm.classes import SVC
from sklearn.metrics.classification import cohen_kappa_score
from sklearn.metrics import confusion_matrix

cv = KFold(len(labels), n_folds=20)
clf = SVC()
for train_index, test_index in cv.split(X):
    clf.fit(X[train_index], labels[train_index])
    ypred = clf.predict(X[test_index])
    kappa_score = cohen_kappa_score(labels[test_index], ypred)
    confusion_matrix = confusion_matrix(labels[test_index], ypred)"
3049,cross validation mean accuracy,False,False,246,"X = np.array([[0], [1], [2], [3], [4], [5]])
labels = np.array(['a', 'a', 'a', 'b', 'b', 'b'])

cv = KFold(len(labels), n_folds=3)
clf = SVC()
ypred_all = np.chararray((labels.shape))
i = 1
for train_index, test_index in cv.split(X):
    print(""iteration"", i, "":"")
    print(""train indices:"", train_index)
    print(""train data:"", X[train_index])
    print(""test indices:"", test_index)
    print(""test data:"", X[test_index])
    clf.fit(X[train_index], labels[train_index])
    ypred = clf.predict(X[test_index])
    print(""predicted labels for data of indices"", test_index, ""are:"", ypred)
    ypred_all[test_index] = ypred
    print(""merged predicted labels:"", ypred_all)
    i = i+1
    print(""====================================="")
y_cross_val_predict = cross_val_predict(clf, X, labels, cv=cv)
print(""predicted labels by cross_val_predict:"", y_cross_val_predict)"
3050,cross validation mean accuracy,False,False,289,"iteration 1 :
train indices: [2 3 4 5]
train data: [[2] [3] [4] [5]]
test indices: [0 1]
test data: [[0] [1]]
predicted labels for data of indices [0 1] are: ['b' 'b']
merged predicted labels: ['b' 'b' '' '' '' '']
=====================================
iteration 2 :
train indices: [0 1 4 5]
train data: [[0] [1] [4] [5]]
test indices: [2 3]
test data: [[2] [3]]
predicted labels for data of indices [2 3] are: ['a' 'b']
merged predicted labels: ['b' 'b' 'a' 'b' '' '']
=====================================
iteration 3 :
train indices: [0 1 2 3]
train data: [[0] [1] [2] [3]]
test indices: [4 5]
test data: [[4] [5]]
predicted labels for data of indices [4 5] are: ['a' 'a']
merged predicted labels: ['b' 'b' 'a' 'b' 'a' 'a']
=====================================
predicted labels by cross_val_predict: ['b' 'b' 'a' 'b' 'a' 'a']"
3051,cross validation mean accuracy,False,False,21,"In [15]: iris['data'].shape
Out[15]: (150, 4)"
3052,cross validation in scikit learn,False,True,6,"learn.fit(X, y)"
3053,cross validation in scikit learn,False,True,9,"learn.fit(x, y, method='ffill')"
3054,cross validation in scikit learn,False,True,10,"pd.concat((X, learn), axis=0)"
3055,cross validation in scikit learn,False,True,10,"pd.concat([validation, cross], axis=1)"
3056,cross validation in scikit learn,False,True,6,"cross.fit(X, y)"
3057,cross validation in scikit learn,False,True,10,"pd.concat([validation, validation], axis=1)"
3058,cross validation in scikit learn,False,True,10,"pd.concat([validation, cross], axis=0)"
3059,cross validation in scikit learn,True,False,111,"# Doing linear regression with leave one out cross val

from sklearn import cross_validation, linear_model
import numpy as np

# Including this to remind you that it is necessary to use numpy arrays rather 
# than lists otherwise you will get an error
X_digits = np.array(x)
Y_digits = np.array(y)

loo = cross_validation.LeaveOneOut(len(Y_digits))

regr = linear_model.LinearRegression()

scores = cross_validation.cross_val_score(regr, X_digits, Y_digits, scoring='mean_squared_error', cv=loo,)

# This will print the mean of the list of errors that were output and 
# provide your metric for evaluation
print scores.mean()"
3060,cross validation in scikit learn,False,False,43,"from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import cross_val_score
import numpy as np

clf = RandomForestClassifier() #Initialize with whatever parameters you want to

# 10-Fold Cross validation
print np.mean(cross_val_score(clf, X_train, y_train, cv=10))"
3061,cross validation in scikit learn,False,False,29,"param_grid = {
                 'n_estimators': [5, 10, 15, 20],
                 'max_depth': [2, 5, 7, 9]
             }"
3062,cross validation in scikit learn,False,False,20,"from sklearn.model_selection import GridSearchCV

grid_clf = GridSearchCV(clf, param_grid, cv=10)
grid_clf.fit(X_train, y_train)"
3063,cross validation in scikit learn,False,False,51,"myCViterator = []
for i in range(nFolds):
    trainIndices = myDf[ myDf['cvLabel']!=i ].index.values.astype(int)
    testIndices =  myDf[ myDf['cvLabel']==i ].index.values.astype(int)
    myCViterator.append( (trainIndices, testIndices) )"
3064,cross validation in scikit learn,False,False,7,df['cv_label'] = df.index
3065,cross validation in scikit learn,False,False,7,cv_labels = df['cv_label']
3066,cross validation in scikit learn,False,True,6,"learn.fit(X, y)"
3067,cross validation in scikit learn,False,True,9,"learn.fit(x, y, method='ffill')"
3068,cross validation in scikit learn,False,True,10,"pd.concat((X, learn), axis=0)"
3069,cross validation in scikit learn,False,True,10,"pd.concat([validation, cross], axis=1)"
3070,cross validation in scikit learn,False,True,6,"cross.fit(X, y)"
3071,cross validation in scikit learn,False,True,10,"pd.concat([validation, validation], axis=1)"
3072,cross validation in scikit learn,False,True,10,"pd.concat([validation, cross], axis=0)"
3073,cross validation in scikit learn,True,False,111,"# Doing linear regression with leave one out cross val

from sklearn import cross_validation, linear_model
import numpy as np

# Including this to remind you that it is necessary to use numpy arrays rather 
# than lists otherwise you will get an error
X_digits = np.array(x)
Y_digits = np.array(y)

loo = cross_validation.LeaveOneOut(len(Y_digits))

regr = linear_model.LinearRegression()

scores = cross_validation.cross_val_score(regr, X_digits, Y_digits, scoring='mean_squared_error', cv=loo,)

# This will print the mean of the list of errors that were output and 
# provide your metric for evaluation
print scores.mean()"
3074,cross validation in scikit learn,False,False,43,"from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import cross_val_score
import numpy as np

clf = RandomForestClassifier() #Initialize with whatever parameters you want to

# 10-Fold Cross validation
print np.mean(cross_val_score(clf, X_train, y_train, cv=10))"
3075,cross validation in scikit learn,False,False,29,"param_grid = {
                 'n_estimators': [5, 10, 15, 20],
                 'max_depth': [2, 5, 7, 9]
             }"
3076,cross validation in scikit learn,False,False,20,"from sklearn.model_selection import GridSearchCV

grid_clf = GridSearchCV(clf, param_grid, cv=10)
grid_clf.fit(X_train, y_train)"
3077,cross validation in scikit learn,False,False,51,"myCViterator = []
for i in range(nFolds):
    trainIndices = myDf[ myDf['cvLabel']!=i ].index.values.astype(int)
    testIndices =  myDf[ myDf['cvLabel']==i ].index.values.astype(int)
    myCViterator.append( (trainIndices, testIndices) )"
3078,cross validation in scikit learn,False,False,7,df['cv_label'] = df.index
3079,cross validation in scikit learn,False,False,7,cv_labels = df['cv_label']
3080,How to generate random letter,False,True,25,""""""""""""".join(str(random.randint(0, 9)) for _ in range(12))"
3081,How to generate random letter,False,True,36,""""""""""""".join(''.join(str(random.randint(0, 9)) for _ in range(12)) for _ in
    range(12))"
3082,How to generate random letter,True,True,20,""""""""""""".join(choice(ascii_uppercase) for i in range(12))"
3083,How to generate random letter,False,True,20,""""""""""""".join(str(i) for i in range(12))"
3084,How to generate random letter,False,True,11,"random.sample(range(0, 7), 6)"
3085,How to generate random letter,False,True,20,""""""""""""".join(str(ord(a)) for a in letter)"
3086,How to generate random letter,False,True,11,"random.sample(range(1, 7), 6)"
3087,How to generate random letter,False,False,16,''.join(random.choice(string.ascii_uppercase + string.digits) for _ in range(N))
3088,How to generate random letter,False,False,11,"''.join(random.choices(string.ascii_uppercase + string.digits, k=N))"
3089,How to generate random letter,False,False,19,''.join(random.SystemRandom().choice(string.ascii_uppercase + string.digits) for _ in range(N))
3090,How to generate random letter,False,False,61,">>> import string
>>> import random
>>> def id_generator(size=6, chars=string.ascii_uppercase + string.digits):
...    return ''.join(random.choice(chars) for _ in range(size))
...
>>> id_generator()
'G5G74W'
>>> id_generator(3, ""6793YUIO"")
'Y3U'"
3091,How to generate random letter,False,False,18,">>> string.ascii_uppercase
'ABCDEFGHIJKLMNOPQRSTUVWXYZ'
>>> string.digits
'0123456789'
>>> string.ascii_uppercase + string.digits
'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'"
3092,How to generate random letter,False,False,62,">>> range(4) # range create a list of 'n' numbers
[0, 1, 2, 3]
>>> ['elem' for _ in range(4)] # we use range to create 4 times 'elem'
['elem', 'elem', 'elem', 'elem']"
3093,How to generate random letter,False,False,33,">>> random.choice(""abcde"")
'a'
>>> random.choice(""abcde"")
'd'
>>> random.choice(""abcde"")
'b'"
3094,How to generate random int in range between 1 and 20,True,True,9,"print(random.randint(0, 9))"
3095,How to generate random int in range between 1 and 20,False,True,9,"print(random.randint(0, 1))"
3096,How to generate random int in range between 1 and 20,False,True,9,"print(random.randint(0, 7))"
3097,How to generate random int in range between 1 and 20,False,True,9,"print(random.randint(1, 9))"
3098,How to generate random int in range between 1 and 20,False,True,9,"int(random.randint(0, 9))"
3099,How to generate random int in range between 1 and 20,False,True,18,"print([random.randint(0, 9) for _ in range(100)])"
3100,How to generate random int in range between 1 and 20,False,True,6,"random.randint(0, 9)"
3101,How to generate random int in range between 1 and 20,False,False,26,">>> import random
>>> random.sample(range(1, 100), 3)
[77, 52, 45]"
3102,How to generate random int in range between 1 and 20,False,False,38,">>> try:
...   random.sample(range(1, 2), 3)
... except ValueError:
...   print('Sample size exceeded population size.')
... 
Sample size exceeded population size"
3103,How to generate random int in range between 1 and 20,False,False,11,"import random
random.sample(range(100), 10)"
3104,How to generate random int in range between 1 and 20,False,False,21,"all_lines = f1.readlines()
for i in range(50):
    lines = random.sample(all_lines, 40)"
3105,How to generate random int in range between 1 and 20,False,False,21,"Random number:    1  2  3  4  5  6  7  8
Result:           1  2  3  4  7  8  9 10"
3106,How to generate random int in range between 1 and 20,False,False,23,"import random
numbers = range(a,b) + range(c,d)
r = random.choice(numbers)"
3107,How to generate random int in range between 1 and 20,False,False,31,"def random_dates(start, end, n=10):

    start_u = start.value//10**9
    end_u = end.value//10**9

    return pd.to_datetime(np.random.randint(start_u, end_u, n), unit='s')"
3108,make directory,False,True,7,os.chdir(os.path.dirname(__file__))
3109,make directory,False,True,4,os.chdir(directory)
3110,make directory,False,True,7,os.path.dirname(os.path.abspath(__file__))
3111,make directory,False,True,4,os.chdir(__file__)
3112,make directory,False,True,4,sys.path.dirname(__file__)
3113,make directory,False,True,4,os.chdir(make)
3114,make directory,False,True,7,sys.path.dirname(os.path.abspath(__file__))
3115,make directory,False,False,16,"from pathlib import Path
Path(""/my/directory"").mkdir(parents=True, exist_ok=True)"
3116,make directory,False,False,13,"import os
if not os.path.exists(directory):
    os.makedirs(directory)"
3117,make directory,True,False,22,"import os, errno

try:
    os.makedirs(directory)
except OSError as e:
    if e.errno != errno.EEXIST:
        raise"
3118,make directory,False,False,16,"try:
    os.makedirs(""path/to/directory"")
except FileExistsError:
    # directory already exists
    pass"
3119,make directory,False,False,15,"os.makedirs(""path/to/directory"", exist_ok=True)  # succeeds even if directory exists."
3120,make directory,False,False,13,"import pathlib
pathlib.Path('/my/directory').mkdir(parents=True, exist_ok=True)"
3121,make directory,False,False,8,"import os
os.makedirs(path, exist_ok=True)"
3122,get current path,False,True,4,os.path.abspath(sys.executable)
3123,get current path,False,True,4,os.path.abspath(os.__file__)
3124,get current path,False,True,7,os.path.dirname(os.path.abspath(__file__))
3125,get current path,True,True,4,os.path.abspath(os.path)
3126,get current path,False,True,4,os.path.exists(os.__file__)
3127,get current path,False,True,4,os.path.dirname(os.__file__)
3128,get current path,False,True,1,os.path.abspath
3129,get current path,False,False,11,"import os 
dir_path = os.path.dirname(os.path.realpath(__file__))"
3130,get current path,False,False,7,"import os
cwd = os.getcwd()"
3131,get current path,False,False,9,"import pathlib
pathlib.Path(__file__).parent.absolute()"
3132,get current path,False,False,8,"import pathlib
pathlib.Path().absolute()"
3133,get current path,False,False,9,"import os
os.path.dirname(os.path.abspath(__file__))"
3134,get current path,False,False,8,"import os
os.path.abspath(os.getcwd())"
3135,get current path,False,False,122,"import os

print(""Path at terminal when executing this file"")
print(os.getcwd() + ""\n"")

print(""This file path, relative to os.getcwd()"")
print(__file__ + ""\n"")

print(""This file full path (following symlinks)"")
full_path = os.path.realpath(__file__)
print(full_path + ""\n"")

print(""This file directory and name"")
path, filename = os.path.split(full_path)
print(path + ' --> ' + filename + ""\n"")

print(""This file directory only"")
print(os.path.dirname(full_path))"
3136,regexp date,False,True,11,"re.findall('<unk>', 'date')"
3137,regexp date,False,True,11,"re.findall('<unk>', 'en_US')"
3138,regexp date,False,True,8,re.compile('<unk>')
3139,regexp date,False,True,14,"re.findall('<unk>', '<unk>')"
3140,regexp date,False,True,28,"re.findall('<unk>', '{0.month}/{0.day}/{0.year}', '<unk>')"
3141,regexp date,False,True,17,"re.findall('<unk>', '%Y-%m-%d')"
3142,regexp date,False,True,14,"re.regexp('<unk>', '<unk>')"
3143,regexp date,False,False,74,"In [140]: datetime.datetime.strptime(""11/12/98"",""%m/%d/%y"")
Out[140]: datetime.datetime(1998, 11, 12, 0, 0)

In [141]: datetime.datetime.strptime(""11/12/98"",""%d/%m/%y"")
Out[141]: datetime.datetime(1998, 12, 11, 0, 0)"
3144,regexp date,False,False,36,"In [143]: date.year
Out[143]: 1998

In [144]: date.month
Out[144]: 11

In [145]: date.day
Out[145]: 12"
3145,regexp date,False,False,62,"In [159]: try:
   .....:     datetime.datetime.strptime(""99/99/99"",""%m/%d/%y"")
   .....: except ValueError as err:
   .....:     print(err)
   .....:     
   .....:     
time data '99/99/99' does not match format '%m/%d/%y'"
3146,regexp date,True,False,45,"In [146]: import re
In [152]: match = re.search(r'(\d+/\d+/\d+)','The date is 11/12/98')

In [153]: match.group(1)
Out[153]: '11/12/98'"
3147,regexp date,False,False,38,"In [154]: match = re.search(r'(\d+/\d+/\d+)','The date is 99/99/99')

In [155]: match.group(1)
Out[155]: '99/99/99'"
3148,regexp date,False,False,32,"import datetime

print datetime.datetime.strptime('2010-08-27', '%Y-%m-%d')
print datetime.datetime.strptime('2010-15-27', '%Y-%m-%d')"
3149,regexp date,False,False,71,"2010-08-27 00:00:00
Traceback (most recent call last):
  File ""./x.py"", line 6, in <module>
    print datetime.datetime.strptime('2010-15-27', '%Y-%m-%d')
  File ""/usr/lib/python2.7/_strptime.py"", line 325, in _strptime
    (data_string, format))
ValueError: time data '2010-15-27' does not match format '%Y-%m-%d'"
3150,copy files creating directory,False,True,7,"shutil.copy2(creating, 'rb')"
3151,copy files creating directory,False,True,9,"os.path.dirname(os.path.join(dirname, subdirname))"
3152,copy files creating directory,False,True,7,os.path.dirname(os.path.abspath(existGDBPath))
3153,copy files creating directory,False,True,5,os.listdir('..')
3154,copy files creating directory,False,True,7,"shutil.copy2(directory, 'filenames')"
3155,copy files creating directory,False,True,7,os.path.dirname(os.path.normpath(existGDBPath))
3156,copy files creating directory,False,True,12,"shutil.copy2(files, os.path.join(var_1, 'filenames'))"
3157,copy files creating directory,False,False,10,"from shutil import copyfile
copyfile(src, dst)"
3158,copy files creating directory,False,False,57,"┌──────────────────┬────────┬───────────┬───────┬────────────────┐
│     Function     │ Copies │   Copies  │Can use│   Destination  │
│                  │metadata│permissions│buffer │may be directory│
├──────────────────┼────────┼───────────┼───────┼────────────────┤
│shutil.copy       │   No   │    Yes    │   No  │      Yes       │
│shutil.copyfile   │   No   │     No    │   No  │       No       │
│shutil.copy2      │  Yes   │    Yes    │   No  │      Yes       │
│shutil.copyfileobj│   No   │     No    │  Yes  │       No       │
└──────────────────┴────────┴───────────┴───────┴────────────────┘"
3159,copy files creating directory,False,False,28,"import shutil
shutil.copy2('/src/dir/file.ext', '/dst/dir/newname.ext') # complete target filename given
shutil.copy2('/src/file.ext', '/dst/dir') # target filename is /dst/dir/file.ext"
3160,copy files creating directory,True,False,63,"import os
import errno

filename = ""/foo/bar/baz.txt""
if not os.path.exists(os.path.dirname(filename)):
    try:
        os.makedirs(os.path.dirname(filename))
    except OSError as exc: # Guard against race condition
        if exc.errno != errno.EEXIST:
            raise

with open(filename, ""w"") as f:
    f.write(""FOOBAR"")"
3161,copy files creating directory,False,False,34,"import os

filename = ""/foo/bar/baz.txt""
os.makedirs(os.path.dirname(filename), exist_ok=True)
with open(filename, ""w"") as f:
    f.write(""FOOBAR"")"
3162,copy files creating directory,False,False,14,"from distutils.dir_util import copy_tree
copy_tree(""/a/b/c"", ""/x/y/z"")"
3163,copy files creating directory,False,False,64,"import os, shutil
def copytree(src, dst, symlinks=False, ignore=None):
    for item in os.listdir(src):
        s = os.path.join(src, item)
        d = os.path.join(dst, item)
        if os.path.isdir(s):
            shutil.copytree(s, d, symlinks, ignore)
        else:
            shutil.copy2(s, d)"
3164,create directory,False,True,7,os.path.dirname(os.path.abspath(__file__))
3165,create directory,False,True,7,sys.path.dirname(os.path.realpath(__file__))
3166,create directory,False,True,7,sys.path.dirname(os.path.abspath(__file__))
3167,create directory,False,True,7,os.path.dirname(os.path.realpath(__file__))
3168,create directory,False,True,7,os.chdir(os.path.dirname(__file__))
3169,create directory,False,True,17,"urllib.request.urlretrieve('<unk>', '%d%b%Y')"
3170,create directory,False,True,7,os.path.dirname(os.path.dirname(__file__))
3171,create directory,False,False,16,"from pathlib import Path
Path(""/my/directory"").mkdir(parents=True, exist_ok=True)"
3172,create directory,True,False,13,"import os
if not os.path.exists(directory):
    os.makedirs(directory)"
3173,create directory,False,False,22,"import os, errno

try:
    os.makedirs(directory)
except OSError as e:
    if e.errno != errno.EEXIST:
        raise"
3174,create directory,False,False,16,"try:
    os.makedirs(""path/to/directory"")
except FileExistsError:
    # directory already exists
    pass"
3175,create directory,False,False,15,"os.makedirs(""path/to/directory"", exist_ok=True)  # succeeds even if directory exists."
3176,create directory,False,False,13,"import pathlib
pathlib.Path('/my/directory').mkdir(parents=True, exist_ok=True)"
3177,create directory,False,False,8,"import os
os.makedirs(path, exist_ok=True)"
3178,date gmt,False,True,6,datetime.datetime.combine(datetime.date.today())
3179,date gmt,False,True,10,"np.random.sample(datetime.date.now(), datetime.date.today())"
3180,date gmt,False,True,3,dateutil.parser.parse()
3181,date gmt,False,True,3,df.date.today()
3182,date gmt,False,True,4,parser.parser.parse(parse=parser.parse)
3183,date gmt,False,True,13,date.dt.strftime('%H:%M:%S')
3184,date gmt,False,True,10,"np.random.sample(datetime.date.today(), datetime.date.today())"
3185,date gmt,False,False,38,">>> import datetime
>>> datetime.datetime.now()
datetime.datetime(2009, 1, 6, 15, 8, 24, 78915)

>>> print(datetime.datetime.now())
2009-01-06 15:08:24.789150"
3186,date gmt,True,False,32,">>> datetime.datetime.now().time()
datetime.time(15, 8, 24, 78915)

>>> print(datetime.datetime.now().time())
15:08:24.789150"
3187,date gmt,False,False,7,>>> from datetime import datetime
3188,date gmt,False,False,38,">>> from time import gmtime, strftime
>>> strftime(""%Y-%m-%d %H:%M:%S"", gmtime())
'2009-01-05 22:14:39'"
3189,date gmt,False,False,26,"from datetime import datetime
datetime.now().strftime('%Y-%m-%d %H:%M:%S')"
3190,date gmt,False,False,19,">>> from datetime import datetime
>>> str(datetime.now())
'2011-05-03 17:45:35.177000'"
3191,date gmt,False,False,2,import time
3192,date now,False,True,17,"datetime.datetime.strptime('<unk>', '%d%b%Y')"
3193,date now,False,True,3,datetime.datetime.now()
3194,date now,False,True,17,"datetime.datetime.datetime.strptime('<unk>', '%d%b%Y')"
3195,date now,False,True,25,"datetime.datetime.strptime('<unk>', '%Y-%m-%dT%H:%M:%S')"
3196,date now,False,True,14,"datetime.datetime.strptime('date', '%d%b%Y')"
3197,date now,False,True,13,"datetime.datetime.strptime(var_1, '%d%b%Y')"
3198,date now,False,True,14,"datetime.datetime.strptime('var_1', '%d%b%Y')"
3199,date now,False,False,38,">>> import datetime
>>> datetime.datetime.now()
datetime.datetime(2009, 1, 6, 15, 8, 24, 78915)

>>> print(datetime.datetime.now())
2009-01-06 15:08:24.789150"
3200,date now,False,False,32,">>> datetime.datetime.now().time()
datetime.time(15, 8, 24, 78915)

>>> print(datetime.datetime.now().time())
15:08:24.789150"
3201,date now,False,False,7,>>> from datetime import datetime
3202,date now,True,False,38,">>> from time import gmtime, strftime
>>> strftime(""%Y-%m-%d %H:%M:%S"", gmtime())
'2009-01-05 22:14:39'"
3203,date now,False,False,18,"from datetime import datetime

datetime.today().strftime('%Y-%m-%d')"
3204,date now,False,False,22,datetime.today().strftime('%Y-%m-%d-%H:%M:%S')
3205,date now,False,False,26,"from datetime import datetime
datetime.now().strftime('%Y-%m-%d %H:%M:%S')"
3206,cvs files,False,True,9,"os.chdir(os.path.join(filenames, subdirname))"
3207,cvs files,False,True,8,"shutil.ulimit('value', 'filenames')"
3208,cvs files,False,True,7,"os.chmod('cvs', 484)"
3209,cvs files,False,True,10,"os.chdir(os.path.join(cvs, 'cvs'))"
3210,cvs files,False,True,9,"subprocess.call(['cvs', cvs])"
3211,cvs files,False,True,22,"with open('cvs', 'rb') as f:
    f = open('cvs', 'rb')"
3212,cvs files,False,True,1,pass
3213,cvs files,True,False,73,"import csv

def getstuff(filename, criterion):
    with open(filename, ""rb"") as csvfile:
        datareader = csv.reader(csvfile)
        yield next(datareader)  # yield the header row
        count = 0
        for row in datareader:
            if row[3] == criterion:
                yield row
                count += 1
            elif count:
                # done when having read a consecutive series of rows 
                return"
3214,cvs files,False,False,121,"import csv
from itertools import dropwhile, takewhile

def getstuff(filename, criterion):
    with open(filename, ""rb"") as csvfile:
        datareader = csv.reader(csvfile)
        yield next(datareader)  # yield the header row
        # first row, plus any subsequent rows that match, then stop
        # reading altogether
        # Python 2: use `for row in takewhile(...): yield row` instead
        # instead of `yield from takewhile(...)`.
        yield from takewhile(
            lambda r: r[3] == criterion,
            dropwhile(lambda r: r[3] != criterion, datareader))
        return"
3215,cvs files,False,False,25,"def getdata(filename, criteria):
    for criterion in criteria:
        for row in getstuff(filename, criterion):
            yield row"
3216,cvs files,False,False,13,"for row in getdata(somefilename, sequence_of_criteria):
    # process row"
3217,cvs files,False,False,43,"import pandas as pd

a = pd.read_csv(""filea.csv"")
b = pd.read_csv(""fileb.csv"")
b = b.dropna(axis=1)
merged = a.merge(b, on='title')
merged.to_csv(""output.csv"", index=False)"
3218,cvs files,False,False,78,">>> a = pd.read_csv(""filea.csv"")
>>> b = pd.read_csv(""fileb.csv"")
>>> a
   title  stage    jan    feb
0   darn  3.001  0.421  0.532
1     ok  2.829  1.036  0.751
2  three  1.115  1.146  2.921
>>> b
   title    mar    apr    may       jun  Unnamed: 5
0   darn  0.631  1.321  0.951    1.7510         NaN
1     ok  1.001  0.247  2.456    0.3216         NaN
2  three  0.285  1.283  0.924  956.0000         NaN"
3219,cvs files,False,False,36,">>> b = b.dropna(axis=1)
>>> b
   title    mar    apr    may       jun
0   darn  0.631  1.321  0.951    1.7510
1     ok  1.001  0.247  2.456    0.3216
2  three  0.285  1.283  0.924  956.0000"
3220,cvs,False,True,3,psutil.virtual_memory()
3221,cvs,False,True,3,plt.show()
3222,cvs,False,True,25,"print('[{0}, {1}, {2}]'.format(1, 2, 100))"
3223,cvs,False,True,22,print(' '.join(str(i) + 1 - 1 for i in range(100)))
3224,cvs,False,True,5,plt.savefig('cvs')
3225,cvs,False,True,24,print(' '.join((str(i) + 100) * 100 for i in range(100)))
3226,cvs,False,True,8,"plt.savefig('cvs', format='cvs')"
3227,cvs,False,False,7,"df.to_csv(file_name, sep='\t')"
3228,cvs,False,False,10,"df.to_csv(file_name, sep='\t', encoding='utf-8')"
3229,cvs,True,False,23,"with open('output.csv', 'w', newline='') as f:
    writer = csv.writer(f)
    ..."
3230,cvs,False,False,26,"with open('output.csv', 'w', newline='\n', encoding='utf-8') as f:
    writer = csv.writer(f)
    ..."
3231,cvs,False,False,9,"df.to_csv(file_name, encoding='utf-8', index=False)"
3232,cvs,False,False,8,"Color  Number
0   red     22
1  blue     10"
3233,cvs,False,False,5,"Color,Number
red,22
blue,10"
3234,read cvs,False,True,5,ast.literal_eval('cvs')
3235,read cvs,False,True,5,sys.setdefaultencoding('utf8')
3236,read cvs,False,True,7,"locale.setlocale(locale.LC_ALL, 'en_US')"
3237,read cvs,False,True,4,sys.exit(0)
3238,read cvs,False,True,10,"np.genfromtxt('cvs', delimiter=',')"
3239,read cvs,False,True,13,"print(np.genfromtxt('cvs', delimiter=','))"
3240,read cvs,False,True,9,"struct.pack('<I', 1633837924)"
3241,read cvs,False,False,16,"from numpy import genfromtxt
my_data = genfromtxt('my_file.csv', delimiter=',')"
3242,read cvs,False,False,39,"import pandas as pd
df=pd.read_csv('myfile.csv', sep=',',header=None)
df.values
array([[ 1. ,  2. ,  3. ],
       [ 4. ,  5.5,  6. ]])"
3243,read cvs,False,False,24,"1.0, 2, 3
4, 5.5, 6

import numpy as np
np.genfromtxt('myfile.csv',delimiter=',')"
3244,read cvs,False,False,22,"array([[ 1. ,  2. ,  3. ],
       [ 4. ,  5.5,  6. ]])"
3245,read cvs,False,False,12,"np.genfromtxt('myfile.csv',delimiter=',',dtype=None)"
3246,read cvs,False,False,53,"array([(1.0, 2.0, 3), (4.0, 5.5, 6)], 
      dtype=[('f0', '<f8'), ('f1', '<f8'), ('f2', '<i4')])"
3247,read cvs,True,False,52,"import csv

with open(""test.csv"", ""r"") as f:
    reader = csv.reader(f, delimiter=""\t"")
    for i, line in enumerate(reader):
        print 'line[{}] = {}'.format(i, line)"
3248,csv write,False,True,4,writer.writerow(write)
3249,csv write,False,True,7,"pd.read_csv('write', shell=True)"
3250,csv write,False,True,8,"pd.read_csv('write', quotechar='str_2')"
3251,csv write,False,True,6,"pd.read_csv(write, parse=wb)"
3252,csv write,False,True,6,"pd.DataFrame(write, columns=write)"
3253,csv write,False,True,11,"pd.read_csv('write', shell=True, date_format=' ')"
3254,csv write,False,True,7,"pd.read_csv('write', index=wb)"
3255,csv write,False,False,7,"df.to_csv(file_name, sep='\t')"
3256,csv write,False,False,10,"df.to_csv(file_name, sep='\t', encoding='utf-8')"
3257,csv write,False,False,9,"df.to_csv(file_name, encoding='utf-8', index=False)"
3258,csv write,False,False,8,"Color  Number
0   red     22
1  blue     10"
3259,csv write,False,False,5,"Color,Number
red,22
blue,10"
3260,csv write,False,False,10,",Color,Number
0,red,22
1,blue,10"
3261,csv write,True,False,36,"##text=List of strings to be written to file
with open('csvfile.csv','wb') as file:
    for line in text:
        file.write(line)
        file.write('\n')"
3262,csv writer,False,True,17,"df = pd.read_csv('<unk>', quotechar=',', header=None)"
3263,csv writer,False,True,15,"df = pd.read_csv('<unk>', quotechar=""'"")"
3264,csv writer,False,True,10,"df.to_csv('<unk>', index=False)"
3265,csv writer,False,True,19,"df = pd.read_csv('<unk>', index=None, sep=',', header=None)"
3266,csv writer,False,True,10,"df.to_csv('<unk>', **PIPE)"
3267,csv writer,False,True,17,"df = pd.read_csv('<unk>', index=None, sep='\n', header=None)"
3268,csv writer,False,True,14,"df = pd.read_csv('<unk>', index=None, **PIPE)"
3269,csv writer,False,False,36,"##text=List of strings to be written to file
with open('csvfile.csv','wb') as file:
    for line in text:
        file.write(line)
        file.write('\n')"
3270,csv writer,True,False,38,"import csv
with open(<path to output_csv>, ""wb"") as csv_file:
        writer = csv.writer(csv_file, delimiter=',')
        for line in data:
            writer.writerow(line)"
3271,csv writer,False,False,35,"f = open('csvfile.csv','w')
f.write('hi there\n') #Give your csv text here.
## Python will convert \n to os.linesep
f.close()"
3272,csv writer,False,False,102,">>> import io
>>> import csv
>>> output = io.StringIO()
>>> csvdata = [1,2,'a','He said ""what do you mean?""',""Whoa!\nNewlines!""]
>>> writer = csv.writer(output, quoting=csv.QUOTE_NONNUMERIC)
>>> writer.writerow(csvdata)
59
>>> output.getvalue()
'1,2,""a"",""He said """"what do you mean?"""""",""Whoa!\nNewlines!""\r\n'"
3273,csv writer,False,False,58,">>> output = io.BytesIO()
>>> writer = csv.writer(output)
>>> writer.writerow(csvdata)
57L
>>> output.getvalue()
'1,2,a,""He said """"what do you mean?"""""",""Whoa!\nNewlines!""\r\n'"
3274,csv writer,False,False,119,"import csv

with open('combined_file.csv', 'w', newline='') as outcsv:
    writer = csv.writer(outcsv)
    writer.writerow([""Date"", ""temperature 1"", ""Temperature 2""])

    with open('t1.csv', 'r', newline='') as incsv:
        reader = csv.reader(incsv)
        writer.writerows(row + [0.0] for row in reader)

    with open('t2.csv', 'r', newline='') as incsv:
        reader = csv.reader(incsv)
        writer.writerows(row[:1] + [0.0] + row[1:] for row in reader)"
3275,csv writer,False,False,151,"import csv

with open('combined_file.csv', 'w', newline='') as outcsv:
    writer = csv.DictWriter(outcsv, fieldnames = [""Date"", ""temperature 1"", ""Temperature 2""])
    writer.writeheader()

    with open('t1.csv', 'r', newline='') as incsv:
        reader = csv.reader(incsv)
        writer.writerows({'Date': row[0], 'temperature 1': row[1], 'temperature 2': 0.0} for row in reader)

    with open('t2.csv', 'r', newline='') as incsv:
        reader = csv.reader(incsv)
        writer.writerows({'Date': row[0], 'temperature 1': 0.0, 'temperature 2': row[1]} for row in reader)"
3276,if dir exist,False,True,6,self.set.set().append()
3277,if dir exist,False,True,6,self.set().set()
3278,if dir exist,False,True,6,datetime.now().delete()
3279,if dir exist,False,True,4,exist.append(exc)
3280,if dir exist,False,True,6,datetime.now().start()
3281,if dir exist,False,True,6,SomeModel.set().set()
3282,if dir exist,False,True,7,self.set.set().append(y)
3283,if dir exist,False,False,16,"from pathlib import Path
Path(""/my/directory"").mkdir(parents=True, exist_ok=True)"
3284,if dir exist,False,False,13,"import os
if not os.path.exists(directory):
    os.makedirs(directory)"
3285,if dir exist,False,False,22,"import os, errno

try:
    os.makedirs(directory)
except OSError as e:
    if e.errno != errno.EEXIST:
        raise"
3286,if dir exist,True,False,16,"try:
    os.makedirs(""path/to/directory"")
except FileExistsError:
    # directory already exists
    pass"
3287,if dir exist,False,False,15,"os.makedirs(""path/to/directory"", exist_ok=True)  # succeeds even if directory exists."
3288,if dir exist,False,False,6,"import os.path
os.path.isfile(fname)"
3289,if dir exist,False,False,20,"from pathlib import Path

my_file = Path(""/path/to/file"")
if my_file.is_file():
    # file exists"
3290,loop files recursive,False,True,11,print(glob.glob('<unk>'))
3291,loop files recursive,False,True,8,print(glob.glob('*'))
3292,loop files recursive,False,True,18,"f = open('10')
print(glob.glob('<unk>'))"
3293,loop files recursive,False,True,14,print(itertools.glob(re.compile('<unk>')))
3294,loop files recursive,False,True,13,"f = open('<unk>', 'range')"
3295,loop files recursive,False,True,15,"f = open('10')
print(glob.glob('*'))"
3296,loop files recursive,False,True,11,print(itertools.glob('<unk>'))
3297,loop files recursive,False,False,22,"from pathlib import Path

for path in Path('src').rglob('*.c'):
    print(path.name)"
3298,loop files recursive,True,False,41,"import fnmatch
import os

matches = []
for root, dirnames, filenames in os.walk('src'):
    for filename in fnmatch.filter(filenames, '*.c'):
        matches.append(os.path.join(root, filename))"
3299,loop files recursive,False,False,39,"import os

for filename in os.listdir(directory):
    if filename.endswith("".asm"") or filename.endswith("".py""): 
         # print(os.path.join(directory, filename))
        continue
    else:
        continue"
3300,loop files recursive,False,False,51,"import os

directory = os.fsencode(directory_in_str)
    
for file in os.listdir(directory):
     filename = os.fsdecode(file)
     if filename.endswith("".asm"") or filename.endswith("".py""): 
         # print(os.path.join(directory, filename))
         continue
     else:
         continue"
3301,loop files recursive,False,False,38,"from pathlib import Path

pathlist = Path(directory_in_str).glob('**/*.asm')
for path in pathlist:
     # because path is object not string
     path_in_str = str(path)
     # print(path_in_str)"
3302,loop files recursive,False,False,38,"from pathlib import Path

pathlist = Path(directory_in_str).rglob('*.asm')
for path in pathlist:
     # because path is object not string
     path_in_str = str(path)
     # print(path_in_str)"
3303,loop files recursive,False,False,32,"import os
rootdir = 'C:/Users/sid/Desktop/test'

for subdir, dirs, files in os.walk(rootdir):
    for file in files:
        print os.path.join(subdir, file)"
3304,csv,False,True,4,writer.writerow(row)
3305,csv,False,True,4,writer.writerow(line)
3306,csv,False,True,4,writer.writerow(df)
3307,csv,False,True,6,"pd.read_csv(lineterminator, **lineterminator)"
3308,csv,False,True,10,"df.to_csv(l, index=False, sep=' ')"
3309,csv,False,True,6,"pd.read_csv(lineterminator, header=None)"
3310,csv,False,True,9,"pd.read_csv(f, sep='', **False)"
3311,csv,False,False,16,"from numpy import genfromtxt
my_data = genfromtxt('my_file.csv', delimiter=',')"
3312,csv,True,False,30,"import csv

with open('file.csv', newline='') as f:
    reader = csv.reader(f)
    data = list(reader)

print(data)"
3313,csv,False,False,37,"[['This is the first line', 'Line1'], ['This is the second line', 'Line2'], ['This is the third line', 'Line3']]"
3314,csv,False,False,36,"import csv

with open('file.csv', newline='') as f:
    reader = csv.reader(f)
    data = [tuple(row) for row in reader]

print(data)"
3315,csv,False,False,37,"[('This is the first line', 'Line1'), ('This is the second line', 'Line2'), ('This is the third line', 'Line3')]"
3316,csv,False,False,68,"import csv
with open('file.csv', 'rb') as f:
    reader = csv.reader(f)
    your_list = list(reader)

print your_list
# [['This is the first line', 'Line1'],
#  ['This is the second line', 'Line2'],
#  ['This is the third line', 'Line3']]"
3317,csv,False,False,39,"import pandas as pd
df=pd.read_csv('myfile.csv', sep=',',header=None)
df.values
array([[ 1. ,  2. ,  3. ],
       [ 4. ,  5.5,  6. ]])"
3318,csv write,False,True,4,writer.writerow(write)
3319,csv write,False,True,7,"pd.read_csv('write', shell=True)"
3320,csv write,False,True,8,"pd.read_csv('write', quotechar='str_2')"
3321,csv write,False,True,6,"pd.read_csv(write, parse=wb)"
3322,csv write,False,True,6,"pd.DataFrame(write, columns=write)"
3323,csv write,False,True,11,"pd.read_csv('write', shell=True, date_format=' ')"
3324,csv write,False,True,7,"pd.read_csv('write', index=wb)"
3325,csv write,False,False,7,"df.to_csv(file_name, sep='\t')"
3326,csv write,False,False,10,"df.to_csv(file_name, sep='\t', encoding='utf-8')"
3327,csv write,True,False,46,"# Python 2
with open('/pythonwork/thefile_subset11.csv', 'wb') as outfile:
    writer = csv.writer(outfile)

# Python 3
with open('/pythonwork/thefile_subset11.csv', 'w', newline='') as outfile:
    writer = csv.writer(outfile)"
3328,csv write,False,False,26,"import csv

with open(""output.csv"", ""wb"") as f:
    writer = csv.writer(f)
    writer.writerows(a)"
3329,csv write,False,False,30,"import csv

with open(""out.csv"", ""w"", newline="""") as f:
    writer = csv.writer(f)
    writer.writerows(a)"
3330,csv write,False,False,9,"df.to_csv(file_name, encoding='utf-8', index=False)"
3331,csv write,False,False,8,"Color  Number
0   red     22
1  blue     10"
3332,get time and date,False,True,3,datetime.datetime.now()
3333,get time and date,False,True,10,"datetime.datetime.combine(datetime.datetime.now(), datetime.datetime.now())"
3334,get time and date,False,True,10,"datetime.datetime.combine(datetime.date.today(), datetime.date.now())"
3335,get time and date,False,True,10,"datetime.datetime.combine(datetime.date.today(), datetime.datetime.now())"
3336,get time and date,False,True,10,"datetime.datetime.combine(datetime.datetime.now(), datetime.date.now())"
3337,get time and date,False,True,3,datetime.datetime.utcnow()
3338,get time and date,False,True,6,datetime.datetime.t(datetime.datetime.now())
3339,get time and date,True,False,38,">>> import datetime
>>> datetime.datetime.now()
datetime.datetime(2009, 1, 6, 15, 8, 24, 78915)

>>> print(datetime.datetime.now())
2009-01-06 15:08:24.789150"
3340,get time and date,False,False,32,">>> datetime.datetime.now().time()
datetime.time(15, 8, 24, 78915)

>>> print(datetime.datetime.now().time())
15:08:24.789150"
3341,get time and date,False,False,7,>>> from datetime import datetime
3342,get time and date,False,False,6,datetime.datetime.now().date()
3343,get time and date,False,False,38,">>> from time import gmtime, strftime
>>> strftime(""%Y-%m-%d %H:%M:%S"", gmtime())
'2009-01-05 22:14:39'"
3344,get time and date,False,False,26,"from datetime import datetime
datetime.now().strftime('%Y-%m-%d %H:%M:%S')"
3345,get time and date,False,False,19,">>> from datetime import datetime
>>> str(datetime.now())
'2011-05-03 17:45:35.177000'"
3346,get date and time one week from now,False,True,18,"datetime.datetime.strptime('January 11, 2010', '%B %d, %Y')"
3347,get date and time one week from now,False,True,10,"datetime.datetime.combine(datetime.date.today(), datetime.now())"
3348,get date and time one week from now,False,True,16,"datetime.datetime.combine(datetime.datetime.now(), '%B %d, %Y')"
3349,get date and time one week from now,True,True,11,"datetime.datetime.combine(datetime.date.today(), datetime.timedelta(hours=3))"
3350,get date and time one week from now,False,True,6,datetime.datetime.combine(datetime.datetime.now())
3351,get date and time one week from now,False,True,10,datetime.datetime.now().date.strftime('%a')
3352,get date and time one week from now,False,True,10,datetime.datetime.now().year.strftime('%a')
3353,get date and time one week from now,False,False,38,">>> import datetime
>>> datetime.datetime.now()
datetime.datetime(2009, 1, 6, 15, 8, 24, 78915)

>>> print(datetime.datetime.now())
2009-01-06 15:08:24.789150"
3354,get date and time one week from now,False,False,32,">>> datetime.datetime.now().time()
datetime.time(15, 8, 24, 78915)

>>> print(datetime.datetime.now().time())
15:08:24.789150"
3355,get date and time one week from now,False,False,7,>>> from datetime import datetime
3356,get date and time one week from now,False,False,16,"from datetime import datetime, timedelta

d = datetime.today() - timedelta(days=days_to_subtract)"
3357,get date and time one week from now,False,False,38,">>> from time import gmtime, strftime
>>> strftime(""%Y-%m-%d %H:%M:%S"", gmtime())
'2009-01-05 22:14:39'"
3358,get date and time one week from now,False,False,37,">>> import datetime
>>> datetime.datetime.today()
datetime.datetime(2012, 3, 23, 23, 24, 55, 173504)
>>> datetime.datetime.today().weekday()
4"
3359,get date and time one week from now,False,False,20,"from datetime import date
from datetime import datetime

dt = datetime.combine(date.today(), datetime.min.time())"
3360,get time and date one week from now,True,True,11,"datetime.datetime.combine(datetime.date.today(), datetime.timedelta(hours=3))"
3361,get time and date one week from now,False,True,18,"datetime.datetime.strptime('January 11, 2010', '%B %d, %Y')"
3362,get time and date one week from now,False,True,15,"datetime.datetime.combine(datetime.date.today(), '%B A"")]')"
3363,get time and date one week from now,False,True,10,"datetime.datetime.combine(datetime.date.today(), datetime.now())"
3364,get time and date one week from now,False,True,11,"datetime.datetime.combine(datetime.date.today(), '%B')"
3365,get time and date one week from now,False,True,16,"datetime.datetime.combine(datetime.datetime.now(), '%B %d, %Y')"
3366,get time and date one week from now,False,True,12,"datetime.datetime.combine(datetime.date.today(), '%B id_vars')"
3367,get time and date one week from now,False,False,38,">>> import datetime
>>> datetime.datetime.now()
datetime.datetime(2009, 1, 6, 15, 8, 24, 78915)

>>> print(datetime.datetime.now())
2009-01-06 15:08:24.789150"
3368,get time and date one week from now,False,False,32,">>> datetime.datetime.now().time()
datetime.time(15, 8, 24, 78915)

>>> print(datetime.datetime.now().time())
15:08:24.789150"
3369,get time and date one week from now,False,False,7,>>> from datetime import datetime
3370,get time and date one week from now,False,False,38,">>> from time import gmtime, strftime
>>> strftime(""%Y-%m-%d %H:%M:%S"", gmtime())
'2009-01-05 22:14:39'"
3371,get time and date one week from now,False,False,26,"from datetime import datetime
datetime.now().strftime('%Y-%m-%d %H:%M:%S')"
3372,get time and date one week from now,False,False,19,">>> from datetime import datetime
>>> str(datetime.now())
'2011-05-03 17:45:35.177000'"
3373,get time and date one week from now,False,False,23,">>> import datetime
>>> datetime.date(2010, 6, 16).isocalendar()[1]
24"
3374,trim the heading and trailing whitespaces and blank lines for all text files,True,True,7,"re.split('\n\\s*\n', string)"
3375,trim the heading and trailing whitespaces and blank lines for all text files,False,True,7,"re.split('\n\\s*\n', text)"
3376,trim the heading and trailing whitespaces and blank lines for all text files,False,True,23,"return ' '.join(x.strip() for x in re.findall(""[A-Za-z']+"", string))"
3377,trim the heading and trailing whitespaces and blank lines for all text files,False,True,10,"re.split('Please enter something: ', l)"
3378,trim the heading and trailing whitespaces and blank lines for all text files,False,True,8,"re.split('\\s+', '10')"
3379,trim the heading and trailing whitespaces and blank lines for all text files,False,True,7,"re.split('\\s+', text)"
3380,trim the heading and trailing whitespaces and blank lines for all text files,False,True,10,"re.split('Please enter something: ', my_string)"
3381,trim the heading and trailing whitespaces and blank lines for all text files,False,False,10,">>> 'test string\n'.rstrip()
'test string'"
3382,trim the heading and trailing whitespaces and blank lines for all text files,False,False,13,">>> 'test string \n \r\n\n\r \n\n'.rstrip()
'test string'"
3383,trim the heading and trailing whitespaces and blank lines for all text files,False,False,17,">>> 'test string \n \r\n\n\r \n\n'.rstrip('\n')
'test string \n \r\n\n\r '"
3384,trim the heading and trailing whitespaces and blank lines for all text files,False,False,44,">>> s = ""   \n\r\n  \n  abc   def \n\r\n  \n  ""
>>> s.strip()
'abc   def'
>>> s.lstrip()
'abc   def \n\r\n  \n  '
>>> s.rstrip()
'   \n\r\n  \n  abc   def'"
3385,trim the heading and trailing whitespaces and blank lines for all text files,False,False,48,">>> ' Hello '.strip()
'Hello'
>>> ' Hello'.strip()
'Hello'
>>> 'Bob has a cat'.strip()
'Bob has a cat'
>>> '   Hello   '.strip()  # ALL consecutive spaces at both ends removed
'Hello'"
3386,trim the heading and trailing whitespaces and blank lines for all text files,False,False,48,"def strip_one_space(s):
    if s.endswith("" ""): s = s[:-1]
    if s.startswith("" ""): s = s[1:]
    return s

>>> strip_one_space(""   Hello "")
'  Hello'"
3387,trim the heading and trailing whitespaces and blank lines for all text files,False,False,13,">>> ""  Hello\n"".strip("" "")
'Hello\n'"
3388,generate random number,False,True,7,random.choice(range(10))
3389,generate random number,False,True,7,random.choice(range(9))
3390,generate random number,True,True,6,"random.randint(0, 9)"
3391,generate random number,True,True,6,"random.randint(0, 7)"
3392,generate random number,False,True,10,int(random.choice(range(100)))
3393,generate random number,False,True,7,random.choice(range(100))
3394,generate random number,False,True,7,random.choice(range(3))
3395,generate random number,False,False,11,"from random import randrange
print(randrange(10))"
3396,generate random number,False,False,9,"import random
print(random.randint(0,9))"
3397,generate random number,False,False,6,"random.randint(a, b)"
3398,generate random number,False,False,26,">>> import random
>>> random.sample(range(1, 100), 3)
[77, 52, 45]"
3399,generate random number,False,False,38,">>> try:
...   random.sample(range(1, 2), 3)
... except ValueError:
...   print('Sample size exceeded population size.')
... 
Sample size exceeded population size"
3400,generate random number,False,False,8,"import random
random.uniform(0, 1)"
3401,generate random number,False,False,36,"from random import randrange, uniform

# randrange gives you an integral value
irand = randrange(0, 10)

# uniform gives you a floating-point value
frand = uniform(0, 10)"
3402,sort a list,True,True,12,"sorted(list, key=lambda x: x[1])"
3403,sort a list,False,True,12,"sorted(l, key=lambda x: x[1])"
3404,sort a list,False,True,12,"sorted(var_1, key=lambda x: x[1])"
3405,sort a list,False,True,14,"sorted(l, key=lambda x: sorted(x), reverse=True)"
3406,sort a list,False,True,6,"sorted(l, **l)"
3407,sort a list,False,True,6,"sorted(list, **list)"
3408,sort a list,False,True,6,"sorted(list, **var_2)"
3409,sort a list,False,False,15,"newlist = sorted(list_to_be_sorted, key=lambda k: k['name'])"
3410,sort a list,False,False,16,"from operator import itemgetter
newlist = sorted(list_to_be_sorted, key=itemgetter('name'))"
3411,sort a list,False,False,14,"newlist = sorted(l, key=itemgetter('name'), reverse=True)"
3412,sort a list,False,False,14,"sorted_by_second = sorted(data, key=lambda tup: tup[1])"
3413,sort a list,False,False,14,data.sort(key=lambda tup: tup[1])  # sorts in place
3414,sort a list,False,False,23,"s = sorted(s, key = lambda x: (x[1], x[2]))"
3415,sort a list,False,False,17,"import operator
s = sorted(s, key = operator.itemgetter(1, 2))"
3416,print without newline,False,True,19,"print('%s, <unk>' % (1, 2, 3))"
3417,print without newline,False,True,15,"print('%s, <unk>' + '""')"
3418,print without newline,False,True,22,"print('<unk> %s, <unk>' % (1, 2, 3))"
3419,print without newline,False,True,15,"print('%5.3f' % (1, 2, 3))"
3420,print without newline,False,True,16,"print('%s,' % (1, 2, 3))"
3421,print without newline,False,True,19,"print('my_list %s, <unk>' % (1, 2, 3))"
3422,print without newline,False,True,4,sys.exit(0)
3423,print without newline,True,False,9,"print('.', end='')"
3424,print without newline,False,False,17,"print('a', 'b', 'c', sep='')"
3425,print without newline,False,False,11,"print('.', end='', flush=True)"
3426,print without newline,False,False,4,from __future__ import print_function
3427,print without newline,False,False,8,"import sys
sys.stdout.write('.')"
3428,print without newline,False,False,3,sys.stdout.flush()
3429,print without newline,False,False,34,">>> for i in range(10):
...     print i,
... else:
...     print
...
0 1 2 3 4 5 6 7 8 9
>>>"
3430,change directory,False,True,7,os.chdir(os.path.dirname(__file__))
3431,change directory,False,True,7,os.chdir(os.path.realpath(__file__))
3432,change directory,False,True,7,os.chdir(os.path.abspath(__file__))
3433,change directory,False,True,7,os.chdir(os.path.subdirname(__file__))
3434,change directory,False,True,7,os.chdir(os.path.fd(__file__))
3435,change directory,False,True,7,os.chdir(os.path.normpath(__file__))
3436,change directory,False,True,7,os.path.dirname(os.path.realpath(__file__))
3437,change directory,True,False,4,os.chdir(path)
3438,change directory,False,False,6,"import os

os.chdir(path)"
3439,change directory,False,False,64,"import os

class cd:
    """"""Context manager for changing the current working directory""""""
    def __init__(self, newPath):
        self.newPath = os.path.expanduser(newPath)

    def __enter__(self):
        self.savedPath = os.getcwd()
        os.chdir(self.newPath)

    def __exit__(self, etype, value, traceback):
        os.chdir(self.savedPath)"
3440,change directory,False,False,50,"import subprocess # just to call an arbitrary command e.g. 'ls'

# enter the directory like this:
with cd(""~/Library""):
   # we are in ~/Library
   subprocess.call(""ls"")

# outside the context manager we are back wherever we started."
3441,change directory,False,False,29,">>> import os
>>> os.getcwd()
'/home/user'
>>> os.chdir(""/tmp/"")
>>> os.getcwd()
'/tmp'"
3442,change directory,False,False,5,export PYTHONPATH=/path/to/my/library:$PYTHONPATH
3443,change directory,False,False,9,set PYTHONPATH=%PYTHONPATH%;C:\My_python_lib
3444,"change directory to ""data""",False,True,7,os.path.dirname(os.path.realpath(__file__))
3445,"change directory to ""data""",True,True,5,os.chdir('data')
3446,"change directory to ""data""",False,True,7,os.chdir(os.path.dirname(__file__))
3447,"change directory to ""data""",False,True,8,os.path.dirname(os.path.normpath('data'))
3448,"change directory to ""data""",False,True,7,os.path.dirname(os.path.abspath(__file__))
3449,"change directory to ""data""",False,True,7,os.path.dirname(os.path.normpath(data))
3450,"change directory to ""data""",False,True,7,os.path.dirname(os.path.abspath(data))
3451,"change directory to ""data""",False,False,4,os.chdir(path)
3452,"change directory to ""data""",False,False,6,"import os

os.chdir(path)"
3453,"change directory to ""data""",False,False,64,"import os

class cd:
    """"""Context manager for changing the current working directory""""""
    def __init__(self, newPath):
        self.newPath = os.path.expanduser(newPath)

    def __enter__(self):
        self.savedPath = os.getcwd()
        os.chdir(self.newPath)

    def __exit__(self, etype, value, traceback):
        os.chdir(self.savedPath)"
3454,"change directory to ""data""",False,False,50,"import subprocess # just to call an arbitrary command e.g. 'ls'

# enter the directory like this:
with cd(""~/Library""):
   # we are in ~/Library
   subprocess.call(""ls"")

# outside the context manager we are back wherever we started."
3455,"change directory to ""data""",False,False,29,">>> import os
>>> os.getcwd()
'/home/user'
>>> os.chdir(""/tmp/"")
>>> os.getcwd()
'/tmp'"
3456,"change directory to ""data""",False,False,5,export PYTHONPATH=/path/to/my/library:$PYTHONPATH
3457,"change directory to ""data""",False,False,9,set PYTHONPATH=%PYTHONPATH%;C:\My_python_lib
3458,list files in directory,False,True,33,"for dirname, dirnames, filenames in os.walk('whatever'):
    for subdirname in dirnames:
        print(os.path.join(dirname, subdirname))
    for filename in filenames:
        pass"
3459,list files in directory,False,True,33,"for dirname, dirnames, filenames in os.walk('foo'):
    for subdirname in dirnames:
        print(os.path.join(dirname, subdirname))
    for filename in filenames:
        pass"
3460,list files in directory,False,True,5,glob.glob('*')
3461,list files in directory,False,True,33,"for dirname, dirnames, filenames in os.walk('test'):
    for subdirname in dirnames:
        print(os.path.join(dirname, subdirname))
    for filename in filenames:
        pass"
3462,list files in directory,False,True,34,"for dirname, dirnames, filenames in os.walk('a'):
    for subdirname in dirnames:
        print(os.path.join(dirname, subdirname))
    for filename in filenames:
        pass"
3463,list files in directory,False,True,36,"for dirname, dirnames, filenames in os.walk('<unk>'):
    for subdirname in dirnames:
        print(os.path.join(dirname, subdirname))
    for filename in filenames:
        pass"
3464,list files in directory,False,True,33,"for dirname, dirnames, filenames in os.walk('hello'):
    for subdirname in dirnames:
        print(os.path.join(dirname, subdirname))
    for filename in filenames:
        pass"
3465,list files in directory,False,False,32,"from os import listdir
from os.path import isfile, join
onlyfiles = [f for f in listdir(mypath) if isfile(join(mypath, f))]"
3466,list files in directory,False,False,27,"from os import walk

f = []
for (dirpath, dirnames, filenames) in walk(mypath):
    f.extend(filenames)
    break"
3467,list files in directory,False,False,24,"import glob, os
os.chdir(""/mydir"")
for file in glob.glob(""*.txt""):
    print(file)"
3468,list files in directory,True,False,31,"import os
for file in os.listdir(""/mydir""):
    if file.endswith("".txt""):
        print(os.path.join(""/mydir"", file))"
3469,list files in directory,False,False,38,"import os
for root, dirs, files in os.walk(""/mydir""):
    for file in files:
        if file.endswith("".txt""):
             print(os.path.join(root, file))"
3470,list files in directory,False,False,11,"import glob
print(glob.glob(""/home/adam/*.txt""))"
3471,list files in directory,False,False,10,"['/home/adam/file1.txt', '/home/adam/file2.txt', .... ]"
3472,read ISO-8859-15,False,True,5,ast.literal_eval('iso-8859-15')
3473,read ISO-8859-15,False,True,5,sys.setdefaultencoding('utf8')
3474,read ISO-8859-15,False,True,7,"locale.setlocale(locale.LC_ALL, 'en_US')"
3475,read ISO-8859-15,False,True,4,sys.exit(0)
3476,read ISO-8859-15,False,True,10,"np.genfromtxt('iso-8859-15', delimiter=',')"
3477,read ISO-8859-15,False,True,13,"print(np.genfromtxt('iso-8859-15', delimiter=','))"
3478,read ISO-8859-15,False,True,9,"struct.pack('<I', 1633837924)"
3479,read ISO-8859-15,True,False,45,"import codecs
with codecs.open(filename, 'r', encoding='utf8') as f:
    text = f.read()
# process Unicode text
with codecs.open(filename, 'w', encoding='utf8') as f:
    f.write(text)"
3480,read ISO-8859-15,False,False,45,"import io
with io.open(filename, 'r', encoding='utf8') as f:
    text = f.read()
# process Unicode text
with io.open(filename, 'w', encoding='utf8') as f:
    f.write(text)"
3481,read ISO-8859-15,False,False,18,">>> def tell_me_about(s): return (type(s), s)"
3482,read ISO-8859-15,False,False,76,">>> v = ""\xC4pple"" # iso-8859-1 aka latin1 encoded string

>>> tell_me_about(v)
(<type 'str'>, '\xc4pple')

>>> v
'\xc4pple'        # representation in memory

>>> print v
?pple             # map the iso-8859-1 in-memory to iso-8859-1 chars
                  # note that '\xc4' has no representation in iso-8859-1, 
                  # so is printed as ""?""."
3483,read ISO-8859-15,False,False,93,">>> uv = v.decode(""iso-8859-1"")
>>> uv
u'\xc4pple'       # decoding iso-8859-1 becomes unicode, in memory

>>> tell_me_about(uv)
(<type 'unicode'>, u'\xc4pple')

>>> print v.decode(""iso-8859-1"")
Äpple             # convert unicode to the default character set
                  # (utf-8, based on sys.stdout.encoding)

>>> v.decode('iso-8859-1') == u'\xc4pple'
True              # one could have just used a unicode representation 
                  # from the start"
3484,read ISO-8859-15,False,False,106,">>> u""Ä"" == u""\xc4""
True              # the native unicode char and escaped versions are the same

>>> ""Ä"" == u""\xc4""  
False             # the native unicode char is '\xc3\x84' in latin1

>>> ""Ä"".decode('utf8') == u""\xc4""
True              # one can decode the string to get unicode

>>> ""Ä"" == ""\xc4""
False             # the native character and the escaped string are
                  # of course not equal ('\xc3\x84' != '\xc4')."
3485,read ISO-8859-15,False,False,121,">>> u8 = v.decode(""iso-8859-1"").encode(""utf-8"")
>>> u8
'\xc3\x84pple'    # convert iso-8859-1 to unicode to utf-8

>>> tell_me_about(u8)
(<type 'str'>, '\xc3\x84pple')

>>> u16 = v.decode('iso-8859-1').encode('utf-16')
>>> tell_me_about(u16)
(<type 'str'>, '\xff\xfe\xc4\x00p\x00p\x00l\x00e\x00')

>>> tell_me_about(u8.decode('utf8'))
(<type 'unicode'>, u'\xc4pple')

>>> tell_me_about(u16.decode('utf16'))
(<type 'unicode'>, u'\xc4pple')"
3486,copy a file,False,True,6,"copyfile(a, b)"
3487,copy a file,False,True,6,"copyfile(file, str_3)"
3488,copy a file,False,True,6,"copyfile(copy, subdirname)"
3489,copy a file,False,True,6,"copyfile(file, subdirname)"
3490,copy a file,False,True,6,"copyfile(file, h)"
3491,copy a file,False,True,6,"copyfile(file, filename)"
3492,copy a file,False,True,8,"copyfile(file, a + b)"
3493,copy a file,True,False,10,"from shutil import copyfile
copyfile(src, dst)"
3494,copy a file,False,False,57,"┌──────────────────┬────────┬───────────┬───────┬────────────────┐
│     Function     │ Copies │   Copies  │Can use│   Destination  │
│                  │metadata│permissions│buffer │may be directory│
├──────────────────┼────────┼───────────┼───────┼────────────────┤
│shutil.copy       │   No   │    Yes    │   No  │      Yes       │
│shutil.copyfile   │   No   │     No    │   No  │       No       │
│shutil.copy2      │  Yes   │    Yes    │   No  │      Yes       │
│shutil.copyfileobj│   No   │     No    │  Yes  │       No       │
└──────────────────┴────────┴───────────┴───────┴────────────────┘"
3495,copy a file,False,False,28,"import shutil
shutil.copy2('/src/dir/file.ext', '/dst/dir/newname.ext') # complete target filename given
shutil.copy2('/src/file.ext', '/dst/dir') # target filename is /dst/dir/file.ext"
3496,copy a file,True,False,43,"import shutil, errno

def copyanything(src, dst):
    try:
        shutil.copytree(src, dst)
    except OSError as exc: # python >2.5
        if exc.errno == errno.ENOTDIR:
            shutil.copy(src, dst)
        else: raise"
3497,copy a file,False,False,10,"import shutil
shutil.copy('/etc/hostname', '/var/tmp/testhostname')"
3498,copy a file,False,False,6,"import os
import shutil
import subprocess"
3499,copy a file,False,False,20,"shutil.copyfile(src_file, dest_file, *, follow_symlinks=True)

# example    
shutil.copyfile('source.txt', 'destination.txt')"
3500,check if directory exists,True,True,3,os.path.exists()
3501,check if directory exists,False,True,3,os.directory.exists()
3502,check if directory exists,False,True,6,os.path.exists('o')
3503,check if directory exists,False,True,6,print(os.path.defDEF())
3504,check if directory exists,False,True,5,os.path.exists('os')
3505,check if directory exists,False,True,5,os.path.exists('hello')
3506,check if directory exists,False,True,8,os.path.exists('<unk>')
3507,check if directory exists,False,False,16,"from pathlib import Path
Path(""/my/directory"").mkdir(parents=True, exist_ok=True)"
3508,check if directory exists,False,False,13,"import os
if not os.path.exists(directory):
    os.makedirs(directory)"
3509,check if directory exists,False,False,22,"import os, errno

try:
    os.makedirs(directory)
except OSError as e:
    if e.errno != errno.EEXIST:
        raise"
3510,check if directory exists,False,False,16,"try:
    os.makedirs(""path/to/directory"")
except FileExistsError:
    # directory already exists
    pass"
3511,check if directory exists,False,False,15,"os.makedirs(""path/to/directory"", exist_ok=True)  # succeeds even if directory exists."
3512,check if directory exists,False,False,6,"import os.path
os.path.isfile(fname)"
3513,check if directory exists,False,False,20,"from pathlib import Path

my_file = Path(""/path/to/file"")
if my_file.is_file():
    # file exists"
3514,load wine dataset,False,True,14,"shutil.copy2('<unk>', '<unk>')"
3515,load wine dataset,False,True,10,"shutil.rmtree('<unk>', ignore_errors=False)"
3516,load wine dataset,False,True,10,"plt.savefig('<unk>', debug=True)"
3517,load wine dataset,False,True,3,con.commit()
3518,load wine dataset,False,True,3,conn.commit()
3519,load wine dataset,False,True,5,sys.exit('Error')
3520,load wine dataset,False,True,15,"shutil.rmtree('<unk>', nonposy='<unk>')"
3521,load wine dataset,False,False,163,"import numpy as np
import pandas as pd
from sklearn.datasets import load_iris

# save load_iris() sklearn dataset to iris
# if you'd like to check dataset type use: type(load_iris())
# if you'd like to view list of attributes use: dir(load_iris())
iris = load_iris()

# np.c_ is the numpy concatenate function
# which is used to concat iris['data'] and iris['target'] arrays 
# for pandas column argument: concat iris['feature_names'] list
# and string list (in this case one string); you can make this anything you'd like..  
# the original dataset would probably call this ['Species']
data1 = pd.DataFrame(data= np.c_[iris['data'], iris['target']],
                     columns= iris['feature_names'] + ['target'])"
3522,load wine dataset,False,False,14,"import seaborn as sns

iris = sns.load_dataset('iris')
iris.head()"
3523,load wine dataset,False,False,35,"sepal_length  sepal_width  petal_length  petal_width species
0           5.1          3.5           1.4          0.2  setosa
1           4.9          3.0           1.4          0.2  setosa
2           4.7          3.2           1.3          0.2  setosa
3           4.6          3.1           1.5          0.2  setosa
4           5.0          3.6           1.4          0.2  setosa"
3524,load wine dataset,False,False,9,iris = pd.read_csv('https://raw.githubusercontent.com/mwaskom/seaborn-data/master/iris.csv')
3525,load wine dataset,False,False,12,"import statsmodels.api as sm

iris = sm.datasets.get_rdataset('iris').data"
3526,load wine dataset,False,False,11,"from pydataset import data

iris = data('iris')"
3527,load wine dataset,True,False,50,"from sklearn.datasets import load_iris

iris = load_iris()
# `iris.data` holds the numerical values
# `iris.feature_names` holds the numerical column names
# `iris.target` holds the categorical (species) values (as ints)
# `iris.target_names` holds the unique categorical names"
3528,sklearn 5 fold cross validation,False,True,9,"print(sklearn.dumps(5, hexdigest=5))"
3529,sklearn 5 fold cross validation,False,True,6,"fold.fit(my_data, validation)"
3530,sklearn 5 fold cross validation,False,True,6,"sklearn.fit(data, validation)"
3531,sklearn 5 fold cross validation,False,True,8,"struct.unpack('f', sklearn)"
3532,sklearn 5 fold cross validation,False,True,7,print(fold.from_iterable(x))
3533,sklearn 5 fold cross validation,False,True,9,"print(max(values, key=validation))"
3534,sklearn 5 fold cross validation,False,True,9,"print(sklearn.dumps(5, key=False))"
3535,sklearn 5 fold cross validation,True,False,43,"from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import cross_val_score
import numpy as np

clf = RandomForestClassifier() #Initialize with whatever parameters you want to

# 10-Fold Cross validation
print np.mean(cross_val_score(clf, X_train, y_train, cv=10))"
3536,sklearn 5 fold cross validation,False,False,29,"param_grid = {
                 'n_estimators': [5, 10, 15, 20],
                 'max_depth': [2, 5, 7, 9]
             }"
3537,sklearn 5 fold cross validation,False,False,20,"from sklearn.model_selection import GridSearchCV

grid_clf = GridSearchCV(clf, param_grid, cv=10)
grid_clf.fit(X_train, y_train)"
3538,sklearn 5 fold cross validation,False,False,50,"scalar = StandardScaler()
clf = svm.LinearSVC()

pipeline = Pipeline([('transformer', scalar), ('estimator', clf)])

cv = KFold(n_splits=4)
scores = cross_val_score(pipeline, X, y, cv = cv)"
3539,sklearn 5 fold cross validation,False,False,65,"from sklearn.model_selection import KFold
kf = KFold(n_splits=10)
clf = MLPClassifier(solver='lbfgs', alpha=1e-5, hidden_layer_sizes=(5, 2), random_state=1)

for train_indices, test_indices in kf.split(X):
    clf.fit(X[train_indices], y[train_indices])
    print(clf.score(X[test_indices], y[test_indices]))"
3540,sklearn 5 fold cross validation,False,False,21,"In [15]: iris['data'].shape
Out[15]: (150, 4)"
3541,sklearn 5 fold cross validation,False,False,100,"from sklearn.linear_model import LogisticRegression
from sklearn import metrics, cross_validation
from sklearn import datasets
iris = datasets.load_iris()
predicted = cross_validation.cross_val_predict(LogisticRegression(), iris['data'], iris['target'], cv=10)
print metrics.accuracy_score(iris['target'], predicted)

Out [1] : 0.9537

print metrics.classification_report(iris['target'], predicted) 

Out [2] :
                     precision    recall  f1-score   support

                0       1.00      1.00      1.00        50
                1       0.96      0.90      0.93        50
                2       0.91      0.96      0.93        50

      avg / total       0.95      0.95      0.95       150"
3542,pandas dataframe from csv,False,True,19,"pd.DataFrame(df['df'].apply(lambda x: x.tolist()), axis=1)"
3543,pandas dataframe from csv,False,True,13,"pd.DataFrame(df.values.tolist(), columns='<unk>')"
3544,pandas dataframe from csv,False,True,10,"pd.concat([df1, df2], axis=1)"
3545,pandas dataframe from csv,False,True,9,"pd.DataFrame(df.values.tolist(), columns='records')"
3546,pandas dataframe from csv,False,True,13,"pd.DataFrame(df.index.tolist(), columns='<unk>')"
3547,pandas dataframe from csv,False,True,8,"pd.DataFrame(df.index - df.values, columns=df.columns)"
3548,pandas dataframe from csv,False,True,8,"pd.DataFrame(df.index * df.values, columns=df.columns)"
3549,pandas dataframe from csv,False,False,7,"df.to_csv(file_name, sep='\t')"
3550,pandas dataframe from csv,False,False,10,"df.to_csv(file_name, sep='\t', encoding='utf-8')"
3551,pandas dataframe from csv,False,False,9,"df.to_csv(file_name, encoding='utf-8', index=False)"
3552,pandas dataframe from csv,False,False,8,"Color  Number
0   red     22
1  blue     10"
3553,pandas dataframe from csv,False,False,5,"Color,Number
red,22
blue,10"
3554,pandas dataframe from csv,False,False,10,",Color,Number
0,red,22
1,blue,10"
3555,pandas dataframe from csv,True,False,49,"import pandas as pd
print pd.read_csv('value.txt')

        Date    price  factor_1  factor_2
0  2012-06-11  1600.20     1.255     1.548
1  2012-06-12  1610.02     1.258     1.554
2  2012-06-13  1618.07     1.249     1.552
3  2012-06-14  1624.40     1.253     1.556
4  2012-06-15  1626.15     1.258     1.552
5  2012-06-16  1626.15     1.263     1.558
6  2012-06-17  1626.15     1.264     1.572"
3556,pandas dataframe groupby column,True,True,15,df.groupby('User').agg({'A': x.mean})
3557,pandas dataframe groupby column,False,True,19,df.groupby('User').agg(lambda x: x.groupby('User').cumcount())
3558,pandas dataframe groupby column,False,True,31,"df.groupby('User').agg(lambda x: x.groupby('User').agg({'two': pd.Series,
    'y': pd.Series}))"
3559,pandas dataframe groupby column,False,True,10,"df.groupby('User', as_index=False).nth()"
3560,pandas dataframe groupby column,False,True,33,"df.groupby('User').agg(lambda x: x.groupby('User').agg({'x': x.mean, 'y':
    'mean'}))"
3561,pandas dataframe groupby column,False,True,20,"df.groupby('User').agg({'size': pd.Series, 'v': pd.Series})"
3562,pandas dataframe groupby column,False,True,19,"df.groupby('User').agg({'size': Series.index, 'val': Series.index})"
3563,pandas dataframe groupby column,False,False,44,"df.groupby(['Fruit','Name']).sum()

Out[31]: 
               Number
Fruit   Name         
Apples  Bob        16
        Mike        9
        Steve      10
Grapes  Bob        35
        Tom        87
        Tony       15
Oranges Bob        67
        Mike       57
        Tom        15
        Tony        1"
3564,pandas dataframe groupby column,False,False,19,"df.groupby(['Name', 'Fruit'])['Number'].agg('sum')"
3565,pandas dataframe groupby column,False,False,50,"In [11]: df.groupby(['col5', 'col2']).size()
Out[11]:
col5  col2
1     A       1
      D       3
2     B       2
3     A       3
      C       1
4     B       1
5     B       2
6     B       1
dtype: int64"
3566,pandas dataframe groupby column,False,False,42,"In [12]: df.groupby(['col5', 'col2']).size().groupby(level=1).max()
Out[12]:
col2
A       3
B       2
C       1
D       3
dtype: int64"
3567,pandas dataframe groupby column,False,False,56,"In [11]: df.fillna(-1)
Out[11]: 
   a   b
0  1   4
1  2  -1
2  3   6

In [12]: df.fillna(-1).groupby('b').sum()
Out[12]: 
    a
b    
-1  2
4   1
6   3"
3568,pandas dataframe groupby column,False,False,49,"In [56]: df.groupby(['col5','col2']).size().reset_index().groupby('col2')[[0]].max()
Out[56]: 
      0
col2   
A     3
B     2
C     1
D     3"
3569,pandas dataframe groupby column,False,False,53,"df.groupby(['Fruit','Name'])['Number'].sum().reset_index()

Fruit   Name       Number
Apples  Bob        16
Apples  Mike        9
Apples  Steve      10
Grapes  Bob        35
Grapes  Tom        87
Grapes  Tony       15
Oranges Bob        67
Oranges Mike       57
Oranges Tom        15
Oranges Tony        1"
3570,matplotlib multiple histograms,False,True,6,plt.gca().invert_yaxis()
3571,matplotlib multiple histograms,False,True,20,"plt.plot(np.arange(len(y)), np.arange(2), color='b')"
3572,matplotlib multiple histograms,False,True,15,"plt.plot(np.arange(len(y)), color='b')"
3573,matplotlib multiple histograms,False,True,15,"plt.plot(np.arange(len(y)), color='y')"
3574,matplotlib multiple histograms,False,True,8,plt.gca().reset_index(expanduser='-c')
3575,matplotlib multiple histograms,False,True,14,"plt.gca().scatter(x, y, color='b')"
3576,matplotlib multiple histograms,False,True,13,"plt.plot(np.arange(len(y)), color='green')"
3577,matplotlib multiple histograms,False,False,83,"import random
import numpy
from matplotlib import pyplot

x = [random.gauss(3,1) for _ in range(400)]
y = [random.gauss(4,2) for _ in range(400)]

bins = numpy.linspace(-10, 10, 100)

pyplot.hist(x, bins, alpha=0.5, label='x')
pyplot.hist(y, bins, alpha=0.5, label='y')
pyplot.legend(loc='upper right')
pyplot.show()"
3578,matplotlib multiple histograms,False,False,73,"import numpy as np
import matplotlib.pyplot as plt
plt.style.use('seaborn-deep')

x = np.random.normal(1, 2, 5000)
y = np.random.normal(-1, 3, 2000)
bins = np.linspace(-10, 10, 30)

plt.hist([x, y], bins, label=['x', 'y'])
plt.legend(loc='upper right')
plt.show()"
3579,matplotlib multiple histograms,True,False,80,"import numpy as np
import matplotlib.pyplot as plt

#makes the data
y1 = np.random.normal(-2, 2, 1000)
y2 = np.random.normal(2, 2, 5000)
colors = ['b','g']

#plots the histogram
fig, ax1 = plt.subplots()
ax1.hist([y1,y2],color=colors)
ax1.set_xlim(-10,10)
ax1.set_ylabel(""Count"")
plt.tight_layout()
plt.show()"
3580,matplotlib multiple histograms,False,False,177,"#sets up the axis and gets histogram data
fig, ax1 = plt.subplots()
ax2 = ax1.twinx()
ax1.hist([y1, y2], color=colors)
n, bins, patches = ax1.hist([y1,y2])
ax1.cla() #clear the axis

#plots the histogram data
width = (bins[1] - bins[0]) * 0.4
bins_shifted = bins + width
ax1.bar(bins[:-1], n[0], width, align='edge', color=colors[0])
ax2.bar(bins_shifted[:-1], n[1], width, align='edge', color=colors[1])

#finishes the plot
ax1.set_ylabel(""Count"", color=colors[0])
ax2.set_ylabel(""Count"", color=colors[1])
ax1.tick_params('y', colors=colors[0])
ax2.tick_params('y', colors=colors[1])
plt.tight_layout()
plt.show()"
3581,matplotlib multiple histograms,False,False,51,"#create legend
handles = [Rectangle((0,0),1,1,color=c,ec=""k"") for c in [low,medium, high]]
labels= [""low"",""medium"", ""high""]
plt.legend(handles, labels)"
3582,matplotlib multiple histograms,False,False,213,"import matplotlib.pyplot as plt
import numpy as np
from matplotlib.patches import Rectangle

data = np.random.rayleigh(size=1000)*35

N, bins, patches = plt.hist(data, 30, ec=""k"")

cmap = plt.get_cmap('jet')
low = cmap(0.5)
medium =cmap(0.25)
high = cmap(0.8)


for i in range(0,4):
    patches[i].set_facecolor(low)
for i in range(4,11):
    patches[i].set_facecolor(medium)
for i in range(11,30):
    patches[i].set_facecolor(high)

#create legend
handles = [Rectangle((0,0),1,1,color=c,ec=""k"") for c in [low,medium, high]]
labels= [""low"",""medium"", ""high""]
plt.legend(handles, labels)

plt.xlabel(""Watt Hours"", fontsize=16)  
plt.ylabel(""Households"", fontsize=16)
plt.xticks(fontsize=14)  
plt.yticks(fontsize=14)

plt.gca().spines[""top""].set_visible(False)  
plt.gca().spines[""right""].set_visible(False)

plt.show()"
3583,matplotlib multiple histograms,False,False,105,"import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

def draw_histograms(df, variables, n_rows, n_cols):
    fig=plt.figure()
    for i, var_name in enumerate(variables):
        ax=fig.add_subplot(n_rows,n_cols,i+1)
        df[var_name].hist(bins=10,ax=ax)
        ax.set_title(var_name+"" Distribution"")
    fig.tight_layout()  # Improves appearance a bit.
    plt.show()

test = pd.DataFrame(np.random.randn(30, 9), columns=map(str, range(9)))
draw_histograms(test, test.columns, 3, 3)"
3584,matplotlib grouped bar chart,False,True,5,bar.plot(kind='bar')
3585,matplotlib grouped bar chart,False,True,7,bar[k].get_xydata()
3586,matplotlib grouped bar chart,False,True,4,bar.legend(frameon=False)
3587,matplotlib grouped bar chart,False,True,20,"plt.plot(list(range(0, len(s) + 1)), kind='bar')"
3588,matplotlib grouped bar chart,False,True,10,bar['key'].plot(kind='bar')
3589,matplotlib grouped bar chart,False,True,7,bar[key].get_xydata()
3590,matplotlib grouped bar chart,False,True,11,bar['k'].plot(kind='bar')
3591,matplotlib grouped bar chart,False,False,32,">>> barlist=plt.bar([1,2,3,4], [1,2,3,4])
>>> barlist[0].set_color('r')
>>> plt.show()"
3592,matplotlib grouped bar chart,False,False,158,">>> f=plt.figure()
>>> ax=f.add_subplot(1,1,1)
>>> ax.bar([1,2,3,4], [1,2,3,4])
<Container object of 4 artists>
>>> ax.get_children()
[<matplotlib.axis.XAxis object at 0x6529850>, 
 <matplotlib.axis.YAxis object at 0x78460d0>,  
 <matplotlib.patches.Rectangle object at 0x733cc50>, 
 <matplotlib.patches.Rectangle object at 0x733cdd0>, 
 <matplotlib.patches.Rectangle object at 0x777f290>, 
 <matplotlib.patches.Rectangle object at 0x777f710>, 
 <matplotlib.text.Text object at 0x7836450>, 
 <matplotlib.patches.Rectangle object at 0x7836390>, 
 <matplotlib.spines.Spine object at 0x6529950>, 
 <matplotlib.spines.Spine object at 0x69aef50>,
 <matplotlib.spines.Spine object at 0x69ae310>, 
 <matplotlib.spines.Spine object at 0x69aea50>]
>>> ax.get_children()[2].set_color('r') 
 #You can also try to locate the first patches.Rectangle object 
 #instead of direct calling the index."
3593,matplotlib grouped bar chart,False,False,64,">>> import matplotlib
>>> childrenLS=ax.get_children()
>>> barlist=filter(lambda x: isinstance(x, matplotlib.patches.Rectangle), childrenLS)
[<matplotlib.patches.Rectangle object at 0x3103650>, 
 <matplotlib.patches.Rectangle object at 0x3103810>, 
 <matplotlib.patches.Rectangle object at 0x3129850>, 
 <matplotlib.patches.Rectangle object at 0x3129cd0>, 
 <matplotlib.patches.Rectangle object at 0x3112ad0>]"
3594,matplotlib grouped bar chart,False,False,145,"import matplotlib.pyplot as plt
from matplotlib.dates import date2num
import datetime

x = [
    datetime.datetime(2011, 1, 4, 0, 0),
    datetime.datetime(2011, 1, 5, 0, 0),
    datetime.datetime(2011, 1, 6, 0, 0)
]
x = date2num(x)

y = [4, 9, 2]
z = [1, 2, 3]
k = [11, 12, 13]

ax = plt.subplot(111)
ax.bar(x-0.2, y, width=0.2, color='b', align='center')
ax.bar(x, z, width=0.2, color='g', align='center')
ax.bar(x+0.2, k, width=0.2, color='r', align='center')
ax.xaxis_date()

plt.show()"
3595,matplotlib grouped bar chart,False,False,67,"ax = plt.subplot(111)
w = 0.3
ax.bar(x-w, y, width=w, color='b', align='center')
ax.bar(x, z, width=w, color='g', align='center')
ax.bar(x+w, k, width=w, color='r', align='center')
ax.xaxis_date()
ax.autoscale(tight=True)

plt.show()"
3596,matplotlib grouped bar chart,True,False,222,"import numpy as np
import matplotlib.pyplot as plt

N = 3
ind = np.arange(N)  # the x locations for the groups
width = 0.27       # the width of the bars

fig = plt.figure()
ax = fig.add_subplot(111)

yvals = [4, 9, 2]
rects1 = ax.bar(ind, yvals, width, color='r')
zvals = [1,2,3]
rects2 = ax.bar(ind+width, zvals, width, color='g')
kvals = [11,12,13]
rects3 = ax.bar(ind+width*2, kvals, width, color='b')

ax.set_ylabel('Scores')
ax.set_xticks(ind+width)
ax.set_xticklabels( ('2011-Jan-4', '2011-Jan-5', '2011-Jan-6') )
ax.legend( (rects1[0], rects2[0], rects3[0]), ('y', 'z', 'k') )

def autolabel(rects):
    for rect in rects:
        h = rect.get_height()
        ax.text(rect.get_x()+rect.get_width()/2., 1.05*h, '%d'%int(h),
                ha='center', va='bottom')

autolabel(rects1)
autolabel(rects2)
autolabel(rects3)

plt.show()"
3597,matplotlib grouped bar chart,False,False,10,"kwds : keywords
Options to pass to matplotlib plotting method"
3598,generate a rondom lower case character,False,True,24,"print(' '.join(' '.join(map(str, x)) for x in range(100)))"
3599,generate a rondom lower case character,False,True,21,print(' '.join(str(ord(a)) for a in range(100)))
3600,generate a rondom lower case character,False,True,28,"print(' '.join(' '.join(map(str, x.split(' '))) for x in range(100)))"
3601,generate a rondom lower case character,False,True,18,print(' '.join(str(ord(a)) for a in -1))
3602,generate a rondom lower case character,False,True,28,print(' '.join(' '.join(x.upper() for x in range(100)) for _ in range(6)))
3603,generate a rondom lower case character,False,True,11,"print(np.linspace(1, 3, **DISABLED))"
3604,generate a rondom lower case character,False,True,11,"print(np.linspace(1, 3, num=10))"
3605,generate a rondom lower case character,False,False,11,"s = ""Kilometer""
print(s.lower())"
3606,generate a rondom lower case character,False,False,16,''.join(random.choice(string.ascii_uppercase + string.digits) for _ in range(N))
3607,generate a rondom lower case character,False,False,11,"''.join(random.choices(string.ascii_uppercase + string.digits, k=N))"
3608,generate a rondom lower case character,False,False,19,''.join(random.SystemRandom().choice(string.ascii_uppercase + string.digits) for _ in range(N))
3609,generate a rondom lower case character,True,False,61,">>> import string
>>> import random
>>> def id_generator(size=6, chars=string.ascii_uppercase + string.digits):
...    return ''.join(random.choice(chars) for _ in range(size))
...
>>> id_generator()
'G5G74W'
>>> id_generator(3, ""6793YUIO"")
'Y3U'"
3610,generate a rondom lower case character,False,False,18,">>> string.ascii_uppercase
'ABCDEFGHIJKLMNOPQRSTUVWXYZ'
>>> string.digits
'0123456789'
>>> string.ascii_uppercase + string.digits
'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'"
3611,generate a rondom lower case character,False,False,62,">>> range(4) # range create a list of 'n' numbers
[0, 1, 2, 3]
>>> ['elem' for _ in range(4)] # we use range to create 4 times 'elem'
['elem', 'elem', 'elem', 'elem']"
3612,how to append value in dict,False,True,20,d['a']['b'][0].append('b')
3613,how to append value in dict,False,True,22,jsobj['a']['b']['A'].append('C')
3614,how to append value in dict,False,True,15,"d.setdefault('A', []).append('2')"
3615,how to append value in dict,False,True,20,data['a']['b'][0].append('b')
3616,how to append value in dict,False,True,20,d['a']['b'][0].append('a')
3617,how to append value in dict,False,True,21,jsobj['a']['b']['out'].append('a')
3618,how to append value in dict,False,True,22,jsobj['a']['b']['b'].append('C')
3619,how to append value in dict,False,False,4,orig.update(extra)
3620,how to append value in dict,False,False,15,"dest = dict(orig)  # or orig.copy()
dest.update(extra)"
3621,how to append value in dict,False,False,56,">>> d1 = {1: 1, 2: 2}
>>> d2 = {2: 'ha!', 3: 3}
>>> d1.update(d2)
>>> d1
{1: 1, 2: 'ha!', 3: 3}"
3622,how to append value in dict,False,False,68,"years_dict = dict()

for line in list:
    if line[0] in years_dict:
        # append the new number to the existing array at this slot
        years_dict[line[0]].append(line[1])
    else:
        # create a new array in this slot
        years_dict[line[0]] = [line[1]]"
3623,how to append value in dict,False,False,25,"{
    ""2010"": [2],
    ""2009"": [4,7],
    ""1989"": [8]
}"
3624,how to append value in dict,False,False,16,"a[""abc""] = [1, 2, ""bob""]"
3625,how to append value in dict,True,False,20,"key = ""somekey""
a.setdefault(key, [])
a[key].append(1)"
3626,how to check if a  key is in a dictionay,False,True,13,any(x[0] == 1 for x in a)
3627,how to check if a  key is in a dictionay,False,True,13,any(x[0] == 1 for x in to)
3628,how to check if a  key is in a dictionay,False,True,13,any(x[0] == 1 for x in how)
3629,how to check if a  key is in a dictionay,False,True,5,3 in [a]
3630,how to check if a  key is in a dictionay,False,True,9,"3 in [1, 2, 3]"
3631,how to check if a  key is in a dictionay,False,True,5,3 in [dictionay]
3632,how to check if a  key is in a dictionay,False,True,15,any(x[0] == '1' for x in a)
3633,how to check if a  key is in a dictionay,True,False,46,"d = {""key1"": 10, ""key2"": 23}

if ""key1"" in d:
    print(""this will execute"")

if ""nonexistent key"" in d:
    print(""this will not"")"
3634,how to check if a  key is in a dictionay,False,False,31,"d = dict()

for i in range(100):
    key = i % 10
    d[key] = d.get(key, 0) + 1"
3635,how to check if a  key is in a dictionay,False,False,26,"from collections import defaultdict

d = defaultdict(int)

for i in range(100):
    d[i % 10] += 1"
3636,how to check if a  key is in a dictionay,False,False,46,"d = {'key': 'value'}
print(d)
# {'key': 'value'}
d['mynewkey'] = 'mynewvalue'
print(d)
# {'key': 'value', 'mynewkey': 'mynewvalue'}"
3637,how to check if a  key is in a dictionay,False,False,20,"if 'key1' in dict:
  print(""blah"")
else:
  print(""boo"")"
3638,how to check if a  key is in a dictionay,False,False,63,">>> x = {1:2}
>>> print(x)
{1: 2}

>>> d = {3:4, 5:6, 7:8}
>>> x.update(d)
>>> print(x)
{1: 2, 3: 4, 5: 6, 7: 8}"
3639,how to check if a  key is in a dictionay,False,False,11,"data = {}
# OR
data = dict()"
3640,how to delete a column in a dataframe python,False,True,7,"df.drop('value', axis=1)"
3641,how to delete a column in a dataframe python,False,True,9,"df.drop('value', axis=1, inplace=True)"
3642,how to delete a column in a dataframe python,False,True,7,"df.drop('row', axis=1)"
3643,how to delete a column in a dataframe python,False,True,13,"df.drop(df.index[[0, 1]], axis=1)"
3644,how to delete a column in a dataframe python,False,True,15,"df.drop(df.index[[0, 1, 5]], axis=1)"
3645,how to delete a column in a dataframe python,False,True,7,"df.drop('df2', axis=1)"
3646,how to delete a column in a dataframe python,False,True,17,"df.drop(df.columns[['x', 'y']], axis=1)"
3647,how to delete a column in a dataframe python,False,False,9,"df = df.drop('column_name', 1)"
3648,how to delete a column in a dataframe python,False,False,9,"df.drop('column_name', axis=1, inplace=True)"
3649,how to delete a column in a dataframe python,True,False,22,"df = df.drop(df.columns[[0, 1, 3]], axis=1)  # df.columns is zero-based pd.Index"
3650,how to delete a column in a dataframe python,False,False,14,"df.drop(['column_nameA', 'column_nameB'], axis=1, inplace=True)"
3651,how to delete a column in a dataframe python,False,False,6,del df['column_name']
3652,how to delete a column in a dataframe python,False,False,19,"columns = ['Col1', 'Col2', ...]
df.drop(columns, inplace=True, axis=1)"
3653,how to delete a column in a dataframe python,False,False,8,"df = df.drop(columns, axis=1)"
3654,how to delete columns in dataframe,False,True,17,"df.drop(df.columns[['X', 'B']], axis=1)"
3655,how to delete columns in dataframe,False,True,12,"df.drop(['farm', 'sms.urls'], axis=1)"
3656,how to delete columns in dataframe,False,True,15,"df.drop(df.columns[['farm', 'fruit']], axis=1)"
3657,how to delete columns in dataframe,False,True,16,"df.drop(df.columns[['X', 'X2']], axis=1)"
3658,how to delete columns in dataframe,False,True,17,"df.drop(df.columns[['A', 'B']], axis=1)"
3659,how to delete columns in dataframe,False,True,15,"df.drop(dataframe.columns[['farm', 'fruit']], axis=1)"
3660,how to delete columns in dataframe,False,True,8,"df.drop('X', axis=1)"
3661,how to delete columns in dataframe,False,False,9,"df = df.drop('column_name', 1)"
3662,how to delete columns in dataframe,False,False,9,"df.drop('column_name', axis=1, inplace=True)"
3663,how to delete columns in dataframe,True,False,22,"df = df.drop(df.columns[[0, 1, 3]], axis=1)  # df.columns is zero-based pd.Index"
3664,how to delete columns in dataframe,False,False,14,"df.drop(['column_nameA', 'column_nameB'], axis=1, inplace=True)"
3665,how to delete columns in dataframe,False,False,6,del df['column_name']
3666,how to delete columns in dataframe,False,False,9,df = df[df.line_race != 0]
3667,how to delete columns in dataframe,False,False,19,"columns = ['Col1', 'Col2', ...]
df.drop(columns, inplace=True, axis=1)"
3668,how to save a dataframe in csv file,False,True,10,"pd.concat([df1, df2], axis=1)"
3669,how to save a dataframe in csv file,False,True,10,"pd.concat([df1, df2], ignore_index=True)"
3670,how to save a dataframe in csv file,False,True,9,"df = pd.read_csv('my.csv', header=None)"
3671,how to save a dataframe in csv file,False,True,8,DataFrame.linalg.quote('<unk>')
3672,how to save a dataframe in csv file,False,True,12,"pd.read_csv('csv', sep=',', header=None)"
3673,how to save a dataframe in csv file,False,True,20,"pd.DataFrame.from_dict({(k, 'a+b'): d.keys() for k in filenames})"
3674,how to save a dataframe in csv file,False,True,11,"DataFrame.objects.create(keys=['farm', 'bigdict'])"
3675,how to save a dataframe in csv file,True,False,7,"df.to_csv(file_name, sep='\t')"
3676,how to save a dataframe in csv file,False,False,10,"df.to_csv(file_name, sep='\t', encoding='utf-8')"
3677,how to save a dataframe in csv file,False,False,9,"df.to_csv(file_name, encoding='utf-8', index=False)"
3678,how to save a dataframe in csv file,False,False,8,"Color  Number
0   red     22
1  blue     10"
3679,how to save a dataframe in csv file,False,False,5,"Color,Number
red,22
blue,10"
3680,how to save a dataframe in csv file,False,False,10,",Color,Number
0,red,22
1,blue,10"
3681,how to save a dataframe in csv file,False,False,50,"from io import StringIO # python3; python2: BytesIO 
import boto3

bucket = 'my_bucket_name' # already created on S3
csv_buffer = StringIO()
df.to_csv(csv_buffer)
s3_resource = boto3.resource('s3')
s3_resource.Object(bucket, 'df.csv').put(Body=csv_buffer.getvalue())"
3682,how to draw scatter plot for data in csv file,True,True,9,"plt.scatter(x, y, color='str_3')"
3683,how to draw scatter plot for data in csv file,False,True,13,"plt.scatter(x, y, yerr=err, ecolor='y')"
3684,how to draw scatter plot for data in csv file,False,True,9,"plt.scatter(x, y, color='utf8')"
3685,how to draw scatter plot for data in csv file,False,True,9,"plt.scatter(x, y, ecolor='hex')"
3686,how to draw scatter plot for data in csv file,False,True,11,"plt.scatter(x, y, y='y')"
3687,how to draw scatter plot for data in csv file,False,True,9,"plt.scatter(x, y, ecolor='scatter')"
3688,how to draw scatter plot for data in csv file,False,True,14,"plt.scatter(x, y, color='green', marker='o')"
3689,how to draw scatter plot for data in csv file,False,False,38,"import numpy as np
data = np.genfromtxt('e:\dir1\datafile.csv', delimiter=',', skip_header=10,
                     skip_footer=10, names=['x', 'y', 'z'])"
3690,how to draw scatter plot for data in csv file,False,False,25,"ax1.plot(data['x'], data['y'], color='r', label='the data')"
3691,how to draw scatter plot for data in csv file,False,False,13,"x,y
1,2
2,4
3,6
4,7
5,11
6,12
7,13
8,20
9,17
10,19"
3692,how to draw scatter plot for data in csv file,True,False,60,"import pandas as pd
import matplotlib.pyplot as plt
df  = pd.read_csv(""data.csv"")
df.plot()  # plots all columns against index
df.plot(kind='scatter',x='x',y='y') # scatter plot
df.plot(kind='density')  # estimate density function
# df.plot(kind='hist')  # histogram"
3693,how to draw scatter plot for data in csv file,False,False,8,"df  = pd.read_csv(""data.csv"")"
3694,how to draw scatter plot for data in csv file,False,False,127,"import pandas as pd
from datetime import datetime
import csv
import matplotlib.pyplot as plt
import matplotlib.dates as mdates
headers = ['Sensor Value','Date','Time']
df = pd.read_csv('C:/Users\Lala Rushan\Downloads\DataLog.CSV',names=headers)
print (df)

df['Date'] = df['Date'].map(lambda x: datetime.strptime(str(x), '%Y/%m/%d %H:%M:%S.%f'))
x = df['Date']
y = df['Sensor Value']

# plot
plt.plot(x,y)
# beautify the x-labels
plt.gcf().autofmt_xdate()

plt.show()"
3695,how to draw scatter plot for data in csv file,False,False,33,"def getColumn(filename, column):
    results = csv.reader(open(filename), delimiter=""\t"")
    return [result[column] for result in results]"
3696,how to draw scatter plot for data in csv file,True,True,9,"plt.scatter(x, y, color='str_3')"
3697,how to draw scatter plot for data in csv file,False,True,13,"plt.scatter(x, y, yerr=err, ecolor='y')"
3698,how to draw scatter plot for data in csv file,False,True,9,"plt.scatter(x, y, color='utf8')"
3699,how to draw scatter plot for data in csv file,False,True,9,"plt.scatter(x, y, ecolor='hex')"
3700,how to draw scatter plot for data in csv file,False,True,11,"plt.scatter(x, y, y='y')"
3701,how to draw scatter plot for data in csv file,False,True,9,"plt.scatter(x, y, ecolor='scatter')"
3702,how to draw scatter plot for data in csv file,False,True,14,"plt.scatter(x, y, color='green', marker='o')"
3703,how to draw scatter plot for data in csv file,False,False,38,"import numpy as np
data = np.genfromtxt('e:\dir1\datafile.csv', delimiter=',', skip_header=10,
                     skip_footer=10, names=['x', 'y', 'z'])"
3704,how to draw scatter plot for data in csv file,False,False,25,"ax1.plot(data['x'], data['y'], color='r', label='the data')"
3705,how to draw scatter plot for data in csv file,False,False,13,"x,y
1,2
2,4
3,6
4,7
5,11
6,12
7,13
8,20
9,17
10,19"
3706,how to draw scatter plot for data in csv file,True,False,60,"import pandas as pd
import matplotlib.pyplot as plt
df  = pd.read_csv(""data.csv"")
df.plot()  # plots all columns against index
df.plot(kind='scatter',x='x',y='y') # scatter plot
df.plot(kind='density')  # estimate density function
# df.plot(kind='hist')  # histogram"
3707,how to draw scatter plot for data in csv file,False,False,8,"df  = pd.read_csv(""data.csv"")"
3708,how to draw scatter plot for data in csv file,False,False,127,"import pandas as pd
from datetime import datetime
import csv
import matplotlib.pyplot as plt
import matplotlib.dates as mdates
headers = ['Sensor Value','Date','Time']
df = pd.read_csv('C:/Users\Lala Rushan\Downloads\DataLog.CSV',names=headers)
print (df)

df['Date'] = df['Date'].map(lambda x: datetime.strptime(str(x), '%Y/%m/%d %H:%M:%S.%f'))
x = df['Date']
y = df['Sensor Value']

# plot
plt.plot(x,y)
# beautify the x-labels
plt.gcf().autofmt_xdate()

plt.show()"
3709,how to draw scatter plot for data in csv file,False,False,33,"def getColumn(filename, column):
    results = csv.reader(open(filename), delimiter=""\t"")
    return [result[column] for result in results]"
3710,how to choose plot size in inches,False,True,7,"plot.set_option('display.max_columns', None)"
3711,how to choose plot size in inches,False,True,14,"plot.array([0, 1, 0, 1, 0])"
3712,how to choose plot size in inches,False,True,18,"plot.array([0, 1, 2, 3, 4, 5, 6])"
3713,how to choose plot size in inches,False,True,14,"plot.array([0, 1, 2, 3, 4])"
3714,how to choose plot size in inches,False,True,16,"plot.array([0, 1, 2, 3, 4, 100])"
3715,how to choose plot size in inches,False,True,8,"plt.ylim([0, 1000])"
3716,how to choose plot size in inches,False,True,12,"plot.array([0, 1, 2, 3])"
3717,how to choose plot size in inches,False,False,27,"from matplotlib.pyplot import figure
figure(num=None, figsize=(8, 6), dpi=80, facecolor='w', edgecolor='k')"
3718,how to choose plot size in inches,True,False,18,"fig = matplotlib.pyplot.gcf()
fig.set_size_inches(18.5, 10.5)
fig.savefig('test2png.png', dpi=100)"
3719,how to choose plot size in inches,False,False,8,"fig.set_size_inches(18.5, 10.5, forward=True)"
3720,how to choose plot size in inches,False,False,8,"f.set_figheight(15)
f.set_figwidth(15)"
3721,how to choose plot size in inches,False,False,13,"f, axs = plt.subplots(2,2,figsize=(15,15))"
3722,how to choose plot size in inches,False,False,13,"from pylab import rcParams
rcParams['figure.figsize'] = 5, 10"
3723,how to choose plot size in inches,False,False,14,"import matplotlib.pyplot as plt
plt.rcParams[""figure.figsize""] = (20,3)"
3724,how to create ascatter plot using matplotlib,False,True,11,"plt.plot(x, y, color='e')"
3725,how to create ascatter plot using matplotlib,False,True,11,"plt.plot(x, y, color='b')"
3726,how to create ascatter plot using matplotlib,False,True,15,"plt.plot(list(range(100)), color='b')"
3727,how to create ascatter plot using matplotlib,False,True,15,"plt.plot(list(range(100)), color='e')"
3728,how to create ascatter plot using matplotlib,False,True,11,"plt.plot(x, y, color='f')"
3729,how to create ascatter plot using matplotlib,False,True,11,"plt.plot(x, y, color='c')"
3730,how to create ascatter plot using matplotlib,False,True,7,"plot.set_option('display.max_columns', 8)"
3731,how to create ascatter plot using matplotlib,False,False,13,"import matplotlib.pyplot as plt

plt.matshow(dataframe.corr())
plt.show()"
3732,how to create ascatter plot using matplotlib,False,False,67,"f = plt.figure(figsize=(19, 15))
plt.matshow(df.corr(), fignum=f.number)
plt.xticks(range(df.shape[1]), df.columns, fontsize=14, rotation=45)
plt.yticks(range(df.shape[1]), df.columns, fontsize=14)
cb = plt.colorbar()
cb.ax.tick_params(labelsize=14)
plt.title('Correlation Matrix', fontsize=16);"
3733,how to create ascatter plot using matplotlib,False,False,70,"import numpy as np
import matplotlib.pyplot as plt
import matplotlib.cm as cm

x = np.arange(10)
ys = [i+x+(i*x)**2 for i in range(10)]

colors = cm.rainbow(np.linspace(0, 1, len(ys)))
for y, c in zip(ys, colors):
    plt.scatter(x, y, color=c)"
3734,how to create ascatter plot using matplotlib,True,False,36,"import itertools

colors = itertools.cycle([""r"", ""b"", ""g""])
for y in ys:
    plt.scatter(x, y, color=next(colors))"
3735,how to create ascatter plot using matplotlib,False,False,35,"colors = iter(cm.rainbow(np.linspace(0, 1, len(ys))))
for y in ys:
    plt.scatter(x, y, color=next(colors))"
3736,how to create ascatter plot using matplotlib,False,False,46,"import pandas as pd
import numpy as np

rs = np.random.RandomState(0)
df = pd.DataFrame(rs.rand(10, 10))
corr = df.corr()
corr.style.background_gradient(cmap='coolwarm')
# 'RdBu_r' & 'BrBG' are other good diverging colormaps"
3737,how to create ascatter plot using matplotlib,False,False,9,corr.style.background_gradient(cmap='coolwarm').set_precision(2)
3738,how to choose plot title in matplotlib,False,True,15,plot.set_title('$%s \\times 10^{%s}$')
3739,how to choose plot title in matplotlib,False,True,21,"title.set_title('$%s \\times 10^{%s}$' % (x, x))"
3740,how to choose plot title in matplotlib,False,True,15,title.set_title('$%s \\times 10^{%s}$')
3741,how to choose plot title in matplotlib,False,True,21,"matplotlib.set_title('$%s \\times 10^{%s}$' % (x, x))"
3742,how to choose plot title in matplotlib,False,True,21,"plot.set_title('$%s \\times 10^{%s}$' % (x, x))"
3743,how to choose plot title in matplotlib,False,True,7,"plot.set_option('display.max_columns', None)"
3744,how to choose plot title in matplotlib,False,True,21,"matplotlib.set_title('$%s \\times 10^{%s}$' % (x, y))"
3745,how to choose plot title in matplotlib,True,False,42,"from matplotlib import pyplot as plt    

fig = plt.figure()
plt.plot(data)
fig.suptitle('test title', fontsize=20)
plt.xlabel('xlabel', fontsize=18)
plt.ylabel('ylabel', fontsize=16)
fig.savefig('test.jpg')"
3746,how to choose plot title in matplotlib,False,False,20,"axes.titlesize      : large   # fontsize of the axes title
axes.labelsize      : medium  # fontsize of the x any y labels"
3747,how to choose plot title in matplotlib,False,False,85,"import matplotlib.pyplot as plt

if __name__ == ""__main__"":
    data = [1, 2, 3, 4, 5]

    fig = plt.figure()
    fig.suptitle(""Title for whole figure"", fontsize=16)
    ax = plt.subplot(""211"")
    ax.set_title(""Title for first plot"")
    ax.plot(data)

    ax = plt.subplot(""212"")
    ax.set_title(""Title for second plot"")
    ax.plot(data)

    plt.show()"
3748,how to choose plot title in matplotlib,False,False,56,"fig = plt.figure()
ax1 = fig.add_subplot(221)
ax2 = fig.add_subplot(222)
ax3 = fig.add_subplot(223)
ax4 = fig.add_subplot(224)
ax1.title.set_text('First Plot')
ax2.title.set_text('Second Plot')
ax3.title.set_text('Third Plot')
ax4.title.set_text('Fourth Plot')
plt.show()"
3749,how to choose plot title in matplotlib,False,False,55,"import matplotlib.pylab as pylab
params = {'legend.fontsize': 'x-large',
          'figure.figsize': (15, 5),
         'axes.labelsize': 'x-large',
         'axes.titlesize':'x-large',
         'xtick.labelsize':'x-large',
         'ytick.labelsize':'x-large'}
pylab.rcParams.update(params)"
3750,how to choose plot title in matplotlib,False,False,95,"import matplotlib.pyplot as plt

# set up a plot with dummy data
fig, ax = plt.subplots()
x = [0, 1, 2]
y = [0, 3, 9]
ax.plot(x,y)

# title and labels, setting initial sizes
fig.suptitle('test title', fontsize=12)
ax.set_xlabel('xlabel', fontsize=10)
ax.set_ylabel('ylabel', fontsize='medium')   # relative to plt.rcParams['font.size']

# setting label sizes after creation
ax.xaxis.label.set_size(20)
plt.draw()"
3751,how to choose plot title in matplotlib,False,False,42,"import matplotlib.pylab as plt

fig = plt.figure()#num=0,figsize=(8.27, 11.69), dpi=300)
ax  = fig.add_subplot(2, 2, 1)
ax.set_title('Normalized occupied \n Neighbors')

plt.show()"
3752,generate list of random charachters,False,True,9,"print(random.randint(0, 9))"
3753,generate list of random charachters,False,True,9,"print(random.randint(0, 7))"
3754,generate list of random charachters,False,True,9,"print(random.randint(0, 1))"
3755,generate list of random charachters,False,True,7,list(range(9))
3756,generate list of random charachters,False,True,7,print(random.choice(charachters))
3757,generate list of random charachters,False,True,9,"print(random.randrange(1, 7))"
3758,generate list of random charachters,False,True,16,"print(random.choice(charachters, key=lambda x: random.random(), hours=3))"
3759,generate list of random charachters,True,False,16,''.join(random.choice(string.ascii_uppercase + string.digits) for _ in range(N))
3760,generate list of random charachters,False,False,11,"''.join(random.choices(string.ascii_uppercase + string.digits, k=N))"
3761,generate list of random charachters,False,False,19,''.join(random.SystemRandom().choice(string.ascii_uppercase + string.digits) for _ in range(N))
3762,generate list of random charachters,False,False,61,">>> import string
>>> import random
>>> def id_generator(size=6, chars=string.ascii_uppercase + string.digits):
...    return ''.join(random.choice(chars) for _ in range(size))
...
>>> id_generator()
'G5G74W'
>>> id_generator(3, ""6793YUIO"")
'Y3U'"
3763,generate list of random charachters,False,False,18,">>> string.ascii_uppercase
'ABCDEFGHIJKLMNOPQRSTUVWXYZ'
>>> string.digits
'0123456789'
>>> string.ascii_uppercase + string.digits
'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'"
3764,generate list of random charachters,False,False,62,">>> range(4) # range create a list of 'n' numbers
[0, 1, 2, 3]
>>> ['elem' for _ in range(4)] # we use range to create 4 times 'elem'
['elem', 'elem', 'elem', 'elem']"
3765,generate list of random charachters,False,False,33,">>> random.choice(""abcde"")
'a'
>>> random.choice(""abcde"")
'd'
>>> random.choice(""abcde"")
'b'"
3766,generate random charachter,False,True,7,random.choice(range(10))
3767,generate random charachter,False,True,10,print(random.choice(range(10)))
3768,generate random charachter,False,True,11,"random.choice(range(1, 7), repeat=4)"
3769,generate random charachter,False,True,11,"random.choice(range(0, 7), repeat=4)"
3770,generate random charachter,False,True,11,"random.random.choice(range(0, 7), repeat=4)"
3771,generate random charachter,False,True,9,"random.random.choice(range(10), onerror=1)"
3772,generate random charachter,False,True,14,"random.choice(range(0, 7), key=lambda x: random.random)"
3773,generate random charachter,True,False,25,">>> import string
>>> string.ascii_letters
'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'
>>> import random
>>> random.choice(string.ascii_letters)
'j'"
3774,generate random charachter,False,False,29,"import random, string

def randomword(length):
   letters = string.ascii_lowercase
   return ''.join(random.choice(letters) for i in range(length))"
3775,generate random charachter,False,False,17,">>> randomword(10)
'vxnxikmhdc'
>>> randomword(10)
'ytqhdohksy'"
3776,generate random charachter,False,False,98,">>> t1 = timeit.Timer(""''.join(random.choice('0123456789abcdef') for n in xrange(30))"", ""import random"")
>>> t2 = timeit.Timer(""binascii.b2a_hex(os.urandom(15))"", ""import os, binascii"")
>>> t3 = timeit.Timer(""'%030x' % random.randrange(16**30)"", ""import random"")
>>> for t in t1, t2, t3:
...     t.timeit()
... 
28.165037870407104
9.0292739868164062
5.2836320400238037"
3777,generate random charachter,False,False,29,"import random, string
x = ''.join(random.choice(string.ascii_uppercase + string.ascii_lowercase + string.digits) for _ in range(16))
print(x)"
3778,generate random charachter,False,False,22,"import random, string
x = ''.join(random.choices(string.ascii_letters + string.digits, k=16))
print(x)"
3779,generate random charachter,False,False,21,">>> import os,binascii
>>> print binascii.b2a_hex(os.urandom(15))
""c84766ca4a3ce52c3602bbf02ad1f7"""
3780,generate random int,True,True,6,"random.randint(0, 7)"
3781,generate random int,False,True,11,"random.choice(range(0, 7), repeat=4)"
3782,generate random int,False,True,11,"random.choice(range(0, 7), access=random.randrange)"
3783,generate random int,False,True,9,"random.choice(range(0, 7))"
3784,generate random int,False,True,6,"random.randint(0, 9)"
3785,generate random int,False,True,6,"random.randint(0, 10)"
3786,generate random int,False,True,7,random.choice(range(10))
3787,generate random int,False,False,11,"from random import randrange
print(randrange(10))"
3788,generate random int,False,False,9,"import random
print(random.randint(0,9))"
3789,generate random int,False,False,6,"random.randint(a, b)"
3790,generate random int,False,False,26,">>> import random
>>> random.sample(range(1, 100), 3)
[77, 52, 45]"
3791,generate random int,False,False,38,">>> try:
...   random.sample(range(1, 2), 3)
... except ValueError:
...   print('Sample size exceeded population size.')
... 
Sample size exceeded population size"
3792,generate random int,False,False,25,">>> import string
>>> string.ascii_letters
'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'
>>> import random
>>> random.choice(string.ascii_letters)
'j'"
3793,generate random int,False,False,22,"df = pd.DataFrame(np.random.randint(0,100,size=(100, 4)), columns=list('ABCD'))"
3794,dictionary of characters and int,False,True,5,int[-2:]
3795,dictionary of characters and int,False,True,18,"dict((k, '0') for k, v in d.items())"
3796,dictionary of characters and int,False,True,5,int[::-1]
3797,dictionary of characters and int,False,True,14,"dict((k, ':') for k in dictionary)"
3798,dictionary of characters and int,False,True,4,int[0:2]
3799,dictionary of characters and int,True,True,15,"dict((k, 'b.') for k in of)"
3800,dictionary of characters and int,False,True,15,"dict((k, 'b.') for k in dictionary)"
3801,dictionary of characters and int,False,False,37,">>> ord('a')
97
>>> chr(97)
'a'
>>> chr(ord('a') + 3)
'd'
>>>"
3802,dictionary of characters and int,False,False,19,">>> unichr(97)
u'a'
>>> unichr(1234)
u'\u04d2'"
3803,dictionary of characters and int,False,False,51,">>> from collections import Counter
>>> Counter(['apple','red','apple','red','red','pear'])
Counter({'red': 3, 'apple': 2, 'pear': 1})"
3804,dictionary of characters and int,False,False,23,"counts = dict()
for i in items:
  counts[i] = counts.get(i, 0) + 1"
3805,dictionary of characters and int,False,False,11,">>> ord(u'あ')
12354"
3806,dictionary of characters and int,False,False,22,print [ord(char) - 96 for char in raw_input('Write Text: ').lower()]
3807,dictionary of characters and int,False,False,37,"input = raw_input('Write Text: ')
input = input.lower()
output = []
for character in input:
    number = ord(character) - 96
    output.append(number)
print output"
3808,generate dict,False,True,21,"print(dict(zip(list(range(0)), range(0))))"
3809,generate dict,False,True,10,print(dict(zip(*dict)))
3810,generate dict,False,True,19,"dict((k, int(v)) for k, v in var_2.items())"
3811,generate dict,False,True,10,print(dict(range(9)))
3812,generate dict,False,True,24,"print(dict(zip(list(range(0)), list(range(100)))))"
3813,generate dict,False,True,10,print(list(itertools.chain(*dict)))
3814,generate dict,False,True,23,"dict((key, int(y)) for key, value in list(itertools.chain(*var_2)))"
3815,generate dict,True,False,70,">>> keys = ['a', 'b', 'c']
>>> values = [1, 2, 3]
>>> dictionary = dict(zip(keys, values))
>>> print(dictionary)
{'a': 1, 'b': 2, 'c': 3}"
3816,generate dict,False,False,13,"{key: value for (key, value) in iterable}"
3817,generate dict,False,False,15,"dict((key, func(key)) for key in keys)"
3818,generate dict,False,False,34,"1) consumed from any iterable yielding pairs of keys/vals
dict(pairs)

2) ""zip'ped"" from two separate iterables of keys/vals
dict(zip(list_of_keys, list_of_values))"
3819,generate dict,False,False,5,new_dict = dict()
3820,generate dict,False,False,4,new_dict = {}
3821,generate dict,False,False,12,"x = {}
x['a'] = 1"
3822,open csv,False,True,14,"df = pd.read_csv('grep', quotechar=',', header=None)"
3823,open csv,False,True,17,"df = pd.read_csv('<unk>', quotechar=',', header=None)"
3824,open csv,False,True,19,"df = pd.read_csv('<unk>', quotechar=',', skiprows=1, header=None)"
3825,open csv,False,True,11,"df.to_csv('to_csv', index=False, sep=' ')"
3826,open csv,True,True,12,"df = pd.read_csv('<unk>', header=None)"
3827,open csv,False,True,18,"np.loadtxt(open('open', 'rb'), delimiter=',', skiprows=1)"
3828,open csv,False,True,15,"np.genfromtxt('<unk>', delimiter=',', header=None)"
3829,open csv,False,False,30,"import csv

with open('file.csv', newline='') as f:
    reader = csv.reader(f)
    data = list(reader)

print(data)"
3830,open csv,False,False,37,"[['This is the first line', 'Line1'], ['This is the second line', 'Line2'], ['This is the third line', 'Line3']]"
3831,open csv,False,False,36,"import csv

with open('file.csv', newline='') as f:
    reader = csv.reader(f)
    data = [tuple(row) for row in reader]

print(data)"
3832,open csv,False,False,37,"[('This is the first line', 'Line1'), ('This is the second line', 'Line2'), ('This is the third line', 'Line3')]"
3833,open csv,False,False,68,"import csv
with open('file.csv', 'rb') as f:
    reader = csv.reader(f)
    your_list = list(reader)

print your_list
# [['This is the first line', 'Line1'],
#  ['This is the second line', 'Line2'],
#  ['This is the third line', 'Line3']]"
3834,open csv,False,False,73,"import csv

def getstuff(filename, criterion):
    with open(filename, ""rb"") as csvfile:
        datareader = csv.reader(csvfile)
        yield next(datareader)  # yield the header row
        count = 0
        for row in datareader:
            if row[3] == criterion:
                yield row
                count += 1
            elif count:
                # done when having read a consecutive series of rows 
                return"
3835,open csv,False,False,121,"import csv
from itertools import dropwhile, takewhile

def getstuff(filename, criterion):
    with open(filename, ""rb"") as csvfile:
        datareader = csv.reader(csvfile)
        yield next(datareader)  # yield the header row
        # first row, plus any subsequent rows that match, then stop
        # reading altogether
        # Python 2: use `for row in takewhile(...): yield row` instead
        # instead of `yield from takewhile(...)`.
        yield from takewhile(
            lambda r: r[3] == criterion,
            dropwhile(lambda r: r[3] != criterion, datareader))
        return"
3836,delete row in csv,False,True,21,"np.delete(row, list(range(0, len(row) + 1)), axis=1)"
3837,delete row in csv,True,True,23,"np.delete(row, list(range(0, len(row) + 1, 2)), axis=1)"
3838,delete row in csv,False,True,12,"df.drop('<unk>', axis=1, inplace=True)"
3839,delete row in csv,False,True,19,"df = pd.read_csv('my.csv', header=['*', 'cols'], how='call')"
3840,delete row in csv,False,True,12,"tr.drop('<unk>', axis=1, inplace=True)"
3841,delete row in csv,False,True,10,"pd.concat([row, row], axis=1)"
3842,delete row in csv,False,True,19,"df = pd.read_csv('my.csv', header=['farm', 'fruit'], how='call')"
3843,delete row in csv,False,False,10,"row[2]!=""0"":"
3844,delete row in csv,False,False,54,"import csv
with open('first.csv', 'rb') as inp, open('first_edit.csv', 'wb') as out:
    writer = csv.writer(out)
    for row in csv.reader(inp):
        if row[2] != ""0"":
            writer.writerow(row)"
3845,delete row in csv,False,False,87,"$ cat test.py 
import csv
with open('first.csv', 'rb') as inp, open('first_edit.csv', 'wb') as out:
    writer = csv.writer(out)
    for row in csv.reader(inp):
        if row[2] != "" 0"":
            writer.writerow(row)
$ cat first.csv 
6.5, 5.4, 0, 320
6.5, 5.4, 1, 320
$ python test.py 
$ cat first_edit.csv 
6.5, 5.4, 1, 320"
3846,delete row in csv,False,False,44,"import csv
...

with open(in_fnam) as in_file:
    with open(out_fnam, 'w') as out_file:
        writer = csv.writer(out_file)
        for row in csv.reader(in_file):
            if row:
                writer.writerow(row)"
3847,delete row in csv,False,False,6,if any(row):
3848,delete row in csv,False,False,12,if any(field.strip() for field in row):
3849,delete row in csv,False,False,25,"h1,h2,h3
a,b,c
d,e,f
g,h,i
j,k,l"
3850,delete row in csv,False,True,21,"np.delete(row, list(range(0, len(row) + 1)), axis=1)"
3851,delete row in csv,True,True,23,"np.delete(row, list(range(0, len(row) + 1, 2)), axis=1)"
3852,delete row in csv,False,True,12,"df.drop('<unk>', axis=1, inplace=True)"
3853,delete row in csv,False,True,19,"df = pd.read_csv('my.csv', header=['*', 'cols'], how='call')"
3854,delete row in csv,False,True,12,"tr.drop('<unk>', axis=1, inplace=True)"
3855,delete row in csv,False,True,10,"pd.concat([row, row], axis=1)"
3856,delete row in csv,False,True,19,"df = pd.read_csv('my.csv', header=['farm', 'fruit'], how='call')"
3857,delete row in csv,False,False,38,"from more_itertools import unique_everseen
with open('1.csv','r') as f, open('2.csv','w') as out_file:
    out_file.writelines(unique_everseen(f))"
3858,delete row in csv,False,False,64,"with open('1.csv','r') as in_file, open('2.csv','w') as out_file:
    seen = set() # set for fast O(1) amortized lookup
    for line in in_file:
        if line in seen: continue # skip duplicate

        seen.add(line)
        out_file.write(line)"
3859,delete row in csv,False,False,54,"import fileinput
seen = set() # set for fast O(1) amortized lookup
for line in fileinput.FileInput('1.csv', inplace=1):
    if line in seen: continue # skip duplicate

    seen.add(line)
    print line, # standard output is now redirected to the file"
3860,delete row in csv,False,False,69,"import csv
with open(""source"",""rb"") as source:
    rdr= csv.reader( source )
    with open(""result"",""wb"") as result:
        wtr= csv.writer( result )
        for r in rdr:
            wtr.writerow( (r[0], r[1], r[3], r[4]) )"
3861,delete row in csv,False,False,32,"in_iter= ( (r[0], r[1], r[3], r[4]) for r in rdr )
        wtr.writerows( in_iter )"
3862,delete row in csv,False,False,9,"del r[2]
            wtr.writerow( r )"
3863,delete row in csv,True,False,39,"import pandas as pd
f=pd.read_csv(""test.csv"")
keep_col = ['day','month','lat','long']
new_f = f[keep_col]
new_f.to_csv(""newFile.csv"", index=False)"
3864,copy files from folder,False,True,14,"shutil.copy2('<unk>', '<unk>')"
3865,copy files from folder,False,True,8,os.listdir('<unk>')
3866,copy files from folder,False,True,7,"shutil.copy2(filename, 'ignore')"
3867,copy files from folder,False,True,7,"shutil.copy2(filename, 'filenames')"
3868,copy files from folder,False,True,11,"shutil.copy2('<unk>', 'same')"
3869,copy files from folder,False,True,4,os.walk(filename)
3870,copy files from folder,False,True,5,glob.glob('*')
3871,copy files from folder,True,False,10,"from shutil import copyfile
copyfile(src, dst)"
3872,copy files from folder,False,False,57,"┌──────────────────┬────────┬───────────┬───────┬────────────────┐
│     Function     │ Copies │   Copies  │Can use│   Destination  │
│                  │metadata│permissions│buffer │may be directory│
├──────────────────┼────────┼───────────┼───────┼────────────────┤
│shutil.copy       │   No   │    Yes    │   No  │      Yes       │
│shutil.copyfile   │   No   │     No    │   No  │       No       │
│shutil.copy2      │  Yes   │    Yes    │   No  │      Yes       │
│shutil.copyfileobj│   No   │     No    │  Yes  │       No       │
└──────────────────┴────────┴───────────┴───────┴────────────────┘"
3873,copy files from folder,False,False,28,"import shutil
shutil.copy2('/src/dir/file.ext', '/dst/dir/newname.ext') # complete target filename given
shutil.copy2('/src/file.ext', '/dst/dir') # target filename is /dst/dir/file.ext"
3874,copy files from folder,False,False,14,"from distutils.dir_util import copy_tree
copy_tree(""/a/b/c"", ""/x/y/z"")"
3875,copy files from folder,False,False,64,"import os, shutil
def copytree(src, dst, symlinks=False, ignore=None):
    for item in os.listdir(src):
        s = os.path.join(src, item)
        d = os.path.join(dst, item)
        if os.path.isdir(s):
            shutil.copytree(s, d, symlinks, ignore)
        else:
            shutil.copy2(s, d)"
3876,copy files from folder,False,False,43,"import shutil, errno

def copyanything(src, dst):
    try:
        shutil.copytree(src, dst)
    except OSError as exc: # python >2.5
        if exc.errno == errno.ENOTDIR:
            shutil.copy(src, dst)
        else: raise"
3877,copy files from folder,False,False,35,"import os
import shutil
src_files = os.listdir(src)
for file_name in src_files:
    full_file_name = os.path.join(src, file_name)
    if os.path.isfile(full_file_name):
        shutil.copy(full_file_name, dest)"
3878,rename files,False,True,6,"os.rename(dirnames, filenames)"
3879,rename files,False,True,11,"os.rename(filename, os.path.join(filenames, filenames))"
3880,rename files,False,True,6,"os.rename(f, filenames)"
3881,rename files,True,True,6,"os.rename(filename, filenames)"
3882,rename files,False,True,6,"os.rename(filenames, filenames)"
3883,rename files,False,True,11,"os.rename(pid, os.path.join(filenames, filenames))"
3884,rename files,False,True,10,"os.rename(filename, os.path.expanduser('..'))"
3885,rename files,False,False,34,"import os
import shutil

os.rename(""path/to/current/file.foo"", ""path/to/new/destination/for/file.foo"")
shutil.move(""path/to/current/file.foo"", ""path/to/new/destination/for/file.foo"")
os.replace(""path/to/current/file.foo"", ""path/to/new/destination/for/file.foo"")"
3886,rename files,False,False,52,"$ ls
cheese_cheese_type.bar  cheese_cheese_type.foo
$ python
>>> import os
>>> for filename in os.listdir("".""):
...  if filename.startswith(""cheese_""):
...    os.rename(filename, filename[7:])
... 
>>> 
$ ls
cheese_type.bar  cheese_type.foo"
3887,rename files,True,False,12,"import os

os.rename('a.txt', 'b.kml')"
3888,rename files,False,False,35,"import os
[os.rename(f, f.replace('_', '-')) for f in os.listdir('.') if not f.startswith('.')]"
3889,rename files,False,False,53,"import glob, os

def rename(dir, pattern, titlePattern):
    for pathAndFilename in glob.iglob(os.path.join(dir, pattern)):
        title, ext = os.path.splitext(os.path.basename(pathAndFilename))
        os.rename(pathAndFilename, 
                  os.path.join(dir, titlePattern % title + ext))"
3890,rename files,False,False,19,"rename(r'c:\temp\xx', r'*.doc', r'new(%s)')"
3891,rename files,False,False,32,"import os
old_file = os.path.join(""directory"", ""a.txt"")
new_file = os.path.join(""directory"", ""b.kml"")
os.rename(old_file, new_file)"
3892,rename files,False,True,6,"os.rename(dirnames, filenames)"
3893,rename files,False,True,11,"os.rename(filename, os.path.join(filenames, filenames))"
3894,rename files,False,True,6,"os.rename(f, filenames)"
3895,rename files,True,True,6,"os.rename(filename, filenames)"
3896,rename files,False,True,6,"os.rename(filenames, filenames)"
3897,rename files,False,True,11,"os.rename(pid, os.path.join(filenames, filenames))"
3898,rename files,False,True,10,"os.rename(filename, os.path.expanduser('..'))"
3899,rename files,False,False,34,"import os
import shutil

os.rename(""path/to/current/file.foo"", ""path/to/new/destination/for/file.foo"")
shutil.move(""path/to/current/file.foo"", ""path/to/new/destination/for/file.foo"")
os.replace(""path/to/current/file.foo"", ""path/to/new/destination/for/file.foo"")"
3900,rename files,False,False,52,"$ ls
cheese_cheese_type.bar  cheese_cheese_type.foo
$ python
>>> import os
>>> for filename in os.listdir("".""):
...  if filename.startswith(""cheese_""):
...    os.rename(filename, filename[7:])
... 
>>> 
$ ls
cheese_type.bar  cheese_type.foo"
3901,rename files,True,False,12,"import os

os.rename('a.txt', 'b.kml')"
3902,rename files,False,False,35,"import os
[os.rename(f, f.replace('_', '-')) for f in os.listdir('.') if not f.startswith('.')]"
3903,rename files,False,False,53,"import glob, os

def rename(dir, pattern, titlePattern):
    for pathAndFilename in glob.iglob(os.path.join(dir, pattern)):
        title, ext = os.path.splitext(os.path.basename(pathAndFilename))
        os.rename(pathAndFilename, 
                  os.path.join(dir, titlePattern % title + ext))"
3904,rename files,False,False,19,"rename(r'c:\temp\xx', r'*.doc', r'new(%s)')"
3905,rename files,False,False,32,"import os
old_file = os.path.join(""directory"", ""a.txt"")
new_file = os.path.join(""directory"", ""b.kml"")
os.rename(old_file, new_file)"
3906,recursive copy files and folders,False,True,4,os.system(copy)
3907,recursive copy files and folders,False,True,4,os.removedirs(copy)
3908,recursive copy files and folders,False,True,4,os.walk(copy)
3909,recursive copy files and folders,False,True,5,os.listdir('..')
3910,recursive copy files and folders,False,True,5,os.listdir('dir')
3911,recursive copy files and folders,False,True,4,os.walk(filename)
3912,recursive copy files and folders,False,True,4,os.chdir(copy)
3913,recursive copy files and folders,False,False,9,"FROM ubuntu
COPY files/ /files/
RUN ls -la /files/*"
3914,recursive copy files and folders,False,False,157,"$ docker build .
Sending build context to Docker daemon 5.632 kB
Sending build context to Docker daemon 
Step 0 : FROM ubuntu
 ---> d0955f21bf24
Step 1 : COPY files/ /files/
 ---> 5cc4ae8708a6
Removing intermediate container c6f7f7ec8ccf
Step 2 : RUN ls -la /files/*
 ---> Running in 08ab9a1e042f
/files/folder1:
total 8
drwxr-xr-x 2 root root 4096 May 13 16:04 .
drwxr-xr-x 4 root root 4096 May 13 16:05 ..
-rw-r--r-- 1 root root    0 May 13 16:04 file1
-rw-r--r-- 1 root root    0 May 13 16:04 file2

/files/folder2:
total 8
drwxr-xr-x 2 root root 4096 May 13 16:04 .
drwxr-xr-x 4 root root 4096 May 13 16:05 ..
-rw-r--r-- 1 root root    0 May 13 16:04 file1
-rw-r--r-- 1 root root    0 May 13 16:04 file2
 ---> 03ff0a5d0e4b
Removing intermediate container 08ab9a1e042f
Successfully built 03ff0a5d0e4b"
3915,recursive copy files and folders,False,False,7,"import shutil
shutil.rmtree('/path/to/your/dir/')"
3916,recursive copy files and folders,False,False,12,"for root, subdirs, files in os.walk(rootdir):"
3917,recursive copy files and folders,False,False,223,"import os
import sys

walk_dir = sys.argv[1]

print('walk_dir = ' + walk_dir)

# If your current working directory may change during script execution, it's recommended to
# immediately convert program arguments to an absolute path. Then the variable root below will
# be an absolute path as well. Example:
# walk_dir = os.path.abspath(walk_dir)
print('walk_dir (absolute) = ' + os.path.abspath(walk_dir))

for root, subdirs, files in os.walk(walk_dir):
    print('--\nroot = ' + root)
    list_file_path = os.path.join(root, 'my-directory-list.txt')
    print('list_file_path = ' + list_file_path)

    with open(list_file_path, 'wb') as list_file:
        for subdir in subdirs:
            print('\t- subdirectory ' + subdir)

        for filename in files:
            file_path = os.path.join(root, filename)

            print('\t- file %s (full path: %s)' % (filename, file_path))

            with open(file_path, 'rb') as f:
                f_content = f.read()
                list_file.write(('The file %s contains:\n' % filename).encode('utf-8'))
                list_file.write(f_content)
                list_file.write(b'\n')"
3918,recursive copy files and folders,False,False,41,"with open('filename', 'rb') as f:
    dosomething()

# is effectively the same as

f = open('filename', 'rb')
try:
    dosomething()
finally:
    f.close()"
3919,recursive copy files and folders,True,False,14,"from distutils.dir_util import copy_tree
copy_tree(""/a/b/c"", ""/x/y/z"")"
3920,http reques get html,False,True,12,"requests.get(url, headers={'Authorization': ''})"
3921,http reques get html,False,True,12,"requests.get(page, headers={'Authorization': ''})"
3922,http reques get html,False,True,13,"requests.get(url, headers={'Authorization': ' '})"
3923,http reques get html,False,True,8,"conn.request('HEAD', '/')"
3924,http reques get html,False,True,10,"requests.get(url, headers={'Authorization'})"
3925,http reques get html,False,True,12,"requests.get(html, headers={'Authorization': ''})"
3926,http reques get html,True,True,12,"requests.get(html, headers={1}.__class__())"
3927,http reques get html,False,False,15,"import urllib.request
contents = urllib.request.urlopen(""http://example.com/foo/bar"").read()"
3928,http reques get html,False,False,15,"import urllib2
contents = urllib2.urlopen(""http://example.com/foo/bar"").read()"
3929,http reques get html,False,False,40,"import requests
import shutil

r = requests.get(settings.STATICMAP_URL.format(**data), stream=True)
if r.status_code == 200:
    with open(path, 'wb') as f:
        r.raw.decode_content = True
        shutil.copyfileobj(r.raw, f)"
3930,http reques get html,False,False,36,"r = requests.get(settings.STATICMAP_URL.format(**data), stream=True)
if r.status_code == 200:
    with open(path, 'wb') as f:
        for chunk in r:
            f.write(chunk)"
3931,http reques get html,False,False,39,"r = requests.get(settings.STATICMAP_URL.format(**data), stream=True)
if r.status_code == 200:
    with open(path, 'wb') as f:
        for chunk in r.iter_content(1024):
            f.write(chunk)"
3932,http reques get html,False,False,119,"import requests
import logging

# These two lines enable debugging at httplib level (requests->urllib3->http.client)
# You will see the REQUEST, including HEADERS and DATA, and RESPONSE with HEADERS but without DATA.
# The only thing missing will be the response.body which is not logged.
try:
    import http.client as http_client
except ImportError:
    # Python 2
    import httplib as http_client
http_client.HTTPConnection.debuglevel = 1

# You must initialize logging, otherwise you'll not see debug output.
logging.basicConfig()
logging.getLogger().setLevel(logging.DEBUG)
requests_log = logging.getLogger(""requests.packages.urllib3"")
requests_log.setLevel(logging.DEBUG)
requests_log.propagate = True

requests.get('https://httpbin.org/headers')"
3933,http reques get html,False,False,82,"$ python requests-logging.py 
INFO:requests.packages.urllib3.connectionpool:Starting new HTTPS connection (1): httpbin.org
send: 'GET /headers HTTP/1.1\r\nHost: httpbin.org\r\nAccept-Encoding: gzip, deflate, compress\r\nAccept: */*\r\nUser-Agent: python-requests/1.2.0 CPython/2.7.3 Linux/3.2.0-48-generic\r\n\r\n'
reply: 'HTTP/1.1 200 OK\r\n'
header: Content-Type: application/json
header: Date: Sat, 29 Jun 2013 11:19:34 GMT
header: Server: gunicorn/0.17.4
header: Content-Length: 226
header: Connection: keep-alive
DEBUG:requests.packages.urllib3.connectionpool:""GET /headers HTTP/1.1"" 200 226"
3934,save table beautifulsoup,False,True,22,"cursor.execute('INSERT INTO table (`column1`) VALUES (%s)', (text,))"
3935,save table beautifulsoup,False,True,22,"cursor.execute('INSERT INTO table (`column1`) VALUES (%s)', (score,))"
3936,save table beautifulsoup,False,True,21,"cursor.execute('INSERT INTO table (`column1`) VALUES (%s)', str())"
3937,save table beautifulsoup,True,True,8,"tr.findAll('td', style='tr')"
3938,save table beautifulsoup,False,True,8,"tr.findAll('td', style='font')"
3939,save table beautifulsoup,False,True,8,"tr.findAll('td', style='s')"
3940,save table beautifulsoup,False,True,7,"pandas.set_option('display.max_columns', 7)"
3941,save table beautifulsoup,False,False,75,"data = []
table = soup.find('table', attrs={'class':'lineItemsTable'})
table_body = table.find('tbody')

rows = table_body.find_all('tr')
for row in rows:
    cols = row.find_all('td')
    cols = [ele.text.strip() for ele in cols]
    data.append([ele for ele in cols if ele]) # Get rid of empty values"
3942,save table beautifulsoup,False,False,237,"[ [u'1359711259', u'SRF', u'08/05/2013', u'5310 4 AVE', u'K', u'19', u'125.00', u'$'], 
  [u'7086775850', u'PAS', u'12/14/2013', u'3908 6th Ave', u'K', u'40', u'125.00', u'$'], 
  [u'7355010165', u'OMT', u'12/14/2013', u'3908 6th Ave', u'K', u'40', u'145.00', u'$'], 
  [u'4002488755', u'OMT', u'02/12/2014', u'NB 1ST AVE @ E 23RD ST', u'5', u'115.00', u'$'], 
  [u'7913806837', u'OMT', u'03/03/2014', u'5015 4th Ave', u'K', u'46', u'115.00', u'$'], 
  [u'5080015366', u'OMT', u'03/10/2014', u'EB 65TH ST @ 16TH AV E', u'7', u'50.00', u'$'], 
  [u'7208770670', u'OMT', u'04/08/2014', u'333 15th St', u'K', u'70', u'65.00', u'$'], 
  [u'$0.00\n\n\nPayment Amount:']
]"
3943,save table beautifulsoup,False,False,21,"with open(""output1.html"", ""w"") as file:
    file.write(str(soup))"
3944,save table beautifulsoup,False,False,58,"for tr in soup.find_all('tr')[2:]:
    tds = tr.find_all('td')
    print ""Nome: %s, Cognome: %s, Email: %s"" % \
          (tds[0].text, tds[1].text, tds[2].text)"
3945,save table beautifulsoup,False,False,27,"Nome:  Massimo, Cognome:  Allegri, Email:  Allegri.Massimo@alitalia.it
Nome:  Alessandra, Cognome:  Anastasia, Email:  Anastasia.Alessandra@alitalia.it
..."
3946,save table beautifulsoup,False,False,73,"with open('output.txt', 'w') as f:
    for tr in soup.find_all('tr')[2:]:
        tds = tr.find_all('td')
        f.write(""Nome: %s, Cognome: %s, Email: %s\n"" % \
              (tds[0].text, tds[1].text, tds[2].text))"
3947,save table beautifulsoup,False,False,13,start = cols[1].find('a').string
3948,regex [],False,True,12,"re.sub('<unk>', '', text)"
3949,regex [],False,True,16,"re.sub('<unk>', '<unk>', text)"
3950,regex [],True,True,14,"re.sub('<unk>', '.', text)"
3951,regex [],False,True,13,"re.sub('<unk>', 'hello', text)"
3952,regex [],False,True,14,"re.findall('<unk>', '<unk>')"
3953,regex [],False,True,11,"re.findall('<unk>', 'bar')"
3954,regex [],False,True,13,"re.sub('<unk>', '42', text)"
3955,regex [],False,False,28,"import re

line = re.sub(
           r""(?i)^.*interfaceOpDataFile.*$"", 
           ""interfaceOpDataFile %s"" % fileIn, 
           line
       )"
3956,regex [],False,False,42,"import re

regex = re.compile(r""^.*interfaceOpDataFile.*$"", re.IGNORECASE)
for line in some_file:
    line = regex.sub(""interfaceOpDataFile %s"" % fileIn, line)
    # do something with the updated line"
3957,regex [],False,False,26,"import re
s = ""Example String""
replaced = re.sub('[ES]', 'a', s)
print replaced"
3958,regex [],False,False,24,"article = re.sub(r'(?is)</html>.+', '</html>', article)"
3959,regex [],False,False,56,"import re

mylist = [""dog"", ""cat"", ""wildcat"", ""thundercat"", ""cow"", ""hooo""]
r = re.compile("".*cat"")
newlist = list(filter(r.match, mylist)) # Read Note
print(newlist)"
3960,regex [],False,False,10,"['cat', 'wildcat', 'thundercat']"
3961,regex [],False,False,6,"filter(r.match, list)"
3962,save dict to csv,False,True,11,writer.writerow(str(d) + '_')
3963,save dict to csv,False,True,4,writer.writerow(item)
3964,save dict to csv,False,True,16,writer.writerow([str(s).read() for d in l])
3965,save dict to csv,False,True,11,"urllib.request.urlretrieve('<unk>', 'rb')"
3966,save dict to csv,False,True,16,writer.writerow([str(s).read() for d in listofdict])
3967,save dict to csv,False,True,16,writer.writerow([str(s).read() for d in data])
3968,save dict to csv,False,True,13,"writer.writerow('%s' % (k, v))"
3969,save dict to csv,True,False,69,"import csv
toCSV = [{'name':'bob','age':25,'weight':200},
         {'name':'jim','age':31,'weight':180}]
keys = toCSV[0].keys()
with open('people.csv', 'w', newline='')  as output_file:
    dict_writer = csv.DictWriter(output_file, keys)
    dict_writer.writeheader()
    dict_writer.writerows(toCSV)"
3970,save dict to csv,False,False,55,"import csv

my_dict = {""test"": 1, ""testing"": 2}

with open('mycsvfile.csv', 'wb') as f:  # Just use 'w' mode in 3.x
    w = csv.DictWriter(f, my_dict.keys())
    w.writeheader()
    w.writerow(my_dict)"
3971,save dict to csv,False,False,4,"test,testing
1,2"
3972,save dict to csv,False,False,57,"# For python 2, skip the ""newline"" argument: open('dict.csv','w"")
with open('dict.csv', 'w') as csv_file:  
    writer = csv.writer(csv_file)
    for key, value in mydict.items():
       writer.writerow([key, value])"
3973,save dict to csv,False,False,21,"with open('dict.csv') as csv_file:
    reader = csv.reader(csv_file)
    mydict = dict(reader)"
3974,save dict to csv,False,False,59,"import csv

with open('coors.csv', mode='r') as infile:
    reader = csv.reader(infile)
    with open('coors_new.csv', mode='w') as outfile:
        writer = csv.writer(outfile)
        mydict = {rows[0]:rows[1] for rows in reader}"
3975,save dict to csv,False,False,20,"mydict = dict((rows[0],rows[1]) for rows in reader)"
3976,download an image request,False,True,10,img = Image.open('<unk>')
3977,download an image request,False,True,10,response = Image.open('<unk>')
3978,download an image request,False,True,10,file_name = Image.open('<unk>')
3979,download an image request,False,True,10,r = Image.open('<unk>')
3980,download an image request,False,True,20,"img = Image.open('<unk>')
file_name = Image.open('<unk>')"
3981,download an image request,False,True,10,data = Image.open('<unk>')
3982,download an image request,False,True,7,response = Image.open('file.txt')
3983,download an image request,False,False,81,"def download_file(url):
    local_filename = url.split('/')[-1]
    # NOTE the stream=True parameter below
    with requests.get(url, stream=True) as r:
        r.raise_for_status()
        with open(local_filename, 'wb') as f:
            for chunk in r.iter_content(chunk_size=8192): 
                # If you have chunk encoded response uncomment if
                # and set chunk_size parameter to None.
                #if chunk: 
                f.write(chunk)
    return local_filename"
3984,download an image request,False,False,40,"import requests
import shutil

r = requests.get(settings.STATICMAP_URL.format(**data), stream=True)
if r.status_code == 200:
    with open(path, 'wb') as f:
        r.raw.decode_content = True
        shutil.copyfileobj(r.raw, f)"
3985,download an image request,False,False,36,"r = requests.get(settings.STATICMAP_URL.format(**data), stream=True)
if r.status_code == 200:
    with open(path, 'wb') as f:
        for chunk in r:
            f.write(chunk)"
3986,download an image request,False,False,39,"r = requests.get(settings.STATICMAP_URL.format(**data), stream=True)
if r.status_code == 200:
    with open(path, 'wb') as f:
        for chunk in r.iter_content(1024):
            f.write(chunk)"
3987,download an image request,False,False,49,"import requests
import shutil

def download_file(url):
    local_filename = url.split('/')[-1]
    with requests.get(url, stream=True) as r:
        with open(local_filename, 'wb') as f:
            shutil.copyfileobj(r.raw, f)

    return local_filename"
3988,download an image request,True,False,14,"import urllib
urllib.urlretrieve(""http://www.gunnerkrigg.com//comics/00000001.jpg"", ""00000001.jpg"")"
3989,download an image request,False,False,14,"import urllib.request
urllib.request.urlretrieve(""http://www.gunnerkrigg.com//comics/00000001.jpg"", ""00000001.jpg"")"
3990,zip 2 lists,False,True,9,zip(*[[2]])
3991,zip 2 lists,False,True,12,"zip(*[[2], []])"
3992,zip 2 lists,False,True,17,"zip(*[[2], [2], [4]])"
3993,zip 2 lists,False,True,19,"zip(*[[2], [2], [2, 4]])"
3994,zip 2 lists,False,True,13,"zip(*[[2], [2]])"
3995,zip 2 lists,False,True,19,"zip(*[[2], [2], [3, 4]])"
3996,zip 2 lists,False,True,13,"zip(*[[2], [k]])"
3997,zip 2 lists,True,False,70,">>> keys = ['a', 'b', 'c']
>>> values = [1, 2, 3]
>>> dictionary = dict(zip(keys, values))
>>> print(dictionary)
{'a': 1, 'b': 2, 'c': 3}"
3998,zip 2 lists,False,False,85,">>> list1 = [3,2,4,1, 1]
>>> list2 = ['three', 'two', 'four', 'one', 'one2']
>>> list1, list2 = zip(*sorted(zip(list1, list2)))
>>> list1
(1, 1, 2, 3, 4)
>>> list2 
('one', 'one2', 'two', 'three', 'four')"
3999,zip 2 lists,False,False,63,">>> list1, list2 = (list(t) for t in zip(*sorted(zip(list1, list2))))
>>> list1
[1, 1, 2, 3, 4]
>>> list2
['one', 'one2', 'two', 'three', 'four']"
4000,zip 2 lists,False,False,61,">>> %timeit zip(*sorted(zip(list1, list2)))
100000 loops, best of 3: 3.3 us per loop
>>> %timeit tups = zip(list1, list2); tups.sort(); zip(*tups)
100000 loops, best of 3: 2.84 us per loop"
4001,zip 2 lists,False,False,61,">>> %timeit zip(*sorted(zip(list1, list2)))
100 loops, best of 3: 8.09 ms per loop
>>> %timeit tups = zip(list1, list2); tups.sort(); zip(*tups)
100 loops, best of 3: 8.51 ms per loop"
4002,zip 2 lists,False,False,75,"In [1]: a = b = c = range(20)

In [2]: zip(a, b, c)
Out[2]: 
[(0, 0, 0),
 (1, 1, 1),
 ...
 (17, 17, 17),
 (18, 18, 18),
 (19, 19, 19)]"
4003,zip 2 lists,False,False,33,"In [3]: result = zip(a, b, c)

In [4]: len(result[0])
Out[4]: 3"
4004,rearrange dictionary keys into alphabetic order,True,True,17,"sorted(list(keys.items()), key=lambda x: x[1])"
4005,rearrange dictionary keys into alphabetic order,False,True,17,"sorted(list(data.items()), key=lambda x: x[1])"
4006,rearrange dictionary keys into alphabetic order,False,True,17,"sorted(list(keys.items()), key=lambda k_v: k_v[1])"
4007,rearrange dictionary keys into alphabetic order,False,True,17,"sorted(list(keys.items()), key=lambda i: i[1])"
4008,rearrange dictionary keys into alphabetic order,False,True,19,"sorted(list(keys.items()), key=lambda k_v: k_v[1], reverse=True)"
4009,rearrange dictionary keys into alphabetic order,False,True,17,"sorted(list(dictionary.items()), key=lambda x: x[1])"
4010,rearrange dictionary keys into alphabetic order,False,True,20,"sorted(list(keys.items()), **['k', 'v'])"
4011,rearrange dictionary keys into alphabetic order,False,False,78,"In [1]: import collections

In [2]: d = {2:3, 1:89, 4:5, 3:0}

In [3]: od = collections.OrderedDict(sorted(d.items()))

In [4]: od
Out[4]: OrderedDict([(1, 89), (2, 3), (3, 0), (4, 5)])"
4012,rearrange dictionary keys into alphabetic order,False,False,59,"In [11]: od[1]
Out[11]: 89

In [12]: od[3]
Out[12]: 0

In [13]: for k, v in od.iteritems(): print k, v
   ....: 
1 89
2 3
3 0
4 5"
4013,rearrange dictionary keys into alphabetic order,False,False,31,"In [13]: for k, v in od.items(): print(k, v)
   ....: 
1 89
2 3
3 0
4 5"
4014,rearrange dictionary keys into alphabetic order,False,False,36,"mydict = {'carl':40,
          'alan':2,
          'bob':1,
          'danny':3}

for key in sorted(mydict):
    print ""%s: %s"" % (key, mydict[key])"
4015,rearrange dictionary keys into alphabetic order,False,False,12,"alan: 2
bob: 1
carl: 40
danny: 3"
4016,rearrange dictionary keys into alphabetic order,False,False,30,"keylist = mydict.keys()
keylist.sort()
for key in keylist:
    print ""%s: %s"" % (key, mydict[key])"
4017,rearrange dictionary keys into alphabetic order,False,False,235,">>> from collections import OrderedDict

>>> # regular unsorted dictionary
>>> d = {'banana': 3, 'apple':4, 'pear': 1, 'orange': 2}

>>> # dictionary sorted by key -- OrderedDict(sorted(d.items()) also works
>>> OrderedDict(sorted(d.items(), key=lambda t: t[0]))
OrderedDict([('apple', 4), ('banana', 3), ('orange', 2), ('pear', 1)])

>>> # dictionary sorted by value
>>> OrderedDict(sorted(d.items(), key=lambda t: t[1]))
OrderedDict([('pear', 1), ('orange', 2), ('banana', 3), ('apple', 4)])

>>> # dictionary sorted by length of the key string
>>> OrderedDict(sorted(d.items(), key=lambda t: len(t[0])))
OrderedDict([('pear', 1), ('apple', 4), ('orange', 2), ('banana', 3)])"
4018,merge 2 dictionaries,False,True,16,"dict((k, v) for d in (k, v))"
4019,merge 2 dictionaries,False,True,31,"dict((k, v) for d in (keys, values) for k, v in list(d.items()) if v > k)"
4020,merge 2 dictionaries,False,True,32,"dict((k, v) for d in (k, v) for k, v in list(d.items()) if v != k)"
4021,merge 2 dictionaries,False,True,20,"dict((k, v) for d in d for d in (k, v))"
4022,merge 2 dictionaries,False,True,16,"dict((k, v) for d in d for d in d)"
4023,merge 2 dictionaries,False,True,16,"dict((d['name'], d) for d in listofdict)"
4024,merge 2 dictionaries,False,True,32,"dict((k, v) for d in (k, v) for k, v in list(d.items()) if d > 'd')"
4025,merge 2 dictionaries,False,False,7,"z = {**x, **y}"
4026,merge 2 dictionaries,True,False,39,"def merge_two_dicts(x, y):
      z = x.copy()   # start with x's keys and values
      z.update(y)    # modifies z with y's keys and values & returns None
      return z"
4027,merge 2 dictionaries,False,False,8,"z = merge_two_dicts(x, y)"
4028,merge 2 dictionaries,False,False,10,z = x | y          # NOTE: 3.9+ ONLY
4029,merge 2 dictionaries,False,False,30,"x = {'a': 1, 'b': 2}
y = {'b': 3, 'c': 4}"
4030,merge 2 dictionaries,False,False,23,">>> z
{'a': 1, 'b': 3, 'c': 4}"
4031,merge 2 dictionaries,False,False,7,"z = {**x, **y}"
4032,sort a list x into ascending order,False,True,14,"sorted(var_1, key=lambda x: sorted(x, reverse=True))"
4033,sort a list x into ascending order,False,True,6,"sorted(var_1, key=input.get)"
4034,sort a list x into ascending order,True,True,6,"sorted(var_1, key=sorted)"
4035,sort a list x into ascending order,False,True,6,"sorted(var_1, key=int)"
4036,sort a list x into ascending order,False,True,6,"sorted(var_1, key=input.__len__)"
4037,sort a list x into ascending order,False,True,6,"sorted(var_1, key=int.int)"
4038,sort a list x into ascending order,False,True,6,"sorted(var_1, **var_2)"
4039,sort a list x into ascending order,False,False,14,"sorted_by_second = sorted(data, key=lambda tup: tup[1])"
4040,sort a list x into ascending order,False,False,14,data.sort(key=lambda tup: tup[1])  # sorts in place
4041,sort a list x into ascending order,False,False,17,"[x for _,x in sorted(zip(Y,X))]"
4042,sort a list x into ascending order,False,False,121,"X = [""a"", ""b"", ""c"", ""d"", ""e"", ""f"", ""g"", ""h"", ""i""]
Y = [ 0,   1,   1,    0,   1,   2,   2,   0,   1]

Z = [x for _,x in sorted(zip(Y,X))]
print(Z)  # [""a"", ""d"", ""h"", ""b"", ""c"", ""e"", ""i"", ""f"", ""g""]"
4043,sort a list x into ascending order,False,False,25,"[x for _, x in sorted(zip(Y,X), key=lambda pair: pair[0])]"
4044,sort a list x into ascending order,False,False,11,"from operator import itemgetter
data.sort(key=itemgetter(1))"
4045,sort a list x into ascending order,False,False,223,">>> yx = zip(Y, X)
>>> yx
[(0, 'a'), (1, 'b'), (1, 'c'), (0, 'd'), (1, 'e'), (2, 'f'), (2, 'g'), (0, 'h'), (1, 'i')]
>>> yx.sort()
>>> yx
[(0, 'a'), (0, 'd'), (0, 'h'), (1, 'b'), (1, 'c'), (1, 'e'), (1, 'i'), (2, 'f'), (2, 'g')]
>>> x_sorted = [x for y, x in yx]
>>> x_sorted
['a', 'd', 'h', 'b', 'c', 'e', 'i', 'f', 'g']"
4046,sort a list into ascending order,False,True,20,"sorted(list, key=lambda x: int(x.split(':')[1]))"
4047,sort a list into ascending order,False,True,19,"sorted(list, key=lambda x: int(x.split('None')[1]))"
4048,sort a list into ascending order,True,True,6,"sorted(list, key=sorted)"
4049,sort a list into ascending order,False,True,14,"sorted(list, key=lambda x: x.startswith('j'))"
4050,sort a list into ascending order,False,True,6,"sorted(var_1, key=input.get)"
4051,sort a list into ascending order,False,True,6,"sorted(list, **int)"
4052,sort a list into ascending order,False,True,6,"sorted(list, **p)"
4053,sort a list into ascending order,False,False,14,"sorted_by_second = sorted(data, key=lambda tup: tup[1])"
4054,sort a list into ascending order,False,False,14,data.sort(key=lambda tup: tup[1])  # sorts in place
4055,sort a list into ascending order,False,False,17,"[x for _,x in sorted(zip(Y,X))]"
4056,sort a list into ascending order,False,False,121,"X = [""a"", ""b"", ""c"", ""d"", ""e"", ""f"", ""g"", ""h"", ""i""]
Y = [ 0,   1,   1,    0,   1,   2,   2,   0,   1]

Z = [x for _,x in sorted(zip(Y,X))]
print(Z)  # [""a"", ""d"", ""h"", ""b"", ""c"", ""e"", ""i"", ""f"", ""g""]"
4057,sort a list into ascending order,False,False,25,"[x for _, x in sorted(zip(Y,X), key=lambda pair: pair[0])]"
4058,sort a list into ascending order,False,False,11,"from operator import itemgetter
data.sort(key=itemgetter(1))"
4059,sort a list into ascending order,False,False,223,">>> yx = zip(Y, X)
>>> yx
[(0, 'a'), (1, 'b'), (1, 'c'), (0, 'd'), (1, 'e'), (2, 'f'), (2, 'g'), (0, 'h'), (1, 'i')]
>>> yx.sort()
>>> yx
[(0, 'a'), (0, 'd'), (0, 'h'), (1, 'b'), (1, 'c'), (1, 'e'), (1, 'i'), (2, 'f'), (2, 'g')]
>>> x_sorted = [x for y, x in yx]
>>> x_sorted
['a', 'd', 'h', 'b', 'c', 'e', 'i', 'f', 'g']"
4060,sort list 'values' into ascending order,True,True,6,"sorted(values, key=values.index)"
4061,sort list 'values' into ascending order,False,True,6,sorted([values])
4062,sort list 'values' into ascending order,False,True,12,"sorted(values, key=lambda x: values.index(x))"
4063,sort list 'values' into ascending order,False,True,6,"sorted(values, key=str.upper)"
4064,sort list 'values' into ascending order,False,True,6,"sorted(values, key=int.index)"
4065,sort list 'values' into ascending order,False,True,8,"sorted([values], key=int)"
4066,sort list 'values' into ascending order,False,True,6,"sorted(values, **values)"
4067,sort list 'values' into ascending order,False,False,15,"newlist = sorted(list_to_be_sorted, key=lambda k: k['name'])"
4068,sort list 'values' into ascending order,False,False,16,"from operator import itemgetter
newlist = sorted(list_to_be_sorted, key=itemgetter('name'))"
4069,sort list 'values' into ascending order,False,False,14,"newlist = sorted(l, key=itemgetter('name'), reverse=True)"
4070,sort list 'values' into ascending order,False,False,14,"sorted_by_second = sorted(data, key=lambda tup: tup[1])"
4071,sort list 'values' into ascending order,False,False,14,data.sort(key=lambda tup: tup[1])  # sorts in place
4072,sort list 'values' into ascending order,False,False,11,"from operator import itemgetter
data.sort(key=itemgetter(1))"
4073,sort list 'values' into ascending order,False,False,51,">>> s = [2, 3, 1, 4, 5]
>>> sorted(range(len(s)), key=lambda k: s[k])
[2, 0, 1, 3, 4]
>>>"
4074,how to get page urls beautifulsoup,False,True,8,"urllib.request.urlretrieve('^$', '')"
4075,how to get page urls beautifulsoup,False,True,5,urllib.request.urlopen('sms.urls')
4076,how to get page urls beautifulsoup,False,True,5,urllib.request.urlretrieve('sms.urls')
4077,how to get page urls beautifulsoup,False,True,5,soup.body.findAll(text='display.max_columns')
4078,how to get page urls beautifulsoup,False,True,8,"urllib.request.urlretrieve('^$', text)"
4079,how to get page urls beautifulsoup,False,True,8,"urllib.request.urlretrieve('^$', requests.get)"
4080,how to get page urls beautifulsoup,False,True,5,urllib.request.urlopen('r1')
4081,how to get page urls beautifulsoup,True,False,54,"import httplib2
from bs4 import BeautifulSoup, SoupStrainer

http = httplib2.Http()
status, response = http.request('http://www.nytimes.com')

for link in BeautifulSoup(response, parse_only=SoupStrainer('a')):
    if link.has_attr('href'):
        print(link['href'])"
4082,how to get page urls beautifulsoup,False,False,45,"import urllib2
from BeautifulSoup import BeautifulSoup

page = urllib2.urlopen('http://yahoo.com').read()
soup = BeautifulSoup(page)
soup.prettify()
for anchor in soup.findAll('a', href=True):
    print anchor['href']"
4083,how to get page urls beautifulsoup,False,False,70,"from bs4 import BeautifulSoup
import urllib.request

parser = 'html.parser'  # or 'lxml' (preferred) or 'html5lib', if installed
resp = urllib.request.urlopen(""http://www.gpsbasecamp.com/national-parks"")
soup = BeautifulSoup(resp, parser, from_encoding=resp.info().get_param('charset'))

for link in soup.find_all('a', href=True):
    print(link['href'])"
4084,how to get page urls beautifulsoup,False,False,68,"from bs4 import BeautifulSoup
import urllib2

parser = 'html.parser'  # or 'lxml' (preferred) or 'html5lib', if installed
resp = urllib2.urlopen(""http://www.gpsbasecamp.com/national-parks"")
soup = BeautifulSoup(resp, parser, from_encoding=resp.info().getparam('charset'))

for link in soup.find_all('a', href=True):
    print link['href']"
4085,how to get page urls beautifulsoup,False,False,99,"from bs4 import BeautifulSoup
from bs4.dammit import EncodingDetector
import requests

parser = 'html.parser'  # or 'lxml' (preferred) or 'html5lib', if installed
resp = requests.get(""http://www.gpsbasecamp.com/national-parks"")
http_encoding = resp.encoding if 'charset' in resp.headers.get('content-type', '').lower() else None
html_encoding = EncodingDetector.find_declared_encoding(resp.content, is_html=True)
encoding = html_encoding or http_encoding
soup = BeautifulSoup(resp.content, parser, from_encoding=encoding)

for link in soup.find_all('a', href=True):
    print(link['href'])"
4086,how to get page urls beautifulsoup,False,False,47,"import urllib
import lxml.html
connection = urllib.urlopen('http://www.nytimes.com')

dom =  lxml.html.fromstring(connection.read())

for link in dom.xpath('//a/@href'): # select the url in href for all a tags(links)
    print link"
4087,how to get page urls beautifulsoup,False,False,56,"import urllib2
import BeautifulSoup

request = urllib2.Request(""http://www.gpsbasecamp.com/national-parks"")
response = urllib2.urlopen(request)
soup = BeautifulSoup.BeautifulSoup(response)
for a in soup.findAll('a'):
  if 'national-park' in a['href']:
    print 'found a url with national-park in the link'"
4088,how to remove an item from a list using the index,False,True,12,"list(map(list, zip(*list)))"
4089,how to remove an item from a list using the index,False,True,21,"list(map(int, [1, 2, 3, 4, 5, 6]))"
4090,how to remove an item from a list using the index,False,True,11,"list(grouper(2, [a]))"
4091,how to remove an item from a list using the index,False,True,18,"list(map(list, set([1, 2, 3])))"
4092,how to remove an item from a list using the index,False,True,14,"list(map(list, list(mydict.values())))"
4093,how to remove an item from a list using the index,False,True,15,"list(map(tuple, [a, 2, 3]))"
4094,how to remove an item from a list using the index,False,True,11,"list(map(int, [list]))"
4095,how to remove an item from a list using the index,True,False,57,">>> a = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
>>> del a[-1]
>>> a
[0, 1, 2, 3, 4, 5, 6, 7, 8]"
4096,how to remove an item from a list using the index,False,False,29,">>> del a[2:4]
>>> a
[0, 1, 4, 5, 6, 7, 8, 9]"
4097,how to remove an item from a list using the index,False,False,38,"a = ['a', 'b', 'c', 'd']
a.pop(1)

# now a is ['a', 'c', 'd']"
4098,how to remove an item from a list using the index,False,False,38,"a = ['a', 'b', 'c', 'd']
a.pop()

# now a is ['a', 'b', 'c']"
4099,how to remove an item from a list using the index,False,False,59,">>> a = [1, 2, 3, 4, 5, 6]
>>> index = 3 # Only positive index

>>> a = a[:index] + a[index+1 :]
# a is now [1, 2, 3, 5, 6]"
4100,how to remove an item from a list using the index,False,False,48,"class foo(object):
    def __init__(self, items):
        self.items = items

    def __getitem__(self, index):
        return foo(self.items[index])

    def __add__(self, right):
        return foo( self.items + right.items )"
4101,how to remove an item from a list using the index,False,False,9,"a = range(10)
index = 3"
4102,how to combine 2 lists into a dictionary,False,True,26,"dict(zip(*[(1, 2), (3, 4), (5, 6)]))"
4103,how to combine 2 lists into a dictionary,True,True,9,"dict(zip(keys, values))"
4104,how to combine 2 lists into a dictionary,False,True,13,"dict(zip([a], [b]))"
4105,how to combine 2 lists into a dictionary,False,True,13,"dict(zip([d], [k]))"
4106,how to combine 2 lists into a dictionary,False,True,15,"dict(zip([a], [b, c]))"
4107,how to combine 2 lists into a dictionary,False,True,13,"dict(zip([l], [k]))"
4108,how to combine 2 lists into a dictionary,False,True,17,"dict(zip([k, v], [k, v]))"
4109,how to combine 2 lists into a dictionary,False,False,7,"z = {**x, **y}"
4110,how to combine 2 lists into a dictionary,False,False,39,"def merge_two_dicts(x, y):
      z = x.copy()   # start with x's keys and values
      z.update(y)    # modifies z with y's keys and values & returns None
      return z"
4111,how to combine 2 lists into a dictionary,False,False,8,"z = merge_two_dicts(x, y)"
4112,how to combine 2 lists into a dictionary,False,False,10,z = x | y          # NOTE: 3.9+ ONLY
4113,how to combine 2 lists into a dictionary,False,False,30,"x = {'a': 1, 'b': 2}
y = {'b': 3, 'c': 4}"
4114,how to combine 2 lists into a dictionary,False,False,23,">>> z
{'a': 1, 'b': 3, 'c': 4}"
4115,how to combine 2 lists into a dictionary,False,False,7,"z = {**x, **y}"
4116,convert txt fileencoding,False,True,13,"print(''.join(map(str, x)))"
4117,convert txt fileencoding,False,True,13,"print(''.join(map(str, row)))"
4118,convert txt fileencoding,False,True,23,"print('\n'.join(' '.join(map(str, x)) for x in zip(*fileencoding)))"
4119,convert txt fileencoding,False,True,13,"print(' '.join(map(str, x)))"
4120,convert txt fileencoding,False,True,13,"print(' '.join(map(str, line)))"
4121,convert txt fileencoding,False,True,13,"print(''.join(map(str, line)))"
4122,convert txt fileencoding,False,True,13,"print(' '.join(map(str, row)))"
4123,convert txt fileencoding,False,False,47,"foo = u'Δ, Й, ק, ‎ م, ๗, あ, 叶, 葉, and 말.'
f = open('test', 'w')
f.write(foo.encode('utf8'))
f.close()"
4124,convert txt fileencoding,False,False,20,"f = file('test', 'r')
print f.read().decode('utf8')"
4125,convert txt fileencoding,False,False,44,">>> plain_string = ""Hi!""
>>> unicode_string = u""Hi!""
>>> type(plain_string), type(unicode_string)
(<type 'str'>, <type 'unicode'>)"
4126,convert txt fileencoding,False,False,22,">>> s = ""Hello!""
>>> u = unicode(s, ""utf-8"")"
4127,convert txt fileencoding,False,False,24,"import codecs
with codecs.open('unicode.rst', encoding='utf-8') as f:
    for line in f:
        print repr(line)"
4128,convert txt fileencoding,True,False,39,"with codecs.open('test', encoding='utf-8', mode='w+') as f:
    f.write(u'\u4500 blah blah blah\n')
    f.seek(0)
    print repr(f.readline()[:1])"
4129,convert txt fileencoding,False,False,34,">>> teststr
u'I don\xe2\x80\x98t like this'
>>> unicodedata.normalize('NFKD', teststr).encode('ascii', 'ignore')
'I donat like this'"
4130,copy file and rename,False,True,17,"copy.rename(key=lambda x: (x[1], x[2]))"
4131,copy file and rename,False,True,11,copy.rename(**{'Authorization': 'r1'})
4132,copy file and rename,False,True,11,copy.rename(**{'Authorization': 'value'})
4133,copy file and rename,False,True,11,copy.rename(**{'Authorization': 'files'})
4134,copy file and rename,False,True,19,"copy.rename(key=lambda x: (x[1], x[2]), reverse=True)"
4135,copy file and rename,False,True,11,copy.rename(**{'Authorization': 'col_name_2'})
4136,copy file and rename,False,True,19,"copy.rename(key=lambda s: (line[1:], line[:-1]))"
4137,copy file and rename,False,False,10,"from shutil import copyfile
copyfile(src, dst)"
4138,copy file and rename,False,False,57,"┌──────────────────┬────────┬───────────┬───────┬────────────────┐
│     Function     │ Copies │   Copies  │Can use│   Destination  │
│                  │metadata│permissions│buffer │may be directory│
├──────────────────┼────────┼───────────┼───────┼────────────────┤
│shutil.copy       │   No   │    Yes    │   No  │      Yes       │
│shutil.copyfile   │   No   │     No    │   No  │       No       │
│shutil.copy2      │  Yes   │    Yes    │   No  │      Yes       │
│shutil.copyfileobj│   No   │     No    │  Yes  │       No       │
└──────────────────┴────────┴───────────┴───────┴────────────────┘"
4139,copy file and rename,True,False,28,"import shutil
shutil.copy2('/src/dir/file.ext', '/dst/dir/newname.ext') # complete target filename given
shutil.copy2('/src/file.ext', '/dst/dir') # target filename is /dst/dir/file.ext"
4140,copy file and rename,False,False,12,"import os

os.rename('a.txt', 'b.kml')"
4141,copy file and rename,False,False,10,"import shutil
shutil.copy('/etc/hostname', '/var/tmp/testhostname')"
4142,copy file and rename,False,False,6,"import os
import shutil
import subprocess"
4143,copy file and rename,False,False,20,"shutil.copyfile(src_file, dest_file, *, follow_symlinks=True)

# example    
shutil.copyfile('source.txt', 'destination.txt')"
4144,parse url into images,False,True,11,img.parse('<unk> <unk>')
4145,parse url into images,False,True,4,img.parse(data)
4146,parse url into images,False,True,4,img.parse(img)
4147,parse url into images,False,True,8,"img.request('HEAD', '/')"
4148,parse url into images,False,True,4,img.parse(url)
4149,parse url into images,False,True,11,img.parse('img <unk> <unk>')
4150,parse url into images,False,True,4,pandas.read_json(data)
4151,parse url into images,False,False,14,"import urllib

urllib.urlretrieve(""http://www.digimouth.com/news/media/2011/09/google-logo.jpg"", ""local-filename.jpg"")"
4152,parse url into images,True,False,14,"import urllib.request

urllib.request.urlretrieve(""http://www.digimouth.com/news/media/2011/09/google-logo.jpg"", ""local-filename.jpg"")"
4153,parse url into images,False,False,25,"from PIL import Image
import requests
from io import BytesIO

response = requests.get(url)
img = Image.open(BytesIO(response.content))"
4154,parse url into images,False,False,22,"import urllib, cStringIO

file = cStringIO.StringIO(urllib.urlopen(URL).read())
img = Image.open(file)"
4155,parse url into images,False,False,38,"import os
from urllib.parse import urlparse

url = ""http://photographs.500px.com/kyle/09-09-201315-47-571378756077.jpg""
a = urlparse(url)
print(a.path)                    # Output: /kyle/09-09-201315-47-571378756077.jpg
print(os.path.basename(a.path))  # Output: 09-09-201315-47-571378756077.jpg"
4156,parse url into images,False,False,47,"import re

myString = ""This is my tweet check it out http://example.com/blah""

print(re.search(""(?P<url>https?://[^\s]+)"", myString).group(""url""))"
4157,parse url into images,False,False,25,"from PIL import Image
import requests
from StringIO import StringIO

response = requests.get(url)
img = Image.open(StringIO(response.content))"
4158,get date after week,False,True,25,"datetime.datetime.strptime('January 11, 2010', '%B %d, %Y').strftime('%a')"
4159,get date after week,False,True,10,datetime.datetime.now().strftime('%a')
4160,get date after week,False,True,18,"datetime.datetime.strptime('January 11, 2010', '%B %d, %Y')"
4161,get date after week,False,True,8,datetime.datetime.now().strftime('relativedelta')
4162,get date after week,False,True,28,"print(datetime.datetime.strptime('January 11, 2010', '%B %d, %Y').strftime(
    '%a'))"
4163,get date after week,False,True,18,"datetime.datetime.strptime('<unk>', '%B %d, %Y')"
4164,get date after week,False,True,10,datetime.datetime.now().strftime('%B')
4165,get date after week,False,False,37,">>> import datetime
>>> datetime.datetime.today()
datetime.datetime(2012, 3, 23, 23, 24, 55, 173504)
>>> datetime.datetime.today().weekday()
4"
4166,get date after week,False,False,23,">>> import datetime
>>> datetime.date(2010, 6, 16).isocalendar()[1]
24"
4167,get date after week,False,False,20,"from datetime import date
import calendar
my_date = date.today()
calendar.day_name[my_date.weekday()]  #'Wednesday'"
4168,get date after week,True,False,34,">>> import datetime
>>> today = datetime.date.today()
>>> today + datetime.timedelta(days=-today.weekday(), weeks=1)
datetime.date(2009, 10, 26)"
4169,get date after week,False,False,8,today - datetime.timedelta(days=today.weekday())
4170,get date after week,False,False,29,"import datetime
d = ""2013-W26""
r = datetime.datetime.strptime(d + '-1', ""%Y-W%W-%w"")
print(r)"
4171,get date after week,False,False,2,2013-07-01 00:00:00
4172,client connection to url,False,True,8,urllib.request.urlopen('<unk>')
4173,client connection to url,False,True,3,urllib.request.URLopener()
4174,client connection to url,False,True,6,print(urllib.request.URLopener())
4175,client connection to url,False,True,11,print(requests.get('<unk>'))
4176,client connection to url,True,True,4,print(self.status_code)
4177,client connection to url,False,True,8,print(request.args.get('/'))
4178,client connection to url,False,True,11,print(urllib.parse.quote('<unk>'))
4179,client connection to url,False,False,59,"import socket

serversocket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
serversocket.bind(('localhost', 8089))
serversocket.listen(5) # become a server socket, maximum 5 connections

while True:
    connection, address = serversocket.accept()
    buf = connection.recv(64)
    if len(buf) > 0:
        print buf
        break"
4180,client connection to url,False,False,24,"import socket

clientsocket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
clientsocket.connect(('localhost', 8089))
clientsocket.send('hello')"
4181,client connection to url,False,False,83,"import requests
url = 'https://...'
payload = {'key1': 'value1', 'key2': 'value2'}

# GET
r = requests.get(url)

# GET with params in URL
r = requests.get(url, params=payload)

# POST with form-encoded data
r = requests.post(url, data=payload)

# POST with JSON 
import json
r = requests.post(url, data=json.dumps(payload))

# Response, status etc
r.text
r.status_code"
4182,client connection to url,False,False,120,">>> from httplib2 import Http
>>> from urllib import urlencode
>>> h = Http()
>>> data = dict(name=""Joe"", comment=""A test comment"")
>>> resp, content = h.request(""http://bitworking.org/news/223/Meet-Ares"", ""POST"", urlencode(data))
>>> resp
{'status': '200', 'transfer-encoding': 'chunked', 'vary': 'Accept-Encoding,User-Agent',
 'server': 'Apache', 'connection': 'close', 'date': 'Tue, 31 Jul 2007 15:29:52 GMT', 
 'content-type': 'text/html'}"
4183,client connection to url,False,False,19,">>> print urllib.urlopen(""http://www.stackoverflow.com"").getcode()
>>> 200"
4184,client connection to url,False,False,20,"import urllib.request
print(urllib.request.urlopen(""http://www.stackoverflow.com"").getcode())
>>> 200"
4185,client connection to url,False,False,34,"host = socket.gethostname() #Get the local machine name
port = 12397 # Reserve a port for your service
s.bind((host,port)) #Bind to the port"
4186,client connction to http url,False,True,9,"requests.get(url, headers={client})"
4187,client connction to http url,False,True,5,request.get('/')
4188,client connction to http url,False,True,8,"request.get('HEAD', '/')"
4189,client connction to http url,False,True,6,"requests.get(url, params=client)"
4190,client connction to http url,False,True,5,request.get('HTTP_HOST')
4191,client connction to http url,False,True,9,"requests.get(connction, headers={connction})"
4192,client connction to http url,False,True,13,"requests.get(url, auth=('/', '/'))"
4193,client connction to http url,True,False,121,"from http.client import HTTPSConnection
from base64 import b64encode
#This sets up the https connection
c = HTTPSConnection(""www.google.com"")
#we need to base 64 encode it 
#and then decode it to acsii as python 3 stores it as a byte string
userAndPass = b64encode(b""username:password"").decode(""ascii"")
headers = { 'Authorization' : 'Basic %s' %  userAndPass }
#then connect
c.request('GET', '/', headers=headers)
#get the response back
res = c.getresponse()
# at this point you could check the status etc
# this gets the page text
data = res.read()"
4194,client connction to http url,False,False,19,">>> print urllib.urlopen(""http://www.stackoverflow.com"").getcode()
>>> 200"
4195,client connction to http url,False,False,20,"import urllib.request
print(urllib.request.urlopen(""http://www.stackoverflow.com"").getcode())
>>> 200"
4196,client connction to http url,False,False,24,"import requests

r = requests.get('https://my.website.com/rest/path', auth=('myusername', 'mybasicpass'))
print(r.text)"
4197,client connction to http url,False,False,355,"ubuntu@hostname:/home/ubuntu$ python3
Python 3.4.3 (default, Oct 14 2015, 20:28:29)
[GCC 4.8.4] on linux
Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.
>>> import requests
>>> r = requests.get('https://my.website.com/rest/path', auth=('myusername', 'mybasicpass'))
>>> dir(r)
['__attrs__', '__bool__', '__class__', '__delattr__', '__dict__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getstate__', '__gt__', '__hash__', '__init__', '__iter__', '__le__', '__lt__', '__module__', '__ne__', '__new__', '__nonzero__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__setstate__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_content', '_content_consumed', 'apparent_encoding', 'close', 'connection', 'content', 'cookies', 'elapsed', 'encoding', 'headers', 'history', 'iter_content', 'iter_lines', 'json', 'links', 'ok', 'raise_for_status', 'raw', 'reason', 'request', 'status_code', 'text', 'url']
>>> r.content
b'{""battery_status"":0,""margin_status"":0,""timestamp_status"":null,""req_status"":0}'
>>> r.text
'{""battery_status"":0,""margin_status"":0,""timestamp_status"":null,""req_status"":0}'
>>> r.status_code
200
>>> r.headers
CaseInsensitiveDict({'x-powered-by': 'Express', 'content-length': '77', 'date': 'Fri, 20 May 2016 02:06:18 GMT', 'server': 'nginx/1.6.3', 'connection': 'keep-alive', 'content-type': 'application/json; charset=utf-8'})"
4198,client connction to http url,False,False,53,"#!/usr/bin/env python

import httplib
c = httplib.HTTPSConnection(""ccc.de"")
c.request(""GET"", ""/"")
response = c.getresponse()
print response.status, response.reason
data = response.read()
print data
# => 
# 200 OK
# <!DOCTYPE html ...."
4199,client connction to http url,False,False,15,">>> import socket
>>> socket.ssl
<function ssl at 0x4038b0>"
4200,"generate random nu,ber",False,True,9,"print(random.randint(0, 9))"
4201,"generate random nu,ber",False,True,14,"print(random.choice(range(1, 7), repeat=4))"
4202,"generate random nu,ber",False,True,10,print(random.choice(range(9)))
4203,"generate random nu,ber",False,True,10,print(random.choice(range(100)))
4204,"generate random nu,ber",False,True,10,print(random.choice(range(10)))
4205,"generate random nu,ber",False,True,14,"print(random.choice(range(1, 7), onerror=1))"
4206,"generate random nu,ber",False,True,14,"print(random.choice(range(1, 7), **nu))"
4207,"generate random nu,ber",False,False,11,"from random import randrange
print(randrange(10))"
4208,"generate random nu,ber",True,False,9,"import random
print(random.randint(0,9))"
4209,"generate random nu,ber",False,False,6,"random.randint(a, b)"
4210,"generate random nu,ber",False,False,26,">>> import random
>>> random.sample(range(1, 100), 3)
[77, 52, 45]"
4211,"generate random nu,ber",False,False,38,">>> try:
...   random.sample(range(1, 2), 3)
... except ValueError:
...   print('Sample size exceeded population size.')
... 
Sample size exceeded population size"
4212,"generate random nu,ber",False,False,8,"import random
random.uniform(0, 1)"
4213,"generate random nu,ber",False,False,17,"from random import randint
randint(100, 999)  # randint is inclusive at both ends"
4214,generate char lower case,False,True,21,int(''.join(str(ord(c)) for c in range(10)))
4215,generate char lower case,False,True,11,print('<unk>'.format(100))
4216,generate char lower case,False,True,11,print('<unk>'.format(lower))
4217,generate char lower case,False,True,7,int(int(lower))
4218,generate char lower case,False,True,10,"int('<unk>', 1)"
4219,generate char lower case,False,True,10,"int('<unk>', 2)"
4220,generate char lower case,False,True,21,int(''.join(chr(ord(c)) for c in range(10)))
4221,generate char lower case,False,False,11,"s = ""Kilometer""
print(s.lower())"
4222,generate char lower case,True,False,16,''.join(random.choice(string.ascii_uppercase + string.digits) for _ in range(N))
4223,generate char lower case,False,False,11,"''.join(random.choices(string.ascii_uppercase + string.digits, k=N))"
4224,generate char lower case,False,False,19,''.join(random.SystemRandom().choice(string.ascii_uppercase + string.digits) for _ in range(N))
4225,generate char lower case,False,False,61,">>> import string
>>> import random
>>> def id_generator(size=6, chars=string.ascii_uppercase + string.digits):
...    return ''.join(random.choice(chars) for _ in range(size))
...
>>> id_generator()
'G5G74W'
>>> id_generator(3, ""6793YUIO"")
'Y3U'"
4226,generate char lower case,False,False,18,">>> string.ascii_uppercase
'ABCDEFGHIJKLMNOPQRSTUVWXYZ'
>>> string.digits
'0123456789'
>>> string.ascii_uppercase + string.digits
'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'"
4227,generate char lower case,False,False,62,">>> range(4) # range create a list of 'n' numbers
[0, 1, 2, 3]
>>> ['elem' for _ in range(4)] # we use range to create 4 times 'elem'
['elem', 'elem', 'elem', 'elem']"
4228,generate random numbers,False,True,10,print(random.choice(range(10)))
4229,generate random numbers,False,True,6,"random.randint(0, 10)"
4230,generate random numbers,False,True,7,random.choice(range(10))
4231,generate random numbers,False,True,10,print(random.choice(range(100)))
4232,generate random numbers,True,True,6,"random.randint(0, 7)"
4233,generate random numbers,False,True,10,print(random.choice(range(9)))
4234,generate random numbers,False,True,9,"print(random.randint(0, 7))"
4235,generate random numbers,False,False,26,">>> import random
>>> random.sample(range(1, 100), 3)
[77, 52, 45]"
4236,generate random numbers,False,False,38,">>> try:
...   random.sample(range(1, 2), 3)
... except ValueError:
...   print('Sample size exceeded population size.')
... 
Sample size exceeded population size"
4237,generate random numbers,False,False,17,"from random import randint
randint(100, 999)  # randint is inclusive at both ends"
4238,generate random numbers,False,False,44,"from random import randint

def random_with_N_digits(n):
    range_start = 10**(n-1)
    range_end = (10**n)-1
    return randint(range_start, range_end)

print random_with_N_digits(2)
print random_with_N_digits(3)
print random_with_N_digits(4)"
4239,generate random numbers,False,False,3,"33
124
5127"
4240,generate random numbers,False,False,92,">>> import numpy as np, numpy.random
>>> print np.random.dirichlet(np.ones(10),size=1)
[[ 0.01779975  0.14165316  0.01029262  0.168136    0.03061161  0.09046587
   0.19987289  0.13398581  0.03119906  0.17598322]]

>>> print np.random.dirichlet(np.ones(10)/1000.,size=1)
[[  2.63435230e-115   4.31961290e-209   1.41369771e-212   1.42417285e-188
    0.00000000e+000   5.79841280e-143   0.00000000e+000   9.85329725e-005
    9.99901467e-001   8.37460207e-246]]

>>> print np.random.dirichlet(np.ones(10)*1000.,size=1)
[[ 0.09967689  0.10151585  0.10077575  0.09875282  0.09935606  0.10093678
   0.09517132  0.09891358  0.10206595  0.10283501]]"
4241,generate random numbers,False,False,24,"numpy.random.choice(numpy.arange(1, 7), p=[0.1, 0.05, 0.05, 0.2, 0.4, 0.2])"
4242,generat integers 1-20,False,True,22,"sum(1 for i, j in enumerate(1 - 20, 1) if i != 9)"
4243,generat integers 1-20,False,True,21,"sum(1 for i, j in enumerate(1 - 20, 1) if i == 9)"
4244,generat integers 1-20,False,True,14,sum(int(x) for x in range(100))
4245,generat integers 1-20,False,True,24,"sum(1 for i, j in zip(1 - 20, 1 - 20) if i != 1)"
4246,generat integers 1-20,False,True,22,"sum(1 for i, j in enumerate(1 - 20, 1) if i != 2)"
4247,generat integers 1-20,False,True,16,"sum(isinstance(x, int) for x in range(100))"
4248,generat integers 1-20,False,True,16,sum(int(x) for x in str(1 - 20))
4249,generat integers 1-20,True,False,11,"from random import randrange
print(randrange(10))"
4250,generat integers 1-20,False,False,22,">>> range(11, 17)
[11, 12, 13, 14, 15, 16]"
4251,generat integers 1-20,False,False,25,">>> list(range(11, 17))
[11, 12, 13, 14, 15, 16]"
4252,generat integers 1-20,False,False,46,">>> import numpy as np
>>> np.arange(11, 17, 0.5).tolist()

[11.0, 11.5, 12.0, 12.5, 13.0, 13.5,
 14.0, 14.5, 15.0, 15.5, 16.0, 16.5]"
4253,generat integers 1-20,False,False,9,"import random
print(random.randint(0,9))"
4254,generat integers 1-20,False,False,6,"random.randint(a, b)"
4255,generat integers 1-20,False,False,26,">>> import random
>>> random.sample(range(1, 100), 3)
[77, 52, 45]"
4256,list to dict,True,True,21,"dict((k, ':') for k, v in list(d.items()))"
4257,list to dict,False,True,18,"dict((k, ':') for k, v in d.items())"
4258,list to dict,False,True,21,"dict((k, 'k') for k, v in list(d.items()))"
4259,list to dict,False,True,20,"dict((k, 'd') for k, v in list(d.items()))"
4260,list to dict,False,True,21,"dict((name, ':') for key, value in list(d.items()))"
4261,list to dict,False,True,18,"dict((k, 'k') for k, v in d.items())"
4262,list to dict,False,True,17,"dict((k, 'd') for k, v in d.items())"
4263,list to dict,False,False,70,">>> keys = ['a', 'b', 'c']
>>> values = [1, 2, 3]
>>> dictionary = dict(zip(keys, values))
>>> print(dictionary)
{'a': 1, 'b': 2, 'c': 3}"
4264,list to dict,False,False,13,"{key: value for (key, value) in iterable}"
4265,list to dict,False,False,15,"dict((key, func(key)) for key in keys)"
4266,list to dict,False,False,34,"1) consumed from any iterable yielding pairs of keys/vals
dict(pairs)

2) ""zip'ped"" from two separate iterables of keys/vals
dict(zip(list_of_keys, list_of_values))"
4267,list to dict,False,False,69,"import csv
toCSV = [{'name':'bob','age':25,'weight':200},
         {'name':'jim','age':31,'weight':180}]
keys = toCSV[0].keys()
with open('people.csv', 'w', newline='')  as output_file:
    dict_writer = csv.DictWriter(output_file, keys)
    dict_writer.writeheader()
    dict_writer.writerows(toCSV)"
4268,list to dict,False,False,51,">>> from collections import Counter
>>> Counter(['apple','red','apple','red','red','pear'])
Counter({'red': 3, 'apple': 2, 'pear': 1})"
4269,list to dict,False,False,20,"b = dict(zip(a[::2], a[1::2]))"
4270,list to dict,True,True,21,"dict((k, ':') for k, v in list(d.items()))"
4271,list to dict,False,True,18,"dict((k, ':') for k, v in d.items())"
4272,list to dict,False,True,21,"dict((k, 'k') for k, v in list(d.items()))"
4273,list to dict,False,True,20,"dict((k, 'd') for k, v in list(d.items()))"
4274,list to dict,False,True,21,"dict((name, ':') for key, value in list(d.items()))"
4275,list to dict,False,True,18,"dict((k, 'k') for k, v in d.items())"
4276,list to dict,False,True,17,"dict((k, 'd') for k, v in d.items())"
4277,list to dict,False,False,70,">>> keys = ['a', 'b', 'c']
>>> values = [1, 2, 3]
>>> dictionary = dict(zip(keys, values))
>>> print(dictionary)
{'a': 1, 'b': 2, 'c': 3}"
4278,list to dict,False,False,13,"{key: value for (key, value) in iterable}"
4279,list to dict,False,False,15,"dict((key, func(key)) for key in keys)"
4280,list to dict,False,False,34,"1) consumed from any iterable yielding pairs of keys/vals
dict(pairs)

2) ""zip'ped"" from two separate iterables of keys/vals
dict(zip(list_of_keys, list_of_values))"
4281,list to dict,False,False,69,"import csv
toCSV = [{'name':'bob','age':25,'weight':200},
         {'name':'jim','age':31,'weight':180}]
keys = toCSV[0].keys()
with open('people.csv', 'w', newline='')  as output_file:
    dict_writer = csv.DictWriter(output_file, keys)
    dict_writer.writeheader()
    dict_writer.writerows(toCSV)"
4282,list to dict,False,False,20,"b = dict(zip(a[::2], a[1::2]))"
4283,list to dict,False,False,21,"from itertools import izip
i = iter(a)
b = dict(izip(i, i))"
4284,delete coloumn pd,False,True,4,os.remove(pd)
4285,delete coloumn pd,False,True,4,os.remove(coloumn)
4286,delete coloumn pd,False,True,7,os.remove(os.path.getmtime(pd))
4287,delete coloumn pd,False,True,9,print('\n'.format(os.getcwd()))
4288,delete coloumn pd,False,True,23,"print('\n'.join(' '.join(map(str, i)) for i in range(100)))"
4289,delete coloumn pd,False,True,8,"shutil.rmtree(pd, ignore_errors=False, onerror=None)"
4290,delete coloumn pd,False,True,22,"print('\n'.join('\n'.join(map(str, i)) for i in range(100)))"
4291,delete coloumn pd,False,False,9,"df = df.drop('column_name', 1)"
4292,delete coloumn pd,True,False,9,"df.drop('column_name', axis=1, inplace=True)"
4293,delete coloumn pd,False,False,22,"df = df.drop(df.columns[[0, 1, 3]], axis=1)  # df.columns is zero-based pd.Index"
4294,delete coloumn pd,False,False,14,"df.drop(['column_nameA', 'column_nameB'], axis=1, inplace=True)"
4295,delete coloumn pd,False,False,6,del df['column_name']
4296,delete coloumn pd,False,False,97,"In [24]: df = pd.DataFrame(np.random.randn(10,3))

In [25]: df.iloc[::2,0] = np.nan; df.iloc[::4,1] = np.nan; df.iloc[::3,2] = np.nan;

In [26]: df
Out[26]:
          0         1         2
0       NaN       NaN       NaN
1  2.677677 -1.466923 -0.750366
2       NaN  0.798002 -0.906038
3  0.672201  0.964789       NaN
4       NaN       NaN  0.050742
5 -1.250970  0.030561 -2.678622
6       NaN  1.036043       NaN
7  0.049896 -0.308003  0.823295
8       NaN       NaN  0.637482
9 -0.310130  0.078891       NaN"
4297,delete coloumn pd,False,False,37,"In [27]: df.dropna()     #drop all rows that have any NaN values
Out[27]:
          0         1         2
1  2.677677 -1.466923 -0.750366
5 -1.250970  0.030561 -2.678622
7  0.049896 -0.308003  0.823295"
4298,save plot as image,True,True,5,plt.savefig('save')
4299,save plot as image,False,True,8,plt.savefig('<unk>')
4300,save plot as image,False,True,7,"plt.savefig('save', dpi=300)"
4301,save plot as image,False,True,5,plt.savefig('image')
4302,save plot as image,False,True,7,"plt.savefig('plot', dpi=300)"
4303,save plot as image,False,True,5,plot.savefig('plot')
4304,save plot as image,False,True,5,plot.savefig('image')
4305,save plot as image,False,False,16,"from matplotlib import pyplot as plt

plt.savefig('foo.png')
plt.savefig('foo.pdf')"
4306,save plot as image,False,False,8,"savefig('foo.png', bbox_inches='tight')"
4307,save plot as image,False,False,50,"import matplotlib.pyplot as plt
fig, ax = plt.subplots( nrows=1, ncols=1 )  # create figure & 1 axis
ax.plot([0,1,2], [10,20,3])
fig.savefig('path/to/save/image/to.png')   # save the figure to file
plt.close(fig)    # close the figure window"
4308,save plot as image,False,False,11,"plt.figure(figsize=(800/my_dpi, 800/my_dpi), dpi=my_dpi)"
4309,save plot as image,False,False,7,"plt.savefig('my_fig.png', dpi=my_dpi)"
4310,save plot as image,False,False,9,"plt.savefig('my_fig.png', dpi=my_dpi * 10)"
4311,save plot as image,False,False,23,"plt.figure(figsize=(3.841, 7.195), dpi=100)
( your code ...)
plt.savefig('myfig.png', dpi=1000)"
4312,print date and time in GMT in 24hr format,True,True,26,"time.strftime('%Y-%m-%d %H:%M:%S', time.gmtime(datetime.time.now()))"
4313,print date and time in GMT in 24hr format,False,True,26,"time.strftime('%Y-%m-%d %H:%M:%S', time.gmtime(datetime.date.today()))"
4314,print date and time in GMT in 24hr format,True,True,23,"parser.strftime('%Y-%m-%d %H:%M:%S', gmtime())"
4315,print date and time in GMT in 24hr format,False,True,6,parser.parse(datetime.datetime.now())
4316,print date and time in GMT in 24hr format,False,True,26,"time.strftime('%Y-%m-%d %H:%M:%S', time.gmtime(datetime.datetime.now()))"
4317,print date and time in GMT in 24hr format,False,True,23,"time.strftime('%Y-%m-%d %H:%M:%S', gmtime())"
4318,print date and time in GMT in 24hr format,False,True,23,"time.strftime('%Y-%m-%d %H:%M:%S', time.gmtime())"
4319,print date and time in GMT in 24hr format,False,False,10,"for date in mylist :
    print str(date)"
4320,print date and time in GMT in 24hr format,True,False,128,"import datetime
mylist = []
today = datetime.date.today()
mylist.append(today)
print mylist[0] # print the date object, not the container ;-)
2008-11-22

# It's better to always use str() because :

print ""This is a new day : "", mylist[0] # will work
>>> This is a new day : 2008-11-22

print ""This is a new day : "" + mylist[0] # will crash
>>> cannot concatenate 'str' and 'datetime.date' objects

print ""This is a new day : "" + str(mylist[0]) 
>>> This is a new day : 2008-11-22"
4321,print date and time in GMT in 24hr format,False,False,26,"print today.strftime('We are the %d, %b %Y')
>>> 'We are the 22, Nov 2008'"
4322,print date and time in GMT in 24hr format,False,False,31,"print ""We are the {:%d, %b %Y}"".format(today)
>>> 'We are the 22, Nov 2008'"
4323,print date and time in GMT in 24hr format,False,False,22,"import datetime
f""{datetime.datetime.now():%Y-%m-%d}""
>>> '2017-06-15'"
4324,print date and time in GMT in 24hr format,False,False,22,"import datetime
print datetime.datetime.now().strftime(""%Y-%m-%d %H:%M"")"
4325,print date and time in GMT in 24hr format,False,False,19,"import time
print time.strftime(""%Y-%m-%d %H:%M"")"
4326,print date and time in GMT in 24hr format,True,True,26,"time.strftime('%Y-%m-%d %H:%M:%S', time.gmtime(datetime.time.now()))"
4327,print date and time in GMT in 24hr format,False,True,26,"time.strftime('%Y-%m-%d %H:%M:%S', time.gmtime(datetime.date.today()))"
4328,print date and time in GMT in 24hr format,True,True,23,"parser.strftime('%Y-%m-%d %H:%M:%S', gmtime())"
4329,print date and time in GMT in 24hr format,False,True,6,parser.parse(datetime.datetime.now())
4330,print date and time in GMT in 24hr format,False,True,26,"time.strftime('%Y-%m-%d %H:%M:%S', time.gmtime(datetime.datetime.now()))"
4331,print date and time in GMT in 24hr format,False,True,23,"time.strftime('%Y-%m-%d %H:%M:%S', gmtime())"
4332,print date and time in GMT in 24hr format,False,True,23,"time.strftime('%Y-%m-%d %H:%M:%S', time.gmtime())"
4333,print date and time in GMT in 24hr format,False,False,38,">>> import datetime
>>> datetime.datetime.now()
datetime.datetime(2009, 1, 6, 15, 8, 24, 78915)

>>> print(datetime.datetime.now())
2009-01-06 15:08:24.789150"
4334,print date and time in GMT in 24hr format,False,False,32,">>> datetime.datetime.now().time()
datetime.time(15, 8, 24, 78915)

>>> print(datetime.datetime.now().time())
15:08:24.789150"
4335,print date and time in GMT in 24hr format,False,False,7,>>> from datetime import datetime
4336,print date and time in GMT in 24hr format,True,False,38,">>> from time import gmtime, strftime
>>> strftime(""%Y-%m-%d %H:%M:%S"", gmtime())
'2009-01-05 22:14:39'"
4337,print date and time in GMT in 24hr format,False,False,10,"for date in mylist :
    print str(date)"
4338,print date and time in GMT in 24hr format,True,False,128,"import datetime
mylist = []
today = datetime.date.today()
mylist.append(today)
print mylist[0] # print the date object, not the container ;-)
2008-11-22

# It's better to always use str() because :

print ""This is a new day : "", mylist[0] # will work
>>> This is a new day : 2008-11-22

print ""This is a new day : "" + mylist[0] # will crash
>>> cannot concatenate 'str' and 'datetime.date' objects

print ""This is a new day : "" + str(mylist[0]) 
>>> This is a new day : 2008-11-22"
4339,print date and time in GMT in 24hr format,False,False,26,"print today.strftime('We are the %d, %b %Y')
>>> 'We are the 22, Nov 2008'"
4340,print date and time in GMT in 24hr format,True,True,26,"time.strftime('%Y-%m-%d %H:%M:%S', time.gmtime(datetime.time.now()))"
4341,print date and time in GMT in 24hr format,False,True,26,"time.strftime('%Y-%m-%d %H:%M:%S', time.gmtime(datetime.date.today()))"
4342,print date and time in GMT in 24hr format,True,True,23,"parser.strftime('%Y-%m-%d %H:%M:%S', gmtime())"
4343,print date and time in GMT in 24hr format,False,True,6,parser.parse(datetime.datetime.now())
4344,print date and time in GMT in 24hr format,False,True,26,"time.strftime('%Y-%m-%d %H:%M:%S', time.gmtime(datetime.datetime.now()))"
4345,print date and time in GMT in 24hr format,False,True,23,"time.strftime('%Y-%m-%d %H:%M:%S', gmtime())"
4346,print date and time in GMT in 24hr format,False,True,23,"time.strftime('%Y-%m-%d %H:%M:%S', time.gmtime())"
4347,print date and time in GMT in 24hr format,False,False,10,"for date in mylist :
    print str(date)"
4348,print date and time in GMT in 24hr format,True,False,128,"import datetime
mylist = []
today = datetime.date.today()
mylist.append(today)
print mylist[0] # print the date object, not the container ;-)
2008-11-22

# It's better to always use str() because :

print ""This is a new day : "", mylist[0] # will work
>>> This is a new day : 2008-11-22

print ""This is a new day : "" + mylist[0] # will crash
>>> cannot concatenate 'str' and 'datetime.date' objects

print ""This is a new day : "" + str(mylist[0]) 
>>> This is a new day : 2008-11-22"
4349,print date and time in GMT in 24hr format,False,False,26,"print today.strftime('We are the %d, %b %Y')
>>> 'We are the 22, Nov 2008'"
4350,print date and time in GMT in 24hr format,False,False,31,"print ""We are the {:%d, %b %Y}"".format(today)
>>> 'We are the 22, Nov 2008'"
4351,print date and time in GMT in 24hr format,False,False,22,"import datetime
f""{datetime.datetime.now():%Y-%m-%d}""
>>> '2017-06-15'"
4352,print date and time in GMT in 24hr format,False,False,22,"import datetime
print datetime.datetime.now().strftime(""%Y-%m-%d %H:%M"")"
4353,print date and time in GMT in 24hr format,False,False,19,"import time
print time.strftime(""%Y-%m-%d %H:%M"")"
4354,print date and time in GMT in 24hr format,True,True,26,"time.strftime('%Y-%m-%d %H:%M:%S', time.gmtime(datetime.time.now()))"
4355,print date and time in GMT in 24hr format,False,True,26,"time.strftime('%Y-%m-%d %H:%M:%S', time.gmtime(datetime.date.today()))"
4356,print date and time in GMT in 24hr format,True,True,23,"parser.strftime('%Y-%m-%d %H:%M:%S', gmtime())"
4357,print date and time in GMT in 24hr format,False,True,6,parser.parse(datetime.datetime.now())
4358,print date and time in GMT in 24hr format,False,True,26,"time.strftime('%Y-%m-%d %H:%M:%S', time.gmtime(datetime.datetime.now()))"
4359,print date and time in GMT in 24hr format,False,True,23,"time.strftime('%Y-%m-%d %H:%M:%S', gmtime())"
4360,print date and time in GMT in 24hr format,False,True,23,"time.strftime('%Y-%m-%d %H:%M:%S', time.gmtime())"
4361,print date and time in GMT in 24hr format,False,False,10,"for date in mylist :
    print str(date)"
4362,print date and time in GMT in 24hr format,True,False,128,"import datetime
mylist = []
today = datetime.date.today()
mylist.append(today)
print mylist[0] # print the date object, not the container ;-)
2008-11-22

# It's better to always use str() because :

print ""This is a new day : "", mylist[0] # will work
>>> This is a new day : 2008-11-22

print ""This is a new day : "" + mylist[0] # will crash
>>> cannot concatenate 'str' and 'datetime.date' objects

print ""This is a new day : "" + str(mylist[0]) 
>>> This is a new day : 2008-11-22"
4363,print date and time in GMT in 24hr format,False,False,26,"print today.strftime('We are the %d, %b %Y')
>>> 'We are the 22, Nov 2008'"
4364,print date and time in GMT in 24hr format,False,False,31,"print ""We are the {:%d, %b %Y}"".format(today)
>>> 'We are the 22, Nov 2008'"
4365,print date and time in GMT in 24hr format,False,False,22,"import datetime
f""{datetime.datetime.now():%Y-%m-%d}""
>>> '2017-06-15'"
4366,print date and time in GMT in 24hr format,False,False,22,"import datetime
print datetime.datetime.now().strftime(""%Y-%m-%d %H:%M"")"
4367,print date and time in GMT in 24hr format,False,False,19,"import time
print time.strftime(""%Y-%m-%d %H:%M"")"
4368,print date and time in GMT in 24hr format,True,True,26,"time.strftime('%Y-%m-%d %H:%M:%S', time.gmtime(datetime.time.now()))"
4369,print date and time in GMT in 24hr format,False,True,26,"time.strftime('%Y-%m-%d %H:%M:%S', time.gmtime(datetime.date.today()))"
4370,print date and time in GMT in 24hr format,True,True,23,"parser.strftime('%Y-%m-%d %H:%M:%S', gmtime())"
4371,print date and time in GMT in 24hr format,False,True,6,parser.parse(datetime.datetime.now())
4372,print date and time in GMT in 24hr format,False,True,26,"time.strftime('%Y-%m-%d %H:%M:%S', time.gmtime(datetime.datetime.now()))"
4373,print date and time in GMT in 24hr format,False,True,23,"time.strftime('%Y-%m-%d %H:%M:%S', gmtime())"
4374,print date and time in GMT in 24hr format,False,True,23,"time.strftime('%Y-%m-%d %H:%M:%S', time.gmtime())"
4375,print date and time in GMT in 24hr format,False,False,10,"for date in mylist :
    print str(date)"
4376,print date and time in GMT in 24hr format,True,False,128,"import datetime
mylist = []
today = datetime.date.today()
mylist.append(today)
print mylist[0] # print the date object, not the container ;-)
2008-11-22

# It's better to always use str() because :

print ""This is a new day : "", mylist[0] # will work
>>> This is a new day : 2008-11-22

print ""This is a new day : "" + mylist[0] # will crash
>>> cannot concatenate 'str' and 'datetime.date' objects

print ""This is a new day : "" + str(mylist[0]) 
>>> This is a new day : 2008-11-22"
4377,print date and time in GMT in 24hr format,False,False,26,"print today.strftime('We are the %d, %b %Y')
>>> 'We are the 22, Nov 2008'"
4378,print date and time in GMT in 24hr format,False,False,31,"print ""We are the {:%d, %b %Y}"".format(today)
>>> 'We are the 22, Nov 2008'"
4379,print date and time in GMT in 24hr format,False,False,22,"import datetime
f""{datetime.datetime.now():%Y-%m-%d}""
>>> '2017-06-15'"
4380,print date and time in GMT in 24hr format,False,False,22,"import datetime
print datetime.datetime.now().strftime(""%Y-%m-%d %H:%M"")"
4381,print date and time in GMT in 24hr format,False,False,19,"import time
print time.strftime(""%Y-%m-%d %H:%M"")"
4382,delete first and last column in csv file,False,True,6,"np.delete(my_data, -1)"
4383,delete first and last column in csv file,False,True,18,"np.loadtxt(open('myfile.txt', 'rb'), delimiter=', ', skiprows=1)"
4384,delete first and last column in csv file,False,True,18,"np.loadtxt(open('myfile.txt', 'rb'), delimiter=',', skiprows=1)"
4385,delete first and last column in csv file,False,True,9,"df.drop(np.random[0], axis=1)"
4386,delete first and last column in csv file,False,True,8,"np.delete(my_data, -1, axis=0)"
4387,delete first and last column in csv file,False,True,13,"df = pd.read_csv('my.csv', na_values=['AAPL'])"
4388,delete first and last column in csv file,False,True,20,"np.delete(file, list(range(0, os.O_WRONLY + 2008, 8)), axis=1)"
4389,delete first and last column in csv file,False,False,6,"df.to_csv(filename, index=False)"
4390,delete first and last column in csv file,False,False,6,"df.read_csv(filename, index=False)"
4391,delete first and last column in csv file,False,False,15,"df_csv = df0_fa.to_csv('revenue/data/test.csv',mode = 'w', index=False)"
4392,delete first and last column in csv file,False,False,15,"df.drop(df.columns[len(df.columns)-1], axis=1, inplace=True)"
4393,delete first and last column in csv file,True,False,69,"import csv
with open(""source"",""rb"") as source:
    rdr= csv.reader( source )
    with open(""result"",""wb"") as result:
        wtr= csv.writer( result )
        for r in rdr:
            wtr.writerow( (r[0], r[1], r[3], r[4]) )"
4394,delete first and last column in csv file,False,False,32,"in_iter= ( (r[0], r[1], r[3], r[4]) for r in rdr )
        wtr.writerows( in_iter )"
4395,delete first and last column in csv file,False,False,9,"del r[2]
            wtr.writerow( r )"
4396,remove columns from csv file and save it to another csv file,False,True,13,"pd.read_csv('csv', sep='[', header='')"
4397,remove columns from csv file and save it to another csv file,False,True,10,"pd.read_csv('csv', sep='', header=None)"
4398,remove columns from csv file and save it to another csv file,False,True,13,"pd.read_csv('file', sep='[', header='')"
4399,remove columns from csv file and save it to another csv file,False,True,8,"pd.read_csv('csv', sep='join')"
4400,remove columns from csv file and save it to another csv file,False,True,14,"pd.read_csv('csv', sep='[', names=[])"
4401,remove columns from csv file and save it to another csv file,False,True,10,"pd.read_csv('file', sep='', header=None)"
4402,remove columns from csv file and save it to another csv file,False,True,14,"pd.read_csv('file', sep='[', names=[])"
4403,remove columns from csv file and save it to another csv file,False,False,20,"for row in reader:
    content = list(row[i] for i in included_cols)
print content"
4404,remove columns from csv file and save it to another csv file,False,False,20,"for row in reader:
        content = list(row[i] for i in included_cols)
        print content"
4405,remove columns from csv file and save it to another csv file,False,False,23,"import pandas as pd
df = pd.read_csv(csv_file)
saved_column = df.column_name #you can also use df['column_name']"
4406,remove columns from csv file and save it to another csv file,False,False,3,names = df.Names
4407,remove columns from csv file and save it to another csv file,True,False,131,"import csv
from collections import defaultdict

columns = defaultdict(list) # each value in each column is appended to a list

with open('file.txt') as f:
    reader = csv.DictReader(f) # read rows into a dictionary format
    for row in reader: # read a row as {column1: value1, column2: value2,...}
        for (k,v) in row.items(): # go over each column name and value 
            columns[k].append(v) # append the value into the appropriate list
                                 # based on column name k

print(columns['name'])
print(columns['phone'])
print(columns['street'])"
4408,remove columns from csv file and save it to another csv file,False,False,13,"name,phone,street
Bob,0893,32 Silly
James,000,400 McHilly
Smithers,4442,23 Looped St."
4409,remove columns from csv file and save it to another csv file,False,False,38,">>> 
['Bob', 'James', 'Smithers']
['0893', '000', '4442']
['32 Silly', '400 McHilly', '23 Looped St.']"
4410,remove first column from csv file,True,True,9,"df = pd.read_csv('my.csv', header=None)"
4411,remove first column from csv file,False,True,7,"df.to_csv('head', header=False)"
4412,remove first column from csv file,False,True,14,"df = pd.read_csv('farm', sep=',', header=None)"
4413,remove first column from csv file,False,True,12,"df = pd.read_csv('<unk>', names=False)"
4414,remove first column from csv file,False,True,12,"df = pandas.read_csv('<unk>', names=False)"
4415,remove first column from csv file,False,True,14,"df = pd.read_csv('my.csv', header=None, sep=',')"
4416,remove first column from csv file,False,True,5,df.to_csv('head')
4417,remove first column from csv file,True,False,20,"for row in reader:
    content = list(row[i] for i in included_cols)
print content"
4418,remove first column from csv file,False,False,20,"for row in reader:
        content = list(row[i] for i in included_cols)
        print content"
4419,remove first column from csv file,False,False,23,"import pandas as pd
df = pd.read_csv(csv_file)
saved_column = df.column_name #you can also use df['column_name']"
4420,remove first column from csv file,False,False,3,names = df.Names
4421,remove first column from csv file,True,False,131,"import csv
from collections import defaultdict

columns = defaultdict(list) # each value in each column is appended to a list

with open('file.txt') as f:
    reader = csv.DictReader(f) # read rows into a dictionary format
    for row in reader: # read a row as {column1: value1, column2: value2,...}
        for (k,v) in row.items(): # go over each column name and value 
            columns[k].append(v) # append the value into the appropriate list
                                 # based on column name k

print(columns['name'])
print(columns['phone'])
print(columns['street'])"
4422,remove first column from csv file,False,False,13,"name,phone,street
Bob,0893,32 Silly
James,000,400 McHilly
Smithers,4442,23 Looped St."
4423,remove first column from csv file,False,False,38,">>> 
['Bob', 'James', 'Smithers']
['0893', '000', '4442']
['32 Silly', '400 McHilly', '23 Looped St.']"
4424,remove first column from csv file,True,True,9,"df = pd.read_csv('my.csv', header=None)"
4425,remove first column from csv file,False,True,7,"df.to_csv('head', header=False)"
4426,remove first column from csv file,False,True,14,"df = pd.read_csv('farm', sep=',', header=None)"
4427,remove first column from csv file,False,True,12,"df = pd.read_csv('<unk>', names=False)"
4428,remove first column from csv file,False,True,12,"df = pandas.read_csv('<unk>', names=False)"
4429,remove first column from csv file,False,True,14,"df = pd.read_csv('my.csv', header=None, sep=',')"
4430,remove first column from csv file,False,True,5,df.to_csv('head')
4431,remove first column from csv file,True,False,20,"for row in reader:
    content = list(row[i] for i in included_cols)
print content"
4432,remove first column from csv file,False,False,20,"for row in reader:
        content = list(row[i] for i in included_cols)
        print content"
4433,remove first column from csv file,False,False,23,"import pandas as pd
df = pd.read_csv(csv_file)
saved_column = df.column_name #you can also use df['column_name']"
4434,remove first column from csv file,False,False,3,names = df.Names
4435,remove first column from csv file,True,False,131,"import csv
from collections import defaultdict

columns = defaultdict(list) # each value in each column is appended to a list

with open('file.txt') as f:
    reader = csv.DictReader(f) # read rows into a dictionary format
    for row in reader: # read a row as {column1: value1, column2: value2,...}
        for (k,v) in row.items(): # go over each column name and value 
            columns[k].append(v) # append the value into the appropriate list
                                 # based on column name k

print(columns['name'])
print(columns['phone'])
print(columns['street'])"
4436,remove first column from csv file,False,False,13,"name,phone,street
Bob,0893,32 Silly
James,000,400 McHilly
Smithers,4442,23 Looped St."
4437,remove first column from csv file,False,False,38,">>> 
['Bob', 'James', 'Smithers']
['0893', '000', '4442']
['32 Silly', '400 McHilly', '23 Looped St.']"
4438,remove first column from csv file,True,True,9,"df = pd.read_csv('my.csv', header=None)"
4439,remove first column from csv file,False,True,7,"df.to_csv('head', header=False)"
4440,remove first column from csv file,False,True,14,"df = pd.read_csv('farm', sep=',', header=None)"
4441,remove first column from csv file,False,True,12,"df = pd.read_csv('<unk>', names=False)"
4442,remove first column from csv file,False,True,12,"df = pandas.read_csv('<unk>', names=False)"
4443,remove first column from csv file,False,True,14,"df = pd.read_csv('my.csv', header=None, sep=',')"
4444,remove first column from csv file,False,True,5,df.to_csv('head')
4445,remove first column from csv file,True,False,20,"for row in reader:
    content = list(row[i] for i in included_cols)
print content"
4446,remove first column from csv file,False,False,20,"for row in reader:
        content = list(row[i] for i in included_cols)
        print content"
4447,remove first column from csv file,False,False,23,"import pandas as pd
df = pd.read_csv(csv_file)
saved_column = df.column_name #you can also use df['column_name']"
4448,remove first column from csv file,False,False,3,names = df.Names
4449,remove first column from csv file,True,False,131,"import csv
from collections import defaultdict

columns = defaultdict(list) # each value in each column is appended to a list

with open('file.txt') as f:
    reader = csv.DictReader(f) # read rows into a dictionary format
    for row in reader: # read a row as {column1: value1, column2: value2,...}
        for (k,v) in row.items(): # go over each column name and value 
            columns[k].append(v) # append the value into the appropriate list
                                 # based on column name k

print(columns['name'])
print(columns['phone'])
print(columns['street'])"
4450,remove first column from csv file,False,False,13,"name,phone,street
Bob,0893,32 Silly
James,000,400 McHilly
Smithers,4442,23 Looped St."
4451,remove first column from csv file,False,False,38,">>> 
['Bob', 'James', 'Smithers']
['0893', '000', '4442']
['32 Silly', '400 McHilly', '23 Looped St.']"
4452,copy directory tree from source to destination,False,True,15,os.system('<unk> -c <unk> <unk>')
4453,copy directory tree from source to destination,False,True,11,os.system('<unk> <unk>')
4454,copy directory tree from source to destination,False,True,8,os.system('dir <unk>')
4455,copy directory tree from source to destination,False,True,4,os.system(tree)
4456,copy directory tree from source to destination,False,True,21,"exec(compile(open('tree').read(), 'r', 'exec'))"
4457,copy directory tree from source to destination,False,True,8,os.system('<unk>')
4458,copy directory tree from source to destination,False,True,11,"exec(open('tree', 'rb'))"
4459,copy directory tree from source to destination,False,False,14,"from distutils.dir_util import copy_tree
copy_tree(""/a/b/c"", ""/x/y/z"")"
4460,copy directory tree from source to destination,False,False,64,"import os, shutil
def copytree(src, dst, symlinks=False, ignore=None):
    for item in os.listdir(src):
        s = os.path.join(src, item)
        d = os.path.join(dst, item)
        if os.path.isdir(s):
            shutil.copytree(s, d, symlinks, ignore)
        else:
            shutil.copy2(s, d)"
4461,copy directory tree from source to destination,False,False,24,"from distutils.dir_util import copy_tree

# copy subdirectory example
fromDirectory = ""/a/b/c""
toDirectory = ""/x/y/z""

copy_tree(fromDirectory, toDirectory)"
4462,copy directory tree from source to destination,True,False,43,"import shutil, errno

def copyanything(src, dst):
    try:
        shutil.copytree(src, dst)
    except OSError as exc: # python >2.5
        if exc.errno == errno.ENOTDIR:
            shutil.copy(src, dst)
        else: raise"
4463,copy directory tree from source to destination,False,False,92,"def copytree(src, dst, symlinks=False, ignore=None):
    if not os.path.exists(dst):
        os.makedirs(dst)
    for item in os.listdir(src):
        s = os.path.join(src, item)
        d = os.path.join(dst, item)
        if os.path.isdir(s):
            copytree(s, d, symlinks, ignore)
        else:
            if not os.path.exists(d) or os.stat(s).st_mtime - os.stat(d).st_mtime > 1:
                shutil.copy2(s, d)"
4464,copy directory tree from source to destination,False,False,172,"#!/usr/bin/python
import os
import shutil
import stat
def copytree(src, dst, symlinks = False, ignore = None):
  if not os.path.exists(dst):
    os.makedirs(dst)
    shutil.copystat(src, dst)
  lst = os.listdir(src)
  if ignore:
    excl = ignore(src, lst)
    lst = [x for x in lst if x not in excl]
  for item in lst:
    s = os.path.join(src, item)
    d = os.path.join(dst, item)
    if symlinks and os.path.islink(s):
      if os.path.lexists(d):
        os.remove(d)
      os.symlink(os.readlink(s), d)
      try:
        st = os.lstat(s)
        mode = stat.S_IMODE(st.st_mode)
        os.lchmod(d, mode)
      except:
        pass # lchmod not available
    elif os.path.isdir(s):
      copytree(s, d, symlinks, ignore)
    else:
      shutil.copy2(s, d)"
4465,copy directory tree from source to destination,False,False,28,"import shutil
import os

def copy_and_overwrite(from_path, to_path):
    if os.path.exists(to_path):
        shutil.rmtree(to_path)
    shutil.copytree(from_path, to_path)"
4466,move files from directory to directory,False,True,8,os.listdir('<unk>')
4467,move files from directory to directory,False,True,8,os.walk('<unk>')
4468,move files from directory to directory,False,True,7,os.chdir(os.path.dirname(__file__))
4469,move files from directory to directory,False,True,14,"shutil.copy2('<unk>', '<unk>')"
4470,move files from directory to directory,False,True,8,glob.glob('<unk>')
4471,move files from directory to directory,False,True,11,"shutil.copy2('<unk>', '..')"
4472,move files from directory to directory,False,True,7,os.chdir(os.path.dirname(filenames))
4473,move files from directory to directory,True,False,34,"import os
import shutil

os.rename(""path/to/current/file.foo"", ""path/to/new/destination/for/file.foo"")
shutil.move(""path/to/current/file.foo"", ""path/to/new/destination/for/file.foo"")
os.replace(""path/to/current/file.foo"", ""path/to/new/destination/for/file.foo"")"
4474,move files from directory to directory,False,False,14,"from distutils.dir_util import copy_tree
copy_tree(""/a/b/c"", ""/x/y/z"")"
4475,move files from directory to directory,False,False,64,"import os, shutil
def copytree(src, dst, symlinks=False, ignore=None):
    for item in os.listdir(src):
        s = os.path.join(src, item)
        d = os.path.join(dst, item)
        if os.path.isdir(s):
            shutil.copytree(s, d, symlinks, ignore)
        else:
            shutil.copy2(s, d)"
4476,move files from directory to directory,False,False,27,"import shutil
import os

source = '/path/to/source_folder'
dest1 = '/path/to/dest_folder'

files = os.listdir(source)

for f in files:
    shutil.move(source+f, dest1)"
4477,move files from directory to directory,False,False,92,"def copytree(src, dst, symlinks=False, ignore=None):
    if not os.path.exists(dst):
        os.makedirs(dst)
    for item in os.listdir(src):
        s = os.path.join(src, item)
        d = os.path.join(dst, item)
        if os.path.isdir(s):
            copytree(s, d, symlinks, ignore)
        else:
            if not os.path.exists(d) or os.stat(s).st_mtime - os.stat(d).st_mtime > 1:
                shutil.copy2(s, d)"
4478,move files from directory to directory,False,False,6,"os.chdir(""../nodes"")"
4479,move files from directory to directory,False,False,50,"in /opt/awesome
○ → ls
source
○ → ls source
awesome.txt

python 
>>> source = '/opt/awesome/source'
>>> destination = '/opt/awesome/destination'
>>> import os
>>> os.rename(source, destination)
>>> os.listdir('/opt/awesome')
['destination']"
4480,copy directory to another directory,False,True,7,os.chdir(os.path.dirname(__file__))
4481,copy directory to another directory,False,True,8,os.listdir('<unk>')
4482,copy directory to another directory,False,True,5,os.listdir('..')
4483,copy directory to another directory,False,True,4,os.walk(directory)
4484,copy directory to another directory,True,True,7,"shutil.copy2(directory, 'ignore_errors')"
4485,copy directory to another directory,False,True,3,os.getcwd()
4486,copy directory to another directory,False,True,8,os.walk('<unk>')
4487,copy directory to another directory,False,False,14,"from distutils.dir_util import copy_tree
copy_tree(""/a/b/c"", ""/x/y/z"")"
4488,copy directory to another directory,False,False,64,"import os, shutil
def copytree(src, dst, symlinks=False, ignore=None):
    for item in os.listdir(src):
        s = os.path.join(src, item)
        d = os.path.join(dst, item)
        if os.path.isdir(s):
            shutil.copytree(s, d, symlinks, ignore)
        else:
            shutil.copy2(s, d)"
4489,copy directory to another directory,False,False,24,"from distutils.dir_util import copy_tree

# copy subdirectory example
fromDirectory = ""/a/b/c""
toDirectory = ""/x/y/z""

copy_tree(fromDirectory, toDirectory)"
4490,copy directory to another directory,False,False,43,"import shutil, errno

def copyanything(src, dst):
    try:
        shutil.copytree(src, dst)
    except OSError as exc: # python >2.5
        if exc.errno == errno.ENOTDIR:
            shutil.copy(src, dst)
        else: raise"
4491,copy directory to another directory,False,False,35,"import os
import shutil
src_files = os.listdir(src)
for file_name in src_files:
    full_file_name = os.path.join(src, file_name)
    if os.path.isfile(full_file_name):
        shutil.copy(full_file_name, dest)"
4492,copy directory to another directory,False,False,27,"import shutil
import os

source = '/path/to/source_folder'
dest1 = '/path/to/dest_folder'

files = os.listdir(source)

for f in files:
    shutil.move(source+f, dest1)"
4493,copy directory to another directory,False,False,92,"def copytree(src, dst, symlinks=False, ignore=None):
    if not os.path.exists(dst):
        os.makedirs(dst)
    for item in os.listdir(src):
        s = os.path.join(src, item)
        d = os.path.join(dst, item)
        if os.path.isdir(s):
            copytree(s, d, symlinks, ignore)
        else:
            if not os.path.exists(d) or os.stat(s).st_mtime - os.stat(d).st_mtime > 1:
                shutil.copy2(s, d)"
4494,copy directory to directory,False,True,7,os.chdir(os.path.dirname(__file__))
4495,copy directory to directory,False,True,4,os.walk(directory)
4496,copy directory to directory,False,True,7,os.chdir(os.path.realpath(__file__))
4497,copy directory to directory,False,True,4,os.chdir(directory)
4498,copy directory to directory,False,True,8,os.walk('<unk>')
4499,copy directory to directory,False,True,8,os.listdir('<unk>')
4500,copy directory to directory,False,True,5,os.chdir('copy')
4501,copy directory to directory,True,False,14,"from distutils.dir_util import copy_tree
copy_tree(""/a/b/c"", ""/x/y/z"")"
4502,copy directory to directory,True,False,64,"import os, shutil
def copytree(src, dst, symlinks=False, ignore=None):
    for item in os.listdir(src):
        s = os.path.join(src, item)
        d = os.path.join(dst, item)
        if os.path.isdir(s):
            shutil.copytree(s, d, symlinks, ignore)
        else:
            shutil.copy2(s, d)"
4503,copy directory to directory,False,False,24,"from distutils.dir_util import copy_tree

# copy subdirectory example
fromDirectory = ""/a/b/c""
toDirectory = ""/x/y/z""

copy_tree(fromDirectory, toDirectory)"
4504,copy directory to directory,False,False,43,"import shutil, errno

def copyanything(src, dst):
    try:
        shutil.copytree(src, dst)
    except OSError as exc: # python >2.5
        if exc.errno == errno.ENOTDIR:
            shutil.copy(src, dst)
        else: raise"
4505,copy directory to directory,False,False,92,"def copytree(src, dst, symlinks=False, ignore=None):
    if not os.path.exists(dst):
        os.makedirs(dst)
    for item in os.listdir(src):
        s = os.path.join(src, item)
        d = os.path.join(dst, item)
        if os.path.isdir(s):
            copytree(s, d, symlinks, ignore)
        else:
            if not os.path.exists(d) or os.stat(s).st_mtime - os.stat(d).st_mtime > 1:
                shutil.copy2(s, d)"
4506,copy directory to directory,False,False,172,"#!/usr/bin/python
import os
import shutil
import stat
def copytree(src, dst, symlinks = False, ignore = None):
  if not os.path.exists(dst):
    os.makedirs(dst)
    shutil.copystat(src, dst)
  lst = os.listdir(src)
  if ignore:
    excl = ignore(src, lst)
    lst = [x for x in lst if x not in excl]
  for item in lst:
    s = os.path.join(src, item)
    d = os.path.join(dst, item)
    if symlinks and os.path.islink(s):
      if os.path.lexists(d):
        os.remove(d)
      os.symlink(os.readlink(s), d)
      try:
        st = os.lstat(s)
        mode = stat.S_IMODE(st.st_mode)
        os.lchmod(d, mode)
      except:
        pass # lchmod not available
    elif os.path.isdir(s):
      copytree(s, d, symlinks, ignore)
    else:
      shutil.copy2(s, d)"
4507,copy directory to directory,False,False,28,"import shutil
import os

def copy_and_overwrite(from_path, to_path):
    if os.path.exists(to_path):
        shutil.rmtree(to_path)
    shutil.copytree(from_path, to_path)"
4508,copy directory to directory,False,True,7,os.chdir(os.path.dirname(__file__))
4509,copy directory to directory,False,True,4,os.walk(directory)
4510,copy directory to directory,False,True,7,os.chdir(os.path.realpath(__file__))
4511,copy directory to directory,False,True,4,os.chdir(directory)
4512,copy directory to directory,False,True,8,os.walk('<unk>')
4513,copy directory to directory,False,True,8,os.listdir('<unk>')
4514,copy directory to directory,False,True,5,os.chdir('copy')
4515,copy directory to directory,True,False,14,"from distutils.dir_util import copy_tree
copy_tree(""/a/b/c"", ""/x/y/z"")"
4516,copy directory to directory,True,False,64,"import os, shutil
def copytree(src, dst, symlinks=False, ignore=None):
    for item in os.listdir(src):
        s = os.path.join(src, item)
        d = os.path.join(dst, item)
        if os.path.isdir(s):
            shutil.copytree(s, d, symlinks, ignore)
        else:
            shutil.copy2(s, d)"
4517,copy directory to directory,False,False,24,"from distutils.dir_util import copy_tree

# copy subdirectory example
fromDirectory = ""/a/b/c""
toDirectory = ""/x/y/z""

copy_tree(fromDirectory, toDirectory)"
4518,copy directory to directory,False,False,43,"import shutil, errno

def copyanything(src, dst):
    try:
        shutil.copytree(src, dst)
    except OSError as exc: # python >2.5
        if exc.errno == errno.ENOTDIR:
            shutil.copy(src, dst)
        else: raise"
4519,copy directory to directory,False,False,92,"def copytree(src, dst, symlinks=False, ignore=None):
    if not os.path.exists(dst):
        os.makedirs(dst)
    for item in os.listdir(src):
        s = os.path.join(src, item)
        d = os.path.join(dst, item)
        if os.path.isdir(s):
            copytree(s, d, symlinks, ignore)
        else:
            if not os.path.exists(d) or os.stat(s).st_mtime - os.stat(d).st_mtime > 1:
                shutil.copy2(s, d)"
4520,copy directory to directory,False,False,172,"#!/usr/bin/python
import os
import shutil
import stat
def copytree(src, dst, symlinks = False, ignore = None):
  if not os.path.exists(dst):
    os.makedirs(dst)
    shutil.copystat(src, dst)
  lst = os.listdir(src)
  if ignore:
    excl = ignore(src, lst)
    lst = [x for x in lst if x not in excl]
  for item in lst:
    s = os.path.join(src, item)
    d = os.path.join(dst, item)
    if symlinks and os.path.islink(s):
      if os.path.lexists(d):
        os.remove(d)
      os.symlink(os.readlink(s), d)
      try:
        st = os.lstat(s)
        mode = stat.S_IMODE(st.st_mode)
        os.lchmod(d, mode)
      except:
        pass # lchmod not available
    elif os.path.isdir(s):
      copytree(s, d, symlinks, ignore)
    else:
      shutil.copy2(s, d)"
4521,copy directory to directory,False,False,28,"import shutil
import os

def copy_and_overwrite(from_path, to_path):
    if os.path.exists(to_path):
        shutil.rmtree(to_path)
    shutil.copytree(from_path, to_path)"
4522,rename file with regex,True,True,13,"re.sub('<unk>', '\\1', text)"
4523,rename file with regex,False,True,13,"re.sub('<unk>', '\\1', str1)"
4524,rename file with regex,False,True,13,"re.sub('<unk>', '\\1.\\2', file)"
4525,rename file with regex,False,True,16,"re.sub('<unk>', '<unk>', text)"
4526,rename file with regex,False,True,13,"re.sub('<unk>', '\\1', str)"
4527,rename file with regex,False,True,13,"re.sub('<unk>', '\\1', my_string)"
4528,rename file with regex,False,True,13,"re.sub('<unk>', '\\1', file)"
4529,rename file with regex,False,False,12,"import os

os.rename('a.txt', 'b.kml')"
4530,rename file with regex,False,False,10,rename 's/^images\/(.+)/test\/$1.png/s' images/*.png
4531,rename file with regex,False,False,32,"import os
old_file = os.path.join(""directory"", ""a.txt"")
new_file = os.path.join(""directory"", ""b.kml"")
os.rename(old_file, new_file)"
4532,rename file with regex,False,False,30,rename -n 's/(\w+) - (\d{1})x(\d{2}).*$/S0$2E$3\.srt/' *.srt
4533,rename file with regex,False,False,19,for x in *.png;do mv $x test/${x%.png}test.png;done
4534,rename file with regex,False,False,12,"import shutil

shutil.move('a.txt', 'b.kml')"
4535,rename file with regex,False,False,32,"$ for old in ./images*.png; do
    new=$(echo $old | sed -e 's/\.png$/test.png/')
    mv -v ""$old"" ""$new""
  done"
4536,format time,True,True,26,"""""""time"""""".strftime('%Y-%m-%d %H:%M:%S')"
4537,format time,False,True,23,"""""""time"""""".strftime('%Y-%m-%d %H:%M')"
4538,format time,False,True,16,"""""""time <unk>"""""".format(datetime.datetime.now())"
4539,format time,False,True,14,"""""""time driver"""""".format(datetime.datetime.now())"
4540,format time,False,True,14,"""""""time <unk>"""""".format(time=500)"
4541,format time,False,True,27,"""""""time find_element_by_css_selector"""""".strftime('%Y-%m-%d %H:%M:%S')"
4542,format time,False,True,16,"""""""time driver"""""".strftime('<unk>')"
4543,format time,False,False,24,"import time

start = time.time()
print(""hello"")
end = time.time()
print(end - start)"
4544,format time,False,False,10,"for date in mylist :
    print str(date)"
4545,format time,False,False,128,"import datetime
mylist = []
today = datetime.date.today()
mylist.append(today)
print mylist[0] # print the date object, not the container ;-)
2008-11-22

# It's better to always use str() because :

print ""This is a new day : "", mylist[0] # will work
>>> This is a new day : 2008-11-22

print ""This is a new day : "" + mylist[0] # will crash
>>> cannot concatenate 'str' and 'datetime.date' objects

print ""This is a new day : "" + str(mylist[0]) 
>>> This is a new day : 2008-11-22"
4546,format time,False,False,26,"print today.strftime('We are the %d, %b %Y')
>>> 'We are the 22, Nov 2008'"
4547,format time,False,False,31,"print ""We are the {:%d, %b %Y}"".format(today)
>>> 'We are the 22, Nov 2008'"
4548,format time,False,False,22,"import datetime
f""{datetime.datetime.now():%Y-%m-%d}""
>>> '2017-06-15'"
4549,format time,False,False,32,"from timeit import default_timer as timer

start = timer()
# ...
end = timer()
print(end - start) # Time in seconds, e.g. 5.38091952400282"
4550,import time,False,True,18,now = datetime.now().strftime('%H:%M:%S')
4551,import time,True,True,18,now = datetime.datetime.now().strftime('%H:%M:%S')
4552,import time,False,True,23,now = os.path.abspath('<unk>').strftime('%H:%M:%S')
4553,import time,False,True,6,datetime.time(datetime.datetime.now())
4554,import time,False,True,20,now = datetime.importlib.import_module('time').strftime('%H:%M:%S')
4555,import time,False,True,23,now = os.path.getmtime('<unk>').strftime('%H:%M:%S')
4556,import time,False,True,8,datetime.importlib.import_module('time').total_seconds()
4557,import time,False,False,30,"import time
start_time = time.time()
main()
print(""--- %s seconds ---"" % (time.time() - start_time))"
4558,import time,False,False,6,--- 0.764891862869 seconds ---
4559,import time,False,False,24,"import time

start = time.time()
print(""hello"")
end = time.time()
print(end - start)"
4560,import time,False,False,32,"from timeit import default_timer as timer

start = timer()
# ...
end = timer()
print(end - start) # Time in seconds, e.g. 5.38091952400282"
4561,import time,False,False,153,"import atexit
from time import clock

def secondsToStr(t):
    return ""%d:%02d:%02d.%03d"" % \
        reduce(lambda ll,b : divmod(ll[0],b) + ll[1:],
            [(t*1000,),1000,60,60])

line = ""=""*40
def log(s, elapsed=None):
    print line
    print secondsToStr(clock()), '-', s
    if elapsed:
        print ""Elapsed time:"", elapsed
    print line
    print

def endlog():
    end = clock()
    elapsed = end-start
    log(""End Program"", secondsToStr(elapsed))

def now():
    return secondsToStr(clock())

start = clock()
atexit.register(endlog)
log(""Start Program"")"
4562,import time,False,False,4,$ time python yourprogram.py
4563,import time,False,False,174,"$ time -v python yourprogram.py
    Command being timed: ""python3 yourprogram.py""
    User time (seconds): 0.08
    System time (seconds): 0.02
    Percent of CPU this job got: 98%
    Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.10
    Average shared text size (kbytes): 0
    Average unshared data size (kbytes): 0
    Average stack size (kbytes): 0
    Average total size (kbytes): 0
    Maximum resident set size (kbytes): 9480
    Average resident set size (kbytes): 0
    Major (requiring I/O) page faults: 0
    Minor (reclaiming a frame) page faults: 1114
    Voluntary context switches: 0
    Involuntary context switches: 22
    Swaps: 0
    File system inputs: 0
    File system outputs: 0
    Socket messages sent: 0
    Socket messages received: 0
    Signals delivered: 0
    Page size (bytes): 4096
    Exit status: 0"
4564,mm-dd-yyyy,False,True,10,print.map.list(s.strip()).map(str.strip)
4565,mm-dd-yyyy,False,True,8,print.str.map(str.strip).map(str.strip)
4566,mm-dd-yyyy,False,True,14,print.map.set(print.str.strip().map(str.str)).map(str.strip)
4567,mm-dd-yyyy,False,True,14,print.map.list(print.str.strip().map(str.str)).map(str.strip)
4568,mm-dd-yyyy,False,True,8,print.str.map(str.map).map(str.strip)
4569,mm-dd-yyyy,False,True,15,print.map.print(print.str.map(str.strip).map(str.str)).map(str.strip)
4570,mm-dd-yyyy,False,True,12,"print.map.list(s.strip()).map(str.map, str.strip)"
4571,mm-dd-yyyy,False,False,18,"from datetime import datetime

datetime.today().strftime('%Y-%m-%d')"
4572,mm-dd-yyyy,False,False,22,datetime.today().strftime('%Y-%m-%d-%H:%M:%S')
4573,mm-dd-yyyy,False,False,19,"from datetime import date
today = str(date.today())
print(today)   # '2017-12-26'"
4574,mm-dd-yyyy,False,False,28,"import datetime

datetime.datetime.strptime(""21/12/2008"", ""%d/%m/%Y"").strftime(""%Y-%m-%d"")"
4575,mm-dd-yyyy,True,False,18,">>> import arrow
>>> arrow.now().format('YYYY-MM-DD')
'2017-02-17'"
4576,mm-dd-yyyy,False,False,19,"from datetime import date    
today = date.today().isoformat()
print(today) # '2018-12-05'"
4577,mm-dd-yyyy,False,False,19,"from datetime import datetime
now = datetime.today().isoformat()
print(now) # '2018-12-05T11:15:55.126382'"
4578,read file,True,True,21,"with open('file.txt') as f:
    f = open(os.path.join(__location__, 'rb'))"
4579,read file,False,True,21,"with open('myfile.txt') as f:
    f = open(os.path.join(__location__, 'rb'))"
4580,read file,False,True,21,"with open('file.txt') as f:
    f = open(os.path.join(__location__, 'rt'))"
4581,read file,False,True,21,"with open('myfile.txt') as f:
    f = open(os.path.join(__location__, 'rt'))"
4582,read file,False,True,19,"with open('myfile.txt') as f:
    f = open('file.txt', 'rb')"
4583,read file,False,True,19,"with open('file.txt') as f:
    f = open('file.txt', 'rb')"
4584,read file,False,True,18,"with open('myfile.txt', 'r') as f:
    f = f.read()"
4585,read file,False,False,43,"with open(filename) as f:
    content = f.readlines()
# you may also want to remove whitespace characters like `\n` at the end of each line
content = [x.strip() for x in content]"
4586,read file,True,False,25,"with open('data.txt', 'r') as file:
    data = file.read().replace('\n', '')"
4587,read file,False,False,14,"with open('filename') as f:
    lines = f.readlines()"
4588,read file,False,False,20,"with open('filename') as f:
    lines = [line.rstrip() for line in f]"
4589,read file,False,False,23,"with open(""file.txt"") as file_in:
    lines = []
    for line in file_in:
        lines.append(line)"
4590,read file,False,False,18,"with open('Path/to/file', 'r') as content_file:
    content = content_file.read()"
4591,read file,False,False,44,"f = open(""myfile"", ""rb"")
try:
    byte = f.read(1)
    while byte != """":
        # Do stuff with byte.
        byte = f.read(1)
finally:
    f.close()"
4592,read file,True,True,21,"with open('file.txt') as f:
    f = open(os.path.join(__location__, 'rb'))"
4593,read file,False,True,21,"with open('myfile.txt') as f:
    f = open(os.path.join(__location__, 'rb'))"
4594,read file,False,True,21,"with open('file.txt') as f:
    f = open(os.path.join(__location__, 'rt'))"
4595,read file,False,True,21,"with open('myfile.txt') as f:
    f = open(os.path.join(__location__, 'rt'))"
4596,read file,False,True,19,"with open('myfile.txt') as f:
    f = open('file.txt', 'rb')"
4597,read file,False,True,19,"with open('file.txt') as f:
    f = open('file.txt', 'rb')"
4598,read file,False,True,18,"with open('myfile.txt', 'r') as f:
    f = f.read()"
4599,read file,False,False,43,"with open(filename) as f:
    content = f.readlines()
# you may also want to remove whitespace characters like `\n` at the end of each line
content = [x.strip() for x in content]"
4600,read file,True,False,25,"with open('data.txt', 'r') as file:
    data = file.read().replace('\n', '')"
4601,read file,False,False,14,"with open('filename') as f:
    lines = f.readlines()"
4602,read file,False,False,20,"with open('filename') as f:
    lines = [line.rstrip() for line in f]"
4603,read file,False,False,23,"with open(""file.txt"") as file_in:
    lines = []
    for line in file_in:
        lines.append(line)"
4604,read file,False,False,18,"with open('Path/to/file', 'r') as content_file:
    content = content_file.read()"
4605,read file,False,False,44,"f = open(""myfile"", ""rb"")
try:
    byte = f.read(1)
    while byte != """":
        # Do stuff with byte.
        byte = f.read(1)
finally:
    f.close()"
4606,iterating files in a folder,False,True,5,os.listdir('create_upload_url')
4607,iterating files in a folder,True,True,13,"for dirname, dirnames, filenames in os.walk(files):
    pass"
4608,iterating files in a folder,False,True,4,os.walk(filename)
4609,iterating files in a folder,False,True,5,os.listdir('filenames')
4610,iterating files in a folder,False,True,6,print(os.getcwd())
4611,iterating files in a folder,False,True,5,os.listdir('..')
4612,iterating files in a folder,False,True,5,glob.glob('*')
4613,iterating files in a folder,False,False,32,"from os import listdir
from os.path import isfile, join
onlyfiles = [f for f in listdir(mypath) if isfile(join(mypath, f))]"
4614,iterating files in a folder,False,False,27,"from os import walk

f = []
for (dirpath, dirnames, filenames) in walk(mypath):
    f.extend(filenames)
    break"
4615,iterating files in a folder,False,False,11,"import glob
print(glob.glob(""/home/adam/*.txt""))"
4616,iterating files in a folder,False,False,10,"['/home/adam/file1.txt', '/home/adam/file2.txt', .... ]"
4617,iterating files in a folder,False,False,29,"import os
 arr = os.listdir()
 print(arr)

 >>> ['$RECYCLE.BIN', 'work.txt', '3ebooks.txt', 'documents']"
4618,iterating files in a folder,False,False,20,"import glob

txtfiles = []
for file in glob.glob(""*.txt""):
    txtfiles.append(file)"
4619,iterating files in a folder,False,False,16,"import glob

mylist = [f for f in glob.glob(""*.txt"")]"
4620,extract imafe from html,False,True,8,"soup.findAll('div', class_='crBlock ')"
4621,extract imafe from html,False,True,5,soup.findAll(text='from_string')
4622,extract imafe from html,False,True,5,soup.body.findAll(text='display.max_columns')
4623,extract imafe from html,False,True,5,soup.findAll(text='crBlock ')
4624,extract imafe from html,False,True,7,soup.findAll(text='from_string format load')
4625,extract imafe from html,False,True,14,"soup.find_all('a', href=re.compile('http://www\\.iwashere\\.com/'))"
4626,extract imafe from html,False,True,8,"soup.find_all('div', class_='crBlock ')"
4627,extract imafe from html,False,False,144,"from urllib.request import urlopen
from bs4 import BeautifulSoup

url = ""http://news.bbc.co.uk/2/hi/health/2284783.stm""
html = urlopen(url).read()
soup = BeautifulSoup(html, features=""html.parser"")

# kill all script and style elements
for script in soup([""script"", ""style""]):
    script.extract()    # rip it out

# get text
text = soup.get_text()

# break into lines and remove leading and trailing space on each
lines = (line.strip() for line in text.splitlines())
# break multi-headlines into a line each
chunks = (phrase.strip() for line in lines for phrase in line.split(""  ""))
# drop blank lines
text = '\n'.join(chunk for chunk in chunks if chunk)

print(text)"
4628,extract imafe from html,False,False,3,pip install beautifulsoup4
4629,extract imafe from html,False,False,32,"import nltk   
from urllib import urlopen

url = ""http://news.bbc.co.uk/2/hi/health/2284783.stm""    
html = urlopen(url).read()    
raw = nltk.clean_html(html)  
print(raw)"
4630,extract imafe from html,False,False,293,"""""""
dumpimages.py
    Downloads all the images on the supplied URL, and saves them to the
    specified output file (""/test/"" by default)

Usage:
    python dumpimages.py http://example.com/ [output]
""""""
from bs4 import BeautifulSoup as bs
from urllib.request import (
    urlopen, urlparse, urlunparse, urlretrieve)
import os
import sys

def main(url, out_folder=""/test/""):
    """"""Downloads all the images at 'url' to /test/""""""
    soup = bs(urlopen(url))
    parsed = list(urlparse(url))

    for image in soup.findAll(""img""):
        print(""Image: %(src)s"" % image)
        filename = image[""src""].split(""/"")[-1]
        parsed[2] = image[""src""]
        outpath = os.path.join(out_folder, filename)
        if image[""src""].lower().startswith(""http""):
            urlretrieve(image[""src""], outpath)
        else:
            urlretrieve(urlunparse(parsed), outpath)

def _usage():
    print(""usage: python dumpimages.py http://example.com [outpath]"")

if __name__ == ""__main__"":
    url = sys.argv[-1]
    out_folder = ""/test/""
    if not url.lower().startswith(""http""):
        out_folder = sys.argv[-1]
        url = sys.argv[-2]
        if not url.lower().startswith(""http""):
            _usage()
            sys.exit(-1)
    main(url, out_folder)"
4631,extract imafe from html,False,False,259,"from HTMLParser import HTMLParser
from re import sub
from sys import stderr
from traceback import print_exc

class _DeHTMLParser(HTMLParser):
    def __init__(self):
        HTMLParser.__init__(self)
        self.__text = []

    def handle_data(self, data):
        text = data.strip()
        if len(text) > 0:
            text = sub('[ \t\r\n]+', ' ', text)
            self.__text.append(text + ' ')

    def handle_starttag(self, tag, attrs):
        if tag == 'p':
            self.__text.append('\n\n')
        elif tag == 'br':
            self.__text.append('\n')

    def handle_startendtag(self, tag, attrs):
        if tag == 'br':
            self.__text.append('\n\n')

    def text(self):
        return ''.join(self.__text).strip()


def dehtml(text):
    try:
        parser = _DeHTMLParser()
        parser.feed(text)
        parser.close()
        return parser.text()
    except:
        print_exc(file=stderr)
        return text


def main():
    text = r'''
        <html>
            <body>
                <b>Project:</b> DeHTML<br>
                <b>Description</b>:<br>
                This small script is intended to allow conversion from HTML markup to 
                plain text.
            </body>
        </html>
    '''
    print(dehtml(text))


if __name__ == '__main__':
    main()"
4632,extract imafe from html,False,False,49,"import base64
data_uri = base64.b64encode(open('Graph.png', 'rb').read()).decode('utf-8')
img_tag = '<img src=""data:image/png;base64,{0}"">'.format(data_uri)
print(img_tag)"
4633,extract imafe from html,True,False,51,"data_uri = open('11.png', 'rb').read().encode('base64').replace('\n', '')
img_tag = '<img src=""data:image/png;base64,{0}"">'.format(data_uri)

print(img_tag)"
4634,pandas calculate mean,False,True,19,"df.groupby(np.arange(len(mean)) // 100 + 1, axis=1).mean()"
4635,pandas calculate mean,False,True,19,"df.groupby(np.arange(len(df)) // 2 + 1, axis=1).mean()"
4636,pandas calculate mean,False,True,18,df.groupby(np.arange(len(mean)) // 2 / 2).mean(axis=1)
4637,pandas calculate mean,True,True,19,"df.groupby(np.arange(len(mean)) // 2 + 1, axis=1).mean()"
4638,pandas calculate mean,False,True,18,df.groupby(np.arange(len(df)) // 2 / 2).mean(axis=1)
4639,pandas calculate mean,False,True,13,df.groupby(x.mean() / 2 + 1).mean()
4640,pandas calculate mean,False,True,13,df.groupby(x.mean() / 2 / 2).mean()
4641,pandas calculate mean,False,False,50,"In [479]: df
Out[479]: 
         ID  birthyear    weight
0    619040       1962  0.123123
1    600161       1963  0.981742
2  25602033       1963  1.312312
3    624870       1987  0.942120

In [480]: df[""weight""].mean()
Out[480]: 0.83982437500000007"
4642,pandas calculate mean,False,False,35,"In [4]: df.groupby('StationID', as_index=False)['BiasTemp'].mean()
Out[4]:
  StationID  BiasTemp
0        BB       5.0
1     KEOPS       2.5
2    SS0279      15.0"
4643,pandas calculate mean,False,False,36,"In [5]: df.groupby('StationID')['BiasTemp'].mean()
Out[5]:
StationID
BB            5.0
KEOPS         2.5
SS0279       15.0
Name: BiasTemp, dtype: float64"
4644,pandas calculate mean,False,False,11,df['value'].expanding().mean()
4645,pandas calculate mean,False,False,6,s.expanding().mean()
4646,pandas calculate mean,False,False,85,"In [1]: import numpy as np

In [2]: import pandas as pd

In [3]: index = pd.Index(['01/01/2012','01/01/2012','01/01/2012','01/02/2012','01/02/2012'], name='Date')

In [4]: df = pd.DataFrame({'ID':[100,101,102,201,202],'wt':[.5,.75,1,.5,1],'value':[60,80,100,100,80]},index=index)"
4647,pandas calculate mean,False,False,34,"In [5]: df.groupby(df.index).apply(lambda x: np.average(x.wt, weights=x.value))
Out[5]: 
Date
01/01/2012    0.791667
01/02/2012    0.722222
dtype: float64"
4648,pandas read from csv,True,True,11,"pd.read_csv('<unk>', sep='')"
4649,pandas read from csv,False,True,11,"pd.read_csv('<unk>', sep='\t')"
4650,pandas read from csv,False,True,13,"pd.read_csv('<unk>', sep=',')"
4651,pandas read from csv,False,True,14,"pd.read_csv('<unk>', sep=' ', header=None)"
4652,pandas read from csv,False,True,13,"pd.read_csv('<unk>', sep=' ]')"
4653,pandas read from csv,False,True,10,"pd.read_csv('<unk>', sheetname=None)"
4654,pandas read from csv,False,True,13,"pd.read_csv('<unk>', sep=';')"
4655,pandas read from csv,False,False,19,"chunksize = 10 ** 6
for chunk in pd.read_csv(filename, chunksize=chunksize):
    process(chunk)"
4656,pandas read from csv,False,False,10,"import pandas as pd
pd.read_csv(""../data_folder/data.csv"")"
4657,pandas read from csv,False,False,21,"# Dataframes implement the Pandas API
import dask.dataframe as dd
df = dd.read_csv('s3://.../2018-*-*.csv')"
4658,pandas read from csv,False,False,125,">>> import numpy as np, pandas as pd
>>> import io, pkgutil
>>> wells = pkgutil.get_data('pymc.examples', 'data/wells.dat')
>>> type(wells)
<class 'bytes'>
>>> df = pd.read_csv(io.BytesIO(wells), encoding='utf8', sep="" "", index_col=""id"", dtype={""switch"": np.int8})
>>> df.head()
    switch  arsenic       dist  assoc  educ
id                                         
1        1     2.36  16.826000      0     0
2        1     0.71  47.321999      0     0
3        0     2.07  20.966999      0    10
4        1     1.15  21.486000      0    12
5        1     1.10  40.874001      1    14

[5 rows x 5 columns]"
4659,pandas read from csv,False,False,89,"chunks=pd.read_table('aphro.csv',chunksize=1000000,sep=';',\
       names=['lat','long','rf','date','slno'],index_col='slno',\
       header=None,parse_dates=['date'])

df=pd.DataFrame()
%time df=pd.concat(chunk.groupby(['lat','long',chunk['date'].map(lambda x: x.year)])['rf'].agg(['sum']) for chunk in chunks)"
4660,pandas read from csv,False,False,21,"import pandas as pd
from io import StringIO
df = pd.read_csv(StringIO(""csv string...""))"
4661,pandas read from csv,False,False,106,"import os
import boto3
import pandas as pd
import sys

if sys.version_info[0] < 3: 
    from StringIO import StringIO # Python 2.x
else:
    from io import StringIO # Python 3.x

# get your credentials from environment variables
aws_id = os.environ['AWS_ID']
aws_secret = os.environ['AWS_SECRET']

client = boto3.client('s3', aws_access_key_id=aws_id,
        aws_secret_access_key=aws_secret)

bucket_name = 'my_bucket'

object_key = 'my_file.csv'
csv_obj = client.get_object(Bucket=bucket_name, Key=object_key)
body = csv_obj['Body']
csv_string = body.read().decode('utf-8')

df = pd.read_csv(StringIO(csv_string))"
4662,format output to 2 decimal,True,True,27,"""""""[{0}, {1}, {2}]"""""".format(1, 2, num=3)"
4663,format output to 2 decimal,False,True,27,"""""""[{0}, {1}, {2}]"""""".format(1, 2, subdirname=False)"
4664,format output to 2 decimal,False,True,11,"""""""ABC"""""".format(2)"
4665,format output to 2 decimal,False,True,4,sys.exit(0)
4666,format output to 2 decimal,False,True,25,"""""""[{0}, {1}, {2}]"""""".format(1, 2)"
4667,format output to 2 decimal,False,True,28,"""""""%(asctime)s;%(levelname)s;%(message)s"""""".format('output')"
4668,format output to 2 decimal,False,True,15,"""""""{:.5}"""""".format('output')"
4669,format output to 2 decimal,False,False,130,">>> 125650429603636838/(2**53)
13.949999999999999

>>> 234042163/(2**24)
13.949999988079071

>>> a = 13.946
>>> print(a)
13.946
>>> print(""%.2f"" % a)
13.95
>>> round(a,2)
13.949999999999999
>>> print(""%.2f"" % round(a, 2))
13.95
>>> print(""{:.2f}"".format(a))
13.95
>>> print(""{:.2f}"".format(round(a, 2)))
13.95
>>> print(""{:.15f}"".format(round(a, 2)))
13.949999999999999"
4670,format output to 2 decimal,False,False,10,"""{:.2f}"".format(13.949999999999999)"
4671,format output to 2 decimal,False,False,13,"float(""{:.2f}"".format(13.949999999999999))"
4672,format output to 2 decimal,False,False,64,">>> x = 13.949999999999999999
>>> x
13.95
>>> g = float(""{:.2f}"".format(x))
>>> g
13.95
>>> x == g
True
>>> h = round(x, 2)
>>> h
13.95
>>> x == h
True"
4673,format output to 2 decimal,False,False,27,">>> from math import pi  # pi ~ 3.141592653589793
>>> '{0:.2f}'.format(pi)
'3.14'"
4674,format output to 2 decimal,False,False,14,">>> f'{pi:.2f}'
'3.14'"
4675,format output to 2 decimal,False,False,11,"answer = str(round(answer, 2))"
4676,pandas write to csv file,False,True,11,"pd.read_csv('file', sep=' ', header=None)"
4677,pandas write to csv file,False,True,10,"pd.read_csv(write, header=None, sep=' ')"
4678,pandas write to csv file,False,True,9,"pd.read_csv(file, sep='', header=None)"
4679,pandas write to csv file,False,True,10,"pd.read_csv('file', sep='', header=None)"
4680,pandas write to csv file,False,True,12,"pd.read_csv('file', sep=',', header=None)"
4681,pandas write to csv file,False,True,10,"pd.read_csv('<unk>', sheetname=None)"
4682,pandas write to csv file,False,True,10,"pd.read_csv(write, sep=' ', header=None)"
4683,pandas write to csv file,True,False,7,"df.to_csv(file_name, sep='\t')"
4684,pandas write to csv file,False,False,10,"df.to_csv(file_name, sep='\t', encoding='utf-8')"
4685,pandas write to csv file,False,False,12,"df.to_csv('my_csv.csv', mode='a', header=False)"
4686,pandas write to csv file,False,False,9,"df.to_csv(file_name, encoding='utf-8', index=False)"
4687,pandas write to csv file,False,False,8,"Color  Number
0   red     22
1  blue     10"
4688,pandas write to csv file,False,False,5,"Color,Number
red,22
blue,10"
4689,pandas write to csv file,False,False,10,",Color,Number
0,red,22
1,blue,10"
4690,pandas write to file decimal,False,True,12,"pd.read_csv('write', sep='.', header=None)"
4691,pandas write to file decimal,False,True,10,"pd.read_csv('write', sep='.')"
4692,pandas write to file decimal,False,True,12,"pd.read_csv('file', sep='.', header=None)"
4693,pandas write to file decimal,False,True,9,"df = pd.read_csv('write', index=None)"
4694,pandas write to file decimal,False,True,7,"pd.read_csv('write', index=None)"
4695,pandas write to file decimal,False,True,12,"pd.read_csv('write', sep='.', index=None)"
4696,pandas write to file decimal,False,True,17,"pd.read_csv('write', sep='.', names=[300, -1])"
4697,pandas write to file decimal,True,False,36,"with open('foo.csv', 'w') as f:
    data.to_csv(f, index=True, header=True, decimal=',', sep=' ', float_format='%.3f')"
4698,pandas write to file decimal,False,False,27,"data.reset_index().to_csv('foo.csv', index=False, header=True, decimal=',', sep=' ', float_format='%.3f')"
4699,pandas write to file decimal,False,False,36,"import pandas as pd

df_in  = pd.read_csv(source_file, float_precision='round_trip')
df_out = ... # some processing of df_in
df_out.to_csv(target_file, float_format=""%.3f"") # for 3 decimal places"
4700,pandas write to file decimal,False,False,48,"def localize_floats(row):
    return [
        str(el).replace('.', ',') if isinstance(el, float) else el 
        for el in row
    ]

for row in rows:
    writer.writerow(localize_floats(row))"
4701,pandas write to file decimal,False,False,42,"value = 0.234
print(f'{value:.6f}')

value = 1
print(f'{value:.6f}')

value = 0.95269175
print(f'{value:.6f}')"
4702,pandas write to file decimal,False,False,3,"0.234000
1.000000
0.952692"
4703,pandas write to file decimal,False,False,42,"value = 0.234
print(f'{value:.6g}')

value = 1
print(f'{value:.6g}')

value = 0.000000000095269175
print(f'{value:.6g}')"
4704,pair characters in `characters` and numbers in `numbers`,False,True,18,"characters(zip(numbers[::2], characters[1::2]))"
4705,pair characters in `characters` and numbers in `numbers`,False,True,6,"zip(characters, numbers)"
4706,pair characters in `characters` and numbers in `numbers`,True,True,11,"numbers = list(zip(characters, numbers))"
4707,pair characters in `characters` and numbers in `numbers`,False,True,20,"[(k, v) for k, v in numbers.items() if v == 'y3']"
4708,pair characters in `characters` and numbers in `numbers`,False,True,4,characters(numbers)
4709,pair characters in `characters` and numbers in `numbers`,False,True,6,"copyfile(characters, numbers)"
4710,pair characters in `characters` and numbers in `numbers`,False,True,9,"print(zip(characters, numbers))"
4711,pair characters in `characters` and numbers in `numbers`,False,False,11,">>> import string
>>> string.ascii_lowercase
'abcdefghijklmnopqrstuvwxyz'"
4712,pair characters in `characters` and numbers in `numbers`,False,False,108,">>> list(string.ascii_lowercase)
['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']"
4713,pair characters in `characters` and numbers in `numbers`,False,False,145,">>> list(map(chr, range(97, 123))) #or list(map(chr, range(ord('a'), ord('z')+1)))
['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']"
4714,pair characters in `characters` and numbers in `numbers`,False,False,102,">>> help(string) # on Python 3
....
DATA
    ascii_letters = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'
    ascii_lowercase = 'abcdefghijklmnopqrstuvwxyz'
    ascii_uppercase = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'
    digits = '0123456789'
    hexdigits = '0123456789abcdefABCDEF'
    octdigits = '01234567'
    printable = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!""#$%&\'()*+,-./:;<=>?@[\\]^_`{|}~ \t\n\r\x0b\x0c'
    punctuation = '!""#$%&\'()*+,-./:;<=>?@[\\]^_`{|}~'
    whitespace = ' \t\n\r\x0b\x0c'"
4715,pair characters in `characters` and numbers in `numbers`,False,False,20,">>> import re
>>> re.sub('\D', '', 'aas30dsa20')
'3020'"
4716,pair characters in `characters` and numbers in `numbers`,False,False,12,">>> filter(str.isdigit, 'aas30dsa20')
'3020'"
4717,pair characters in `characters` and numbers in `numbers`,False,False,16,">>> ''.join(filter(str.isdigit, 'aas30dsa20'))
'3020'"
4718,delete a column in csv,False,True,10,"pd.concat([row, row], axis=1)"
4719,delete a column in csv,True,True,9,"df.drop('value', axis=1, inplace=True)"
4720,delete a column in csv,False,True,10,"pd.concat([row, row], axis=0)"
4721,delete a column in csv,False,True,22,"df = pd.read_csv('my.csv', header=['farm', 'fruit'], na_values=['float64'])"
4722,delete a column in csv,False,True,12,"df.drop('<unk>', axis=1, inplace=True)"
4723,delete a column in csv,False,True,13,"df = pd.read_csv('my.csv', header=['names'])"
4724,delete a column in csv,False,True,6,"np.delete(df, axis=1)"
4725,delete a column in csv,False,False,9,"df = df.drop('column_name', 1)"
4726,delete a column in csv,False,False,9,"df.drop('column_name', axis=1, inplace=True)"
4727,delete a column in csv,False,False,22,"df = df.drop(df.columns[[0, 1, 3]], axis=1)  # df.columns is zero-based pd.Index"
4728,delete a column in csv,False,False,14,"df.drop(['column_nameA', 'column_nameB'], axis=1, inplace=True)"
4729,delete a column in csv,False,False,6,del df['column_name']
4730,delete a column in csv,False,False,19,"columns = ['Col1', 'Col2', ...]
df.drop(columns, inplace=True, axis=1)"
4731,delete a column in csv,False,False,8,"df = df.drop(columns, axis=1)"
4732,headers in a dataframe,False,True,9,df.set_index('Date').unstack(axis=1)
4733,headers in a dataframe,False,True,17,"pd.DataFrame(df['headers'].str.read(), headers={'headers'})"
4734,headers in a dataframe,False,True,9,df.set_index('Date').unstack(level=0)
4735,headers in a dataframe,False,True,13,"pd.DataFrame(df.values.tolist(), columns='<unk>')"
4736,headers in a dataframe,False,True,22,"pd.DataFrame(df['headers'].str.split('-'), keys=['headers', 'headers'])"
4737,headers in a dataframe,False,True,22,"pd.DataFrame(df['headers'].str.split('- '), keys=['headers', 'read'])"
4738,headers in a dataframe,False,True,8,df.set_index('Date').head()
4739,headers in a dataframe,True,False,4,list(my_dataframe.columns.values)
4740,headers in a dataframe,False,False,4,list(my_dataframe)
4741,headers in a dataframe,False,False,3,my_dataframe.columns.values.tolist()
4742,headers in a dataframe,False,False,3,my_dataframe.columns.tolist()
4743,headers in a dataframe,False,False,54,"%timeit df.columns.tolist()
16.7 µs ± 317 ns per loop (mean ± std. dev. of 7 runs, 100000 loops each)

%timeit df.columns.values.tolist()
1.24 µs ± 12.3 ns per loop (mean ± std. dev. of 7 runs, 1000000 loops each)"
4744,headers in a dataframe,False,False,4,list(df)
4745,headers in a dataframe,False,False,30,"Cov = pd.read_csv(""path/to/file.txt"", 
                  sep='\t', 
                  names=[""Sequence"", ""Start"", ""End"", ""Coverage""])"
4746,save dataframe to csv,True,True,9,"pd.merge(csv, csv, sep='\t')"
4747,save dataframe to csv,False,True,4,df.index.merge(*df)
4748,save dataframe to csv,False,True,5,df.values.to_csv('utf-8-sig')
4749,save dataframe to csv,False,True,5,df.index.to_csv('utf-8-sig')
4750,save dataframe to csv,False,True,7,"pd.DataFrame(df.values, columns='*')"
4751,save dataframe to csv,False,True,11,"df.index.apply(lambda x: x.tolist(), axis=1)"
4752,save dataframe to csv,False,True,12,"df.index.apply(lambda x: np.cos(x), axis=1)"
4753,save dataframe to csv,False,False,7,"df.to_csv(file_name, sep='\t')"
4754,save dataframe to csv,False,False,10,"df.to_csv(file_name, sep='\t', encoding='utf-8')"
4755,save dataframe to csv,False,False,9,"df.to_csv(file_name, encoding='utf-8', index=False)"
4756,save dataframe to csv,False,False,8,"Color  Number
0   red     22
1  blue     10"
4757,save dataframe to csv,False,False,5,"Color,Number
red,22
blue,10"
4758,save dataframe to csv,False,False,10,",Color,Number
0,red,22
1,blue,10"
4759,save dataframe to csv,False,False,8,df.toPandas().to_csv('mycsv.csv')
4760,copy files and directories under `data` directory,False,True,7,os.chdir(os.path.dirname(data))
4761,copy files and directories under `data` directory,False,True,5,os.listdir('data')
4762,copy files and directories under `data` directory,False,True,5,os.system('copy')
4763,copy files and directories under `data` directory,False,True,4,os.removedirs(data)
4764,copy files and directories under `data` directory,False,True,4,files.append(filenames)
4765,copy files and directories under `data` directory,False,True,7,"os.rsplit('my_file', 1)"
4766,copy files and directories under `data` directory,False,True,4,os.split(data)
4767,copy files and directories under `data` directory,False,False,10,"from shutil import copyfile
copyfile(src, dst)"
4768,copy files and directories under `data` directory,True,False,57,"┌──────────────────┬────────┬───────────┬───────┬────────────────┐
│     Function     │ Copies │   Copies  │Can use│   Destination  │
│                  │metadata│permissions│buffer │may be directory│
├──────────────────┼────────┼───────────┼───────┼────────────────┤
│shutil.copy       │   No   │    Yes    │   No  │      Yes       │
│shutil.copyfile   │   No   │     No    │   No  │       No       │
│shutil.copy2      │  Yes   │    Yes    │   No  │      Yes       │
│shutil.copyfileobj│   No   │     No    │  Yes  │       No       │
└──────────────────┴────────┴───────────┴───────┴────────────────┘"
4769,copy files and directories under `data` directory,False,False,28,"import shutil
shutil.copy2('/src/dir/file.ext', '/dst/dir/newname.ext') # complete target filename given
shutil.copy2('/src/file.ext', '/dst/dir') # target filename is /dst/dir/file.ext"
4770,copy files and directories under `data` directory,False,False,14,"from distutils.dir_util import copy_tree
copy_tree(""/a/b/c"", ""/x/y/z"")"
4771,copy files and directories under `data` directory,False,False,64,"import os, shutil
def copytree(src, dst, symlinks=False, ignore=None):
    for item in os.listdir(src):
        s = os.path.join(src, item)
        d = os.path.join(dst, item)
        if os.path.isdir(s):
            shutil.copytree(s, d, symlinks, ignore)
        else:
            shutil.copy2(s, d)"
4772,copy files and directories under `data` directory,False,False,24,"from distutils.dir_util import copy_tree

# copy subdirectory example
fromDirectory = ""/a/b/c""
toDirectory = ""/x/y/z""

copy_tree(fromDirectory, toDirectory)"
4773,copy files and directories under `data` directory,False,False,43,"import shutil, errno

def copyanything(src, dst):
    try:
        shutil.copytree(src, dst)
    except OSError as exc: # python >2.5
        if exc.errno == errno.ENOTDIR:
            shutil.copy(src, dst)
        else: raise"
4774,reformat date,True,True,14,datetime.datetime.now().strftime('%Y-%m-%d')
4775,reformat date,False,True,8,"datetime.datetime.combine(datetime.date.today(), date)"
4776,reformat date,False,True,10,"datetime.datetime.combine(datetime.date.today(), datetime.date.today())"
4777,reformat date,False,True,10,"datetime.datetime.combine(datetime.date.today(), '.')"
4778,reformat date,False,True,17,"datetime.datetime.combine(datetime.date.today(), '%H:%M:%S')"
4779,reformat date,False,True,6,datetime.datetime.now().isoformat()
4780,reformat date,False,True,10,"datetime.datetime.combine(datetime.date.today(), datetime.datetime.now())"
4781,reformat date,False,False,10,"for date in mylist :
    print str(date)"
4782,reformat date,False,False,128,"import datetime
mylist = []
today = datetime.date.today()
mylist.append(today)
print mylist[0] # print the date object, not the container ;-)
2008-11-22

# It's better to always use str() because :

print ""This is a new day : "", mylist[0] # will work
>>> This is a new day : 2008-11-22

print ""This is a new day : "" + mylist[0] # will crash
>>> cannot concatenate 'str' and 'datetime.date' objects

print ""This is a new day : "" + str(mylist[0]) 
>>> This is a new day : 2008-11-22"
4783,reformat date,False,False,26,"print today.strftime('We are the %d, %b %Y')
>>> 'We are the 22, Nov 2008'"
4784,reformat date,False,False,31,"print ""We are the {:%d, %b %Y}"".format(today)
>>> 'We are the 22, Nov 2008'"
4785,reformat date,False,False,22,"import datetime
f""{datetime.datetime.now():%Y-%m-%d}""
>>> '2017-06-15'"
4786,reformat date,False,False,22,"import datetime
print datetime.datetime.now().strftime(""%Y-%m-%d %H:%M"")"
4787,reformat date,False,False,19,"import time
print time.strftime(""%Y-%m-%d %H:%M"")"
4788,"create list ""a_list""",True,True,5,a = [a_list]
4789,"create list ""a_list""",False,True,5,a_list = [a_list]
4790,"create list ""a_list""",False,True,18,"my_list = ['a_list', 'a', 'b', 'c']"
4791,"create list ""a_list""",False,True,14,"my_list = ['a_list', 'a', 'b']"
4792,"create list ""a_list""",False,True,6,print([a_list])
4793,"create list ""a_list""",False,True,17,"my_list = ['a_list', 'a', 'a', 's']"
4794,"create list ""a_list""",False,True,23,"a_list = ['a_list', 'a', 'a', 's', 'd', 's']"
4795,"create list ""a_list""",False,False,35,">>> l = [None] * 10
>>> l
[None, None, None, None, None, None, None, None, None, None]"
4796,"create list ""a_list""",False,False,34,">>> l[1] = 5
>>> l
[None, 5, None, None, None, None, None, None, None, None]"
4797,"create list ""a_list""",False,False,49,"# 2.X only. Use list(range(10)) in 3.X.
>>> l = range(10)
>>> l
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]"
4798,"create list ""a_list""",False,False,70,">>> def display():
...     s1 = []
...     for i in range(9): # This is just to tell you how to create a list.
...         s1.append(i)
...     return s1
... 
>>> print display()
[0, 1, 2, 3, 4, 5, 6, 7, 8]"
4799,"create list ""a_list""",False,False,47,">>> def display():
...     return [x**2 for x in range(9)]
... 
>>> print display()
[0, 1, 4, 9, 16, 25, 36, 49, 64]"
4800,"create list ""a_list""",False,False,5,[e] * n
4801,"create list ""a_list""",False,False,44,">>> timeit.timeit('itertools.repeat(0, 10)', 'import itertools', number = 1000000)
0.37095273281943264
>>> timeit.timeit('[0] * 10', 'import itertools', number = 1000000)
0.5577236771712819"
4802,create dictionary,True,True,26,"dict((k, list(v.values())[k]) for k in ('utf-8', '16'))"
4803,create dictionary,False,True,22,"dict((key, int(value)) for key, value in list(dict1.items()))"
4804,create dictionary,False,True,19,"dict((k, int(v)) for k, v in d.items())"
4805,create dictionary,False,True,14,"dict(map(int, list(data.items())))"
4806,create dictionary,False,True,14,"dict(map(int, list(d.items())))"
4807,create dictionary,False,True,27,"dict((k, list(v.values())[k]) for k in ('head', '6'))"
4808,create dictionary,False,True,22,"dict((key, int(value)) for key, value in list(dict.items()))"
4809,create dictionary,False,False,13,"{key: value for (key, value) in iterable}"
4810,create dictionary,False,False,15,"dict((key, func(key)) for key in keys)"
4811,create dictionary,False,False,34,"1) consumed from any iterable yielding pairs of keys/vals
dict(pairs)

2) ""zip'ped"" from two separate iterables of keys/vals
dict(zip(list_of_keys, list_of_values))"
4812,create dictionary,False,False,5,new_dict = dict()
4813,create dictionary,False,False,4,new_dict = {}
4814,create dictionary,False,False,12,"x = {}
x['a'] = 1"
4815,create dictionary,False,False,13,"d = {k:v for k, v in iterable}"
4816,generate random number,False,True,7,random.choice(range(10))
4817,generate random number,False,True,7,random.choice(range(9))
4818,generate random number,True,True,6,"random.randint(0, 9)"
4819,generate random number,True,True,6,"random.randint(0, 7)"
4820,generate random number,False,True,10,int(random.choice(range(100)))
4821,generate random number,False,True,7,random.choice(range(100))
4822,generate random number,False,True,7,random.choice(range(3))
4823,generate random number,False,False,11,"from random import randrange
print(randrange(10))"
4824,generate random number,False,False,9,"import random
print(random.randint(0,9))"
4825,generate random number,False,False,6,"random.randint(a, b)"
4826,generate random number,False,False,26,">>> import random
>>> random.sample(range(1, 100), 3)
[77, 52, 45]"
4827,generate random number,False,False,38,">>> try:
...   random.sample(range(1, 2), 3)
... except ValueError:
...   print('Sample size exceeded population size.')
... 
Sample size exceeded population size"
4828,generate random number,False,False,8,"import random
random.uniform(0, 1)"
4829,generate random number,False,False,17,"from random import randint
randint(100, 999)  # randint is inclusive at both ends"
4830,generate random number,False,True,7,random.choice(range(10))
4831,generate random number,False,True,7,random.choice(range(9))
4832,generate random number,True,True,6,"random.randint(0, 9)"
4833,generate random number,True,True,6,"random.randint(0, 7)"
4834,generate random number,False,True,10,int(random.choice(range(100)))
4835,generate random number,False,True,7,random.choice(range(100))
4836,generate random number,False,True,7,random.choice(range(3))
4837,generate random number,False,False,11,"from random import randrange
print(randrange(10))"
4838,generate random number,False,False,9,"import random
print(random.randint(0,9))"
4839,generate random number,False,False,6,"random.randint(a, b)"
4840,generate random number,False,False,26,">>> import random
>>> random.sample(range(1, 100), 3)
[77, 52, 45]"
4841,generate random number,False,False,38,">>> try:
...   random.sample(range(1, 2), 3)
... except ValueError:
...   print('Sample size exceeded population size.')
... 
Sample size exceeded population size"
4842,generate random number,False,False,8,"import random
random.uniform(0, 1)"
4843,generate random number,False,False,17,"from random import randint
randint(100, 999)  # randint is inclusive at both ends"
4844,generate random,False,True,12,"print(random.choice(range(100), repeat=9))"
4845,generate random,False,True,12,"print(random.choice(range(9), repeat=9))"
4846,generate random,False,True,12,"print(random.choice(range(10), repeat=9))"
4847,generate random,False,True,9,"print(random.choice(random, onerror=None))"
4848,generate random,False,True,12,"print(random.choice(range(100), onerror=10))"
4849,generate random,False,True,7,print(random.choice(random))
4850,generate random,False,True,9,"print(random.randint(0, 9))"
4851,generate random,False,False,7,bool(random.getrandbits(1))
4852,generate random,False,False,178,"$ python -m timeit -s ""import random"" ""random.choice([True, False])""
1000000 loops, best of 3: 0.904 usec per loop
$ python -m timeit -s ""import random"" ""random.choice((True, False))"" 
1000000 loops, best of 3: 0.846 usec per loop
$ python -m timeit -s ""import random"" ""random.getrandbits(1)""
1000000 loops, best of 3: 0.286 usec per loop
$ python -m timeit -s ""import random"" ""bool(random.getrandbits(1))""
1000000 loops, best of 3: 0.441 usec per loop
$ python -m timeit -s ""import random"" ""not random.getrandbits(1)""
1000000 loops, best of 3: 0.308 usec per loop
$ python -m timeit -s ""from random import getrandbits"" ""not getrandbits(1)""
1000000 loops, best of 3: 0.262 usec per loop  # not takes about 20us of this"
4853,generate random,False,False,29,"$ python -m timeit -s ""from random import random"" ""random() < 0.5""
10000000 loops, best of 3: 0.115 usec per loop"
4854,generate random,True,False,25,">>> import string
>>> string.ascii_letters
'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'
>>> import random
>>> random.choice(string.ascii_letters)
'j'"
4855,generate random,False,False,8,"import random
random.uniform(0, 1)"
4856,generate random,False,False,8,"random.choice([True, False])"
4857,generate random,False,False,20,">>> import random
>>> import string
>>> random.choice(string.ascii_letters)
'g'"
4858,sort list,False,True,12,"sorted(list, key=lambda x: x[1])"
4859,sort list,False,True,14,"sorted(list, key=lambda x: sorted(x), reverse=True)"
4860,sort list,False,True,12,"sorted(var_1, key=lambda x: x[1])"
4861,sort list,False,True,6,"sorted(list, key=sorted)"
4862,sort list,False,True,6,"sorted(list, **var_2)"
4863,sort list,False,True,6,"sorted(l, **l)"
4864,sort list,False,True,6,"sorted(list, **list)"
4865,sort list,False,False,15,"newlist = sorted(list_to_be_sorted, key=lambda k: k['name'])"
4866,sort list,False,False,16,"from operator import itemgetter
newlist = sorted(list_to_be_sorted, key=itemgetter('name'))"
4867,sort list,False,False,14,"newlist = sorted(l, key=itemgetter('name'), reverse=True)"
4868,sort list,False,False,45,"# To sort the list in place...
ut.sort(key=lambda x: x.count, reverse=True)

# To return a new list, use the sorted() built-in function...
newlist = sorted(ut, key=lambda x: x.count, reverse=True)"
4869,sort list,False,False,23,"s = sorted(s, key = lambda x: (x[1], x[2]))"
4870,sort list,False,False,17,"import operator
s = sorted(s, key = operator.itemgetter(1, 2))"
4871,sort list,True,False,11,"s.sort(key = operator.itemgetter(1, 2))"
4872,"copy column from ""data.csv"" file to another ""output.csv""",False,True,18,"output.csv['data.csv'] = pd.to_datetime(data.csv['data.csv'], format=
    'output.csv')"
4873,"copy column from ""data.csv"" file to another ""output.csv""",False,True,18,"output.csv['data.csv'] = pd.read_csv('data.csv', sep=' ', var_name='data.csv')"
4874,"copy column from ""data.csv"" file to another ""output.csv""",True,True,10,output.csv['data.csv'] = pd.data.csv(data.csv)
4875,"copy column from ""data.csv"" file to another ""output.csv""",False,True,19,"output.csv['data.csv'] = pd.read_csv('data.csv', sep=' ', value_name=
    'output.csv')"
4876,"copy column from ""data.csv"" file to another ""output.csv""",False,True,15,"output.csv['data.csv'] = pd.read_csv('data.csv', sep=' ')"
4877,"copy column from ""data.csv"" file to another ""output.csv""",False,True,14,output.csv['data.csv'] = pd.to_datetime(data.csv['data.csv'])
4878,"copy column from ""data.csv"" file to another ""output.csv""",False,True,10,"pandas.concat([data.csv, output.csv], axis=1)"
4879,"copy column from ""data.csv"" file to another ""output.csv""",False,False,41,"import csv
from itertools import izip
a = izip(*csv.reader(open(""input.csv"", ""rb"")))
csv.writer(open(""output.csv"", ""wb"")).writerows(a)"
4880,"copy column from ""data.csv"" file to another ""output.csv""",False,False,59,"a = [(1, 2, 3),
     (4, 5, 6),
     (7, 8, 9)]
zip(*a)
# [(1, 4, 7),
#  (2, 5, 8),
#  (3, 6, 9)]"
4881,"copy column from ""data.csv"" file to another ""output.csv""",False,False,20,"import pandas as pd
pd.read_csv('input.csv', header=None).T.to_csv('output.csv', header=False, index=False)"
4882,"copy column from ""data.csv"" file to another ""output.csv""",False,False,57,"import csv
reader = csv.reader(open('output.csv', 'rb'))
reader1 = csv.reader(open('output1.csv', 'rb'))
writer = csv.writer(open('appended_output.csv', 'wb'))
for row in reader:
    row1 = reader1.next()
    writer.writerow(row + row1)"
4883,"copy column from ""data.csv"" file to another ""output.csv""",False,False,46,"import os, sys
target = '/path/to/target'
src1 = '/path/to/source1.csv'
src2 = '/path/to/source2.csv'
tf = open(target, 'a')
tf.write(open(src1).read())
tf.write(open(src2).read())
tf.close()"
4884,"copy column from ""data.csv"" file to another ""output.csv""",False,False,62,"import csv

date_reader = csv.reader(open('Date.csv', 'rb'))
price_reader = csv.reader(open('Price.csv', 'rb'))
writer = csv.writer(open('NewData.csv', 'wb'))
for date_row in date_reader:
    price_row = price_reader.next()
    writer.writerow(date_row + [price_row[1]])"
4885,"copy column from ""data.csv"" file to another ""output.csv""",False,False,41,"ID, Date, Price
0,""Jan 22, 2016"",27.89
1,""Jan 21, 2016"",26.80
2,""Jan 20, 2016"",26.78
3,""Jan 19, 2016"",26.00"
4886,"copy column from ""data.csv"" to ""output.csv""",False,True,8,"df.replace('data.csv', 'output.csv')"
4887,"copy column from ""data.csv"" to ""output.csv""",False,True,8,"pandas.set_option('data.csv', 'output.csv')"
4888,"copy column from ""data.csv"" to ""output.csv""",False,True,8,"np.concatenate((data.csv, output.csv))"
4889,"copy column from ""data.csv"" to ""output.csv""",False,True,4,df.to_pickle(output.csv)
4890,"copy column from ""data.csv"" to ""output.csv""",False,True,3,df.copy()
4891,"copy column from ""data.csv"" to ""output.csv""",False,True,6,df.join([data.csv])
4892,"copy column from ""data.csv"" to ""output.csv""",False,True,4,df.append(output.csv)
4893,"copy column from ""data.csv"" to ""output.csv""",False,False,41,"import csv
from itertools import izip
a = izip(*csv.reader(open(""input.csv"", ""rb"")))
csv.writer(open(""output.csv"", ""wb"")).writerows(a)"
4894,"copy column from ""data.csv"" to ""output.csv""",False,False,59,"a = [(1, 2, 3),
     (4, 5, 6),
     (7, 8, 9)]
zip(*a)
# [(1, 4, 7),
#  (2, 5, 8),
#  (3, 6, 9)]"
4895,"copy column from ""data.csv"" to ""output.csv""",False,False,20,"import pandas as pd
pd.read_csv('input.csv', header=None).T.to_csv('output.csv', header=False, index=False)"
4896,"copy column from ""data.csv"" to ""output.csv""",True,False,57,"import csv
reader = csv.reader(open('output.csv', 'rb'))
reader1 = csv.reader(open('output1.csv', 'rb'))
writer = csv.writer(open('appended_output.csv', 'wb'))
for row in reader:
    row1 = reader1.next()
    writer.writerow(row + row1)"
4897,"copy column from ""data.csv"" to ""output.csv""",False,False,46,"import os, sys
target = '/path/to/target'
src1 = '/path/to/source1.csv'
src2 = '/path/to/source2.csv'
tf = open(target, 'a')
tf.write(open(src1).read())
tf.write(open(src2).read())
tf.close()"
4898,"copy column from ""data.csv"" to ""output.csv""",False,False,122,"import csv
import datetime as dt
import os

File = 'C:/Users/Alan Cedeno/Desktop/Test_Folder/HiSAM1_data_160215_164858.csv'
root, ext = os.path.splitext(File)
output = root + '-new.csv'
with open(File,'r') as csvinput,open(output, 'w') as csvoutput:

    writer = csv.writer(csvoutput, lineterminator='\n')
    reader = csv.reader(csvinput)

    rows = [next(reader)]
    for line in reader:
        line[0] = str(dt.datetime.strptime(line[0],'%m/%d/%Y %H:%M:%S').time())
        rows.append(line)

    writer.writerows(rows)"
4899,"copy column from ""data.csv"" to ""output.csv""",False,False,51,"from csv import reader, writer 
with open('source.csv') as f, open('destination.csv', 'w') as fw: 
    writer(fw, delimiter=',').writerows(zip(*reader(f, delimiter=',')))"
4900,create 'output.csv' csv file,False,True,14,"df = pd.read_csv('output.csv', sep=',', header=None)"
4901,create 'output.csv' csv file,False,True,15,"os.rename('output.csv', 'output.csv', delimiter=',', skiprows=1)"
4902,create 'output.csv' csv file,False,True,17,"os.rename('output.csv', 'output.csv', keys=['output.csv', 'output.csv'])"
4903,create 'output.csv' csv file,False,True,15,"os.rename('output.csv', 'output.csv', delimiter=',', header=None)"
4904,create 'output.csv' csv file,False,True,10,"os.rename('output.csv', 'output.csv', header=False)"
4905,create 'output.csv' csv file,False,True,10,"os.rename('output.csv', 'output.csv', **f)"
4906,create 'output.csv' csv file,False,True,15,"os.rename('output.csv', 'output.csv', delimiter=',', **False)"
4907,create 'output.csv' csv file,False,False,7,"df.to_csv(file_name, sep='\t')"
4908,create 'output.csv' csv file,False,False,10,"df.to_csv(file_name, sep='\t', encoding='utf-8')"
4909,create 'output.csv' csv file,False,False,9,"df.to_csv(file_name, encoding='utf-8', index=False)"
4910,create 'output.csv' csv file,False,False,8,"Color  Number
0   red     22
1  blue     10"
4911,create 'output.csv' csv file,False,False,5,"Color,Number
red,22
blue,10"
4912,create 'output.csv' csv file,False,False,10,",Color,Number
0,red,22
1,blue,10"
4913,create 'output.csv' csv file,True,False,25,"import csv

with open(..., 'wb') as myfile:
    wr = csv.writer(myfile, quoting=csv.QUOTE_ALL)
    wr.writerow(mylist)"
4914,write to csv file,True,True,4,writer.writerow(write)
4915,write to csv file,False,True,4,writer.writerow(csv)
4916,write to csv file,True,True,4,writer.writerow(file)
4917,write to csv file,False,True,7,"pd.read_csv('write', shell=True)"
4918,write to csv file,False,True,7,"pd.read_csv('file', shell=True)"
4919,write to csv file,False,True,4,writer.writerow(para)
4920,write to csv file,False,True,4,writer.writerow(extra)
4921,write to csv file,False,False,7,"df.to_csv(file_name, sep='\t')"
4922,write to csv file,False,False,10,"df.to_csv(file_name, sep='\t', encoding='utf-8')"
4923,write to csv file,False,False,9,"df.to_csv(file_name, encoding='utf-8', index=False)"
4924,write to csv file,False,False,8,"Color  Number
0   red     22
1  blue     10"
4925,write to csv file,False,False,5,"Color,Number
red,22
blue,10"
4926,write to csv file,False,False,10,",Color,Number
0,red,22
1,blue,10"
4927,write to csv file,False,False,36,"##text=List of strings to be written to file
with open('csvfile.csv','wb') as file:
    for line in text:
        file.write(line)
        file.write('\n')"
4928,new line,True,True,5,mmap.write('\n')
4929,new line,False,True,5,mmap.write('line')
4930,new line,False,True,10,"subprocess.call('<unk>', shell=True)"
4931,new line,False,True,10,"subprocess.call('My <unk>', shell=True)"
4932,new line,False,True,13,"subprocess.call('My <unk> <unk>', shell=True)"
4933,new line,False,True,10,"subprocess.check_output('<unk>', shell=True)"
4934,new line,False,True,11,"subprocess.call('HTTP/1.0 200 <unk>', shell=True)"
4935,new line,False,False,10,">>> 'test string\n'.rstrip()
'test string'"
4936,new line,False,False,13,">>> 'test string \n \r\n\n\r \n\n'.rstrip()
'test string'"
4937,new line,False,False,17,">>> 'test string \n \r\n\n\r \n\n'.rstrip('\n')
'test string \n \r\n\n\r '"
4938,new line,False,False,44,">>> s = ""   \n\r\n  \n  abc   def \n\r\n  \n  ""
>>> s.strip()
'abc   def'
>>> s.lstrip()
'abc   def \n\r\n  \n  '
>>> s.rstrip()
'   \n\r\n  \n  abc   def'"
4939,new line,False,False,18,"a = dostuff(blahblah1, blahblah2, blahblah3, blahblah4, blahblah5, 
            blahblah6, blahblah7)"
4940,new line,False,False,9,"if a == True and \
   b == False"
4941,new line,False,False,22,"a = '1' + '2' + '3' + \
    '4' + '5'"
4942,delete column from csv file,False,True,14,"df = pd.read_csv('file', sep=',', header=None)"
4943,delete column from csv file,False,True,17,"df.index = pd.read_csv('<unk>', sep=',', header=None)"
4944,delete column from csv file,False,True,14,"df = pd.read_csv('myfile.txt', sep=',', header=None)"
4945,delete column from csv file,False,True,15,"df.index = pd.read_csv('<unk>', sep=',')"
4946,delete column from csv file,False,True,8,"df.index = np.delete(file, axis=1)"
4947,delete column from csv file,False,True,8,"df.index = np.delete(line, axis=1)"
4948,delete column from csv file,False,True,14,"df = pd.read_csv('datafile', sep=',', header=None)"
4949,delete column from csv file,False,False,69,"import csv
with open(""source"",""rb"") as source:
    rdr= csv.reader( source )
    with open(""result"",""wb"") as result:
        wtr= csv.writer( result )
        for r in rdr:
            wtr.writerow( (r[0], r[1], r[3], r[4]) )"
4950,delete column from csv file,False,False,32,"in_iter= ( (r[0], r[1], r[3], r[4]) for r in rdr )
        wtr.writerows( in_iter )"
4951,delete column from csv file,True,False,9,"del r[2]
            wtr.writerow( r )"
4952,delete column from csv file,False,False,39,"import pandas as pd
f=pd.read_csv(""test.csv"")
keep_col = ['day','month','lat','long']
new_f = f[keep_col]
new_f.to_csv(""newFile.csv"", index=False)"
4953,delete column from csv file,False,False,72,">>>f=pd.read_csv(""test.csv"")
>>> f
   day  month  year  lat  long
0    1      4  2001   45   120
1    2      4  2003   44   118
>>> keep_col = ['day','month','lat','long'] 
>>> f[keep_col]
    day  month  lat  long
0    1      4   45   120
1    2      4   44   118
>>>"
4954,delete column from csv file,False,False,46,"import csv

with open(filename,""r"") as fin:
    with open(outname,""w"") as fout:
        writer=csv.writer(fout)
        for row in csv.reader(fin):
            writer.writerow(row[:-1])"
4955,delete column from csv file,False,False,3,"1,2,3,4,5
1,2,3,4,5
1,2,3,4,5"
4956,read csv file using pandas,True,True,15,"pd.read_csv('<unk>', sep=',', header=None)"
4957,read csv file using pandas,False,True,13,"pd.read_csv('<unk>', sep='', header=None)"
4958,read csv file using pandas,False,True,13,"pd.read_csv('<unk>', sep='\t', header=None)"
4959,read csv file using pandas,False,True,13,"pd.read_csv('my.csv', sep=',', lineterminator='\r')"
4960,read csv file using pandas,False,True,14,"pd.read_csv('<unk>', sep='', lineterminator='\r')"
4961,read csv file using pandas,False,True,16,"pd.read_csv('<unk>', sep=',', lineterminator='\r')"
4962,read csv file using pandas,False,True,14,"pd.read_csv('<unk>', sep='\t', lineterminator='\r')"
4963,read csv file using pandas,False,False,49,"import pandas as pd
print pd.read_csv('value.txt')

        Date    price  factor_1  factor_2
0  2012-06-11  1600.20     1.255     1.548
1  2012-06-12  1610.02     1.258     1.554
2  2012-06-13  1618.07     1.249     1.552
3  2012-06-14  1624.40     1.253     1.556
4  2012-06-15  1626.15     1.258     1.552
5  2012-06-16  1626.15     1.263     1.558
6  2012-06-17  1626.15     1.264     1.572"
4964,read csv file using pandas,False,False,14,"import pandas as pd
df = pd.read_csv('file_name.csv', engine='python')"
4965,read csv file using pandas,False,False,14,"import pandas as pd
data = pd.read_csv('file_name.csv', encoding='utf-8')"
4966,read csv file using pandas,False,False,10,"encoding = ""cp1252""
encoding = ""ISO-8859-1"""
4967,read csv file using pandas,False,False,106,"import os
import boto3
import pandas as pd
import sys

if sys.version_info[0] < 3: 
    from StringIO import StringIO # Python 2.x
else:
    from io import StringIO # Python 3.x

# get your credentials from environment variables
aws_id = os.environ['AWS_ID']
aws_secret = os.environ['AWS_SECRET']

client = boto3.client('s3', aws_access_key_id=aws_id,
        aws_secret_access_key=aws_secret)

bucket_name = 'my_bucket'

object_key = 'my_file.csv'
csv_obj = client.get_object(Bucket=bucket_name, Key=object_key)
body = csv_obj['Body']
csv_string = body.read().decode('utf-8')

df = pd.read_csv(StringIO(csv_string))"
4968,read csv file using pandas,False,False,80,"import pandas as pd
import boto3

bucket = ""yourbucket""
file_name = ""your_file.csv""

s3 = boto3.client('s3') 
# 's3' is a key word. create connection to S3 using default config and all buckets within S3

obj = s3.get_object(Bucket= bucket, Key= file_name) 
# get object and file (key) from bucket

initial_df = pd.read_csv(obj['Body']) # 'Body' is a key word"
4969,read csv file using pandas,False,False,27,"file_encoding = 'cp1252'        # set file_encoding to the file encoding (utf8, latin1, etc.)
pd.read_csv(input_file_and_path, ..., encoding=file_encoding)"
4970,delete column from csv,False,True,9,"df = pd.read_csv('my.csv', header=None)"
4971,delete column from csv,False,True,16,"df = pd.read_csv('my.csv', header=['row', 'row'])"
4972,delete column from csv,False,True,8,"df.index = np.delete(df, axis=1)"
4973,delete column from csv,False,True,12,"df = pd.read_csv('<unk>', header=None)"
4974,delete column from csv,False,True,13,"df = pd.read_csv('my.csv', na_values=['row'])"
4975,delete column from csv,False,True,14,"line = re.sub('<unk>', '', line)"
4976,delete column from csv,False,True,13,"df = pd.read_csv('my.csv', columns=['row'])"
4977,delete column from csv,True,False,9,"df = df.drop('column_name', 1)"
4978,delete column from csv,False,False,9,"df.drop('column_name', axis=1, inplace=True)"
4979,delete column from csv,False,False,22,"df = df.drop(df.columns[[0, 1, 3]], axis=1)  # df.columns is zero-based pd.Index"
4980,delete column from csv,False,False,14,"df.drop(['column_nameA', 'column_nameB'], axis=1, inplace=True)"
4981,delete column from csv,False,False,6,del df['column_name']
4982,delete column from csv,False,False,19,"columns = ['Col1', 'Col2', ...]
df.drop(columns, inplace=True, axis=1)"
4983,delete column from csv,False,False,8,"df = df.drop(columns, axis=1)"
4984,get the files that inside the folders,False,True,3,os.getcwd()
4985,get the files that inside the folders,False,True,6,print(os.getcwd())
4986,get the files that inside the folders,False,True,8,print(glob.glob('__file__'))
4987,get the files that inside the folders,False,True,5,glob.glob('import_module')
4988,get the files that inside the folders,False,True,4,os.removedirs(__file__)
4989,get the files that inside the folders,False,True,5,glob.glob('__file__')
4990,get the files that inside the folders,False,True,7,os.path.dirname(os.path.abspath(__file__))
4991,get the files that inside the folders,False,False,32,"from os import listdir
from os.path import isfile, join
onlyfiles = [f for f in listdir(mypath) if isfile(join(mypath, f))]"
4992,get the files that inside the folders,True,False,27,"from os import walk

f = []
for (dirpath, dirnames, filenames) in walk(mypath):
    f.extend(filenames)
    break"
4993,get the files that inside the folders,False,False,11,"import glob
print(glob.glob(""/home/adam/*.txt""))"
4994,get the files that inside the folders,False,False,10,"['/home/adam/file1.txt', '/home/adam/file2.txt', .... ]"
4995,get the files that inside the folders,False,False,29,"import os
 arr = os.listdir()
 print(arr)

 >>> ['$RECYCLE.BIN', 'work.txt', '3ebooks.txt', 'documents']"
4996,get the files that inside the folders,False,False,20,"import glob

txtfiles = []
for file in glob.glob(""*.txt""):
    txtfiles.append(file)"
4997,get the files that inside the folders,False,False,16,"import glob

mylist = [f for f in glob.glob(""*.txt"")]"
4998,get all files and folders,False,True,4,os.removedirs(__file__)
4999,get all files and folders,False,True,4,os.removedirs(filename)
5000,get all files and folders,False,True,3,os.getcwd()
5001,get all files and folders,False,True,5,os.listdir('..')
5002,get all files and folders,False,True,4,os.removedirs(files)
5003,get all files and folders,False,True,5,glob.glob('*')
5004,get all files and folders,False,True,4,os.removedirs(file_name)
5005,get all files and folders,False,False,32,"from os import listdir
from os.path import isfile, join
onlyfiles = [f for f in listdir(mypath) if isfile(join(mypath, f))]"
5006,get all files and folders,False,False,27,"from os import walk

f = []
for (dirpath, dirnames, filenames) in walk(mypath):
    f.extend(filenames)
    break"
5007,get all files and folders,False,False,11,"import glob
print(glob.glob(""/home/adam/*.txt""))"
5008,get all files and folders,False,False,10,"['/home/adam/file1.txt', '/home/adam/file2.txt', .... ]"
5009,get all files and folders,True,False,29,"import os
 arr = os.listdir()
 print(arr)

 >>> ['$RECYCLE.BIN', 'work.txt', '3ebooks.txt', 'documents']"
5010,get all files and folders,False,False,20,"import glob

txtfiles = []
for file in glob.glob(""*.txt""):
    txtfiles.append(file)"
5011,get all files and folders,False,False,16,"import glob

mylist = [f for f in glob.glob(""*.txt"")]"
5012,check if string has specific pattern,True,True,14,"re.findall('\\[(.*?)\\]', s)"
5013,check if string has specific pattern,False,True,14,"re.findall('\\[(.*?)\\]', str1)"
5014,check if string has specific pattern,False,True,14,"re.findall('\\[(.*?)\\]', compile)"
5015,check if string has specific pattern,False,True,14,"re.findall('\\[(.*?)\\]', string)"
5016,check if string has specific pattern,False,True,11,"re.findall('#(\\w+)', string)"
5017,check if string has specific pattern,False,True,11,"re.findall('#(\\w+)', text)"
5018,check if string has specific pattern,False,True,7,"re.findall('\\S+', str1)"
5019,check if string has specific pattern,False,False,9,"if ""blah"" not in somestring: 
    continue"
5020,check if string has specific pattern,False,False,42,"s = ""This be a string""
if s.find(""is"") == -1:
    print(""No 'is' here!"")
else:
    print(""Found 'is' in the string."")"
5021,check if string has specific pattern,False,False,25,"import re
pattern = re.compile(""^([A-Z][0-9]+)+$"")
pattern.match(string)"
5022,check if string has specific pattern,False,False,8,"if word in mystring: 
   print 'success'"
5023,check if string has specific pattern,False,False,48,"'$' in s        # found
'$' not in s    # not found

# original answer given, but less Pythonic than the above...
s.find('$')==-1 # not found
s.find('$')!=-1 # found"
5024,check if string has specific pattern,False,False,27,"pattern = re.compile(r'\d\$,')
if pattern.findall(s):
    print('Found')
else
    print('Not found')"
5025,check if string has specific pattern,False,False,36,"chars = set('0123456789$,')
if any((c in chars) for c in s):
    print('Found')
else:
    print('Not Found')"
5026,regex dd-mm-yy,True,True,7,"re.findall('\\d+', regex)"
5027,regex dd-mm-yy,False,True,7,"re.findall('10000', regex)"
5028,regex dd-mm-yy,False,True,7,"re.findall('\n\\s*\n', regex)"
5029,regex dd-mm-yy,False,True,17,"re.findall('\\d+(?=[^[]+$)', regex)"
5030,regex dd-mm-yy,False,True,21,"re.findall('(([0-9]+)([A-Z]))', '10000')"
5031,regex dd-mm-yy,False,True,8,"re.findall('10000', 'dd-mm-yy')"
5032,regex dd-mm-yy,False,True,16,"re.findall('\\d+', '\n'.join(re.findall('\\S+', str1)))"
5033,regex dd-mm-yy,False,False,240,"^(?:(?:31(\/|-|\.)(?:0?[13578]|1[02]|(?:Jan|Mar|May|Jul|Aug|Oct|Dec)))\1|(?:(?:29|30)(\/|-|\.)(?:0?[1,3-9]|1[0-2]|(?:Jan|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec))\2))(?:(?:1[6-9]|[2-9]\d)?\d{2})$|^(?:29(\/|-|\.)(?:0?2|(?:Feb))\3(?:(?:(?:1[6-9]|[2-9]\d)?(?:0[48]|[2468][048]|[13579][26])|(?:(?:16|[2468][048]|[3579][26])00))))$|^(?:0?[1-9]|1\d|2[0-8])(\/|-|\.)(?:(?:0?[1-9]|(?:Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep))|(?:1[0-2]|(?:Oct|Nov|Dec)))\4(?:(?:1[6-9]|[2-9]\d)?\d{2})$"
5034,regex dd-mm-yy,False,False,107,"(^(((0[1-9]|1[0-9]|2[0-8])[\/](0[1-9]|1[012]))|((29|30|31)[\/](0[13578]|1[02]))|((29|30)[\/](0[4,6,9]|11)))[\/](19|[2-9][0-9])\d\d$)|(^29[\/]02[\/](19|[2-9][0-9])(00|04|08|12|16|20|24|28|32|36|40|44|48|52|56|60|64|68|72|76|80|84|88|92|96)$)"
5035,regex dd-mm-yy,False,False,31,"function validateDate(testdate) {
    var date_regex = /^\d{2}\/\d{2}\/\d{4}$/ ;
    return date_regex.test(testdate);
}"
5036,regex dd-mm-yy,False,False,49,"function validateDate(testdate) {
    var date_regex = /^(0[1-9]|1[0-2])\/(0[1-9]|1\d|2\d|3[01])\/(19|20)\d{2}$/ ;
    return date_regex.test(testdate);
}"
5037,regex dd-mm-yy,False,False,28,"import datetime
dd = datetime.datetime.strptime(date,'%y%m%d')
if dd.year > 2005:
   dd = dd.replace(year=dd.year-100)"
5038,regex dd-mm-yy,False,False,32,"import datetime

print datetime.datetime.strptime('2010-08-27', '%Y-%m-%d')
print datetime.datetime.strptime('2010-15-27', '%Y-%m-%d')"
5039,regex dd-mm-yy,False,False,71,"2010-08-27 00:00:00
Traceback (most recent call last):
  File ""./x.py"", line 6, in <module>
    print datetime.datetime.strptime('2010-15-27', '%Y-%m-%d')
  File ""/usr/lib/python2.7/_strptime.py"", line 325, in _strptime
    (data_string, format))
ValueError: time data '2010-15-27' does not match format '%Y-%m-%d'"
5040,regex for date,False,True,14,"re.findall('<unk>', '<unk>')"
5041,regex for date,False,True,10,"re.findall('<unk>', date)"
5042,regex for date,False,True,11,"re.findall('<unk>', 'en_US')"
5043,regex for date,False,True,11,"re.findall('<unk>', 'date')"
5044,regex for date,False,True,10,"re.findall('<unk>', text)"
5045,regex for date,False,True,10,"re.findall('<unk>', string)"
5046,regex for date,False,True,11,"re.findall('<unk>', 'time')"
5047,regex for date,False,False,42,"In [1]: import dateutil.parser as dparser

In [18]: dparser.parse(""monkey 2010-07-10 love banana"",fuzzy=True)
Out[18]: datetime.datetime(2010, 7, 10, 0, 0)"
5048,regex for date,False,False,26,"In [19]: dparser.parse(""monkey 2010-07-32 love banana"",fuzzy=True)
# ValueError: day is out of range for month"
5049,regex for date,False,False,33,"In [20]: dparser.parse(""monkey 20/01/1980 love banana"",fuzzy=True)
Out[20]: datetime.datetime(1980, 1, 20, 0, 0)"
5050,regex for date,False,False,33,"In [23]: dparser.parse(""monkey 10/01/1980 love banana"",fuzzy=True)
Out[23]: datetime.datetime(1980, 10, 1, 0, 0)"
5051,regex for date,False,False,35,"In [21]: dparser.parse(""monkey 10/01/1980 love banana"",fuzzy=True, dayfirst=True)
Out[21]: datetime.datetime(1980, 1, 10, 0, 0)"
5052,regex for date,True,False,46,"import re
from datetime import datetime

match = re.search(r'\d{4}-\d{2}-\d{2}', text)
date = datetime.strptime(match.group(), '%Y-%m-%d').date()"
5053,regex for date,False,False,74,"In [140]: datetime.datetime.strptime(""11/12/98"",""%m/%d/%y"")
Out[140]: datetime.datetime(1998, 11, 12, 0, 0)

In [141]: datetime.datetime.strptime(""11/12/98"",""%d/%m/%y"")
Out[141]: datetime.datetime(1998, 12, 11, 0, 0)"
5054,replace pattern in string,False,True,17,"re.sub('<unk>', '\\1.\\2', '<unk>')"
5055,replace pattern in string,False,True,13,"re.sub('<unk>', '\\1.\\2', string)"
5056,replace pattern in string,False,True,13,"re.sub('<unk>', '\\1.\\2', text)"
5057,replace pattern in string,False,True,20,"re.sub('<unk>', '\\1.\\2', '<unk> <unk>')"
5058,replace pattern in string,False,True,12,"re.sub('<unk>', '', text)"
5059,replace pattern in string,False,True,23,"re.sub('<unk>', '\\1.\\2', '<unk> <unk> <unk>')"
5060,replace pattern in string,False,True,13,"re.sub('<unk>', '\\1.\\2', str1)"
5061,replace pattern in string,True,False,22,"import re
line = re.sub(r""</?\[\d+>"", """", line)"
5062,replace pattern in string,False,False,65,"line = re.sub(r""""""
  (?x) # Use free-spacing mode.
  <    # Match a literal '<'
  /?   # Optionally match a '/'
  \[   # Match a literal '['
  \d+  # Match one or more digits
  >    # Match a literal '>'
  """""", """", line)"
5063,replace pattern in string,False,False,28,"import re

line = re.sub(
           r""(?i)^.*interfaceOpDataFile.*$"", 
           ""interfaceOpDataFile %s"" % fileIn, 
           line
       )"
5064,replace pattern in string,False,False,42,"import re

regex = re.compile(r""^.*interfaceOpDataFile.*$"", re.IGNORECASE)
for line in some_file:
    line = regex.sub(""interfaceOpDataFile %s"" % fileIn, line)
    # do something with the updated line"
5065,replace pattern in string,False,False,26,"import re
s = ""Example String""
replaced = re.sub('[ES]', 'a', s)
print replaced"
5066,replace pattern in string,False,False,104,"import re

rep = {""condition1"": """", ""condition2"": ""text""} # define desired replacements here

# use these three lines to do the replacement
rep = dict((re.escape(k), v) for k, v in rep.iteritems()) 
#Python 3 renamed dict.iteritems to dict.items so use rep.items() for latest versions
pattern = re.compile(""|"".join(rep.keys()))
text = pattern.sub(lambda m: rep[re.escape(m.group(0))], text)"
5067,replace pattern in string,False,False,37,">>> pattern.sub(lambda m: rep[re.escape(m.group(0))], ""(condition1) and --condition2--"")
'() and --text--'"
5068,datetime to string,False,True,8,parser.parse('<unk>')
5069,datetime to string,False,True,22,parser.parse('%(asctime)s;%(levelname)s;%(message)s')
5070,datetime to string,False,True,6,time.mktime(parser.timetuple())
5071,datetime to string,False,True,7,time.strftime('%s')
5072,datetime to string,False,True,28,""""""""""""".join(datetime.strptime('<unk>', '') for s in s.split(','))"
5073,datetime to string,False,True,14,"parser.parse('%a, %d %b %Y')"
5074,datetime to string,False,True,7,parser.strftime('%s')
5075,datetime to string,False,False,28,">>> datetime.datetime.now().strftime(""%Y-%m-%d %H:%M:%S"")
'2011-11-03 18:21:26'"
5076,datetime to string,True,False,27,"import datetime
t = datetime.datetime(2012, 2, 23, 0, 0)
t.strftime('%m/%d/%Y')"
5077,datetime to string,False,False,2,'02/23/2012'
5078,datetime to string,False,False,12,"my_datetime.strftime(""%B %d, %Y"")"
5079,datetime to string,False,False,27,"import datetime
start = datetime.datetime(2009,2,10,14,00)
end   = datetime.datetime(2009,2,10,16,00)
delta = end-start
print(str(delta))
# prints 2:00:00"
5080,datetime to string,False,False,57,"s = 13420
hours, remainder = divmod(s, 3600)
minutes, seconds = divmod(remainder, 60)
print '{:02}:{:02}:{:02}'.format(int(hours), int(minutes), int(seconds))
# result: 03:43:40"
5081,datetime to string,False,False,83,"# arbitrary number of seconds
s = 13420
# hours
hours = s // 3600 
# remaining seconds
s = s - (hours * 3600)
# minutes
minutes = s // 60
# remaining seconds
seconds = s - (minutes * 60)
# total time
print '{:02}:{:02}:{:02}'.format(int(hours), int(minutes), int(seconds))
# result: 03:43:40"
5082,copy files,False,True,13,"shutil.copy2(files, glob.glob('<unk>'))"
5083,copy files,False,True,7,"shutil.copy2(files, 'filenames')"
5084,copy files,False,True,8,"shutil.copy2(files, csv.my_file())"
5085,copy files,False,True,6,"shutil.copy2(files, filenames)"
5086,copy files,False,True,13,"shutil.copy2(files, itertools.glob('<unk>'))"
5087,copy files,False,True,9,"shutil.copy2(files, open(copy))"
5088,copy files,False,True,7,"shutil.copy2(filename, 'filenames')"
5089,copy files,False,False,10,"from shutil import copyfile
copyfile(src, dst)"
5090,copy files,False,False,57,"┌──────────────────┬────────┬───────────┬───────┬────────────────┐
│     Function     │ Copies │   Copies  │Can use│   Destination  │
│                  │metadata│permissions│buffer │may be directory│
├──────────────────┼────────┼───────────┼───────┼────────────────┤
│shutil.copy       │   No   │    Yes    │   No  │      Yes       │
│shutil.copyfile   │   No   │     No    │   No  │       No       │
│shutil.copy2      │  Yes   │    Yes    │   No  │      Yes       │
│shutil.copyfileobj│   No   │     No    │  Yes  │       No       │
└──────────────────┴────────┴───────────┴───────┴────────────────┘"
5091,copy files,True,False,28,"import shutil
shutil.copy2('/src/dir/file.ext', '/dst/dir/newname.ext') # complete target filename given
shutil.copy2('/src/file.ext', '/dst/dir') # target filename is /dst/dir/file.ext"
5092,copy files,False,False,10,"import shutil
shutil.copy('/etc/hostname', '/var/tmp/testhostname')"
5093,copy files,False,False,35,"import os
import shutil
src_files = os.listdir(src)
for file_name in src_files:
    full_file_name = os.path.join(src, file_name)
    if os.path.isfile(full_file_name):
        shutil.copy(full_file_name, dest)"
5094,copy files,False,False,6,"import os
import shutil
import subprocess"
5095,copy files,False,False,20,"shutil.copyfile(src_file, dest_file, *, follow_symlinks=True)

# example    
shutil.copyfile('source.txt', 'destination.txt')"
5096,create folder,False,True,7,os.path.dirname(os.path.abspath(existGDBPath))
5097,create folder,False,True,7,os.path.dirname(os.path.abspath(__file__))
5098,create folder,False,True,7,os.chdir(os.path.dirname(__file__))
5099,create folder,False,True,7,os.chdir(os.path.abspath(existGDBPath))
5100,create folder,False,True,7,os.chdir(os.path.abspath(__file__))
5101,create folder,False,True,7,os.path.dirname(os.path.realpath(__file__))
5102,create folder,False,True,4,os.walk(create)
5103,create folder,False,False,16,"from pathlib import Path
Path(""/my/directory"").mkdir(parents=True, exist_ok=True)"
5104,create folder,True,False,13,"import os
if not os.path.exists(directory):
    os.makedirs(directory)"
5105,create folder,False,False,22,"import os, errno

try:
    os.makedirs(directory)
except OSError as e:
    if e.errno != errno.EEXIST:
        raise"
5106,create folder,False,False,16,"try:
    os.makedirs(""path/to/directory"")
except FileExistsError:
    # directory already exists
    pass"
5107,create folder,False,False,15,"os.makedirs(""path/to/directory"", exist_ok=True)  # succeeds even if directory exists."
5108,create folder,False,False,13,"import pathlib
pathlib.Path('/my/directory').mkdir(parents=True, exist_ok=True)"
5109,create folder,False,False,8,"import os
os.makedirs(path, exist_ok=True)"
5110,create file,False,True,11,"os.rename(pid, os.path.join(dirname, subdirname))"
5111,create file,False,True,11,"os.rename(pid, os.path.join(dirname, __file__))"
5112,create file,False,True,17,"os.write(open('<unk>', 'rb').read())"
5113,create file,False,True,14,"os.write(open('file.txt', 'rb').read())"
5114,create file,False,True,11,"os.chmod('<unk>', 'rb')"
5115,create file,False,True,8,os.listdir('<unk>')
5116,create file,False,True,14,os.system('<unk> <unk> <unk>')
5117,create file,True,False,11,"file = open('myfile.dat', 'w+')"
5118,create file,False,False,11,"open(x, 'a').close()"
5119,create file,False,False,24,"import os
def touch(path):
    with open(path, 'a'):
        os.utime(path, None)"
5120,create file,False,False,17,"basedir = os.path.dirname(path)
if not os.path.exists(basedir):
    os.makedirs(basedir)"
5121,create file,False,False,5,"pip install pipreqs

pipreqs /path/to/project"
5122,create file,False,False,4,pip3 freeze > requirements.txt
5123,create file,False,False,20,"newpath = r'C:\Program Files\arbitrary' 
if not os.path.exists(newpath):
    os.makedirs(newpath)"
5124,rename file,False,True,6,"os.rename(var_1, filenames)"
5125,rename file,False,True,6,"os.rename(var_1, write)"
5126,rename file,False,True,9,"os.rename(var_1, filenames + 'filenames')"
5127,rename file,False,True,6,"os.rename(pid, filenames)"
5128,rename file,False,True,6,"os.rename(f, write)"
5129,rename file,False,True,6,"os.rename(filename, filenames)"
5130,rename file,False,True,6,"os.rename(dirnames, filenames)"
5131,rename file,False,False,52,"$ ls
cheese_cheese_type.bar  cheese_cheese_type.foo
$ python
>>> import os
>>> for filename in os.listdir("".""):
...  if filename.startswith(""cheese_""):
...    os.rename(filename, filename[7:])
... 
>>> 
$ ls
cheese_type.bar  cheese_type.foo"
5132,rename file,False,False,12,"import os

os.rename('a.txt', 'b.kml')"
5133,rename file,False,False,35,"import os
[os.rename(f, f.replace('_', '-')) for f in os.listdir('.') if not f.startswith('.')]"
5134,rename file,False,False,53,"import glob, os

def rename(dir, pattern, titlePattern):
    for pathAndFilename in glob.iglob(os.path.join(dir, pattern)):
        title, ext = os.path.splitext(os.path.basename(pathAndFilename))
        os.rename(pathAndFilename, 
                  os.path.join(dir, titlePattern % title + ext))"
5135,rename file,False,False,19,"rename(r'c:\temp\xx', r'*.doc', r'new(%s)')"
5136,rename file,True,False,32,"import os
old_file = os.path.join(""directory"", ""a.txt"")
new_file = os.path.join(""directory"", ""b.kml"")
os.rename(old_file, new_file)"
5137,rename file,False,False,49,"import os
path = '/Users/myName/Desktop/directory'
files = os.listdir(path)


for index, file in enumerate(files):
    os.rename(os.path.join(path, file), os.path.join(path, ''.join([str(index), '.jpg'])))"
5138,write to file,False,True,5,os.write('write')
5139,write to file,False,True,5,os.write('file')
5140,write to file,False,True,18,os.write('\n'.join(str(line) for line in open('write')))
5141,write to file,False,True,8,os.write('<unk>')
5142,write to file,False,True,18,os.write('\n'.join(str(line) for line in open('file')))
5143,write to file,False,True,25,"f.write('\n'.join(open('file', 'rb').read() for line in open('write')))"
5144,write to file,False,True,5,shutil.write('file')
5145,write to file,True,False,18,"with open('somefile.txt', 'a') as the_file:
    the_file.write('Hello\n')"
5146,write to file,False,False,19,"from __future__ import print_function  # Only needed for Python 2
print(""hi there"", file=f)"
5147,write to file,False,False,40,"f = open('myfile', 'w')
f.write('hi there\n')  # python will convert \n to os.linesep
f.close()  # you can omit in most cases as the destructor will call it"
5148,write to file,False,False,27,"with open('your_file.txt', 'w') as f:
    for item in my_list:
        f.write(""%s\n"" % item)"
5149,write to file,False,False,24,"with open('your_file.txt', 'w') as f:
    for item in my_list:
        print >> f, item"
5150,write to file,False,False,20,"import pickle

with open('outfile', 'wb') as fp:
    pickle.dump(itemlist, fp)"
5151,write to file,False,False,18,"with open ('outfile', 'rb') as fp:
    itemlist = pickle.load(fp)"
5152,read csv,True,True,9,"df = pd.read_csv('my.csv', header=None)"
5153,read csv,False,True,15,"pd.read_csv('<unk>', sep=',', header=None)"
5154,read csv,False,True,13,"np.genfromtxt('<unk>', delimiter=',')"
5155,read csv,False,True,17,"df = pd.read_csv('<unk>', quotechar=',', header=None)"
5156,read csv,False,True,21,"df = pd.read_csv('my.csv', na_values=['%H:%M:%S'])"
5157,read csv,False,True,13,"pd.read_csv('<unk>', sep='', header=None)"
5158,read csv,False,True,11,"pd.read_csv('my.csv', na_values=['utf-8'])"
5159,read csv,False,False,180,"import csv

# Define data
data = [
    (1, ""A towel,"", 1.0),
    (42, "" it says, "", 2.0),
    (1337, ""is about the most "", -1),
    (0, ""massively useful thing "", 123),
    (-2, ""an interstellar hitchhiker can have."", 3),
]

# Write CSV file
with open(""test.csv"", ""wt"") as fp:
    writer = csv.writer(fp, delimiter="","")
    # writer.writerow([""your"", ""header"", ""foo""])  # write header
    writer.writerows(data)

# Read CSV file
with open(""test.csv"") as fp:
    reader = csv.reader(fp, delimiter="","", quotechar='""')
    # next(reader, None)  # skip the headers
    data_read = [row for row in reader]

print(data_read)"
5160,read csv,False,False,77,"[['1', 'A towel,', '1.0'],
 ['42', ' it says, ', '2.0'],
 ['1337', 'is about the most ', '-1'],
 ['0', 'massively useful thing ', '123'],
 ['-2', 'an interstellar hitchhiker can have.', '3']]"
5161,read csv,False,False,28,"import mpu.io
data = mpu.io.read('example.csv', delimiter=',', quotechar='""', skiprows=None)
mpu.io.write('example.csv', data)"
5162,read csv,False,False,92,"import pandas as pd

# Read the CSV into a pandas data frame (df)
#   With a df you can do many things
#   most important: visualize data with Seaborn
df = pd.read_csv('myfile.csv', sep=',')
print(df)

# Or export it in many ways, e.g. a list of tuples
tuples = [tuple(x) for x in df.values]

# or export it as a list of dicts
dicts = df.to_dict().values()"
5163,read csv,False,False,37,"1,""A towel,"",1.0
42,"" it says, "",2.0
1337,is about the most ,-1
0,massively useful thing ,123
-2,an interstellar hitchhiker can have.,3"
5164,read csv,False,False,115,"yourstring= '""ABC"", ""XYZ,MNO"", ""KLM""\n""ABC"", ""MN""\n""ABC"", ""123"", ""10"", ""OPPA GANGNAM STYLE"", ""LADY""'

import csv
import io

class MyDialect(csv.Dialect):
    strict = True
    skipinitialspace = True
    quoting = csv.QUOTE_ALL
    delimiter = ','
    quotechar = '""'
    lineterminator = '\n'


b = io.StringIO(yourstring)
r = csv.reader(b, MyDialect())

for i in r:
    print len(i), ':',' @ '.join(i)"
5165,read csv,False,False,7,"if batch:
    do_something(batch)"
5166,import pandas,False,True,12,"df.apply(pd.DataFrame, axis=1).stack()[0]"
5167,import pandas,False,True,15,pd.globals(farm='<unk>').any()[0]
5168,import pandas,False,True,11,pd.globals().factorize()['A']
5169,import pandas,False,True,15,df.apply(lambda x: x.tolist()).stack()[0]
5170,import pandas,False,True,10,pd.globals().factorize(axis=1)[1]
5171,import pandas,False,True,10,df.stack().unstack(axis=1)[0]
5172,import pandas,False,True,10,pd.globals().factorize(axis=1)[0]
5173,import pandas,False,False,33,"from sqlalchemy import create_engine
import pymysql

db_connection_str = 'mysql+pymysql://mysql_user:mysql_password@mysql_host/mysql_db'
db_connection = create_engine(db_connection_str)

df = pd.read_sql('SELECT * FROM table_name', con=db_connection)"
5174,import pandas,False,False,64,"`(pandas_env)user@machine:~$ python`
Python 2.7.10 |Continuum Analytics, Inc.| (default, Sep 15 2015, 14:50:01)
>>> import imp
>>> imp.find_module(""pandas"")
(None, '/path/to/miniconda3/envs/foo/lib/python2.7/site-packages/pandas', ('', '', 5))

# See what this returns on your system."
5175,import pandas,True,False,15,"import pandas as pd
data_df = pd.DataFrame('highfrequency2.csv')
print(data_df.columns)"
5176,import pandas,False,False,37,"import pandas as pd
data = {""a"": [1, 2, 3], ""b"": [3, 2, 1]}
data_df = pd.DataFrame(data)"
5177,import pandas,False,False,37,"from pandas import DataFrame
data = {""a"": [1, 2, 3], ""b"": [3, 2, 1]}
data_df = DataFrame(data)"
5178,import pandas,False,False,8,$ conda create --name my_env pandas ipython
5179,import pandas,False,False,4,$ source activate my_env
5180,find unique data from csv,False,True,20,"pd.concat(pd.concat(set(data), axis=1).iter(), axis=1).max()"
5181,find unique data from csv,False,True,20,"pd.concat(pd.concat(set(data), axis=1).iter(), axis=1).set()"
5182,find unique data from csv,False,True,12,"pd.concat(set(), axis=1).max(axis=1)"
5183,find unique data from csv,False,True,25,"pd.concat(pd.concat(set(data), axis=1).iter(), **list(mydict.keys())).set()"
5184,find unique data from csv,False,True,20,"pd.concat(pd.concat([data, pd.TimeGrouper(hours=5)]).ravel()).max()"
5185,find unique data from csv,False,True,11,"pd.concat(set(), axis=1).max()"
5186,find unique data from csv,False,True,26,"pd.concat(pd.concat(set(data), key=lambda x: x[1]).iter(), axis=1).max()"
5187,find unique data from csv,False,False,44,"df = pd.DataFrame({'a':[1,2,3,4,5,6],'b':['a','a','b','c','c','b']})"
5188,find unique data from csv,True,False,11,g = df['b'].unique()
5189,find unique data from csv,False,False,18,"array(['a', 'b', 'c'], dtype=object)"
5190,find unique data from csv,False,False,31,"In [22]: s = pd.Series(g)

In [23]: s
Out[23]: 
0    a
1    b
2    c
dtype: object"
5191,find unique data from csv,False,False,10,In [24]: s.to_csv('file.csv')
5192,find unique data from csv,False,False,87,"DataCaptured = csv.reader(DataFile, delimiter=',', skipinitialspace=True) 

Category, Year = [], []
for row in DataCaptured:
    if row[0] not in Year:
        Year.append(row[0])
    if row[1] not in Category:
        Category.append(row[1])    

print Category, Year        
# ['Category1', 'Category2', 'Category3'] ['1994', '1995', '1996', '1998']"
5193,find unique data from csv,False,False,30,"Category, Year = set(), set()
for row in DataCaptured:
    Year.add(row[0])
    Category.add(row[1])"
5194,group of data  from csv,False,True,13,"pd.concat([data] * 5, delimiter=',')"
5195,group of data  from csv,False,True,9,df.groupby('User').head(4)
5196,group of data  from csv,False,True,17,df.groupby('Name').agg(lambda x: x.tolist().tolist())
5197,group of data  from csv,False,True,9,df.groupby('ID').head(4)
5198,group of data  from csv,False,True,10,"pd.concat([df1, df2], axis=1)"
5199,group of data  from csv,False,True,17,df.groupby('User').agg(lambda x: x.tolist().tolist())
5200,group of data  from csv,False,True,9,df.groupby('Name').head(4)
5201,group of data  from csv,True,False,18,"week_grouped = df.groupby('week')
week_grouped.sum().reset_index().to_csv('week_grouped.csv')"
5202,group of data  from csv,False,False,27,"week_grouped = df.groupby('week')
week_grouped.sum().reset_index()[['week', 'count']].to_csv('week_grouped.csv')"
5203,group of data  from csv,False,False,169,"# This creates a ""groupby"" object (not a dataframe object) 
# and you store it in the week_grouped variable.
week_grouped = df.groupby('week')

# This instructs pandas to sum up all the numeric type columns in each 
# group. This returns a dataframe where each row is the sum of the 
# group's numeric columns. You're not storing this dataframe in your 
# example.
week_grouped.sum() 

# Here you're calling the to_csv method on a groupby object... but
# that object type doesn't have that method. Dataframes have that method. 
# So we should store the previous line's result (a dataframe) into a variable 
# and then call its to_csv method.
week_grouped.to_csv('week_grouped.csv')

# Like this:
summed_weeks = week_grouped.sum()
summed_weeks.to_csv('...')

# Or with less typing simply
week_grouped.sum().to_csv('...')"
5204,group of data  from csv,False,False,179,"import csv
from collections import defaultdict

# a dictionary whose value defaults to a list.
data = defaultdict(list)
# open the csv file and iterate over its rows. the enumerate()
# function gives us an incrementing row number
for i, row in enumerate(csv.reader(open('data.csv', 'rb'))):
    # skip the header line and any empty rows
    # we take advantage of the first row being indexed at 0
    # i=0 which evaluates as false, as does an empty row
    if not i or not row:
        continue
    # unpack the columns into local variables
    _, zipcode, level = row
    # for each zipcode, add the level the list
    data[zipcode].append(float(level))

# loop over each zipcode and its list of levels and calculate the average
for zipcode, levels in data.iteritems():
    print zipcode, sum(levels) / float(len(levels))"
5205,group of data  from csv,False,False,6,"19102 21.4
19003 29.415
19083 29.65"
5206,group of data  from csv,False,False,68,"from collections import defaultdict
import csv

per_label = defaultdict(list)

with open(inputfilename, 'rb') as inputfile:
    reader = csv.reader(inputfile)
    next(reader, None)  # skip the header row

    for timestamp, value, label in reader:
        per_label[label.strip()].append([timestamp.strip(), float(value)])"
5207,group of data  from csv,False,False,88,"{'CPU pid=26298:percent': [['15:22:57', 849.0], ['15:22:58', 0.0]],
 'Disks I/O': [['15:22:58', 28683.0]],
 'JMX 31690:gc-time': [['15:22:58', 0.0]],
 'JMX MB': [['15:22:57', 461000.0], ['15:22:58', 503000.0]],
 'Memory pid=26298:unit=mb:resident': [['15:22:58', 3369078.0]]}"
5208,get average value from group of data in csv,False,True,17,"df.groupby(np.arange(len(df)) // 3, axis=1).mean()"
5209,get average value from group of data in csv,False,True,22,"df.groupby(np.arange(len(df)) // 2 - 1, axis=1).mean().mean()"
5210,get average value from group of data in csv,False,True,19,"df.groupby(np.arange(len(df)) // 2 - 1, axis=1).mean()"
5211,get average value from group of data in csv,False,True,20,"df.groupby(np.arange(len(df)) // 3, delimiter=',').mean()"
5212,get average value from group of data in csv,False,True,17,df.groupby(np.arange(len(df)) // 2 / 3).mean()
5213,get average value from group of data in csv,False,True,15,df.groupby(np.arange(len(df)) // 3).mean()
5214,get average value from group of data in csv,False,True,17,"df.groupby(np.arange(len(data)) // 3, axis=1).mean()"
5215,get average value from group of data in csv,False,False,53,"In [59]: (df.groupby(['cluster', 'org'], as_index=False).mean()
            .groupby('cluster')['time'].mean())
Out[59]:
cluster
1          15
2          54
3           6
Name: time, dtype: int64"
5216,get average value from group of data in csv,True,False,28,"In [58]: df.groupby(['cluster']).mean()
Out[58]:
              time
cluster
1        12.333333
2        54.000000
3         6.000000"
5217,get average value from group of data in csv,False,False,39,"In [57]: df.groupby(['cluster', 'org']).mean()
Out[57]:
               time
cluster org
1       a    438886
        c        23
2       d      9874
        h        34
3       w         6"
5218,get average value from group of data in csv,False,False,20,df.groupby(['org']).mean().groupby(['cluster']).mean()
5219,get average value from group of data in csv,False,False,179,"import csv
from collections import defaultdict

# a dictionary whose value defaults to a list.
data = defaultdict(list)
# open the csv file and iterate over its rows. the enumerate()
# function gives us an incrementing row number
for i, row in enumerate(csv.reader(open('data.csv', 'rb'))):
    # skip the header line and any empty rows
    # we take advantage of the first row being indexed at 0
    # i=0 which evaluates as false, as does an empty row
    if not i or not row:
        continue
    # unpack the columns into local variables
    _, zipcode, level = row
    # for each zipcode, add the level the list
    data[zipcode].append(float(level))

# loop over each zipcode and its list of levels and calculate the average
for zipcode, levels in data.iteritems():
    print zipcode, sum(levels) / float(len(levels))"
5220,get average value from group of data in csv,False,False,6,"19102 21.4
19003 29.415
19083 29.65"
5221,get average value from group of data in csv,False,False,5,"a,54.2
s,78.5
k,89.62
a,77.2
a,65.56"
5222,standard deviation from group of data in csv,False,True,7,np.flatnonzero(x).mean()
5223,standard deviation from group of data in csv,False,True,7,np.array(df.index).mean()
5224,standard deviation from group of data in csv,False,True,21,df.groupby('User')['mean'].agg(lambda x: x.mean().mean())
5225,standard deviation from group of data in csv,False,True,9,"np.mean(np.unique(np.lines), axis=0)"
5226,standard deviation from group of data in csv,False,True,9,"np.in1d(data, str).mean()"
5227,standard deviation from group of data in csv,False,True,9,"np.array(df.index, axis=1).mean()"
5228,standard deviation from group of data in csv,False,True,9,"np.unique(df.values, axis=1).mean()"
5229,standard deviation from group of data in csv,True,False,62,"In [202]:

df.groupby('A').agg(np.std, ddof=0)

Out[202]:
     B  values
A             
1  0.5     2.5
2  0.5     2.5

In [203]:

df.groupby('A').agg(np.std, ddof=1)

Out[203]:
          B    values
A                    
1  0.707107  3.535534
2  0.707107  3.535534"
5230,standard deviation from group of data in csv,False,False,15,"print (df.std())
S1    2.302173
S2    2.774887
S3    2.302173
dtype: float64"
5231,standard deviation from group of data in csv,False,False,20,"print (df.std(axis=1))
0    3.785939
1    1.000000
2    3.000000
3    0.577350
4    3.055050
dtype: float64"
5232,standard deviation from group of data in csv,False,False,23,"print (df[['S1','S2']].std())
S1    2.302173
S2    2.774887
dtype: float64"
5233,standard deviation from group of data in csv,False,False,46,"#ddof=1
print (df.std(axis=1))
0    3.785939
1    1.000000
2    3.000000
3    0.577350
4    3.055050
dtype: float64

#ddof=0
print (np.std(df, axis=1))
0    3.091206
1    0.816497
2    2.449490
3    0.471405
4    2.494438
dtype: float64"
5234,standard deviation from group of data in csv,False,False,58,"#same output as pandas function
print (np.std(df, ddof=1, axis=1))
0    3.785939
1    1.000000
2    3.000000
3    0.577350
4    3.055050
dtype: float64

#same output as numpy function
print (df.std(ddof=0, axis=1))
0    3.091206
1    0.816497
2    2.449490
3    0.471405
4    2.494438
dtype: float64"
5235,standard deviation from group of data in csv,False,False,41,"In [11]: df.groupby(""a"")[""b""].agg([np.mean, np.std])
Out[11]:
   mean        std
a
1    16   6.082763
2    23   1.000000
3    40  13.228757"
5236,newline space,False,True,14,"re.findall('<unk>', '<unk>')"
5237,newline space,False,True,16,"re.sub('<unk>', '', '<unk>')"
5238,newline space,True,True,11,""""""" """""".rstrip('\r\n')"
5239,newline space,False,True,14,"re.findall('<unk> ', '<unk>')"
5240,newline space,False,True,12,"re.findall('[ <unk> ', '\\\\')"
5241,newline space,False,True,17,"re.sub('<unk>', ' ', '<unk>')"
5242,newline space,False,True,14,"re.sub('<unk>', ' ', '\\\\')"
5243,newline space,False,False,9,"print('.', end='')"
5244,newline space,False,False,17,"print('a', 'b', 'c', sep='')"
5245,newline space,False,False,11,"print('.', end='', flush=True)"
5246,newline space,False,False,4,from __future__ import print_function
5247,newline space,False,False,8,"import sys
sys.stdout.write('.')"
5248,newline space,False,False,3,sys.stdout.flush()
5249,newline space,False,False,34,">>> for i in range(10):
...     print i,
... else:
...     print
...
0 1 2 3 4 5 6 7 8 9
>>>"
5250,floating data in csv group in digit,False,True,13,"pd.Series(np.isnan(group).values(axis=0), skiprows=1)"
5251,floating data in csv group in digit,False,True,7,pd.to_datetime(df.loc[0])
5252,floating data in csv group in digit,False,True,14,"pd.Series(np.isnan(group).values(axis=0), encode='')"
5253,floating data in csv group in digit,False,True,8,np.isnan(group).argmax(axis=0)
5254,floating data in csv group in digit,False,True,13,"pd.Series(np.isnan(group).values(axis=0), replace=False)"
5255,floating data in csv group in digit,False,True,19,"np.array([str(x) for x in tr.groupby('User')], sublist=False)"
5256,floating data in csv group in digit,False,True,19,"np.array([str(x) for x in tr.groupby('ID')], sublist=False)"
5257,floating data in csv group in digit,False,False,26,"# Option one
older_method_string = ""%.9f"" % numvar

# Option two
newer_method_string = ""{:.9f}"".format(numvar)"
5258,floating data in csv group in digit,False,False,19,"# Option 3 (versions 3.6 and higher)
newest_method_string = f""{numvar:.9f}"""
5259,floating data in csv group in digit,True,False,11,"df.to_csv('pandasfile.csv', float_format='%.3f')"
5260,floating data in csv group in digit,False,False,11,"df.to_csv('pandasfile.csv', float_format='%g')"
5261,floating data in csv group in digit,False,False,2,"Bob,0.085
Alice,0.005"
5262,floating data in csv group in digit,False,False,11,print(f'{numvar:.9f}')
5263,floating data in csv group in digit,False,False,20,">>> numvar = 135.12345678910
>>> str(round(numvar, 9))
'135.123456789'"
5264,remove repeated column in csv file,False,True,10,"pd.concat([_] * 5, ignore_index=True)"
5265,remove repeated column in csv file,False,True,8,pd.concat([file] * 5)
5266,remove repeated column in csv file,False,True,8,"pd.concat([column, row])"
5267,remove repeated column in csv file,False,True,15,"pd.read_csv('<unk>', sep=',', header=None)"
5268,remove repeated column in csv file,False,True,10,"pd.concat([_] * 5, axis=1)"
5269,remove repeated column in csv file,False,True,8,pd.concat([line] * 5)
5270,remove repeated column in csv file,False,True,12,"np.delete(file, list(itertools.chain(*mylist)))"
5271,remove repeated column in csv file,False,False,9,"df = df.drop('column_name', 1)"
5272,remove repeated column in csv file,False,False,9,"df.drop('column_name', axis=1, inplace=True)"
5273,remove repeated column in csv file,True,False,22,"df = df.drop(df.columns[[0, 1, 3]], axis=1)  # df.columns is zero-based pd.Index"
5274,remove repeated column in csv file,False,False,14,"df.drop(['column_nameA', 'column_nameB'], axis=1, inplace=True)"
5275,remove repeated column in csv file,False,False,6,del df['column_name']
5276,remove repeated column in csv file,False,False,9,"df = df.loc[:,~df.columns.duplicated()]"
5277,remove repeated column in csv file,False,False,19,"columns = ['Col1', 'Col2', ...]
df.drop(columns, inplace=True, axis=1)"
5278,findall,True,True,11,"re.findall('<unk>', 'раз')"
5279,findall,False,True,8,"re.findall('раз', 'раз')"
5280,findall,False,True,13,"re.search('<unk>', re).split()"
5281,findall,False,True,10,"re.findall('<unk>', pattern)"
5282,findall,False,True,17,"re.findall('<unk>', 'раз <unk> <unk>')"
5283,findall,False,True,10,"re.findall('<unk>', s)"
5284,findall,False,True,11,"re.findall('раз', '<unk>')"
5285,findall,False,False,31,"import re
[m.start() for m in re.finditer('test', 'test test test test')]
#[0, 5, 10, 15]"
5286,findall,False,False,26,"[m.start() for m in re.finditer('(?=tt)', 'ttt')]
#[0, 1]"
5287,findall,False,False,54,"search = 'tt'
[m.start() for m in re.finditer('(?=%s)(?!.{1,%d}%s)' % (search, len(search)-1, search), 'ttt')]
#[1]"
5288,findall,False,False,30,">>> help(str.find)
Help on method_descriptor:

find(...)
    S.find(sub [,start [,end]]) -> int"
5289,findall,False,False,69,"def find_all(a_str, sub):
    start = 0
    while True:
        start = a_str.find(sub, start)
        if start == -1: return
        yield start
        start += len(sub) # use start += 1 to find overlapping matches

list(find_all('spam spam spam spam', 'spam')) # [0, 5, 10, 15]"
5290,findall,False,False,60,"import re
regex = ur""\[P\] (.+?) \[/P\]+?""
line = ""President [P] Barack Obama [/P] met Microsoft founder [P] Bill Gates [/P], yesterday.""
person = re.findall(regex, line)
print(person)"
5291,findall,False,False,9,"['Barack Obama', 'Bill Gates']"
5292,generate 100 random lower-cased leters,True,True,14,"random.choice(range(100), args=(100, 100))"
5293,generate 100 random lower-cased leters,False,True,8,"random.randint(0, 100, size=100)"
5294,generate 100 random lower-cased leters,False,True,9,"random.choice(range(100), flags=random.random)"
5295,generate 100 random lower-cased leters,False,True,7,random.choice(range(100))
5296,generate 100 random lower-cased leters,False,True,9,"random.choice(range(100), **100)"
5297,generate 100 random lower-cased leters,False,True,6,"random.randint(100, 100)"
5298,generate 100 random lower-cased leters,False,True,9,"random.choice(range(100), flags=random.randrange)"
5299,generate 100 random lower-cased leters,False,False,16,''.join(random.choice(string.ascii_uppercase + string.digits) for _ in range(N))
5300,generate 100 random lower-cased leters,False,False,11,"''.join(random.choices(string.ascii_uppercase + string.digits, k=N))"
5301,generate 100 random lower-cased leters,False,False,19,''.join(random.SystemRandom().choice(string.ascii_uppercase + string.digits) for _ in range(N))
5302,generate 100 random lower-cased leters,False,False,61,">>> import string
>>> import random
>>> def id_generator(size=6, chars=string.ascii_uppercase + string.digits):
...    return ''.join(random.choice(chars) for _ in range(size))
...
>>> id_generator()
'G5G74W'
>>> id_generator(3, ""6793YUIO"")
'Y3U'"
5303,generate 100 random lower-cased leters,False,False,18,">>> string.ascii_uppercase
'ABCDEFGHIJKLMNOPQRSTUVWXYZ'
>>> string.digits
'0123456789'
>>> string.ascii_uppercase + string.digits
'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'"
5304,generate 100 random lower-cased leters,False,False,62,">>> range(4) # range create a list of 'n' numbers
[0, 1, 2, 3]
>>> ['elem' for _ in range(4)] # we use range to create 4 times 'elem'
['elem', 'elem', 'elem', 'elem']"
5305,generate 100 random lower-cased leters,False,False,33,">>> random.choice(""abcde"")
'a'
>>> random.choice(""abcde"")
'd'
>>> random.choice(""abcde"")
'b'"
5306,generate random lower case letters,False,True,7,random.choice(random.choice(random.sample))
5307,generate random lower case letters,False,True,9,"random.choice(random.choice(random.sample), 2)"
5308,generate random lower case letters,False,True,9,"random.choice(random.random.choice(random.sample), 2)"
5309,generate random lower case letters,False,True,7,random.choice(random.random.choice(random.sample))
5310,generate random lower case letters,False,True,10,random.choice(random.random.choice(random.choice(random.sample)))
5311,generate random lower case letters,False,True,7,random.choice(random.choice(random.choice))
5312,generate random lower case letters,False,True,9,"random.choice(random.randrange(1, 6))"
5313,generate random lower case letters,False,False,16,''.join(random.choice(string.ascii_uppercase + string.digits) for _ in range(N))
5314,generate random lower case letters,True,False,11,"''.join(random.choices(string.ascii_uppercase + string.digits, k=N))"
5315,generate random lower case letters,False,False,19,''.join(random.SystemRandom().choice(string.ascii_uppercase + string.digits) for _ in range(N))
5316,generate random lower case letters,False,False,61,">>> import string
>>> import random
>>> def id_generator(size=6, chars=string.ascii_uppercase + string.digits):
...    return ''.join(random.choice(chars) for _ in range(size))
...
>>> id_generator()
'G5G74W'
>>> id_generator(3, ""6793YUIO"")
'Y3U'"
5317,generate random lower case letters,False,False,18,">>> string.ascii_uppercase
'ABCDEFGHIJKLMNOPQRSTUVWXYZ'
>>> string.digits
'0123456789'
>>> string.ascii_uppercase + string.digits
'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'"
5318,generate random lower case letters,False,False,62,">>> range(4) # range create a list of 'n' numbers
[0, 1, 2, 3]
>>> ['elem' for _ in range(4)] # we use range to create 4 times 'elem'
['elem', 'elem', 'elem', 'elem']"
5319,generate random lower case letters,False,False,33,">>> random.choice(""abcde"")
'a'
>>> random.choice(""abcde"")
'd'
>>> random.choice(""abcde"")
'b'"
5320,generate 100 integers (1-20 inclusive).,False,True,11,os.path.join(*([100] * 100))
5321,generate 100 integers (1-20 inclusive).,False,True,7,list(range(100))
5322,generate 100 integers (1-20 inclusive).,False,True,9,os.path.join(*(1 - 20))
5323,generate 100 integers (1-20 inclusive).,False,True,11,"max(range(1, 10), 100)"
5324,generate 100 integers (1-20 inclusive).,False,True,14,sum(int(x) for x in range(100))
5325,generate 100 integers (1-20 inclusive).,False,True,12,os.path.join(*list(os.popen(1 - 20)))
5326,generate 100 integers (1-20 inclusive).,False,True,14,"print(list(os.r(1 - 20, 100)))"
5327,generate 100 integers (1-20 inclusive).,False,False,11,"from random import randrange
print(randrange(10))"
5328,generate 100 integers (1-20 inclusive).,False,False,9,"import random
print(random.randint(0,9))"
5329,generate 100 integers (1-20 inclusive).,False,False,6,"random.randint(a, b)"
5330,generate 100 integers (1-20 inclusive).,True,False,26,">>> import random
>>> random.sample(range(1, 100), 3)
[77, 52, 45]"
5331,generate 100 integers (1-20 inclusive).,False,False,38,">>> try:
...   random.sample(range(1, 2), 3)
... except ValueError:
...   print('Sample size exceeded population size.')
... 
Sample size exceeded population size"
5332,generate 100 integers (1-20 inclusive).,False,False,36,"from random import randrange, uniform

# randrange gives you an integral value
irand = randrange(0, 10)

# uniform gives you a floating-point value
frand = uniform(0, 10)"
5333,generate 100 integers (1-20 inclusive).,False,False,13,"import random
my_randoms = random.sample(range(100), 10)"
5334,generate random numbers between 1-20 inclusive,False,True,9,"print(random.randint(0, 11.5))"
5335,generate random numbers between 1-20 inclusive,False,True,9,"print(random.randint(0, 1))"
5336,generate random numbers between 1-20 inclusive,False,True,9,"print(random.randint(0, 7))"
5337,generate random numbers between 1-20 inclusive,False,True,9,"print(random.randint(0, 9))"
5338,generate random numbers between 1-20 inclusive,False,True,9,"print(random.randint(0, 0.1))"
5339,generate random numbers between 1-20 inclusive,True,True,9,"print(random.randint(0, 50))"
5340,generate random numbers between 1-20 inclusive,False,True,9,"print(random.randint(0, 0.2))"
5341,generate random numbers between 1-20 inclusive,False,False,11,"from random import randrange
print(randrange(10))"
5342,generate random numbers between 1-20 inclusive,False,False,9,"import random
print(random.randint(0,9))"
5343,generate random numbers between 1-20 inclusive,False,False,6,"random.randint(a, b)"
5344,generate random numbers between 1-20 inclusive,False,False,26,">>> import random
>>> random.sample(range(1, 100), 3)
[77, 52, 45]"
5345,generate random numbers between 1-20 inclusive,False,False,38,">>> try:
...   random.sample(range(1, 2), 3)
... except ValueError:
...   print('Sample size exceeded population size.')
... 
Sample size exceeded population size"
5346,generate random numbers between 1-20 inclusive,False,False,11,"import random
random.sample(range(100), 10)"
5347,generate random numbers between 1-20 inclusive,False,False,21,"all_lines = f1.readlines()
for i in range(50):
    lines = random.sample(all_lines, 40)"
5348,"Given list `letters` and `integers`, create a dicitonary such that the values in `letters` are keys and values in `integers` are values",True,True,20,"letters = [(x + y) for x, y in zip(letters, integers)]"
5349,"Given list `letters` and `integers`, create a dicitonary such that the values in `letters` are keys and values in `integers` are values",False,True,17,"letters = [(k, v) for k, v in letters.items()]"
5350,"Given list `letters` and `integers`, create a dicitonary such that the values in `letters` are keys and values in `integers` are values",False,True,14,letters = [x for x in letters if x not in integers]
5351,"Given list `letters` and `integers`, create a dicitonary such that the values in `letters` are keys and values in `integers` are values",False,True,13,[list(x) for x in zip(*letters)]
5352,"Given list `letters` and `integers`, create a dicitonary such that the values in `letters` are keys and values in `integers` are values",False,True,18,"[dict(x, key=lambda x: x[1]) for x in letters]"
5353,"Given list `letters` and `integers`, create a dicitonary such that the values in `letters` are keys and values in `integers` are values",False,True,15,"[k for k, v in letters.items() if v == integers]"
5354,"Given list `letters` and `integers`, create a dicitonary such that the values in `letters` are keys and values in `integers` are values",False,True,12,letters = [int(x) for x in letters]
5355,"Given list `letters` and `integers`, create a dicitonary such that the values in `letters` are keys and values in `integers` are values",False,False,13,"{key: value for (key, value) in iterable}"
5356,"Given list `letters` and `integers`, create a dicitonary such that the values in `letters` are keys and values in `integers` are values",False,False,15,"dict((key, func(key)) for key in keys)"
5357,"Given list `letters` and `integers`, create a dicitonary such that the values in `letters` are keys and values in `integers` are values",False,False,34,"1) consumed from any iterable yielding pairs of keys/vals
dict(pairs)

2) ""zip'ped"" from two separate iterables of keys/vals
dict(zip(list_of_keys, list_of_values))"
5358,"Given list `letters` and `integers`, create a dicitonary such that the values in `letters` are keys and values in `integers` are values",False,False,11,"for key in newdict.keys():
  print(key)"
5359,"Given list `letters` and `integers`, create a dicitonary such that the values in `letters` are keys and values in `integers` are values",False,False,3,dict.items()
5360,"Given list `letters` and `integers`, create a dicitonary such that the values in `letters` are keys and values in `integers` are values",False,False,25,">>> newdict = {1:0, 2:0, 3:0}
>>> [*newdict]
[1, 2, 3]"
5361,"Given list `letters` and `integers`, create a dicitonary such that the values in `letters` are keys and values in `integers` are values",False,False,53,"%timeit [*newdict]
1000000 loops, best of 3: 249 ns per loop

%timeit list(newdict)
1000000 loops, best of 3: 508 ns per loop

%timeit [k for k in newdict]
1000000 loops, best of 3: 574 ns per loop"
5362,print `dic` sorted by keys,False,True,14,"print(sorted(list(dic.items()), key=k))"
5363,print `dic` sorted by keys,False,True,14,"print(sorted(list(dic.items()), **k))"
5364,print `dic` sorted by keys,True,True,14,"print(sorted(list(dic.items()), key=tuple))"
5365,print `dic` sorted by keys,False,True,8,print(dic.decode('*'))
5366,print `dic` sorted by keys,False,True,20,"print(sorted(list(dic.items()), key=lambda x: x[1]))"
5367,print `dic` sorted by keys,False,True,8,print(dic.decode('unicode-escape'))
5368,print `dic` sorted by keys,False,True,9,"print(sorted(dic, key=k))"
5369,print `dic` sorted by keys,True,False,78,"In [1]: import collections

In [2]: d = {2:3, 1:89, 4:5, 3:0}

In [3]: od = collections.OrderedDict(sorted(d.items()))

In [4]: od
Out[4]: OrderedDict([(1, 89), (2, 3), (3, 0), (4, 5)])"
5370,print `dic` sorted by keys,False,False,59,"In [11]: od[1]
Out[11]: 89

In [12]: od[3]
Out[12]: 0

In [13]: for k, v in od.iteritems(): print k, v
   ....: 
1 89
2 3
3 0
4 5"
5371,print `dic` sorted by keys,False,False,31,"In [13]: for k, v in od.items(): print(k, v)
   ....: 
1 89
2 3
3 0
4 5"
5372,print `dic` sorted by keys,False,False,36,"mydict = {'carl':40,
          'alan':2,
          'bob':1,
          'danny':3}

for key in sorted(mydict):
    print ""%s: %s"" % (key, mydict[key])"
5373,print `dic` sorted by keys,False,False,12,"alan: 2
bob: 1
carl: 40
danny: 3"
5374,print `dic` sorted by keys,False,False,30,"keylist = mydict.keys()
keylist.sort()
for key in keylist:
    print ""%s: %s"" % (key, mydict[key])"
5375,print `dic` sorted by keys,False,False,235,">>> from collections import OrderedDict

>>> # regular unsorted dictionary
>>> d = {'banana': 3, 'apple':4, 'pear': 1, 'orange': 2}

>>> # dictionary sorted by key -- OrderedDict(sorted(d.items()) also works
>>> OrderedDict(sorted(d.items(), key=lambda t: t[0]))
OrderedDict([('apple', 4), ('banana', 3), ('orange', 2), ('pear', 1)])

>>> # dictionary sorted by value
>>> OrderedDict(sorted(d.items(), key=lambda t: t[1]))
OrderedDict([('pear', 1), ('orange', 2), ('banana', 3), ('apple', 4)])

>>> # dictionary sorted by length of the key string
>>> OrderedDict(sorted(d.items(), key=lambda t: len(t[0])))
OrderedDict([('pear', 1), ('apple', 4), ('orange', 2), ('banana', 3)])"
5376,open a csv file `data.csv` and read the data,True,True,14,"df = pd.read_csv('data.csv', sep=',', header=None)"
5377,open a csv file `data.csv` and read the data,False,True,8,"os.rename('data.csv', 'data.csv')"
5378,open a csv file `data.csv` and read the data,False,True,4,writer.writerow(line)
5379,open a csv file `data.csv` and read the data,False,True,4,writer.writerow(row)
5380,open a csv file `data.csv` and read the data,False,True,14,"df = pd.read_csv('data.csv', sep=',', **None)"
5381,open a csv file `data.csv` and read the data,False,True,12,"df = pd.read_csv('data.csv', sep=',')"
5382,open a csv file `data.csv` and read the data,False,True,7,"df.to_csv('data.csv', index=False)"
5383,open a csv file `data.csv` and read the data,False,False,49,"import pandas as pd
print pd.read_csv('value.txt')

        Date    price  factor_1  factor_2
0  2012-06-11  1600.20     1.255     1.548
1  2012-06-12  1610.02     1.258     1.554
2  2012-06-13  1618.07     1.249     1.552
3  2012-06-14  1624.40     1.253     1.556
4  2012-06-15  1626.15     1.258     1.552
5  2012-06-16  1626.15     1.263     1.558
6  2012-06-17  1626.15     1.264     1.572"
5384,open a csv file `data.csv` and read the data,False,False,13,"Data = namedtuple(""Data"", next(reader))"
5385,open a csv file `data.csv` and read the data,False,False,4,next(reader)
5386,open a csv file `data.csv` and read the data,False,False,70,"import csv
from collections import namedtuple
from itertools import imap

with open(""data_file.txt"", mode=""rb"") as infile:
    reader = csv.reader(infile)
    Data = namedtuple(""Data"", next(reader))  # get names from column headers
    for data in imap(Data._make, reader):
        print data.foo
        # ...further processing of a line..."
5387,open a csv file `data.csv` and read the data,False,False,67,"import csv
from collections import namedtuple

with open(""data_file.txt"", newline="""") as infile:
    reader = csv.reader(infile)
    Data = namedtuple(""Data"", next(reader))  # get names from column headers
    for data in map(Data._make, reader):
        print(data.foo)
        # ...further processing of a line..."
5388,open a csv file `data.csv` and read the data,False,False,44,"import csv

path = 'c:\\temp\\'

file=open( path +""xyz.CSV"", ""r"")
reader = csv.reader(file)
for line in reader:
    t=line[1],line[2]
    print(t)"
5389,open a csv file `data.csv` and read the data,False,False,77,"('col2', 'col3')
('empId1', '241682-27638-USD-CIGGNT ')
('empId2', '241682-27638-USD-OCGGINT ')
('empId3', '241942-37190-USD-GGDIV ')
('empId4', '241942-37190-USD-CHYOF ')
('empId5', '241942-37190-USD-EQPL ')
('empId6', '241942-37190-USD-INT ')
('empId7', '242066-15343-USD-CYJOF ')
('empId8', '242066-15343-USD-CYJOF ')
('empId9', '242066-15343-USD-CYJOF ')
('empId10', '241942-37190-USD-GGDIV ')"
5390,delete first row from dataframe `df`,False,True,12,"df = df.drop('<unk>', axis=1)"
5391,delete first row from dataframe `df`,True,True,7,df = df.drop('get_title')
5392,delete first row from dataframe `df`,False,True,12,"df.drop('<unk>', axis=1, inplace=True)"
5393,delete first row from dataframe `df`,False,True,12,"df = pd.concat((df, df), axis=1)"
5394,delete first row from dataframe `df`,False,True,8,"df.drop(df, axis=1, inplace=True)"
5395,delete first row from dataframe `df`,False,True,7,df = df.drop('/a')
5396,delete first row from dataframe `df`,False,True,9,"df = df.drop('farm', axis=1)"
5397,delete first row from dataframe `df`,False,False,9,"df = df.drop('column_name', 1)"
5398,delete first row from dataframe `df`,False,False,9,"df.drop('column_name', axis=1, inplace=True)"
5399,delete first row from dataframe `df`,False,False,22,"df = df.drop(df.columns[[0, 1, 3]], axis=1)  # df.columns is zero-based pd.Index"
5400,delete first row from dataframe `df`,False,False,14,"df.drop(['column_nameA', 'column_nameB'], axis=1, inplace=True)"
5401,delete first row from dataframe `df`,False,False,9,df = df[df.line_race != 0]
5402,delete first row from dataframe `df`,False,False,6,del df['column_name']
5403,delete first row from dataframe `df`,False,False,37,"In [31]: df_test.iloc[0]
Out[31]: 
ATime     1.2
X         2.0
Y        15.0
Z         2.0
Btime     1.2
C        12.0
D        25.0
E        12.0
Name: 0, dtype: float64"
5404,delete first and last row from the dataframe `df`,False,True,15,"df.drop(df.columns[[0, 1, 3]], axis=1)"
5405,delete first and last row from the dataframe `df`,False,True,12,"df = df.drop((1, 1), axis=1)"
5406,delete first and last row from the dataframe `df`,False,True,9,"df.drop(df.index[0], axis=1)"
5407,delete first and last row from the dataframe `df`,True,True,6,df = df.loc[-1]
5408,delete first and last row from the dataframe `df`,False,True,12,"df = df.drop('<unk>', axis=1)"
5409,delete first and last row from the dataframe `df`,False,True,20,"df = df.iloc[:, ([2, 5, 6, 7, 8])]"
5410,delete first and last row from the dataframe `df`,False,True,9,"df.drop(df.index[0], axis=0)"
5411,delete first and last row from the dataframe `df`,False,False,7,df = df.iloc[3:]
5412,delete first and last row from the dataframe `df`,False,False,15,df[df['column name'].map(len) < 2]
5413,delete first and last row from the dataframe `df`,False,False,15,"df.drop(df.tail(n).index,inplace=True) # drop last n rows"
5414,delete first and last row from the dataframe `df`,False,False,15,"df.drop(df.head(n).index,inplace=True) # drop first n rows"
5415,delete first and last row from the dataframe `df`,False,False,56,"df = pd.DataFrame({'a':range(1,5), 'b':['a','b','c','d']})
df2 = df.iloc[[0, -1]]

print df2

   a  b
0  1  a
3  4  d"
5416,delete first and last row from the dataframe `df`,False,False,8,df = df[df.score > 50]
5417,delete first and last row from the dataframe `df`,False,False,164,"%%timeit
test = pd.DataFrame({'x': np.random.randn(int(1e6))})
test = test[test.x < 0]
# 54.5 ms ± 2.02 ms per loop (mean ± std. dev. of 7 runs, 10 loops each)

%%timeit
test = pd.DataFrame({'x': np.random.randn(int(1e6))})
test.drop(test[test.x > 0].index, inplace=True)
# 201 ms ± 17.9 ms per loop (mean ± std. dev. of 7 runs, 10 loops each)

%%timeit
test = pd.DataFrame({'x': np.random.randn(int(1e6))})
test = test.drop(test[test.x > 0].index)
# 194 ms ± 7.03 ms per loop (mean ± std. dev. of 7 runs, 10 loops each)"
5418,save `df` to a file `output.csv` in a new directory `example_output`,False,True,5,output.csv.write('output.csv')
5419,save `df` to a file `output.csv` in a new directory `example_output`,False,True,5,df.write('output.csv')
5420,save `df` to a file `output.csv` in a new directory `example_output`,False,True,5,file.write('output.csv')
5421,save `df` to a file `output.csv` in a new directory `example_output`,False,True,5,output.csv.write('example_output')
5422,save `df` to a file `output.csv` in a new directory `example_output`,False,True,5,example_output.write('output.csv')
5423,save `df` to a file `output.csv` in a new directory `example_output`,False,True,10,"example_output.write(os.path.join(df, 'output.csv'))"
5424,save `df` to a file `output.csv` in a new directory `example_output`,False,True,5,file.write('example_output')
5425,save `df` to a file `output.csv` in a new directory `example_output`,True,False,7,"df.to_csv(file_name, sep='\t')"
5426,save `df` to a file `output.csv` in a new directory `example_output`,False,False,10,"df.to_csv(file_name, sep='\t', encoding='utf-8')"
5427,save `df` to a file `output.csv` in a new directory `example_output`,False,False,9,"df.to_csv(file_name, encoding='utf-8', index=False)"
5428,save `df` to a file `output.csv` in a new directory `example_output`,False,False,8,"Color  Number
0   red     22
1  blue     10"
5429,save `df` to a file `output.csv` in a new directory `example_output`,False,False,5,"Color,Number
red,22
blue,10"
5430,save `df` to a file `output.csv` in a new directory `example_output`,False,False,10,",Color,Number
0,red,22
1,blue,10"
5431,save `df` to a file `output.csv` in a new directory `example_output`,False,False,95,"for column in df.columns:
    for idx in df[column].index:
        x = df.get_value(idx,column)
        try:
            x = unicode(x.encode('utf-8','ignore'),errors ='ignore') if type(x) == unicode else unicode(str(x),errors='ignore')
            df.set_value(idx,column,x)
        except Exception:
            print 'encoding error: {0} {1}'.format(idx,column)
            df.set_value(idx,column,'')
            continue"
5432,copy all files and directories from one folder to another,False,True,5,os.listdir('..')
5433,copy all files and directories from one folder to another,False,True,6,"os.rename(ins, filenames)"
5434,copy all files and directories from one folder to another,False,True,7,os.chdir(os.path.normpath(existGDBPath))
5435,copy all files and directories from one folder to another,False,True,6,"os.rename(dirname, filenames)"
5436,copy all files and directories from one folder to another,False,True,5,os.listdir('.c')
5437,copy all files and directories from one folder to another,False,True,4,os.listdir(subdirname)
5438,copy all files and directories from one folder to another,False,True,6,"os.rename(file.txt, filenames)"
5439,copy all files and directories from one folder to another,False,False,14,"from distutils.dir_util import copy_tree
copy_tree(""/a/b/c"", ""/x/y/z"")"
5440,copy all files and directories from one folder to another,False,False,64,"import os, shutil
def copytree(src, dst, symlinks=False, ignore=None):
    for item in os.listdir(src):
        s = os.path.join(src, item)
        d = os.path.join(dst, item)
        if os.path.isdir(s):
            shutil.copytree(s, d, symlinks, ignore)
        else:
            shutil.copy2(s, d)"
5441,copy all files and directories from one folder to another,True,False,35,"import os
import shutil
src_files = os.listdir(src)
for file_name in src_files:
    full_file_name = os.path.join(src, file_name)
    if os.path.isfile(full_file_name):
        shutil.copy(full_file_name, dest)"
5442,copy all files and directories from one folder to another,False,False,18,"xcopy ""C:\SomeFolderName"" ""D:\SomeFolderName"" /h /i /c /k /e /r /y"
5443,copy all files and directories from one folder to another,False,False,32,"import shutil
import os
    
source_dir = '/path/to/source_folder'
target_dir = '/path/to/dest_folder'
    
file_names = os.listdir(source_dir)
    
for file_name in file_names:
    shutil.move(os.path.join(source_dir, file_name), target_dir)"
5444,copy all files and directories from one folder to another,False,False,92,"def copytree(src, dst, symlinks=False, ignore=None):
    if not os.path.exists(dst):
        os.makedirs(dst)
    for item in os.listdir(src):
        s = os.path.join(src, item)
        d = os.path.join(dst, item)
        if os.path.isdir(s):
            copytree(s, d, symlinks, ignore)
        else:
            if not os.path.exists(d) or os.stat(s).st_mtime - os.stat(d).st_mtime > 1:
                shutil.copy2(s, d)"
5445,copy all files and directories from one folder to another,False,False,172,"#!/usr/bin/python
import os
import shutil
import stat
def copytree(src, dst, symlinks = False, ignore = None):
  if not os.path.exists(dst):
    os.makedirs(dst)
    shutil.copystat(src, dst)
  lst = os.listdir(src)
  if ignore:
    excl = ignore(src, lst)
    lst = [x for x in lst if x not in excl]
  for item in lst:
    s = os.path.join(src, item)
    d = os.path.join(dst, item)
    if symlinks and os.path.islink(s):
      if os.path.lexists(d):
        os.remove(d)
      os.symlink(os.readlink(s), d)
      try:
        st = os.lstat(s)
        mode = stat.S_IMODE(st.st_mode)
        os.lchmod(d, mode)
      except:
        pass # lchmod not available
    elif os.path.isdir(s):
      copytree(s, d, symlinks, ignore)
    else:
      shutil.copy2(s, d)"
5446,go to a url,False,True,14,"urllib.request.urlretrieve('<unk>', '<unk>')"
5447,go to a url,False,True,8,urllib.request.urlopen('<unk>')
5448,go to a url,False,True,8,urllib.parse.quote_plus('<unk>')
5449,go to a url,False,True,11,"urllib.request.urlretrieve('<unk>', 'URLopener')"
5450,go to a url,False,True,25,"urllib.request.urlretrieve('<unk>', '%Y-%m-%dT%H:%M:%S')"
5451,go to a url,False,True,11,"self.request.get('<unk>', '/')"
5452,go to a url,False,True,11,"urllib.request.urlretrieve('<unk>', '/')"
5453,go to a url,False,False,15,"import urllib.request
contents = urllib.request.urlopen(""http://example.com/foo/bar"").read()"
5454,go to a url,False,False,15,"import urllib2
contents = urllib2.urlopen(""http://example.com/foo/bar"").read()"
5455,go to a url,True,False,12,"import requests
r = requests.get(""http://example.com/foo/bar"")"
5456,go to a url,False,False,21,">>> print(r.status_code)
>>> print(r.headers)
>>> print(r.content)"
5457,go to a url,False,False,14,"import urllib

urllib.urlretrieve(""http://www.digimouth.com/news/media/2011/09/google-logo.jpg"", ""local-filename.jpg"")"
5458,go to a url,False,False,14,"import urllib.request

urllib.request.urlretrieve(""http://www.digimouth.com/news/media/2011/09/google-logo.jpg"", ""local-filename.jpg"")"
5459,go to a url,False,False,14,"import requests
r = requests.get('https://github.com/timeline.json')
r.json()"
5460,visit the url `url`,False,True,6,response = requests.visit(url)
5461,visit the url `url`,False,True,6,r = requests.visit(url)
5462,visit the url `url`,True,True,8,"r = requests.get(url, verify=False)"
5463,visit the url `url`,False,True,8,"response = requests.get(url, verify=False)"
5464,visit the url `url`,False,True,8,"response = requests.get(url, headers=url)"
5465,visit the url `url`,False,True,8,"response = requests.get(url, auth=url)"
5466,visit the url `url`,False,True,8,"r = requests.get(url, params=url)"
5467,visit the url `url`,False,False,13,"import webbrowser

webbrowser.open('http://example.com')  # Go to example.com"
5468,visit the url `url`,False,False,26,"import urllib

link = ""http://www.somesite.com/details.pl?urn=2344""
f = urllib.urlopen(link)
myfile = f.read()
print(myfile)"
5469,visit the url `url`,False,False,21,"import requests

link = ""http://www.somesite.com/details.pl?urn=2344""
f = requests.get(link)
print(f.text)"
5470,visit the url `url`,False,False,40,"import urllib2  # the lib that handles the url stuff

data = urllib2.urlopen(target_url) # it's a file like object and works just like a file
for line in data: # files are iterable
    print line"
5471,visit the url `url`,False,False,12,"import urllib2

for line in urllib2.urlopen(target_url):
    print line"
5472,visit the url `url`,False,False,43,"import urllib2

data = urllib2.urlopen(""http://www.google.com"").read(20000) # read only 20 000 chars
data = data.split(""\n"") # then split it into lines

for line in data:
    print line"
5473,visit the url `url`,False,False,37,"import urllib.request  # the lib that handles the url stuff

for line in urllib.request.urlopen(target_url):
    print(line.decode('utf-8')) #utf-8 or iso8859-1 or whatever the page encoding scheme is"
5474,parse all hyperlinks from `r` using bs4,False,True,7,"r.OR('td', text=False)"
5475,parse all hyperlinks from `r` using bs4,False,True,3,r.get_text()
5476,parse all hyperlinks from `r` using bs4,False,True,11,"r.OR('td', str=operator.itemgetter('td'))"
5477,parse all hyperlinks from `r` using bs4,False,True,4,r.text('')
5478,parse all hyperlinks from `r` using bs4,False,True,5,r.OR('\\s+')
5479,parse all hyperlinks from `r` using bs4,False,True,6,"r.pivot_table(r, letter=1)"
5480,parse all hyperlinks from `r` using bs4,False,True,7,"r.OR('td', text=True)"
5481,parse all hyperlinks from `r` using bs4,False,False,54,"import httplib2
from bs4 import BeautifulSoup, SoupStrainer

http = httplib2.Http()
status, response = http.request('http://www.nytimes.com')

for link in BeautifulSoup(response, parse_only=SoupStrainer('a')):
    if link.has_attr('href'):
        print(link['href'])"
5482,parse all hyperlinks from `r` using bs4,True,False,70,"from bs4 import BeautifulSoup
import urllib.request

parser = 'html.parser'  # or 'lxml' (preferred) or 'html5lib', if installed
resp = urllib.request.urlopen(""http://www.gpsbasecamp.com/national-parks"")
soup = BeautifulSoup(resp, parser, from_encoding=resp.info().get_param('charset'))

for link in soup.find_all('a', href=True):
    print(link['href'])"
5483,parse all hyperlinks from `r` using bs4,False,False,68,"from bs4 import BeautifulSoup
import urllib2

parser = 'html.parser'  # or 'lxml' (preferred) or 'html5lib', if installed
resp = urllib2.urlopen(""http://www.gpsbasecamp.com/national-parks"")
soup = BeautifulSoup(resp, parser, from_encoding=resp.info().getparam('charset'))

for link in soup.find_all('a', href=True):
    print link['href']"
5484,parse all hyperlinks from `r` using bs4,False,False,99,"from bs4 import BeautifulSoup
from bs4.dammit import EncodingDetector
import requests

parser = 'html.parser'  # or 'lxml' (preferred) or 'html5lib', if installed
resp = requests.get(""http://www.gpsbasecamp.com/national-parks"")
http_encoding = resp.encoding if 'charset' in resp.headers.get('content-type', '').lower() else None
html_encoding = EncodingDetector.find_declared_encoding(resp.content, is_html=True)
encoding = html_encoding or http_encoding
soup = BeautifulSoup(resp.content, parser, from_encoding=encoding)

for link in soup.find_all('a', href=True):
    print(link['href'])"
5485,parse all hyperlinks from `r` using bs4,False,False,47,"import urllib
import lxml.html
connection = urllib.urlopen('http://www.nytimes.com')

dom =  lxml.html.fromstring(connection.read())

for link in dom.xpath('//a/@href'): # select the url in href for all a tags(links)
    print link"
5486,parse all hyperlinks from `r` using bs4,False,False,56,"import urllib2
import BeautifulSoup

request = urllib2.Request(""http://www.gpsbasecamp.com/national-parks"")
response = urllib2.urlopen(request)
soup = BeautifulSoup.BeautifulSoup(response)
for a in soup.findAll('a'):
  if 'national-park' in a['href']:
    print 'found a url with national-park in the link'"
5487,parse all hyperlinks from `r` using bs4,False,False,26,"th_all = soup.find_all('th')
result = []
for th in th_all:
    result.extend(th.find_all(text='A'))"
5488,visit the given url `url` and extract all hrefs from there,False,True,14,"requests.get('url', headers={'Authorization': 'tail'})"
5489,visit the given url `url` and extract all hrefs from there,False,True,14,"requests.get('url', headers={'Authorization': 'value_name'})"
5490,visit the given url `url` and extract all hrefs from there,False,True,14,"requests.get('url', headers={'Authorization': 'value'})"
5491,visit the given url `url` and extract all hrefs from there,False,True,6,"requests.get(url, ignore_errors=False)"
5492,visit the given url `url` and extract all hrefs from there,False,True,14,"requests.get('url', headers={'Authorization': 'action'})"
5493,visit the given url `url` and extract all hrefs from there,False,True,5,os.removedirs('hrefs')
5494,visit the given url `url` and extract all hrefs from there,False,True,14,"requests.get('url', headers={'Authorization': 'container'})"
5495,visit the given url `url` and extract all hrefs from there,False,False,73,"from BeautifulSoup import BeautifulSoup

html = '''<a href=""some_url"">next</a>
<span class=""class""><a href=""another_url"">later</a></span>'''

soup = BeautifulSoup(html)

for a in soup.find_all('a', href=True):
    print ""Found the URL:"", a['href']"
5496,visit the given url `url` and extract all hrefs from there,False,False,10,"Found the URL: some_url
Found the URL: another_url"
5497,visit the given url `url` and extract all hrefs from there,False,False,6,href_tags = soup.find_all(href=True)
5498,visit the given url `url` and extract all hrefs from there,True,False,54,"import httplib2
from bs4 import BeautifulSoup, SoupStrainer

http = httplib2.Http()
status, response = http.request('http://www.nytimes.com')

for link in BeautifulSoup(response, parse_only=SoupStrainer('a')):
    if link.has_attr('href'):
        print(link['href'])"
5499,visit the given url `url` and extract all hrefs from there,False,False,91,"import re

url = '<p>Hello World</p><a href=""http://example.com"">More Examples</a><a href=""http://example2.com"">Even More Examples</a>'

urls = re.findall('https?://(?:[-\w.]|(?:%[\da-fA-F]{2}))+', url)

>>> print urls
['http://example.com', 'http://example2.com']"
5500,visit the given url `url` and extract all hrefs from there,False,False,40,"from BeautifulSoup import BeautifulSoup
import urllib2
import re

html_page = urllib2.urlopen(""http://www.yourwebsite.com"")
soup = BeautifulSoup(html_page)
for link in soup.findAll('a'):
    print link.get('href')"
5501,visit the given url `url` and extract all hrefs from there,False,False,21,"soup.findAll('a', attrs={'href': re.compile(""^http://"")})"
5502,visit `url` and extract hrefs using bs4,False,True,9,"requests.post(url='http://httpbin.org/post', json=str.read)"
5503,visit `url` and extract hrefs using bs4,False,True,7,json.list(urllib.parse.unquote(url))
5504,visit `url` and extract hrefs using bs4,False,True,9,"requests.post(url='http://httpbin.org/post', json=url)"
5505,visit `url` and extract hrefs using bs4,False,True,9,"requests.post(url='http://httpbin.org/post', json=None)"
5506,visit `url` and extract hrefs using bs4,False,True,9,"requests.post(url='http://httpbin.org/post', json=urllib.parse)"
5507,visit `url` and extract hrefs using bs4,False,True,8,json.list(urllib.request.urlopen('hrefs'))
5508,visit `url` and extract hrefs using bs4,False,True,9,"soup.head(url.columns, name=re.compile(''))"
5509,visit `url` and extract hrefs using bs4,True,False,73,"from BeautifulSoup import BeautifulSoup

html = '''<a href=""some_url"">next</a>
<span class=""class""><a href=""another_url"">later</a></span>'''

soup = BeautifulSoup(html)

for a in soup.find_all('a', href=True):
    print ""Found the URL:"", a['href']"
5510,visit `url` and extract hrefs using bs4,False,False,10,"Found the URL: some_url
Found the URL: another_url"
5511,visit `url` and extract hrefs using bs4,False,False,6,href_tags = soup.find_all(href=True)
5512,visit `url` and extract hrefs using bs4,False,False,91,"import re

url = '<p>Hello World</p><a href=""http://example.com"">More Examples</a><a href=""http://example2.com"">Even More Examples</a>'

urls = re.findall('https?://(?:[-\w.]|(?:%[\da-fA-F]{2}))+', url)

>>> print urls
['http://example.com', 'http://example2.com']"
5513,visit `url` and extract hrefs using bs4,False,False,40,"from BeautifulSoup import BeautifulSoup
import urllib2
import re

html_page = urllib2.urlopen(""http://www.yourwebsite.com"")
soup = BeautifulSoup(html_page)
for link in soup.findAll('a'):
    print link.get('href')"
5514,visit `url` and extract hrefs using bs4,False,False,21,"soup.findAll('a', attrs={'href': re.compile(""^http://"")})"
5515,visit `url` and extract hrefs using bs4,False,False,44,"from bs4 import BeautifulSoup
import urllib.request

html_page = urllib.request.urlopen(""http://www.yourwebsite.com"")
soup = BeautifulSoup(html_page, ""html.parser"")
for link in soup.findAll('a'):
    print(link.get('href'))"
5516,find all hrefs from `soup`,False,True,5,soup.find('hrefs')
5517,find all hrefs from `soup`,False,True,5,driver.find('soup')
5518,find all hrefs from `soup`,False,True,6,soup.find('?')
5519,find all hrefs from `soup`,False,True,5,soup.find('mykey1')
5520,find all hrefs from `soup`,False,True,5,soup.find('..')
5521,find all hrefs from `soup`,False,True,6,soup.find('.')
5522,find all hrefs from `soup`,False,True,6,"calendar.monthrange(2010, 2)"
5523,find all hrefs from `soup`,True,False,73,"from BeautifulSoup import BeautifulSoup

html = '''<a href=""some_url"">next</a>
<span class=""class""><a href=""another_url"">later</a></span>'''

soup = BeautifulSoup(html)

for a in soup.find_all('a', href=True):
    print ""Found the URL:"", a['href']"
5524,find all hrefs from `soup`,False,False,10,"Found the URL: some_url
Found the URL: another_url"
5525,find all hrefs from `soup`,False,False,6,href_tags = soup.find_all(href=True)
5526,find all hrefs from `soup`,False,False,40,"from BeautifulSoup import BeautifulSoup
import urllib2
import re

html_page = urllib2.urlopen(""http://www.yourwebsite.com"")
soup = BeautifulSoup(html_page)
for link in soup.findAll('a'):
    print link.get('href')"
5527,find all hrefs from `soup`,False,False,21,"soup.findAll('a', attrs={'href': re.compile(""^http://"")})"
5528,find all hrefs from `soup`,False,False,44,"from bs4 import BeautifulSoup
import urllib.request

html_page = urllib.request.urlopen(""http://www.yourwebsite.com"")
soup = BeautifulSoup(html_page, ""html.parser"")
for link in soup.findAll('a'):
    print(link.get('href'))"
5529,find all hrefs from `soup`,False,False,9,"soup.select(""a[href*=location]"")"
5530,find all bold text from html `soup`,False,True,14,"soup.findAll('div', href=re.compile('<unk>'))"
5531,find all bold text from html `soup`,False,True,13,"soup.findAll('div', href=re.compile('\x1b[1m'))"
5532,find all bold text from html `soup`,False,True,1,soup.page_source
5533,find all bold text from html `soup`,False,True,14,"soup.find_all('*', href=re.compile('<unk>'))"
5534,find all bold text from html `soup`,False,True,15,"soup.find_all('i', href=re.compile('<unk>'))"
5535,find all bold text from html `soup`,False,True,16,"soup.findAll('div', href=re.compile('\x1b[1m'))[1]"
5536,find all bold text from html `soup`,False,True,15,"soup.find('div', href=re.compile('<unk>')).text"
5537,find all bold text from html `soup`,False,False,118,"from bs4 import BeautifulSoup
from bs4.element import Comment
import urllib.request


def tag_visible(element):
    if element.parent.name in ['style', 'script', 'head', 'title', 'meta', '[document]']:
        return False
    if isinstance(element, Comment):
        return False
    return True


def text_from_html(body):
    soup = BeautifulSoup(body, 'html.parser')
    texts = soup.findAll(text=True)
    visible_texts = filter(tag_visible, texts)  
    return u"" "".join(t.strip() for t in visible_texts)

html = urllib.request.urlopen('http://www.nytimes.com/2009/12/21/us/21storm.html').read()
print(text_from_html(html))"
5538,find all bold text from html `soup`,False,False,91,"from BeautifulSoup import BeautifulSoup
import re

html_text = """"""
<h2>this is cool #12345678901</h2>
<h2>this is nothing</h2>
<h1>foo #126666678901</h1>
<h2>this is interesting #126666678901</h2>
<h2>this is blah #124445678901</h2>
""""""

soup = BeautifulSoup(html_text)


for elem in soup(text=re.compile(r' #\S{11}')):
    print elem.parent"
5539,find all bold text from html `soup`,False,False,33,"<h2>this is cool #12345678901</h2>
<h2>this is interesting #126666678901</h2>
<h2>this is blah #124445678901</h2>"
5540,find all bold text from html `soup`,True,False,15,"for strong_tag in soup.find_all('strong'):
    print(strong_tag.text, strong_tag.next_sibling)"
5541,find all bold text from html `soup`,False,False,159,"from bs4 import BeautifulSoup

html = '''
<p>
  <strong class=""offender"">YOB:</strong> 1987<br />
  <strong class=""offender"">RACE:</strong> WHITE<br />
  <strong class=""offender"">GENDER:</strong> FEMALE<br />
  <strong class=""offender"">HEIGHT:</strong> 5'05''<br />
  <strong class=""offender"">WEIGHT:</strong> 118<br />
  <strong class=""offender"">EYE COLOR:</strong> GREEN<br />
  <strong class=""offender"">HAIR COLOR:</strong> BROWN<br />
</p>
'''

soup = BeautifulSoup(html)

for strong_tag in soup.find_all('strong'):
    print(strong_tag.text, strong_tag.next_sibling)"
5542,find all bold text from html `soup`,False,False,24,"YOB:  1987
RACE:  WHITE
GENDER:  FEMALE
HEIGHT:  5'05''
WEIGHT:  118
EYE COLOR:  GREEN
HAIR COLOR:  BROWN"
5543,find all bold text from html `soup`,False,False,35,"soup.find_all(""a"", string=""Elsie"")
# [<a href=""http://example.com/elsie"" class=""sister"" id=""link1"">Elsie</a>]"
5544,find all red colored text from html `soup`,False,True,16,"re.sub('<unk>', '<unk>', soup)"
5545,find all red colored text from html `soup`,False,True,14,"re.sub('<unk>', '\\1@', soup)"
5546,find all red colored text from html `soup`,False,True,13,"re.sub('<unk>', '\\1.\\2', soup)"
5547,find all red colored text from html `soup`,False,True,12,"soup.findAll('dfs', style='<unk>')"
5548,find all red colored text from html `soup`,False,True,14,"soup.findAll('div', href=re.compile('<unk>'))"
5549,find all red colored text from html `soup`,False,True,12,"soup.findAll('td', style='<unk>')"
5550,find all red colored text from html `soup`,False,True,10,"re.findall('<unk>', soup)"
5551,find all red colored text from html `soup`,False,False,118,"from bs4 import BeautifulSoup
from bs4.element import Comment
import urllib.request


def tag_visible(element):
    if element.parent.name in ['style', 'script', 'head', 'title', 'meta', '[document]']:
        return False
    if isinstance(element, Comment):
        return False
    return True


def text_from_html(body):
    soup = BeautifulSoup(body, 'html.parser')
    texts = soup.findAll(text=True)
    visible_texts = filter(tag_visible, texts)  
    return u"" "".join(t.strip() for t in visible_texts)

html = urllib.request.urlopen('http://www.nytimes.com/2009/12/21/us/21storm.html').read()
print(text_from_html(html))"
5552,find all red colored text from html `soup`,False,False,91,"from BeautifulSoup import BeautifulSoup
import re

html_text = """"""
<h2>this is cool #12345678901</h2>
<h2>this is nothing</h2>
<h1>foo #126666678901</h1>
<h2>this is interesting #126666678901</h2>
<h2>this is blah #124445678901</h2>
""""""

soup = BeautifulSoup(html_text)


for elem in soup(text=re.compile(r' #\S{11}')):
    print elem.parent"
5553,find all red colored text from html `soup`,False,False,33,"<h2>this is cool #12345678901</h2>
<h2>this is interesting #126666678901</h2>
<h2>this is blah #124445678901</h2>"
5554,find all red colored text from html `soup`,False,False,15,"for strong_tag in soup.find_all('strong'):
    print(strong_tag.text, strong_tag.next_sibling)"
5555,find all red colored text from html `soup`,False,False,159,"from bs4 import BeautifulSoup

html = '''
<p>
  <strong class=""offender"">YOB:</strong> 1987<br />
  <strong class=""offender"">RACE:</strong> WHITE<br />
  <strong class=""offender"">GENDER:</strong> FEMALE<br />
  <strong class=""offender"">HEIGHT:</strong> 5'05''<br />
  <strong class=""offender"">WEIGHT:</strong> 118<br />
  <strong class=""offender"">EYE COLOR:</strong> GREEN<br />
  <strong class=""offender"">HAIR COLOR:</strong> BROWN<br />
</p>
'''

soup = BeautifulSoup(html)

for strong_tag in soup.find_all('strong'):
    print(strong_tag.text, strong_tag.next_sibling)"
5556,find all red colored text from html `soup`,False,False,24,"YOB:  1987
RACE:  WHITE
GENDER:  FEMALE
HEIGHT:  5'05''
WEIGHT:  118
EYE COLOR:  GREEN
HAIR COLOR:  BROWN"
5557,find all red colored text from html `soup`,True,False,35,"soup.find_all(""a"", string=""Elsie"")
# [<a href=""http://example.com/elsie"" class=""sister"" id=""link1"">Elsie</a>]"
5558,generate 100 random lowercase letters,False,True,4,random(choice=None)
5559,generate 100 random lowercase letters,False,True,6,"random.randint(0, 100)"
5560,generate 100 random lowercase letters,False,True,7,random.choice(range(100))
5561,generate 100 random lowercase letters,False,True,4,random(100)
5562,generate 100 random lowercase letters,False,True,4,random(hours=100)
5563,generate 100 random lowercase letters,False,True,11,"random.sample(range(0, 50), 100)"
5564,generate 100 random lowercase letters,False,True,9,"random.sample(range(100), 100)"
5565,generate 100 random lowercase letters,False,False,11,"s = ""Kilometer""
print(s.lower())"
5566,generate 100 random lowercase letters,True,False,16,''.join(random.choice(string.ascii_uppercase + string.digits) for _ in range(N))
5567,generate 100 random lowercase letters,False,False,11,"''.join(random.choices(string.ascii_uppercase + string.digits, k=N))"
5568,generate 100 random lowercase letters,False,False,19,''.join(random.SystemRandom().choice(string.ascii_uppercase + string.digits) for _ in range(N))
5569,generate 100 random lowercase letters,False,False,61,">>> import string
>>> import random
>>> def id_generator(size=6, chars=string.ascii_uppercase + string.digits):
...    return ''.join(random.choice(chars) for _ in range(size))
...
>>> id_generator()
'G5G74W'
>>> id_generator(3, ""6793YUIO"")
'Y3U'"
5570,generate 100 random lowercase letters,False,False,18,">>> string.ascii_uppercase
'ABCDEFGHIJKLMNOPQRSTUVWXYZ'
>>> string.digits
'0123456789'
>>> string.ascii_uppercase + string.digits
'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'"
5571,generate 100 random lowercase letters,False,False,62,">>> range(4) # range create a list of 'n' numbers
[0, 1, 2, 3]
>>> ['elem' for _ in range(4)] # we use range to create 4 times 'elem'
['elem', 'elem', 'elem', 'elem']"
5572,generate 100 random numbers,True,True,7,print(random.choice(100))
5573,generate 100 random numbers,False,True,10,print(random.choice(range(100)))
5574,generate 100 random numbers,False,True,12,"print(random.choice(range(100), **100))"
5575,generate 100 random numbers,False,True,9,"print(random.randint(0, 100))"
5576,generate 100 random numbers,False,True,12,"print(random.choice(range(100), microsecond=100))"
5577,generate 100 random numbers,False,True,7,random.choice(range(100))
5578,generate 100 random numbers,True,True,9,"print(random.randrange(0, 100))"
5579,generate 100 random numbers,False,False,26,">>> import random
>>> random.sample(range(1, 100), 3)
[77, 52, 45]"
5580,generate 100 random numbers,False,False,38,">>> try:
...   random.sample(range(1, 2), 3)
... except ValueError:
...   print('Sample size exceeded population size.')
... 
Sample size exceeded population size"
5581,generate 100 random numbers,False,False,92,">>> import numpy as np, numpy.random
>>> print np.random.dirichlet(np.ones(10),size=1)
[[ 0.01779975  0.14165316  0.01029262  0.168136    0.03061161  0.09046587
   0.19987289  0.13398581  0.03119906  0.17598322]]

>>> print np.random.dirichlet(np.ones(10)/1000.,size=1)
[[  2.63435230e-115   4.31961290e-209   1.41369771e-212   1.42417285e-188
    0.00000000e+000   5.79841280e-143   0.00000000e+000   9.85329725e-005
    9.99901467e-001   8.37460207e-246]]

>>> print np.random.dirichlet(np.ones(10)*1000.,size=1)
[[ 0.09967689  0.10151585  0.10077575  0.09875282  0.09935606  0.10093678
   0.09517132  0.09891358  0.10206595  0.10283501]]"
5582,generate 100 random numbers,False,False,13,"import random
my_randoms = random.sample(range(100), 10)"
5583,generate 100 random numbers,False,False,13,"my_randoms = random.sample(range(1, 101), 10)"
5584,generate 100 random numbers,False,False,21,"import random
my_randoms = [random.randrange(1, 101, 1) for _ in range(10)]"
5585,generate 100 random numbers,False,False,21,"Random number:    1  2  3  4  5  6  7  8
Result:           1  2  3  4  7  8  9 10"
5586,generate 100 random numbers,True,True,7,print(random.choice(100))
5587,generate 100 random numbers,False,True,10,print(random.choice(range(100)))
5588,generate 100 random numbers,False,True,12,"print(random.choice(range(100), **100))"
5589,generate 100 random numbers,False,True,9,"print(random.randint(0, 100))"
5590,generate 100 random numbers,False,True,12,"print(random.choice(range(100), microsecond=100))"
5591,generate 100 random numbers,False,True,7,random.choice(range(100))
5592,generate 100 random numbers,True,True,9,"print(random.randrange(0, 100))"
5593,generate 100 random numbers,False,False,26,">>> import random
>>> random.sample(range(1, 100), 3)
[77, 52, 45]"
5594,generate 100 random numbers,False,False,38,">>> try:
...   random.sample(range(1, 2), 3)
... except ValueError:
...   print('Sample size exceeded population size.')
... 
Sample size exceeded population size"
5595,generate 100 random numbers,False,False,92,">>> import numpy as np, numpy.random
>>> print np.random.dirichlet(np.ones(10),size=1)
[[ 0.01779975  0.14165316  0.01029262  0.168136    0.03061161  0.09046587
   0.19987289  0.13398581  0.03119906  0.17598322]]

>>> print np.random.dirichlet(np.ones(10)/1000.,size=1)
[[  2.63435230e-115   4.31961290e-209   1.41369771e-212   1.42417285e-188
    0.00000000e+000   5.79841280e-143   0.00000000e+000   9.85329725e-005
    9.99901467e-001   8.37460207e-246]]

>>> print np.random.dirichlet(np.ones(10)*1000.,size=1)
[[ 0.09967689  0.10151585  0.10077575  0.09875282  0.09935606  0.10093678
   0.09517132  0.09891358  0.10206595  0.10283501]]"
5596,generate 100 random numbers,False,False,13,"import random
my_randoms = random.sample(range(100), 10)"
5597,generate 100 random numbers,False,False,13,"my_randoms = random.sample(range(1, 101), 10)"
5598,generate 100 random numbers,False,False,21,"import random
my_randoms = [random.randrange(1, 101, 1) for _ in range(10)]"
5599,generate 100 random numbers,False,False,21,"Random number:    1  2  3  4  5  6  7  8
Result:           1  2  3  4  7  8  9 10"
5600,generate 100 random numbers from 1 to 20,False,True,9,"random.sample(range(100), 100)"
5601,generate 100 random numbers from 1 to 20,True,True,9,"print(random.randint(0, 100))"
5602,generate 100 random numbers from 1 to 20,False,True,7,"return random.randint(0, 100)"
5603,generate 100 random numbers from 1 to 20,False,True,10,print(random.choice(range(100)))
5604,generate 100 random numbers from 1 to 20,False,True,9,"print(random.randint(0, 7))"
5605,generate 100 random numbers from 1 to 20,False,True,6,"random.randint(0, 100)"
5606,generate 100 random numbers from 1 to 20,False,True,7,print(random.choice(100))
5607,generate 100 random numbers from 1 to 20,False,False,26,">>> import random
>>> random.sample(range(1, 100), 3)
[77, 52, 45]"
5608,generate 100 random numbers from 1 to 20,False,False,38,">>> try:
...   random.sample(range(1, 2), 3)
... except ValueError:
...   print('Sample size exceeded population size.')
... 
Sample size exceeded population size"
5609,generate 100 random numbers from 1 to 20,False,False,8,"import random
random.uniform(0, 1)"
5610,generate 100 random numbers from 1 to 20,False,False,11,"import random
random.sample(range(100), 10)"
5611,generate 100 random numbers from 1 to 20,False,False,21,"all_lines = f1.readlines()
for i in range(50):
    lines = random.sample(all_lines, 40)"
5612,generate 100 random numbers from 1 to 20,False,False,92,">>> import numpy as np, numpy.random
>>> print np.random.dirichlet(np.ones(10),size=1)
[[ 0.01779975  0.14165316  0.01029262  0.168136    0.03061161  0.09046587
   0.19987289  0.13398581  0.03119906  0.17598322]]

>>> print np.random.dirichlet(np.ones(10)/1000.,size=1)
[[  2.63435230e-115   4.31961290e-209   1.41369771e-212   1.42417285e-188
    0.00000000e+000   5.79841280e-143   0.00000000e+000   9.85329725e-005
    9.99901467e-001   8.37460207e-246]]

>>> print np.random.dirichlet(np.ones(10)*1000.,size=1)
[[ 0.09967689  0.10151585  0.10077575  0.09875282  0.09935606  0.10093678
   0.09517132  0.09891358  0.10206595  0.10283501]]"
5613,generate 100 random numbers from 1 to 20,False,False,13,"import random
my_randoms = random.sample(range(100), 10)"
5614,create a dictionary with keys `random_letters` and values `random_numbers`,False,True,21,"random_numbers = dict((key, random_numbers) for key, val in list(
    random_letters.items()))"
5615,create a dictionary with keys `random_letters` and values `random_numbers`,False,True,21,"random_numbers = dict((key, random_numbers) for key, value in list(
    random_letters.items()))"
5616,create a dictionary with keys `random_letters` and values `random_numbers`,True,True,23,"random_numbers = dict((key, value) for key, value in list(random_letters.
    items()))"
5617,create a dictionary with keys `random_letters` and values `random_numbers`,False,True,23,"random_letters = {key: random_numbers for key, random_numbers in list(
    random_letters.items()) if value == 'random_numbers'}"
5618,create a dictionary with keys `random_letters` and values `random_numbers`,False,True,21,"random_letters = dict((key, random_numbers) for key, val in list(
    random_letters.items()))"
5619,create a dictionary with keys `random_letters` and values `random_numbers`,False,True,21,"random_numbers = dict((key, random_numbers) for key, val in sorted(
    random_letters.items()))"
5620,create a dictionary with keys `random_letters` and values `random_numbers`,False,True,24,"random_letters = {key: random_numbers for key, random_numbers in list(
    random_letters.items()) if random_numbers != 'random_numbers'}"
5621,create a dictionary with keys `random_letters` and values `random_numbers`,False,False,26,"import random
d = {'VENEZUELA':'CARACAS', 'CANADA':'OTTAWA'}
random.choice(list(d.values()))"
5622,create a dictionary with keys `random_letters` and values `random_numbers`,False,False,13,"country, capital = random.choice(list(d.items()))"
5623,create a dictionary with keys `random_letters` and values `random_numbers`,False,False,18,"res = dict((v,k) for k,v in a.iteritems())"
5624,create a dictionary with keys `random_letters` and values `random_numbers`,False,False,18,"res = dict((v,k) for k,v in a.items())"
5625,create a dictionary with keys `random_letters` and values `random_numbers`,False,False,15,"new_dict = dict(zip(my_dict.values(), my_dict.keys()))"
5626,create a dictionary with keys `random_letters` and values `random_numbers`,False,False,50,">>> my_dict = {'x':1, 'y':2, 'z':3}
>>> {v: k for k, v in my_dict.items()}
{1: 'x', 2: 'y', 3: 'z'}"
5627,create a dictionary with keys `random_letters` and values `random_numbers`,False,False,62,"In [1]: my_dict = {'x':1, 'y':2, 'z':3}

In [2]: dict((value, key) for key, value in my_dict.iteritems())
Out[2]: {1: 'x', 2: 'y', 3: 'z'}"
5628,print `dic` sorted by keys,False,True,14,"print(sorted(list(dic.items()), key=k))"
5629,print `dic` sorted by keys,False,True,14,"print(sorted(list(dic.items()), **k))"
5630,print `dic` sorted by keys,True,True,14,"print(sorted(list(dic.items()), key=tuple))"
5631,print `dic` sorted by keys,False,True,8,print(dic.decode('*'))
5632,print `dic` sorted by keys,False,True,20,"print(sorted(list(dic.items()), key=lambda x: x[1]))"
5633,print `dic` sorted by keys,False,True,8,print(dic.decode('unicode-escape'))
5634,print `dic` sorted by keys,False,True,9,"print(sorted(dic, key=k))"
5635,print `dic` sorted by keys,True,False,78,"In [1]: import collections

In [2]: d = {2:3, 1:89, 4:5, 3:0}

In [3]: od = collections.OrderedDict(sorted(d.items()))

In [4]: od
Out[4]: OrderedDict([(1, 89), (2, 3), (3, 0), (4, 5)])"
5636,print `dic` sorted by keys,False,False,59,"In [11]: od[1]
Out[11]: 89

In [12]: od[3]
Out[12]: 0

In [13]: for k, v in od.iteritems(): print k, v
   ....: 
1 89
2 3
3 0
4 5"
5637,print `dic` sorted by keys,False,False,31,"In [13]: for k, v in od.items(): print(k, v)
   ....: 
1 89
2 3
3 0
4 5"
5638,print `dic` sorted by keys,False,False,36,"mydict = {'carl':40,
          'alan':2,
          'bob':1,
          'danny':3}

for key in sorted(mydict):
    print ""%s: %s"" % (key, mydict[key])"
5639,print `dic` sorted by keys,False,False,12,"alan: 2
bob: 1
carl: 40
danny: 3"
5640,print `dic` sorted by keys,False,False,30,"keylist = mydict.keys()
keylist.sort()
for key in keylist:
    print ""%s: %s"" % (key, mydict[key])"
5641,print `dic` sorted by keys,False,False,13,"for key, value in mydic.iteritems() :
    print key, value"
5642,print `dic` keys sorted,False,True,14,print('\n'.join(str(key) for key in dic))
5643,print `dic` keys sorted,False,True,14,print('\n'.join(str(key) for word in dic))
5644,print `dic` keys sorted,False,True,14,print('\n'.join(chr(key) for key in dic))
5645,print `dic` keys sorted,True,True,14,"print(sorted(list(dic.items()), key=k))"
5646,print `dic` keys sorted,False,True,8,print(dic.decode('unicode-escape'))
5647,print `dic` keys sorted,False,True,11,"sorted(list(dic.items()), key=k)"
5648,print `dic` keys sorted,False,True,14,"print(sorted(list(dic.items()), **k))"
5649,print `dic` keys sorted,False,False,74,">>> x = {1: 2, 3: 4, 4: 3, 2: 1, 0: 0}
>>> {k: v for k, v in sorted(x.items(), key=lambda item: item[1])}

{0: 0, 2: 1, 1: 2, 4: 3, 3: 4}"
5650,print `dic` keys sorted,False,False,38,"import operator
x = {1: 2, 3: 4, 4: 3, 2: 1, 0: 0}
sorted_x = sorted(x.items(), key=operator.itemgetter(1))"
5651,print `dic` keys sorted,False,False,38,"import operator
x = {1: 2, 3: 4, 4: 3, 2: 1, 0: 0}
sorted_x = sorted(x.items(), key=operator.itemgetter(0))"
5652,print `dic` keys sorted,False,False,39,"x = {1: 2, 3: 4, 4: 3, 2: 1, 0: 0}
sorted_x = sorted(x.items(), key=lambda kv: kv[1])"
5653,print `dic` keys sorted,False,False,8,"import collections

sorted_dict = collections.OrderedDict(sorted_x)"
5654,print `dic` keys sorted,False,False,23,"from collections import defaultdict
d = defaultdict(int)
for w in text.split():
    d[w] += 1"
5655,print `dic` keys sorted,False,False,21,"for w in sorted(d, key=d.get, reverse=True):
    print(w, d[w])"
5656,print `dic` keys on each line,True,True,14,print('\n'.join(str(key) for line in dic))
5657,print `dic` keys on each line,False,True,14,print('\n'.join(str(item) for item in dic))
5658,print `dic` keys on each line,False,True,14,print('\n'.join(str(p) for p in dic))
5659,print `dic` keys on each line,False,True,9,"print(dic.split(','))"
5660,print `dic` keys on each line,False,True,8,print(dic.decode('unicode-escape'))
5661,print `dic` keys on each line,False,True,11,print(dic.split(' <unk>'))
5662,print `dic` keys on each line,False,True,19,"print('\n'.join(str(key) for line in zip(dic, '')))"
5663,print `dic` keys on each line,False,False,13,"for key, value in mydic.iteritems() :
    print key, value"
5664,print `dic` keys on each line,False,False,15,"for key, value in mydic.items() :
    print (key, value)"
5665,print `dic` keys on each line,False,False,12,"for i in d:
    print i, d[i]"
5666,print `dic` keys on each line,False,False,13,"for k, v in d.iteritems():
    print k, v"
5667,print `dic` keys on each line,False,False,15,"for k, v in d.items():
    print(k, v)"
5668,print `dic` keys on each line,False,False,33,"for x in cars:
    print (x)
    for y in cars[x]:
        print (y,':',cars[x][y])"
5669,print `dic` keys on each line,False,False,14,"A
color : 2
speed : 70
B
color : 3
speed : 60"
5670,"read ""data.csv"" file",False,True,21,"with open('data.csv') as f:
    f = open(os.path.join(__location__, 'data.csv'))"
5671,"read ""data.csv"" file",False,True,19,"with open('data.csv') as f:
    f = open('data.csv', 'rb')"
5672,"read ""data.csv"" file",False,True,19,"with open('data.csv') as f:
    f = open(os.path.expanduser('data.csv'))"
5673,"read ""data.csv"" file",False,True,31,"with open('data.csv') as f:
    f = open('data.csv', 'rb')
    f = open('data.csv')
    writerow = f.readlines()"
5674,"read ""data.csv"" file",False,True,12,"f = open(os.path.join(__location__, 'data.csv'))"
5675,"read ""data.csv"" file",False,True,10,"with open('data.csv') as f:
    pass"
5676,"read ""data.csv"" file",True,True,14,"with open('data.csv', 'r') as f:
    pass"
5677,"read ""data.csv"" file",False,False,13,"Data = namedtuple(""Data"", next(reader))"
5678,"read ""data.csv"" file",False,False,4,next(reader)
5679,"read ""data.csv"" file",False,False,70,"import csv
from collections import namedtuple
from itertools import imap

with open(""data_file.txt"", mode=""rb"") as infile:
    reader = csv.reader(infile)
    Data = namedtuple(""Data"", next(reader))  # get names from column headers
    for data in imap(Data._make, reader):
        print data.foo
        # ...further processing of a line..."
5680,"read ""data.csv"" file",False,False,67,"import csv
from collections import namedtuple

with open(""data_file.txt"", newline="""") as infile:
    reader = csv.reader(infile)
    Data = namedtuple(""Data"", next(reader))  # get names from column headers
    for data in map(Data._make, reader):
        print(data.foo)
        # ...further processing of a line..."
5681,"read ""data.csv"" file",False,False,36,"with open('data_file.txt') as infile:
    reader = csv.DictReader(infile)
    Data = collections.namedtuple('Data', reader.fieldnames)
    tuples = [Data(**row) for row in reader]"
5682,"read ""data.csv"" file",False,False,37,"df_iter = pd.read_csv('data.csv', chunksize=10000, iterator=True)

for iter_num, chunk in enumerate(df_iter, 1):
    print(f'Processing iteration {iter_num}')
    # do things with chunk"
5683,"read ""data.csv"" file",False,False,16,"for chunk in pd.read_csv('data.csv', chunksize=10000):
    # do things with chunk"
5684,"read csv file ""data.csv""",True,True,14,"df = pd.read_csv('data.csv', sep=',', header=None)"
5685,"read csv file ""data.csv""",False,True,14,"df = pd.read_csv('data.csv', sep=',', **None)"
5686,"read csv file ""data.csv""",False,True,26,"with open('data.csv', 'rb') as ins:
    writer = pd.read_csv('data.csv', sep=',', header=None)"
5687,"read csv file ""data.csv""",False,True,26,"with open('data.csv', 'rb') as f:
    df = pd.read_csv('data.csv', sep=',', header=None)"
5688,"read csv file ""data.csv""",False,True,33,"with open('data.csv', 'rb') as f:
    df = pd.read_csv('data.csv', dtype={'data.csv': np.float64}, na_values=
        ['data.csv'])"
5689,"read csv file ""data.csv""",False,True,26,"with open('data.csv', 'rb') as line:
    df = pd.read_csv('data.csv', sep=',', header=None)"
5690,"read csv file ""data.csv""",False,True,26,"with open('data.csv', 'rb') as f:
    df = pd.read_csv('data.csv', sep=',', **None)"
5691,"read csv file ""data.csv""",False,False,15,row_count = sum(1 for row in fileObject)  # fileObject is your csv.reader
5692,"read csv file ""data.csv""",False,False,16,"with open(filename) as f:
    sum(1 for line in f)"
5693,"read csv file ""data.csv""",False,False,259,"import timeit
import csv
import pandas as pd

filename = './sample_submission.csv'

def talktime(filename, funcname, func):
    print(f""# {funcname}"")
    t = timeit.timeit(f'{funcname}(""{filename}"")', setup=f'from __main__ import {funcname}', number = 100) / 100
    print('Elapsed time : ', t)
    print('n = ', func(filename))
    print('\n')

def sum1forline(filename):
    with open(filename) as f:
        return sum(1 for line in f)
talktime(filename, 'sum1forline', sum1forline)

def lenopenreadlines(filename):
    with open(filename) as f:
        return len(f.readlines())
talktime(filename, 'lenopenreadlines', lenopenreadlines)

def lenpd(filename):
    return len(pd.read_csv(filename)) + 1
talktime(filename, 'lenpd', lenpd)

def csvreaderfor(filename):
    cnt = 0
    with open(filename) as f:
        cr = csv.reader(f)
        for row in cr:
            cnt += 1
    return cnt
talktime(filename, 'csvreaderfor', csvreaderfor)

def openenum(filename):
    cnt = 0
    with open(filename) as f:
        for i, line in enumerate(f,1):
            cnt += 1
    return cnt
talktime(filename, 'openenum', openenum)"
5694,"read csv file ""data.csv""",False,False,45,"# sum1forline
Elapsed time :  0.6327946722068599
n =  2528244


# lenopenreadlines
Elapsed time :  0.655304473598555
n =  2528244


# lenpd
Elapsed time :  0.7561274056295324
n =  2528244


# csvreaderfor
Elapsed time :  1.5571560935772661
n =  2528244


# openenum
Elapsed time :  0.773000013928679
n =  2528244"
5695,"read csv file ""data.csv""",False,False,13,"Data = namedtuple(""Data"", next(reader))"
5696,"read csv file ""data.csv""",False,False,4,next(reader)
5697,"read csv file ""data.csv""",False,False,70,"import csv
from collections import namedtuple
from itertools import imap

with open(""data_file.txt"", mode=""rb"") as infile:
    reader = csv.reader(infile)
    Data = namedtuple(""Data"", next(reader))  # get names from column headers
    for data in imap(Data._make, reader):
        print data.foo
        # ...further processing of a line..."
5698,delete first and last column of `df`,False,True,16,df[df.find('\n') + 1:df.find('\n')]
5699,delete first and last column of `df`,False,True,5,df[-2:]
5700,delete first and last column of `df`,False,True,7,df[~np.isnan(df)]
5701,delete first and last column of `df`,False,True,5,df[-4:]
5702,delete first and last column of `df`,False,True,18,"df[df.find('div') - 1:df.find('div', hex=1)]"
5703,delete first and last column of `df`,False,True,21,df[(df[0] != 0) | (df[-1] == 1)]
5704,delete first and last column of `df`,False,True,21,df[(df[0] != 1) | (df[-1] == 1)]
5705,delete first and last column of `df`,False,False,9,"df = df.drop('column_name', 1)"
5706,delete first and last column of `df`,True,False,9,"df.drop('column_name', axis=1, inplace=True)"
5707,delete first and last column of `df`,False,False,22,"df = df.drop(df.columns[[0, 1, 3]], axis=1)  # df.columns is zero-based pd.Index"
5708,delete first and last column of `df`,False,False,14,"df.drop(['column_nameA', 'column_nameB'], axis=1, inplace=True)"
5709,delete first and last column of `df`,False,False,6,del df['column_name']
5710,delete first and last column of `df`,False,False,19,"columns = ['Col1', 'Col2', ...]
df.drop(columns, inplace=True, axis=1)"
5711,delete first and last column of `df`,False,False,8,"df = df.drop(columns, axis=1)"
5712,"write output to csv file ""output.csv""",True,True,7,"output.csv.to_csv('output.csv', index=False)"
5713,"write output to csv file ""output.csv""",False,True,5,output.write('output.csv')
5714,"write output to csv file ""output.csv""",False,True,7,"output.csv.to_csv('output.csv', **False)"
5715,"write output to csv file ""output.csv""",False,True,7,"output.csv.to_csv('output.csv', header=False)"
5716,"write output to csv file ""output.csv""",False,True,7,"subprocess.call('output.csv', shell=True)"
5717,"write output to csv file ""output.csv""",False,True,9,"output.csv.to_csv('output.csv', sep=' ')"
5718,"write output to csv file ""output.csv""",False,True,4,subprocess.writerow(output.csv)
5719,"write output to csv file ""output.csv""",False,False,12,"print ""Tmin="", "", "".join(Tmin)"
5720,"write output to csv file ""output.csv""",False,False,9,"print ""Tmin="", Tmin[0]"
5721,"write output to csv file ""output.csv""",False,False,27,"writer.writerow(['Tmin']+Tmin) #note this is already printing the result to a file so dont ""print"" the return value"
5722,"write output to csv file ""output.csv""",False,False,80,"import csv
with open('somefile.csv', 'w') as file:
    output = csv.writer(file, delimiter='\t')
    output.writerows([
        ['code', 'info'],
        ['****', '****'],
        [None, '****'],
        [None, '****'],
        [None, '****'],
        ['****', '****'],
        [None, '****']
    ])"
5723,"write output to csv file ""output.csv""",False,False,10,"code    info
****    ****
        ****
        ****
        ****
****    ****
        ****"
5724,"write output to csv file ""output.csv""",False,False,87,"import csv
from itertools import izip_longest
from itertools import chain

data = [(""key"", [""value"", ""value""]), (""key"", [""value"", ""value""])]

with open('somefile.csv', 'w') as file:
    output = csv.writer(file, dialect='excel-tab')
    output.writerows(
        chain.from_iterable(
            izip_longest([key], values) for key, values in data
        )
    )"
5725,"write output to csv file ""output.csv""",False,False,6,"key     value
        value
key     value
        value"
5726,write `output` to csv file,True,True,7,"output.to_csv('output', index=False)"
5727,write `output` to csv file,False,True,7,"output.to_csv('output', **output)"
5728,write `output` to csv file,False,True,4,output.writerow(output)
5729,write `output` to csv file,False,True,4,writer.writerow(output)
5730,write `output` to csv file,False,True,4,f.writerow(output)
5731,write `output` to csv file,False,True,4,output.to_csv(output)
5732,write `output` to csv file,False,True,7,"output.to_csv('output', header=False)"
5733,write `output` to csv file,False,False,7,"df.to_csv(file_name, sep='\t')"
5734,write `output` to csv file,False,False,10,"df.to_csv(file_name, sep='\t', encoding='utf-8')"
5735,write `output` to csv file,False,False,9,"df.to_csv(file_name, encoding='utf-8', index=False)"
5736,write `output` to csv file,False,False,8,"Color  Number
0   red     22
1  blue     10"
5737,write `output` to csv file,False,False,5,"Color,Number
red,22
blue,10"
5738,write `output` to csv file,False,False,10,",Color,Number
0,red,22
1,blue,10"
5739,write `output` to csv file,False,False,36,"##text=List of strings to be written to file
with open('csvfile.csv','wb') as file:
    for line in text:
        file.write(line)
        file.write('\n')"
5740,"search for pattern ""%d%d-%d%d"" in `file`",False,True,7,print(file.group(1))
5741,"search for pattern ""%d%d-%d%d"" in `file`",False,True,29,"c = file.find('%d%d-%d%d', href=re.compile('%d%d-%d%d'))"
5742,"search for pattern ""%d%d-%d%d"" in `file`",False,True,29,"r = file.find('%d%d-%d%d', href=re.compile('%d%d-%d%d'))"
5743,"search for pattern ""%d%d-%d%d"" in `file`",False,True,16,"return re.match('%d%d-%d%d', file)"
5744,"search for pattern ""%d%d-%d%d"" in `file`",False,True,16,"if file.endswith('%d%d-%d%d'):
    pass"
5745,"search for pattern ""%d%d-%d%d"" in `file`",False,True,13,file.endswith('%d%d-%d%d')
5746,"search for pattern ""%d%d-%d%d"" in `file`",True,True,16,"return re.findall('%d%d-%d%d', file)"
5747,"search for pattern ""%d%d-%d%d"" in `file`",False,False,6,"import os.path
os.path.isfile(fname)"
5748,"search for pattern ""%d%d-%d%d"" in `file`",False,False,20,"from pathlib import Path

my_file = Path(""/path/to/file"")
if my_file.is_file():
    # file exists"
5749,"search for pattern ""%d%d-%d%d"" in `file`",False,False,8,"if my_file.is_dir():
    # directory exists"
5750,"search for pattern ""%d%d-%d%d"" in `file`",False,False,8,"if my_file.exists():
    # path exists"
5751,"search for pattern ""%d%d-%d%d"" in `file`",False,False,19,"try:
    my_abs_path = my_file.resolve(strict=True)
except FileNotFoundError:
    # doesn't exist
else:
    # exists"
5752,"search for pattern ""%d%d-%d%d"" in `file`",False,False,6,"import os.path
os.path.exists(file_path)"
5753,"search for pattern ""%d%d-%d%d"" in `file`",False,False,4,os.path.isfile(file_path)
5754,copy file from `src_path` to `dest_path`,True,True,6,"copyfile(src_path, dest_path)"
5755,copy file from `src_path` to `dest_path`,False,True,8,"dest_path = copyfile(src_path, dest_path)"
5756,copy file from `src_path` to `dest_path`,False,True,7,"copyfile(src_path, 'dest_path')"
5757,copy file from `src_path` to `dest_path`,False,True,6,"copyfile(dest_path, src_path)"
5758,copy file from `src_path` to `dest_path`,False,True,4,dest_path[src_path]
5759,copy file from `src_path` to `dest_path`,False,True,4,dest_path[:]
5760,copy file from `src_path` to `dest_path`,False,True,11,"dest_path = open('src_path', 'r')"
5761,copy file from `src_path` to `dest_path`,False,False,10,"from shutil import copyfile
copyfile(src, dst)"
5762,copy file from `src_path` to `dest_path`,False,False,57,"┌──────────────────┬────────┬───────────┬───────┬────────────────┐
│     Function     │ Copies │   Copies  │Can use│   Destination  │
│                  │metadata│permissions│buffer │may be directory│
├──────────────────┼────────┼───────────┼───────┼────────────────┤
│shutil.copy       │   No   │    Yes    │   No  │      Yes       │
│shutil.copyfile   │   No   │     No    │   No  │       No       │
│shutil.copy2      │  Yes   │    Yes    │   No  │      Yes       │
│shutil.copyfileobj│   No   │     No    │  Yes  │       No       │
└──────────────────┴────────┴───────────┴───────┴────────────────┘"
5763,copy file from `src_path` to `dest_path`,False,False,28,"import shutil
shutil.copy2('/src/dir/file.ext', '/dst/dir/newname.ext') # complete target filename given
shutil.copy2('/src/file.ext', '/dst/dir') # target filename is /dst/dir/file.ext"
5764,copy file from `src_path` to `dest_path`,False,False,10,"import shutil
shutil.copy('/etc/hostname', '/var/tmp/testhostname')"
5765,copy file from `src_path` to `dest_path`,False,False,35,"import os
import shutil
src_files = os.listdir(src)
for file_name in src_files:
    full_file_name = os.path.join(src, file_name)
    if os.path.isfile(full_file_name):
        shutil.copy(full_file_name, dest)"
5766,copy file from `src_path` to `dest_path`,False,False,6,"import os
import shutil
import subprocess"
5767,copy file from `src_path` to `dest_path`,False,False,20,"shutil.copyfile(src_file, dest_file, *, follow_symlinks=True)

# example    
shutil.copyfile('source.txt', 'destination.txt')"
5768,check if `file` is a directory,True,True,4,os.path.isfile(file)
5769,check if `file` is a directory,False,True,8,print(os.path.isfile('file'))
5770,check if `file` is a directory,False,True,3,file.isdigit()
5771,check if `file` is a directory,False,True,7,print(os.path.exists(file))
5772,check if `file` is a directory,False,True,7,'file' in os(*file)
5773,check if `file` is a directory,False,True,6,'file' in file.os()
5774,check if `file` is a directory,False,True,7,print(os.path.isfile(file))
5775,check if `file` is a directory,False,False,6,"import os.path
os.path.isfile(fname)"
5776,check if `file` is a directory,False,False,20,"from pathlib import Path

my_file = Path(""/path/to/file"")
if my_file.is_file():
    # file exists"
5777,check if `file` is a directory,False,False,8,"if my_file.is_dir():
    # directory exists"
5778,check if `file` is a directory,False,False,8,"if my_file.exists():
    # path exists"
5779,check if `file` is a directory,False,False,19,"try:
    my_abs_path = my_file.resolve(strict=True)
except FileNotFoundError:
    # doesn't exist
else:
    # exists"
5780,check if `file` is a directory,False,False,11,"import os 
dir_path = os.path.dirname(os.path.realpath(__file__))"
5781,check if `file` is a directory,False,False,7,"import os
cwd = os.getcwd()"
5782,"write `final_data` to csv file ""price.csv""",False,True,7,"final_data.to_csv('price.csv', **final_data)"
5783,"write `final_data` to csv file ""price.csv""",False,True,7,"final_data.to_csv('price.csv', index=False)"
5784,"write `final_data` to csv file ""price.csv""",True,True,5,final_data.to_csv('price.csv')
5785,"write `final_data` to csv file ""price.csv""",False,True,4,final_data.writerow(final_data)
5786,"write `final_data` to csv file ""price.csv""",False,True,7,"final_data.to_csv('price.csv', header=False)"
5787,"write `final_data` to csv file ""price.csv""",False,True,14,"final_data.to_csv('price.csv', **{'enumerate': 'price.csv'})"
5788,"write `final_data` to csv file ""price.csv""",False,True,7,"final_data.to_csv('price.csv', **False)"
5789,"write `final_data` to csv file ""price.csv""",False,False,62,"import csv

date_reader = csv.reader(open('Date.csv', 'rb'))
price_reader = csv.reader(open('Price.csv', 'rb'))
writer = csv.writer(open('NewData.csv', 'wb'))
for date_row in date_reader:
    price_row = price_reader.next()
    writer.writerow(date_row + [price_row[1]])"
5790,"write `final_data` to csv file ""price.csv""",False,False,41,"ID, Date, Price
0,""Jan 22, 2016"",27.89
1,""Jan 21, 2016"",26.80
2,""Jan 20, 2016"",26.78
3,""Jan 19, 2016"",26.00"
5791,"write `final_data` to csv file ""price.csv""",False,False,99,"with open('C:/Users/User/OneDrive/Documents/Date.csv') as file1, \
     open('C:/Users/User/OneDrive/Documents/Price.csv') as file2, \
     open('C:/Users/User/OneDrive/Documents/Output.csv', 'w') as output:
    reader1 = csv.DictReader(file1)
    reader2 = csv.DictReader(file2)
    writer = csv.DictWriter(output, ['ID', 'Date', 'Price'])
    writer.writeheader()  # Optional if you want the header

    for row1, row2 in zip(reader1, reader2):
        row1.update(row2)
        writer.writerow(row1)"
5792,"write `final_data` to csv file ""price.csv""",False,False,39,"import pandas as pd
file1 = pd.read_csv('Data.csv', index_col='ID')
file2 = pd.read_csv('Price.csv', index_col='ID')
pd.concat([file1,file2], axis=1).to_csv('Output.csv')"
5793,"write `final_data` to csv file ""price.csv""",False,False,41,"ID,Date,Price
0,""Jan 22, 2016"",27.89
1,""Jan 21, 2016"",26.80
2,""Jan 20, 2016"",26.78
3,""Jan 19, 2016"",26.00"
5794,"write `final_data` to csv file ""price.csv""",False,False,2,['2010-06-29
5795,"write `final_data` to csv file ""price.csv""",False,False,62,"csv1_dict = {  ...,
            ""CompanyA productA"" : 0,
            ""CompanyA productB"" : 0,
            ...
            }

csv2_dict = { ...,
            ""CompanyA productA"" : 10,
              ...
            }
for key,value in csv2_dict.iteritems():
    try:
        csv1_dict[key] = csv2_dict[key]
    except:
        #Key not in csv1"
5796,import datetime,False,True,7,os.chdir(os.path.abspath(__file__))
5797,import datetime,False,True,17,"datetime.strptime('<unk>', '%d%b%Y')"
5798,import datetime,False,True,8,importlib.import_module('<unk>')
5799,import datetime,False,True,13,"datetime.strptime('<unk>', '%B')"
5800,import datetime,False,True,7,os.chdir(os.path.abspath(datetime))
5801,import datetime,False,True,7,importlib.import_module.join(os.path.abspath(__file__))
5802,import datetime,False,True,9,"importlib.import_module('.c', 'string.')"
5803,import datetime,False,False,24,"import time

start = time.time()
print(""hello"")
end = time.time()
print(end - start)"
5804,import datetime,True,False,37,">>> import datetime
>>> datetime.datetime.today()
datetime.datetime(2012, 3, 23, 23, 24, 55, 173504)
>>> datetime.datetime.today().weekday()
4"
5805,import datetime,False,False,20,"from datetime import date
from datetime import datetime

dt = datetime.combine(date.today(), datetime.min.time())"
5806,import datetime,False,False,32,"from timeit import default_timer as timer

start = timer()
# ...
end = timer()
print(end - start) # Time in seconds, e.g. 5.38091952400282"
5807,import datetime,False,False,2,import datetime
5808,import datetime,False,False,23,"date_1 = datetime.datetime.strptime(start_date, ""%m/%d/%y"")

end_date = date_1 + datetime.timedelta(days=10)"
5809,import datetime,False,False,20,"from datetime import date
import calendar
my_date = date.today()
calendar.day_name[my_date.weekday()]  #'Wednesday'"
5810,get date 7 days from today,False,True,13,"date(2010, 12, 31) + relativedelta(months=+1)"
5811,get date 7 days from today,False,True,5,today = datetime.datetime.today()
5812,get date 7 days from today,False,True,13,"date(2010, 12, 31) + relativedelta(months=+2)"
5813,get date 7 days from today,False,True,5,now = datetime.datetime.today()
5814,get date 7 days from today,False,True,13,"date(2010, 12, 31) + timedelta(hours=5)"
5815,get date 7 days from today,False,True,5,today = datetime.date.today()
5816,get date 7 days from today,False,True,5,today = datetime.today()
5817,get date 7 days from today,False,False,38,">>> import datetime
>>> datetime.datetime.now()
datetime.datetime(2009, 1, 6, 15, 8, 24, 78915)

>>> print(datetime.datetime.now())
2009-01-06 15:08:24.789150"
5818,get date 7 days from today,False,False,32,">>> datetime.datetime.now().time()
datetime.time(15, 8, 24, 78915)

>>> print(datetime.datetime.now().time())
15:08:24.789150"
5819,get date 7 days from today,False,False,7,>>> from datetime import datetime
5820,get date 7 days from today,True,False,16,"from datetime import datetime, timedelta

d = datetime.today() - timedelta(days=days_to_subtract)"
5821,get date 7 days from today,False,False,37,">>> import datetime
>>> datetime.datetime.today()
datetime.datetime(2012, 3, 23, 23, 24, 55, 173504)
>>> datetime.datetime.today().weekday()
4"
5822,get date 7 days from today,False,False,38,">>> from time import gmtime, strftime
>>> strftime(""%Y-%m-%d %H:%M:%S"", gmtime())
'2009-01-05 22:14:39'"
5823,get date 7 days from today,False,False,33,"from datetime import date

d0 = date(2008, 8, 18)
d1 = date(2008, 9, 26)
delta = d1 - d0
print(delta.days)"
5824,change date format,True,True,23,"time.strftime('%Y-%m-%d %H:%M:%S', gmtime())"
5825,change date format,False,True,23,"time.strftime('%Y-%m-%d %H:%M:%S', time.gmtime())"
5826,change date format,False,True,30,"datetime.strptime('<unk>', '%a, %d %b %Y %H:%M:%S %Z')"
5827,change date format,False,True,30,"datetime.datetime.strptime('<unk>', '%a, %d %b %Y %H:%M:%S %Z')"
5828,change date format,False,True,29,"datetime.datetime.strptime('<unk>', '%B %d, %Y').strftime('%Y-%m-%d')"
5829,change date format,False,True,20,"datetime.datetime.strptime(s, '%B').strftime('%Y-%m-%d')"
5830,change date format,False,True,23,"time.strftime('%Y-%m-%d %H:%M:%S', datetime.gmtime())"
5831,change date format,False,False,87,"import pandas as pd

df = pd.DataFrame({'DOB': {0: '26/1/2016', 1: '26/1/2016'}})
print (df)
         DOB
0  26/1/2016 
1  26/1/2016

df['DOB'] = pd.to_datetime(df.DOB)
print (df)
         DOB
0 2016-01-26
1 2016-01-26

df['DOB1'] = df['DOB'].dt.strftime('%m/%d/%Y')
print (df)
         DOB        DOB1
0 2016-01-26  01/26/2016
1 2016-01-26  01/26/2016"
5832,change date format,False,False,26,"datetime.datetime.strptime(""2013-1-25"", '%Y-%m-%d').strftime('%m/%d/%y')"
5833,change date format,False,False,40,"dt = datetime.datetime.strptime(""2013-1-25"", '%Y-%m-%d')
print '{0}/{1}/{2:02}'.format(dt.month, dt.day, dt.year % 100)"
5834,change date format,False,False,26,"datetime.datetime.strptime(""2013-1-25"", '%Y-%m-%d').strftime('%m/%d/%y')"
5835,change date format,False,False,10,"datetime.datetime.strptime(date_string, format1).strftime(format2)"
5836,change date format,False,False,37,">>> datetime.datetime.strptime('Mon Feb 15 2010', '%a %b %d %Y').strftime('%d/%m/%Y')
'15/02/2010'
>>>"
5837,change date format,False,False,47,"from dateutil.parser import parse
dt = parse('Mon Feb 15 2010')
print(dt)
# datetime.datetime(2010, 2, 15, 0, 0)
print(dt.strftime('%d/%m/%Y'))
# 15/02/2010"
5838,remove header,True,True,12,"re.sub('<unk>', '', text)"
5839,remove header,False,True,12,"re.sub('<unk>', '', line)"
5840,remove header,False,True,6,"json.loads(url, headers=headers)"
5841,remove header,False,True,10,"json.loads(url, headers=re.compile('\\s+'))"
5842,remove header,False,True,6,"json.loads(line, headers=headers)"
5843,remove header,False,True,6,"requests.get(url, headers=headers)"
5844,remove header,False,True,6,"json.load(headers, headers=headers)"
5845,remove header,False,False,41,"new_header = df.iloc[0] #grab the first row for the header
df = df[1:] #take the data less the header row
df.columns = new_header #set the header row as the df header"
5846,remove header,False,False,13,"df.columns = df.iloc[0]
df = df[1:]"
5847,remove header,False,False,6,"df.to_csv(path, index=False)"
5848,remove header,False,False,41,"print df.shape[1]
2

print range(df.shape[1])
[0, 1]

df.columns = range(df.shape[1])
print df
    0   1
0  23  12
1  21  44
2  98  21"
5849,remove header,False,False,39,"print df.to_csv(header=None,index=False)
23,12
21,44
98,21

print pd.read_csv(io.StringIO(u""""+df.to_csv(header=None,index=False)), header=None)
    0   1
0  23  12
1  21  44
2  98  21"
5850,remove header,False,False,40,"print df.to_csv(index=False)
A,B
23,12
21,44
98,21

print pd.read_csv(io.StringIO(u""""+df.to_csv(index=False)), header=None, skiprows=1)
    0   1
0  23  12
1  21  44
2  98  21"
5851,remove header,False,False,14,df.rename(columns=df.iloc[0]).drop(df.index[0])
5852,run 5-fold accuracy,False,True,3,sys.exit()
5853,run 5-fold accuracy,False,True,9,os.chdir(os.path.realpath(5 - fold))
5854,run 5-fold accuracy,False,True,7,os.chdir(os.path.realpath(__file__))
5855,run 5-fold accuracy,False,True,3,platform.release()
5856,run 5-fold accuracy,False,True,9,os.chdir(os.path.abspath(5 - fold))
5857,run 5-fold accuracy,False,True,9,os.chdir(os.path.subdirname(5 - fold))
5858,run 5-fold accuracy,False,True,9,os.chdir(os.path.normpath(5 - fold))
5859,run 5-fold accuracy,False,False,26,"import timeit

start = timeit.default_timer()

#Your statements here

stop = timeit.default_timer()

print('Time: ', stop - start)"
5860,run 5-fold accuracy,False,False,14,"from datetime import datetime
start=datetime.now()

#Statements

print datetime.now()-start"
5861,run 5-fold accuracy,True,False,34,"import numpy as np
from sklearn.cross_validation import KFold

x = [1,2,3,4,5,6,7,8,9,10,11,12]
kf = KFold(12, n_folds=3)

for train_index, test_index in kf:
    print (train_index, test_index)"
5862,run 5-fold accuracy,False,False,28,"scores=parallel(delayed(_fit_and_score)(clone(estimator),X,y,scorer,
                                        train,test,verbose,None,fit_params)"
5863,run 5-fold accuracy,False,False,66,"from sklearn.metrics import accuracy_score

# ... everything else the same ...

# create an answer key
# I hope this is correct!
y_test = [[1], [2], [3]]

# same as yours...
classifier.fit(X_train, y_train)
predicted = classifier.predict(X_test)

# get the accuracy
print accuracy_score(y_test, predicted)"
5864,run 5-fold accuracy,False,False,21,"In [15]: iris['data'].shape
Out[15]: (150, 4)"
5865,run 5-fold accuracy,False,False,100,"from sklearn.linear_model import LogisticRegression
from sklearn import metrics, cross_validation
from sklearn import datasets
iris = datasets.load_iris()
predicted = cross_validation.cross_val_predict(LogisticRegression(), iris['data'], iris['target'], cv=10)
print metrics.accuracy_score(iris['target'], predicted)

Out [1] : 0.9537

print metrics.classification_report(iris['target'], predicted) 

Out [2] :
                     precision    recall  f1-score   support

                0       1.00      1.00      1.00        50
                1       0.96      0.90      0.93        50
                2       0.91      0.96      0.93        50

      avg / total       0.95      0.95      0.95       150"
5866,get height of bars in subplot bar gaphs,False,True,11,"plt.plot(x, y, color='b')"
5867,get height of bars in subplot bar gaphs,False,True,9,"plt.plot(x.min(), kind='bar')"
5868,get height of bars in subplot bar gaphs,False,True,9,"plt.plot(x, y, color='green')"
5869,get height of bars in subplot bar gaphs,False,True,8,"plt.savefig('bar', nonposy='clip')"
5870,get height of bars in subplot bar gaphs,False,True,6,"plt.subplots_adjust(wspace=0, hspace=0)"
5871,get height of bars in subplot bar gaphs,False,True,11,"plt.plot(x, y, color='c')"
5872,get height of bars in subplot bar gaphs,False,True,8,"plt.savefig('bar', background='utf-8')"
5873,get height of bars in subplot bar gaphs,False,False,31,"for i, v in enumerate(y):
    ax.text(v + 3, i + .25, str(v), color='blue', fontweight='bold')"
5874,get height of bars in subplot bar gaphs,False,False,294,"""""""
========
Barchart
========

A bar plot with errorbars and height labels on individual bars
""""""
import numpy as np
import matplotlib.pyplot as plt

N = 5
men_means = (20, 35, 30, 35, 27)
men_std = (2, 3, 4, 1, 2)

ind = np.arange(N)  # the x locations for the groups
width = 0.35       # the width of the bars

fig, ax = plt.subplots()
rects1 = ax.bar(ind, men_means, width, color='r', yerr=men_std)

women_means = (25, 32, 34, 20, 25)
women_std = (3, 5, 2, 3, 3)
rects2 = ax.bar(ind + width, women_means, width, color='y', yerr=women_std)

# add some text for labels, title and axes ticks
ax.set_ylabel('Scores')
ax.set_title('Scores by group and gender')
ax.set_xticks(ind + width / 2)
ax.set_xticklabels(('G1', 'G2', 'G3', 'G4', 'G5'))

ax.legend((rects1[0], rects2[0]), ('Men', 'Women'))


def autolabel(rects):
    """"""
    Attach a text label above each bar displaying its height
    """"""
    for rect in rects:
        height = rect.get_height()
        ax.text(rect.get_x() + rect.get_width()/2., 1.05*height,
                '%d' % int(height),
                ha='center', va='bottom')

autolabel(rects1)
autolabel(rects2)

plt.show()"
5875,get height of bars in subplot bar gaphs,False,False,32,"for i, v in enumerate(labels):
    axes.text(i-.25, 
              v/labels[i]+100, 
              labels[i], 
              fontsize=18, 
              color=label_color_list[i])"
5876,get height of bars in subplot bar gaphs,False,False,140,"import matplotlib.pyplot as plt
N = 5
menMeans = (20, 35, 30, 35, 27)
ind = np.arange(N)

#Creating a figure with some fig size
fig, ax = plt.subplots(figsize = (10,5))
ax.bar(ind,menMeans,width=0.4)
#Now the trick is here.
#plt.text() , you need to give (x,y) location , where you want to put the numbers,
#So here index will give you x pos and data+1 will provide a little gap in y axis.
for index,data in enumerate(menMeans):
    plt.text(x=index , y =data+1 , s=f""{data}"" , fontdict=dict(fontsize=20))
plt.tight_layout()
plt.show()"
5877,get height of bars in subplot bar gaphs,True,False,335,"def label_bars(ax, bars, text_format, **kwargs):
    """"""
    Attaches a label on every bar of a regular or horizontal bar chart
    """"""
    ys = [bar.get_y() for bar in bars]
    y_is_constant = all(y == ys[0] for y in ys)  # -> regular bar chart, since all all bars start on the same y level (0)

    if y_is_constant:
        _label_bar(ax, bars, text_format, **kwargs)
    else:
        _label_barh(ax, bars, text_format, **kwargs)


def _label_bar(ax, bars, text_format, **kwargs):
    """"""
    Attach a text label to each bar displaying its y value
    """"""
    max_y_value = ax.get_ylim()[1]
    inside_distance = max_y_value * 0.05
    outside_distance = max_y_value * 0.01

    for bar in bars:
        text = text_format.format(bar.get_height())
        text_x = bar.get_x() + bar.get_width() / 2

        is_inside = bar.get_height() >= max_y_value * 0.15
        if is_inside:
            color = ""white""
            text_y = bar.get_height() - inside_distance
        else:
            color = ""black""
            text_y = bar.get_height() + outside_distance

        ax.text(text_x, text_y, text, ha='center', va='bottom', color=color, **kwargs)


def _label_barh(ax, bars, text_format, **kwargs):
    """"""
    Attach a text label to each bar displaying its y value
    Note: label always outside. otherwise it's too hard to control as numbers can be very long
    """"""
    max_x_value = ax.get_xlim()[1]
    distance = max_x_value * 0.0025

    for bar in bars:
        text = text_format.format(bar.get_width())

        text_x = bar.get_width() + distance
        text_y = bar.get_y() + bar.get_height() / 2

        ax.text(text_x, text_y, text, va='center', **kwargs)"
5878,get height of bars in subplot bar gaphs,False,False,53,"fig, ax = plt.subplots((5, 5))
bars = ax.bar(x_pos, values, width=0.5, align=""center"")
value_format = ""{:.1%}""  # displaying values as percentage with one fractional digit
label_bars(ax, bars, value_format)"
5879,get height of bars in subplot bar gaphs,False,False,53,"fig, ax = plt.subplots((5, 5))
horizontal_bars = ax.barh(y_pos, values, width=0.5, align=""center"")
value_format = ""{:.1%}""  # displaying values as percentage with one fractional digit
label_bars(ax, horizontal_bars, value_format)"
5880,get labels above bars in subplots,False,True,6,"fig.subplots_adjust(wspace=0, hspace=0)"
5881,get labels above bars in subplots,False,True,6,"fig.subplots_adjust(wspace=0, unique=True)"
5882,get labels above bars in subplots,False,True,12,"fig.subplots_adjust(**'<unk>', index='font.size')"
5883,get labels above bars in subplots,False,True,12,"fig.subplots_adjust(**'<unk>', index='100')"
5884,get labels above bars in subplots,False,True,16,"fig.subplots_adjust(**'<unk>', index='<unk>')"
5885,get labels above bars in subplots,False,True,18,"fig.subplots_adjust(**'<unk>', **{'index': 'unique'})"
5886,get labels above bars in subplots,False,True,18,"fig.subplots_adjust(**'<unk>', **{'index': 'r1'})"
5887,get labels above bars in subplots,False,False,194,"import random
import matplotlib.pyplot as plt

x = range(1, 101)
y1 = [random.randint(1, 100) for _ in xrange(len(x))]
y2 = [random.randint(1, 100) for _ in xrange(len(x))]

fig = plt.figure()
ax = fig.add_subplot(111)    # The big subplot
ax1 = fig.add_subplot(211)
ax2 = fig.add_subplot(212)

# Turn off axis lines and ticks of the big subplot
ax.spines['top'].set_color('none')
ax.spines['bottom'].set_color('none')
ax.spines['left'].set_color('none')
ax.spines['right'].set_color('none')
ax.tick_params(labelcolor='w', top=False, bottom=False, left=False, right=False)

ax1.loglog(x, y1)
ax2.loglog(x, y2)

# Set common labels
ax.set_xlabel('common xlabel')
ax.set_ylabel('common ylabel')

ax1.set_title('ax1 title')
ax2.set_title('ax2 title')

plt.savefig('common_labels.png', dpi=300)"
5888,get labels above bars in subplots,False,False,141,"import random
import matplotlib.pyplot as plt

x = range(1, 101)
y1 = [random.randint(1, 100) for _ in xrange(len(x))]
y2 = [random.randint(1, 100) for _ in xrange(len(x))]

fig = plt.figure()
ax1 = fig.add_subplot(211)
ax2 = fig.add_subplot(212)

ax1.loglog(x, y1)
ax2.loglog(x, y2)

# Set common labels
fig.text(0.5, 0.04, 'common xlabel', ha='center', va='center')
fig.text(0.06, 0.5, 'common ylabel', ha='center', va='center', rotation='vertical')

ax1.set_title('ax1 title')
ax2.set_title('ax2 title')

plt.savefig('common_labels_text.png', dpi=300)"
5889,get labels above bars in subplots,True,False,31,"for i, v in enumerate(y):
    ax.text(v + 3, i + .25, str(v), color='blue', fontweight='bold')"
5890,get labels above bars in subplots,False,False,214,"import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

# Bring some raw data.
frequencies = [6, 16, 75, 160, 244, 260, 145, 73, 16, 4, 1]
# In my original code I create a series and run on that, 
# so for consistency I create a series from the list.
freq_series = pd.Series.from_array(frequencies)

x_labels = [108300.0, 110540.0, 112780.0, 115020.0, 117260.0, 119500.0,
            121740.0, 123980.0, 126220.0, 128460.0, 130700.0]

# Plot the figure.
plt.figure(figsize=(12, 8))
ax = freq_series.plot(kind='bar')
ax.set_title('Amount Frequency')
ax.set_xlabel('Amount ($)')
ax.set_ylabel('Frequency')
ax.set_xticklabels(x_labels)

rects = ax.patches

# Make some labels.
labels = [""label%d"" % i for i in xrange(len(rects))]

for rect, label in zip(rects, labels):
    height = rect.get_height()
    ax.text(rect.get_x() + rect.get_width() / 2, height + 5, label,
            ha='center', va='bottom')"
5891,get labels above bars in subplots,False,False,73,"import matplotlib.pyplot as plt

fig, axes = plt.subplots(3, 4, sharex=True, sharey=True)
# add a big axes, hide frame
fig.add_subplot(111, frameon=False)
# hide tick and tick label of the big axes
plt.tick_params(labelcolor='none', top=False, bottom=False, left=False, right=False)
plt.grid(False)
plt.xlabel(""common X"")
plt.ylabel(""common Y"")"
5892,get labels above bars in subplots,False,False,225,"import matplotlib.pyplot as plt
import numpy as np
from matplotlib.colors import ListedColormap

#discrete color scheme
cMap = ListedColormap(['white', 'green', 'blue','red'])

#data
np.random.seed(42)
data = np.random.rand(4, 4)
fig, ax = plt.subplots()
heatmap = ax.pcolor(data, cmap=cMap)

#legend
cbar = plt.colorbar(heatmap)

cbar.ax.get_yaxis().set_ticks([])
for j, lab in enumerate(['$0$','$1$','$2$','$>3$']):
    cbar.ax.text(.5, (2 * j + 1) / 8.0, lab, ha='center', va='center')
cbar.ax.get_yaxis().labelpad = 15
cbar.ax.set_ylabel('# of contacts', rotation=270)


# put the major ticks at the middle of each cell
ax.set_xticks(np.arange(data.shape[1]) + 0.5, minor=False)
ax.set_yticks(np.arange(data.shape[0]) + 0.5, minor=False)
ax.invert_yaxis()

#labels
column_labels = list('ABCD')
row_labels = list('WXYZ')
ax.set_xticklabels(column_labels, minor=False)
ax.set_yticklabels(row_labels, minor=False)

plt.show()"
5893,get labels above bars in subplots,False,False,431,"import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

# Bring some raw data.
frequencies = [6, -16, 75, 160, 244, 260, 145, 73, 16, 4, 1]

# In my original code I create a series and run on that,
# so for consistency I create a series from the list.
freq_series = pd.Series.from_array(frequencies)

x_labels = [108300.0, 110540.0, 112780.0, 115020.0, 117260.0, 119500.0,
            121740.0, 123980.0, 126220.0, 128460.0, 130700.0]

# Plot the figure.
plt.figure(figsize=(12, 8))
ax = freq_series.plot(kind='bar')
ax.set_title('Amount Frequency')
ax.set_xlabel('Amount ($)')
ax.set_ylabel('Frequency')
ax.set_xticklabels(x_labels)


def add_value_labels(ax, spacing=5):
    """"""Add labels to the end of each bar in a bar chart.

    Arguments:
        ax (matplotlib.axes.Axes): The matplotlib object containing the axes
            of the plot to annotate.
        spacing (int): The distance between the labels and the bars.
    """"""

    # For each bar: Place a label
    for rect in ax.patches:
        # Get X and Y placement of label from rect.
        y_value = rect.get_height()
        x_value = rect.get_x() + rect.get_width() / 2

        # Number of points between bar and label. Change to your liking.
        space = spacing
        # Vertical alignment for positive values
        va = 'bottom'

        # If value of bar is negative: Place label below bar
        if y_value < 0:
            # Invert space to place label below
            space *= -1
            # Vertically align label at top
            va = 'top'

        # Use Y value as label and format number with one decimal place
        label = ""{:.1f}"".format(y_value)

        # Create annotation
        ax.annotate(
            label,                      # Use `label` as label
            (x_value, y_value),         # Place label at end of the bar
            xytext=(0, space),          # Vertically shift label by `space`
            textcoords=""offset points"", # Interpret `xytext` as offset in points
            ha='center',                # Horizontally center label
            va=va)                      # Vertically align label differently for
                                        # positive and negative values.


# Call the function above. All the magic happens there.
add_value_labels(ax)

plt.savefig(""image.png"")"
5894,time and date,False,True,10,"datetime.datetime.combine(datetime.datetime.now(), datetime.datetime.now())"
5895,time and date,False,True,10,"datetime.datetime.combine(datetime.datetime.now(), datetime.date.now())"
5896,time and date,False,True,10,"datetime.datetime.combine(datetime.date.today(), datetime.date.now())"
5897,time and date,False,True,10,"datetime.datetime.combine(datetime.date.today(), datetime.datetime.now())"
5898,time and date,False,True,15,"datetime.datetime.combine(datetime.datetime.now(), datetime.date.now() +
    datetime.timedelta(hours=3))"
5899,time and date,False,True,19,datetime.datetime.now().strftime('%Y-%m-%d %H:%M')
5900,time and date,False,True,16,datetime.datetime.now().strftime('%H:%M:%S')
5901,time and date,False,False,38,">>> import datetime
>>> datetime.datetime.now()
datetime.datetime(2009, 1, 6, 15, 8, 24, 78915)

>>> print(datetime.datetime.now())
2009-01-06 15:08:24.789150"
5902,time and date,False,False,32,">>> datetime.datetime.now().time()
datetime.time(15, 8, 24, 78915)

>>> print(datetime.datetime.now().time())
15:08:24.789150"
5903,time and date,False,False,7,>>> from datetime import datetime
5904,time and date,True,False,38,">>> from time import gmtime, strftime
>>> strftime(""%Y-%m-%d %H:%M:%S"", gmtime())
'2009-01-05 22:14:39'"
5905,time and date,False,False,26,"from datetime import datetime
datetime.now().strftime('%Y-%m-%d %H:%M:%S')"
5906,time and date,False,False,2,import datetime
5907,time and date,False,False,23,"date_1 = datetime.datetime.strptime(start_date, ""%m/%d/%y"")

end_date = date_1 + datetime.timedelta(days=10)"
5908,gmt time 24,False,True,16,datetime.datetime.now().strftime('%H:%M:%S')
5909,gmt time 24,False,True,16,datetime.datetime.now().date.strftime('%H:%M:%S')
5910,gmt time 24,False,True,16,datetime.datetime.utcnow().strftime('%H:%M:%S')
5911,gmt time 24,False,True,6,datetime.datetime.now().isoformat()
5912,gmt time 24,False,True,10,"datetime.datetime.combine(datetime.date.today(), datetime.time())"
5913,gmt time 24,False,True,6,datetime.datetime.utcnow().isoformat()
5914,gmt time 24,False,True,14,datetime.datetime.now().strftime('%Y-%m-%d')
5915,gmt time 24,False,False,38,">>> import datetime
>>> datetime.datetime.now()
datetime.datetime(2009, 1, 6, 15, 8, 24, 78915)

>>> print(datetime.datetime.now())
2009-01-06 15:08:24.789150"
5916,gmt time 24,False,False,32,">>> datetime.datetime.now().time()
datetime.time(15, 8, 24, 78915)

>>> print(datetime.datetime.now().time())
15:08:24.789150"
5917,gmt time 24,False,False,7,>>> from datetime import datetime
5918,gmt time 24,True,False,38,">>> from time import gmtime, strftime
>>> strftime(""%Y-%m-%d %H:%M:%S"", gmtime())
'2009-01-05 22:14:39'"
5919,gmt time 24,False,False,26,"from datetime import datetime
datetime.now().strftime('%Y-%m-%d %H:%M:%S')"
5920,gmt time 24,False,False,19,">>> from datetime import datetime
>>> str(datetime.now())
'2011-05-03 17:45:35.177000'"
5921,gmt time 24,False,False,2,import time
5922,timedelta,False,True,6,"timedelta(hours=60, minutes=60)"
5923,timedelta,False,True,18,"time.strftime('%H:%M:%S', datetime.timedelta(hours=5))"
5924,timedelta,False,True,9,timedelta(hours=365) - timedelta(hours=2)
5925,timedelta,False,True,18,"datetime.datetime.combine(time.strftime('%H:%M:%S'), 60)"
5926,timedelta,False,True,9,timedelta(hours=365) - timedelta(hours=1)
5927,timedelta,False,True,9,timedelta(hours=365) & timedelta(hours=1)
5928,timedelta,True,True,9,timedelta(hours=5) - timedelta(hours=2)
5929,timedelta,False,False,16,">>> import datetime
>>> datetime.timedelta(seconds=24*60*60).total_seconds()
86400.0"
5930,timedelta,False,False,16,"def days_hours_minutes(td):
    return td.days, td.seconds//3600, (td.seconds//60)%60"
5931,timedelta,False,False,27,"import datetime
start = datetime.datetime(2009,2,10,14,00)
end   = datetime.datetime(2009,2,10,16,00)
delta = end-start
print(str(delta))
# prints 2:00:00"
5932,timedelta,False,False,57,"s = 13420
hours, remainder = divmod(s, 3600)
minutes, seconds = divmod(remainder, 60)
print '{:02}:{:02}:{:02}'.format(int(hours), int(minutes), int(seconds))
# result: 03:43:40"
5933,timedelta,False,False,83,"# arbitrary number of seconds
s = 13420
# hours
hours = s // 3600 
# remaining seconds
s = s - (hours * 3600)
# minutes
minutes = s // 60
# remaining seconds
seconds = s - (minutes * 60)
# total time
print '{:02}:{:02}:{:02}'.format(int(hours), int(minutes), int(seconds))
# result: 03:43:40"
5934,timedelta,False,False,29,"from dateutil.relativedelta import relativedelta

def yearsago(years, from_date=None):
    if from_date is None:
        from_date = datetime.now()
    return from_date - relativedelta(years=years)"
5935,timedelta,False,False,60,"from datetime import datetime
def yearsago(years, from_date=None):
    if from_date is None:
        from_date = datetime.now()
    try:
        return from_date.replace(year=from_date.year - years)
    except ValueError:
        # Must be 2/29!
        assert from_date.month == 2 and from_date.day == 29 # can be removed
        return from_date.replace(month=2, day=28,
                                 year=from_date.year-years)"
5936,time and date in certain,False,True,10,"datetime.datetime.combine(datetime.datetime.now(), datetime.datetime.now())"
5937,time and date in certain,False,True,10,"datetime.datetime.combine(datetime.datetime.now(), datetime.time())"
5938,time and date in certain,False,True,16,datetime.datetime.now().strftime('%H:%M:%S')
5939,time and date in certain,False,True,19,datetime.datetime.now().strftime('%Y-%m-%d %H:%M')
5940,time and date in certain,False,True,10,"datetime.datetime.combine(datetime.datetime.now(), datetime.datetime.t())"
5941,time and date in certain,True,True,15,"datetime.datetime.combine(datetime.datetime.now(), datetime.datetime.now() +
    datetime.timedelta(days=1))"
5942,time and date in certain,False,True,9,"datetime.datetime.combine(datetime.datetime.now(), 'time')"
5943,time and date in certain,False,False,38,">>> import datetime
>>> datetime.datetime.now()
datetime.datetime(2009, 1, 6, 15, 8, 24, 78915)

>>> print(datetime.datetime.now())
2009-01-06 15:08:24.789150"
5944,time and date in certain,False,False,32,">>> datetime.datetime.now().time()
datetime.time(15, 8, 24, 78915)

>>> print(datetime.datetime.now().time())
15:08:24.789150"
5945,time and date in certain,False,False,7,>>> from datetime import datetime
5946,time and date in certain,False,False,38,">>> from time import gmtime, strftime
>>> strftime(""%Y-%m-%d %H:%M:%S"", gmtime())
'2009-01-05 22:14:39'"
5947,time and date in certain,False,False,26,"from datetime import datetime
datetime.now().strftime('%Y-%m-%d %H:%M:%S')"
5948,time and date in certain,False,False,22,"base = datetime.datetime.today()
date_list = [base - datetime.timedelta(days=x) for x in range(numdays)]"
5949,time and date in certain,False,False,19,">>> from datetime import datetime
>>> str(datetime.now())
'2011-05-03 17:45:35.177000'"
5950,gmt,False,True,3,df.date.today()
5951,gmt,False,True,4,date.index.astype(parser.parse)
5952,gmt,False,True,5,today = date.date.today()
5953,gmt,False,True,4,date.index.apply(dateutil.parser.parse)
5954,gmt,False,True,4,date.dt.strftime(dateutil.parser.parse.exists)
5955,gmt,False,True,3,date.date.today()
5956,gmt,False,True,3,time.date.today()
5957,gmt,False,False,38,">>> import datetime
>>> datetime.datetime.now()
datetime.datetime(2009, 1, 6, 15, 8, 24, 78915)

>>> print(datetime.datetime.now())
2009-01-06 15:08:24.789150"
5958,gmt,False,False,32,">>> datetime.datetime.now().time()
datetime.time(15, 8, 24, 78915)

>>> print(datetime.datetime.now().time())
15:08:24.789150"
5959,gmt,False,False,7,>>> from datetime import datetime
5960,gmt,True,False,38,">>> from time import gmtime, strftime
>>> strftime(""%Y-%m-%d %H:%M:%S"", gmtime())
'2009-01-05 22:14:39'"
5961,gmt,False,False,26,"from datetime import datetime
datetime.now().strftime('%Y-%m-%d %H:%M:%S')"
5962,gmt,False,False,19,">>> from datetime import datetime
>>> str(datetime.now())
'2011-05-03 17:45:35.177000'"
5963,gmt,False,False,2,import time
5964,convert text file encoding,False,True,8,f.write('<unk>')
5965,convert text file encoding,False,True,15,"print(f.open('file.txt', 'r').read())"
5966,convert text file encoding,False,True,15,"print(io.open('file.txt', 'w').read())"
5967,convert text file encoding,False,True,11,print(f.read().decode('utf8'))
5968,convert text file encoding,False,True,11,print(f.read().decode('unicode-escape'))
5969,convert text file encoding,False,True,5,f.write('en_US')
5970,convert text file encoding,True,True,20,"print(codecs.open('file.txt', 'w', encoding='utf-8').decode('utf-8'))"
5971,convert text file encoding,False,False,47,"foo = u'Δ, Й, ק, ‎ م, ๗, あ, 叶, 葉, and 말.'
f = open('test', 'w')
f.write(foo.encode('utf8'))
f.close()"
5972,convert text file encoding,False,False,20,"f = file('test', 'r')
print f.read().decode('utf8')"
5973,convert text file encoding,False,False,14,">>> u'aあä'.encode('ascii', 'ignore')
'a'"
5974,convert text file encoding,False,False,55,">>> u'aあä'.encode('ascii', 'replace')
b'a??'
>>> u'aあä'.encode('ascii', 'xmlcharrefreplace')
b'a&#12354;&#228;'
>>> u'aあä'.encode('ascii', 'backslashreplace')
b'a\\u3042\\xe4'"
5975,convert text file encoding,False,False,14,">>> u'aあä'.encode('ascii', 'ignore')
'a'"
5976,convert text file encoding,False,False,26,">>> import unicodedata
>>> unicodedata.normalize('NFKD', u'aあä').encode('ascii', 'ignore')
'aa'"
5977,convert text file encoding,False,False,60,">>> print u'\u2019'
’
>>> unicodedata.name(u'\u2019')
'RIGHT SINGLE QUOTATION MARK'
>>> u'\u2019'.encode('ascii', 'ignore')
''
# Note we get an empty string back
>>> u'\u2019'.replace(u'\u2019', u'\'').encode('ascii', 'ignore')
""'"""
5978,covert file to utf,False,True,4,os.listdir(file)
5979,covert file to utf,False,True,4,os.chdir(file)
5980,covert file to utf,False,True,7,print(os.stat(file))
5981,covert file to utf,False,True,4,os.rmdir(pid)
5982,covert file to utf,False,True,7,print(os.from_iterable(file))
5983,covert file to utf,False,True,6,print(f.read())
5984,covert file to utf,False,True,4,os.write(file)
5985,covert file to utf,False,False,44,">>> plain_string = ""Hi!""
>>> unicode_string = u""Hi!""
>>> type(plain_string), type(unicode_string)
(<type 'str'>, <type 'unicode'>)"
5986,covert file to utf,False,False,22,">>> s = ""Hello!""
>>> u = unicode(s, ""utf-8"")"
5987,covert file to utf,False,False,18,">>> def tell_me_about(s): return (type(s), s)"
5988,covert file to utf,False,False,76,">>> v = ""\xC4pple"" # iso-8859-1 aka latin1 encoded string

>>> tell_me_about(v)
(<type 'str'>, '\xc4pple')

>>> v
'\xc4pple'        # representation in memory

>>> print v
?pple             # map the iso-8859-1 in-memory to iso-8859-1 chars
                  # note that '\xc4' has no representation in iso-8859-1, 
                  # so is printed as ""?""."
5989,covert file to utf,False,False,93,">>> uv = v.decode(""iso-8859-1"")
>>> uv
u'\xc4pple'       # decoding iso-8859-1 becomes unicode, in memory

>>> tell_me_about(uv)
(<type 'unicode'>, u'\xc4pple')

>>> print v.decode(""iso-8859-1"")
Äpple             # convert unicode to the default character set
                  # (utf-8, based on sys.stdout.encoding)

>>> v.decode('iso-8859-1') == u'\xc4pple'
True              # one could have just used a unicode representation 
                  # from the start"
5990,covert file to utf,False,False,106,">>> u""Ä"" == u""\xc4""
True              # the native unicode char and escaped versions are the same

>>> ""Ä"" == u""\xc4""  
False             # the native unicode char is '\xc3\x84' in latin1

>>> ""Ä"".decode('utf8') == u""\xc4""
True              # one can decode the string to get unicode

>>> ""Ä"" == ""\xc4""
False             # the native character and the escaped string are
                  # of course not equal ('\xc3\x84' != '\xc4')."
5991,covert file to utf,True,False,121,">>> u8 = v.decode(""iso-8859-1"").encode(""utf-8"")
>>> u8
'\xc3\x84pple'    # convert iso-8859-1 to unicode to utf-8

>>> tell_me_about(u8)
(<type 'str'>, '\xc3\x84pple')

>>> u16 = v.decode('iso-8859-1').encode('utf-16')
>>> tell_me_about(u16)
(<type 'str'>, '\xff\xfe\xc4\x00p\x00p\x00l\x00e\x00')

>>> tell_me_about(u8.decode('utf8'))
(<type 'unicode'>, u'\xc4pple')

>>> tell_me_about(u16.decode('utf16'))
(<type 'unicode'>, u'\xc4pple')"
5992,convert file to utf,False,True,11,print(os.listdir('<unk>'))
5993,convert file to utf,False,True,11,print(os.stat('<unk>'))
5994,convert file to utf,False,True,6,print(os.getcwd())
5995,convert file to utf,False,True,10,"print(mmap.decode('str_3', file))"
5996,convert file to utf,False,True,7,print(os.str_3(file))
5997,convert file to utf,False,True,7,print(os.stat(file))
5998,convert file to utf,False,True,12,"print(os.open('file.txt', 'w'))"
5999,convert file to utf,False,False,44,">>> plain_string = ""Hi!""
>>> unicode_string = u""Hi!""
>>> type(plain_string), type(unicode_string)
(<type 'str'>, <type 'unicode'>)"
6000,convert file to utf,False,False,22,">>> s = ""Hello!""
>>> u = unicode(s, ""utf-8"")"
6001,convert file to utf,False,False,18,">>> def tell_me_about(s): return (type(s), s)"
6002,convert file to utf,False,False,76,">>> v = ""\xC4pple"" # iso-8859-1 aka latin1 encoded string

>>> tell_me_about(v)
(<type 'str'>, '\xc4pple')

>>> v
'\xc4pple'        # representation in memory

>>> print v
?pple             # map the iso-8859-1 in-memory to iso-8859-1 chars
                  # note that '\xc4' has no representation in iso-8859-1, 
                  # so is printed as ""?""."
6003,convert file to utf,False,False,93,">>> uv = v.decode(""iso-8859-1"")
>>> uv
u'\xc4pple'       # decoding iso-8859-1 becomes unicode, in memory

>>> tell_me_about(uv)
(<type 'unicode'>, u'\xc4pple')

>>> print v.decode(""iso-8859-1"")
Äpple             # convert unicode to the default character set
                  # (utf-8, based on sys.stdout.encoding)

>>> v.decode('iso-8859-1') == u'\xc4pple'
True              # one could have just used a unicode representation 
                  # from the start"
6004,convert file to utf,False,False,106,">>> u""Ä"" == u""\xc4""
True              # the native unicode char and escaped versions are the same

>>> ""Ä"" == u""\xc4""  
False             # the native unicode char is '\xc3\x84' in latin1

>>> ""Ä"".decode('utf8') == u""\xc4""
True              # one can decode the string to get unicode

>>> ""Ä"" == ""\xc4""
False             # the native character and the escaped string are
                  # of course not equal ('\xc3\x84' != '\xc4')."
6005,convert file to utf,True,False,121,">>> u8 = v.decode(""iso-8859-1"").encode(""utf-8"")
>>> u8
'\xc3\x84pple'    # convert iso-8859-1 to unicode to utf-8

>>> tell_me_about(u8)
(<type 'str'>, '\xc3\x84pple')

>>> u16 = v.decode('iso-8859-1').encode('utf-16')
>>> tell_me_about(u16)
(<type 'str'>, '\xff\xfe\xc4\x00p\x00p\x00l\x00e\x00')

>>> tell_me_about(u8.decode('utf8'))
(<type 'unicode'>, u'\xc4pple')

>>> tell_me_about(u16.decode('utf16'))
(<type 'unicode'>, u'\xc4pple')"
6006,redirect,False,True,5,request.get('request')
6007,redirect,False,True,6,e = requests.get(request)
6008,redirect,False,True,5,request.get('/')
6009,redirect,False,True,5,request.get('dir')
6010,redirect,False,True,6,response = requests.get(request)
6011,redirect,False,True,6,request = requests.get(request)
6012,redirect,False,True,6,request = requests.get(url)
6013,redirect,False,False,18,"import sys
sys.stdout = open('file', 'w')
print('test')"
6014,redirect,False,False,5,$ python foo.py > file
6015,redirect,False,False,74,"import os
from flask import Flask,redirect

app = Flask(__name__)

@app.route('/')
def hello():
    return redirect(""http://www.example.com"", code=302)

if __name__ == '__main__':
    # Bind to PORT if defined, otherwise default to 5000.
    port = int(os.environ.get('PORT', 5000))
    app.run(host='0.0.0.0', port=port)"
6016,redirect,False,False,49,"# Use a list of args instead of a string
input_files = ['file1', 'file2', 'file3']
my_cmd = ['cat'] + input_files
with open('myfile', ""w"") as outfile:
    subprocess.run(my_cmd, stdout=outfile)"
6017,redirect,True,False,34,"from contextlib import redirect_stdout

with open('help.txt', 'w') as f:
    with redirect_stdout(f):
        print('it now prints to `help.text`')"
6018,redirect,False,False,47,"import sys
from contextlib import contextmanager

@contextmanager
def redirect_stdout(new_target):
    old_target, sys.stdout = sys.stdout, new_target # replace sys.stdout
    try:
        yield new_target # run some code with the replaced stdout
    finally:
        sys.stdout = old_target # restore to the previous value"
6019,redirect,False,False,55,"import os
from contextlib import redirect_stdout

stdout_fd = sys.stdout.fileno()
with open('output.txt', 'w') as f, redirect_stdout(f):
    print('redirected to a file')
    os.write(stdout_fd, b'not redirected')
    os.system('echo this also is not redirected')"
6020,unkown encoding,False,True,5,sys.setdefaultencoding('utf8')
6021,unkown encoding,False,True,7,"locale.setlocale(locale.LC_ALL, 'en_US')"
6022,unkown encoding,False,True,4,OrderedDict.fromkeys(f)
6023,unkown encoding,False,True,25,"print(pd.DataFrame({'apple': 'cat', 'banana': 'dog', 'pear': 'fish'}))"
6024,unkown encoding,False,True,22,"pd.DataFrame({'apple': 'cat', 'banana': 'dog', 'pear': 'fish'})"
6025,unkown encoding,False,True,16,"pd.DataFrame({'apple': 'cat', 'str_3': 'dog'})"
6026,unkown encoding,False,True,8,"pd.DataFrame({}, how='outer')"
6027,unkown encoding,False,False,3,pip install win-unicode-console
6028,unkown encoding,False,False,15,"from ctypes import cdll
os_encoding = 'cp' + str(cdll.kernel32.GetACP())"
6029,unkown encoding,False,False,18,"import locale
os_encoding = locale.getpreferredencoding()
# This returns 'cp1252' on my system, yay!"
6030,unkown encoding,False,False,23,"u_argv = [x.decode(os_encoding) for x in sys.argv]
u_env = os.getenv('myvar').decode(os_encoding)"
6031,unkown encoding,True,False,2,import encodings.idna
6032,unkown encoding,False,False,22,"from sklearn.preprocessing import OneHotEncoder

enc = OneHotEncoder(handle_unknown='ignore')
enc.fit(train)

enc.transform(train).toarray()"
6033,unkown encoding,False,False,139,"from sklearn import preprocessing
import numpy as np
import pandas as pd

train = {'city': ['Buenos Aires', 'New York', 'Istambul', 'Buenos Aires', 'Paris', 'Paris'],
        'letters': ['a', 'b', 'c', 'd', 'a', 'b']}
train = pd.DataFrame(train)

test = {'city': ['Buenos Aires', 'New York', 'Istambul', 'Buenos Aires', 'Paris', 'Utila'],
        'letters': ['a', 'b', 'c', 'a', 'b', 'b']}
test = pd.DataFrame(test)"
6034,sorting a dictionary by key,False,True,17,"sorted(list(a.items()), key=lambda x: x[1])"
6035,sorting a dictionary by key,False,True,17,"sorted(list(a.items()), key=lambda t: t[0])"
6036,sorting a dictionary by key,False,True,20,"sorted(list(a.items()), key=lambda item: item[1][1])"
6037,sorting a dictionary by key,False,True,20,"sorted(list(a.items()), key=lambda item: item[1][0])"
6038,sorting a dictionary by key,False,True,23,"sorted(list(a.items()), key=lambda x: x[1]['key'], reverse=True)"
6039,sorting a dictionary by key,False,True,15,"sorted(list(a.items()), **operator.itemgetter('key'))"
6040,sorting a dictionary by key,False,True,19,"sorted(list(a.items()), key=lambda k_v: k_v[1], reverse=True)"
6041,sorting a dictionary by key,False,False,74,">>> x = {1: 2, 3: 4, 4: 3, 2: 1, 0: 0}
>>> {k: v for k, v in sorted(x.items(), key=lambda item: item[1])}

{0: 0, 2: 1, 1: 2, 4: 3, 3: 4}"
6042,sorting a dictionary by key,False,False,38,"import operator
x = {1: 2, 3: 4, 4: 3, 2: 1, 0: 0}
sorted_x = sorted(x.items(), key=operator.itemgetter(1))"
6043,sorting a dictionary by key,False,False,38,"import operator
x = {1: 2, 3: 4, 4: 3, 2: 1, 0: 0}
sorted_x = sorted(x.items(), key=operator.itemgetter(0))"
6044,sorting a dictionary by key,True,False,39,"x = {1: 2, 3: 4, 4: 3, 2: 1, 0: 0}
sorted_x = sorted(x.items(), key=lambda kv: kv[1])"
6045,sorting a dictionary by key,False,False,8,"import collections

sorted_dict = collections.OrderedDict(sorted_x)"
6046,sorting a dictionary by key,False,False,15,"newlist = sorted(list_to_be_sorted, key=lambda k: k['name'])"
6047,sorting a dictionary by key,False,False,16,"from operator import itemgetter
newlist = sorted(list_to_be_sorted, key=itemgetter('name'))"
6048,convert list to dictionary,True,True,21,"dict((k, ':') for k, v in list(d.items()))"
6049,convert list to dictionary,False,True,19,"dict(map(lambda s: s.split(':'), [l]))"
6050,convert list to dictionary,False,True,19,"dict(map(lambda s: s.split(':'), [s]))"
6051,convert list to dictionary,False,True,23,"dict((k, ':') for k, v in map(list, d.items()))"
6052,convert list to dictionary,False,True,16,"dict((k, v) for k, v in d.items())"
6053,convert list to dictionary,False,True,19,"dict(map(lambda s: s.split(':'), [x]))"
6054,convert list to dictionary,False,True,19,"dict((k, v) for k, v in list(d.items()))"
6055,convert list to dictionary,False,False,20,"b = dict(zip(a[::2], a[1::2]))"
6056,convert list to dictionary,False,False,21,"from itertools import izip
i = iter(a)
b = dict(izip(i, i))"
6057,convert list to dictionary,False,False,27,"b = {a[i]: a[i+1] for i in range(0, len(a), 2)}"
6058,convert list to dictionary,False,False,17,"i = iter(a)
b = dict(zip(i, i))"
6059,convert list to dictionary,False,False,23,"l = [""a"", ""b"", ""c"", ""d"", ""e""]"
6060,convert list to dictionary,False,False,57,"dict(one=1, two=2)
dict({'one': 1, 'two': 2})
dict(zip(('one', 'two'), (1, 2)))
dict([['two', 2], ['one', 1]])"
6061,convert list to dictionary,False,False,30,"l = [[""a"", ""b""], [""c"", ""d""], [""e"",]]"
6062,get the date and time a week from now in gmt,False,True,7,datetime.datetime.now().date().year
6063,get the date and time a week from now in gmt,False,True,14,datetime.datetime.now().strftime('%Y-%m-%d')
6064,get the date and time a week from now in gmt,True,True,10,datetime.datetime.now().strftime('%a')
6065,get the date and time a week from now in gmt,False,True,16,"datetime.datetime.combine(datetime.datetime.now(), '%B %d, %Y')"
6066,get the date and time a week from now in gmt,False,True,16,datetime.datetime.now().strftime('%H:%M:%S')
6067,get the date and time a week from now in gmt,False,True,11,"datetime.datetime.combine(datetime.date.today(), datetime.timedelta(hours=3))"
6068,get the date and time a week from now in gmt,False,True,4,datetime.datetime.now().date
6069,get the date and time a week from now in gmt,False,False,38,">>> import datetime
>>> datetime.datetime.now()
datetime.datetime(2009, 1, 6, 15, 8, 24, 78915)

>>> print(datetime.datetime.now())
2009-01-06 15:08:24.789150"
6070,get the date and time a week from now in gmt,False,False,32,">>> datetime.datetime.now().time()
datetime.time(15, 8, 24, 78915)

>>> print(datetime.datetime.now().time())
15:08:24.789150"
6071,get the date and time a week from now in gmt,False,False,7,>>> from datetime import datetime
6072,get the date and time a week from now in gmt,False,False,38,">>> from time import gmtime, strftime
>>> strftime(""%Y-%m-%d %H:%M:%S"", gmtime())
'2009-01-05 22:14:39'"
6073,get the date and time a week from now in gmt,False,False,26,"from datetime import datetime
datetime.now().strftime('%Y-%m-%d %H:%M:%S')"
6074,get the date and time a week from now in gmt,False,False,19,">>> from datetime import datetime
>>> str(datetime.now())
'2011-05-03 17:45:35.177000'"
6075,get the date and time a week from now in gmt,False,False,23,">>> import datetime
>>> datetime.date(2010, 6, 16).isocalendar()[1]
24"
6076,get date and time in gmt,False,True,10,"datetime.datetime.combine(datetime.date.today(), datetime.date.now())"
6077,get date and time in gmt,False,True,10,"datetime.datetime.combine(datetime.datetime.now(), datetime.date.now())"
6078,get date and time in gmt,False,True,10,"datetime.datetime.combine(datetime.datetime.now(), datetime.datetime.now())"
6079,get date and time in gmt,False,True,10,"datetime.datetime.combine(datetime.date.today(), datetime.date.today())"
6080,get date and time in gmt,True,True,10,"datetime.datetime.combine(datetime.date.today(), datetime.date.utcnow())"
6081,get date and time in gmt,False,True,10,"now = datetime.datetime.combine(datetime.date.today(), time)"
6082,get date and time in gmt,False,True,8,"datetime.datetime.combine(datetime.date.today(), time)"
6083,get date and time in gmt,False,False,38,">>> import datetime
>>> datetime.datetime.now()
datetime.datetime(2009, 1, 6, 15, 8, 24, 78915)

>>> print(datetime.datetime.now())
2009-01-06 15:08:24.789150"
6084,get date and time in gmt,False,False,32,">>> datetime.datetime.now().time()
datetime.time(15, 8, 24, 78915)

>>> print(datetime.datetime.now().time())
15:08:24.789150"
6085,get date and time in gmt,False,False,7,>>> from datetime import datetime
6086,get date and time in gmt,False,False,38,">>> from time import gmtime, strftime
>>> strftime(""%Y-%m-%d %H:%M:%S"", gmtime())
'2009-01-05 22:14:39'"
6087,get date and time in gmt,False,False,26,"from datetime import datetime
datetime.now().strftime('%Y-%m-%d %H:%M:%S')"
6088,get date and time in gmt,False,False,19,">>> from datetime import datetime
>>> str(datetime.now())
'2011-05-03 17:45:35.177000'"
6089,get date and time in gmt,False,False,2,import time
6090,get time and date in gmt in `date`,False,True,5,date = datetime.datetime.now()
6091,get time and date in gmt in `date`,False,True,3,date.date.total_seconds()
6092,get time and date in gmt in `date`,True,True,8,"datetime.datetime.combine(date, datetime.time())"
6093,get time and date in gmt in `date`,False,True,5,dt = datetime.datetime.now()
6094,get time and date in gmt in `date`,False,True,13,date.date.strftime('%H:%M:%S')
6095,get time and date in gmt in `date`,False,True,3,date.date.timetuple()
6096,get time and date in gmt in `date`,False,True,10,"dt = datetime.datetime.combine(datetime.date.today(), date)"
6097,get time and date in gmt in `date`,False,False,38,">>> import datetime
>>> datetime.datetime.now()
datetime.datetime(2009, 1, 6, 15, 8, 24, 78915)

>>> print(datetime.datetime.now())
2009-01-06 15:08:24.789150"
6098,get time and date in gmt in `date`,False,False,32,">>> datetime.datetime.now().time()
datetime.time(15, 8, 24, 78915)

>>> print(datetime.datetime.now().time())
15:08:24.789150"
6099,get time and date in gmt in `date`,False,False,7,>>> from datetime import datetime
6100,get time and date in gmt in `date`,False,False,38,">>> from time import gmtime, strftime
>>> strftime(""%Y-%m-%d %H:%M:%S"", gmtime())
'2009-01-05 22:14:39'"
6101,get time and date in gmt in `date`,False,False,26,"from datetime import datetime
datetime.now().strftime('%Y-%m-%d %H:%M:%S')"
6102,get time and date in gmt in `date`,False,False,19,">>> from datetime import datetime
>>> str(datetime.now())
'2011-05-03 17:45:35.177000'"
6103,get time and date in gmt in `date`,False,False,2,import time
6104,get the current date in utc,True,True,8,today = datetime.datetime.utcnow().date()
6105,get the current date in utc,False,True,5,today = datetime.now()
6106,get the current date in utc,False,True,5,now = datetime.now()
6107,get the current date in utc,False,True,5,now = datetime.datetime.now()
6108,get the current date in utc,False,True,8,today = datetime.datetime.now().date()
6109,get the current date in utc,False,True,5,utcnow = datetime.now()
6110,get the current date in utc,False,True,6,datetime.datetime.now().isoformat()
6111,get the current date in utc,False,False,38,">>> import datetime
>>> datetime.datetime.now()
datetime.datetime(2009, 1, 6, 15, 8, 24, 78915)

>>> print(datetime.datetime.now())
2009-01-06 15:08:24.789150"
6112,get the current date in utc,False,False,32,">>> datetime.datetime.now().time()
datetime.time(15, 8, 24, 78915)

>>> print(datetime.datetime.now().time())
15:08:24.789150"
6113,get the current date in utc,False,False,7,>>> from datetime import datetime
6114,get the current date in utc,False,False,38,">>> from time import gmtime, strftime
>>> strftime(""%Y-%m-%d %H:%M:%S"", gmtime())
'2009-01-05 22:14:39'"
6115,get the current date in utc,False,False,26,"from datetime import datetime
datetime.now().strftime('%Y-%m-%d %H:%M:%S')"
6116,get the current date in utc,False,False,19,">>> from datetime import datetime
>>> str(datetime.now())
'2011-05-03 17:45:35.177000'"
6117,get the current date in utc,False,False,2,import time
6118,get the current time in utc,False,True,8,now = datetime.datetime.now().isoformat()
6119,get the current time in utc,True,True,8,now = datetime.datetime.utcnow().date()
6120,get the current time in utc,False,True,8,now = datetime.datetime.utcnow().size()
6121,get the current time in utc,False,True,16,datetime.datetime.now().strftime('%H:%M:%S')
6122,get the current time in utc,False,True,8,now = datetime.datetime.now().date()
6123,get the current time in utc,False,True,6,datetime.datetime.now().isoformat()
6124,get the current time in utc,False,True,18,now = datetime.datetime.now().order_by('%H:%M:%S')
6125,get the current time in utc,False,False,38,">>> import datetime
>>> datetime.datetime.now()
datetime.datetime(2009, 1, 6, 15, 8, 24, 78915)

>>> print(datetime.datetime.now())
2009-01-06 15:08:24.789150"
6126,get the current time in utc,False,False,32,">>> datetime.datetime.now().time()
datetime.time(15, 8, 24, 78915)

>>> print(datetime.datetime.now().time())
15:08:24.789150"
6127,get the current time in utc,False,False,7,>>> from datetime import datetime
6128,get the current time in utc,False,False,38,">>> from time import gmtime, strftime
>>> strftime(""%Y-%m-%d %H:%M:%S"", gmtime())
'2009-01-05 22:14:39'"
6129,get the current time in utc,False,False,26,"from datetime import datetime
datetime.now().strftime('%Y-%m-%d %H:%M:%S')"
6130,get the current time in utc,False,False,19,">>> from datetime import datetime
>>> str(datetime.now())
'2011-05-03 17:45:35.177000'"
6131,get the current time in utc,False,False,114,"from datetime import datetime
from dateutil import tz

# METHOD 1: Hardcode zones:
from_zone = tz.gettz('UTC')
to_zone = tz.gettz('America/New_York')

# METHOD 2: Auto-detect zones:
from_zone = tz.tzutc()
to_zone = tz.tzlocal()

# utc = datetime.utcnow()
utc = datetime.strptime('2011-01-21 02:37:21', '%Y-%m-%d %H:%M:%S')

# Tell the datetime object that it's in UTC time zone since 
# datetime objects are 'naive' by default
utc = utc.replace(tzinfo=from_zone)

# Convert time zone
central = utc.astimezone(to_zone)"
6132,date from 7 days,False,True,17,"datetime.datetime.strptime('<unk>', '%d%b%Y')"
6133,date from 7 days,False,True,8,"datetime.datetime.strptime('var_1', 'str_3')"
6134,date from 7 days,False,True,18,"datetime.datetime.strptime('January 11, 2010', '%B %d, %Y')"
6135,date from 7 days,False,True,14,"datetime.datetime.strptime('date', '%d%b%Y')"
6136,date from 7 days,False,True,18,"datetime.datetime.strptime('<unk>', '%B %d, %Y')"
6137,date from 7 days,False,True,21,"datetime.datetime.strptime('<unk> 11, 2010', '%B %d, %Y')"
6138,date from 7 days,False,True,6,"datetime.datetime.combine(date, datetime.time.min)"
6139,date from 7 days,True,False,16,"from datetime import datetime, timedelta

d = datetime.today() - timedelta(days=days_to_subtract)"
6140,date from 7 days,False,False,2,import datetime
6141,date from 7 days,False,False,23,"date_1 = datetime.datetime.strptime(start_date, ""%m/%d/%y"")

end_date = date_1 + datetime.timedelta(days=10)"
6142,date from 7 days,False,False,24,"date = datetime.datetime(2003,8,1,12,4,5)
for i in range(5): 
    date += datetime.timedelta(days=1)
    print(date)"
6143,date from 7 days,False,False,6,"from datetime import timedelta, date"
6144,date from 7 days,False,False,10,EndDate = date.today() + timedelta(days=10)
6145,date from 7 days,False,False,17,"import datetime as DT
today = DT.date.today()
week_ago = today - DT.timedelta(days=7)"
6146,open csv file with read and write,False,True,12,"df = pd.read_csv('<unk>', header=None)"
6147,open csv file with read and write,True,True,7,"pd.read_csv('file', shell=True)"
6148,open csv file with read and write,False,True,4,writer.writerow(csv)
6149,open csv file with read and write,False,True,7,"pd.read_csv('open', shell=True)"
6150,open csv file with read and write,False,True,7,"pd.read_csv('write', shell=True)"
6151,open csv file with read and write,False,True,17,"df = pd.read_csv('<unk>', sep=',', header=None)"
6152,open csv file with read and write,False,True,17,"df = pd.read_csv('<unk>', quotechar=',', header=None)"
6153,open csv file with read and write,False,False,46,"try:
    f = open(fname, 'rb')
except OSError:
    print ""Could not open/read file:"", fname
    sys.exit()

with f:
    reader = csv.reader(f)
    for row in reader:
        pass #do stuff here"
6154,open csv file with read and write,False,False,180,"import csv

# Define data
data = [
    (1, ""A towel,"", 1.0),
    (42, "" it says, "", 2.0),
    (1337, ""is about the most "", -1),
    (0, ""massively useful thing "", 123),
    (-2, ""an interstellar hitchhiker can have."", 3),
]

# Write CSV file
with open(""test.csv"", ""wt"") as fp:
    writer = csv.writer(fp, delimiter="","")
    # writer.writerow([""your"", ""header"", ""foo""])  # write header
    writer.writerows(data)

# Read CSV file
with open(""test.csv"") as fp:
    reader = csv.reader(fp, delimiter="","", quotechar='""')
    # next(reader, None)  # skip the headers
    data_read = [row for row in reader]

print(data_read)"
6155,open csv file with read and write,False,False,77,"[['1', 'A towel,', '1.0'],
 ['42', ' it says, ', '2.0'],
 ['1337', 'is about the most ', '-1'],
 ['0', 'massively useful thing ', '123'],
 ['-2', 'an interstellar hitchhiker can have.', '3']]"
6156,open csv file with read and write,False,False,28,"import mpu.io
data = mpu.io.read('example.csv', delimiter=',', quotechar='""', skiprows=None)
mpu.io.write('example.csv', data)"
6157,open csv file with read and write,False,False,92,"import pandas as pd

# Read the CSV into a pandas data frame (df)
#   With a df you can do many things
#   most important: visualize data with Seaborn
df = pd.read_csv('myfile.csv', sep=',')
print(df)

# Or export it in many ways, e.g. a list of tuples
tuples = [tuple(x) for x in df.values]

# or export it as a list of dicts
dicts = df.to_dict().values()"
6158,open csv file with read and write,False,False,37,"1,""A towel,"",1.0
42,"" it says, "",2.0
1337,is about the most ,-1
0,massively useful thing ,123
-2,an interstellar hitchhiker can have.,3"
6159,open csv file with read and write,False,False,36,"import os

if os.path.exists(fName):
   with open(fName, 'rb') as f:
       try:
           # do stuff
       except : # whatever reader errors you care about
           # handle error"
6160,open csv file `data.csv`,True,True,14,"df = pd.read_csv('data.csv', sep=',', header=None)"
6161,open csv file `data.csv`,False,True,14,"df = pd.read_csv('data.csv', sep=',', **None)"
6162,open csv file `data.csv`,False,True,12,"df = pd.read_csv('data.csv', sep='', header=None)"
6163,open csv file `data.csv`,False,True,14,"df = pandas.read_csv('data.csv', sep=',', header=None)"
6164,open csv file `data.csv`,False,True,13,"os.rename(data.csv, open('data.csv', 'rb'))"
6165,open csv file `data.csv`,False,True,12,"np.genfromtxt('data.csv', delimiter=',', skiprows=1)"
6166,open csv file `data.csv`,False,True,6,"os.rename(data.csv, float)"
6167,open csv file `data.csv`,False,False,180,"import csv

# Define data
data = [
    (1, ""A towel,"", 1.0),
    (42, "" it says, "", 2.0),
    (1337, ""is about the most "", -1),
    (0, ""massively useful thing "", 123),
    (-2, ""an interstellar hitchhiker can have."", 3),
]

# Write CSV file
with open(""test.csv"", ""wt"") as fp:
    writer = csv.writer(fp, delimiter="","")
    # writer.writerow([""your"", ""header"", ""foo""])  # write header
    writer.writerows(data)

# Read CSV file
with open(""test.csv"") as fp:
    reader = csv.reader(fp, delimiter="","", quotechar='""')
    # next(reader, None)  # skip the headers
    data_read = [row for row in reader]

print(data_read)"
6168,open csv file `data.csv`,False,False,77,"[['1', 'A towel,', '1.0'],
 ['42', ' it says, ', '2.0'],
 ['1337', 'is about the most ', '-1'],
 ['0', 'massively useful thing ', '123'],
 ['-2', 'an interstellar hitchhiker can have.', '3']]"
6169,open csv file `data.csv`,False,False,28,"import mpu.io
data = mpu.io.read('example.csv', delimiter=',', quotechar='""', skiprows=None)
mpu.io.write('example.csv', data)"
6170,open csv file `data.csv`,False,False,92,"import pandas as pd

# Read the CSV into a pandas data frame (df)
#   With a df you can do many things
#   most important: visualize data with Seaborn
df = pd.read_csv('myfile.csv', sep=',')
print(df)

# Or export it in many ways, e.g. a list of tuples
tuples = [tuple(x) for x in df.values]

# or export it as a list of dicts
dicts = df.to_dict().values()"
6171,open csv file `data.csv`,False,False,37,"1,""A towel,"",1.0
42,"" it says, "",2.0
1337,is about the most ,-1
0,massively useful thing ,123
-2,an interstellar hitchhiker can have.,3"
6172,open csv file `data.csv`,False,False,13,"w = csv.writer(open('foo.csv', 'wb'))"
6173,open csv file `data.csv`,False,False,16,"f = open('foo.csv', 'wb')
w = csv.writer(f)"
6174,delete the first column in csv file `df`,False,True,14,"df = pd.read_csv('df', sep=',', header=None)"
6175,delete the first column in csv file `df`,False,True,15,"df = pd.read_csv('df', sep=',', lineterminator='\r')"
6176,delete the first column in csv file `df`,False,True,9,"writer = read_csv('df', header=None)"
6177,delete the first column in csv file `df`,False,True,14,"writer = read_csv('df', sep=',', header=None)"
6178,delete the first column in csv file `df`,False,True,12,"writer = read_csv('df', sep=',')"
6179,delete the first column in csv file `df`,False,True,14,"df = pd.read_csv('df', sep=',', header=None)"
6180,delete the first column in csv file `df`,False,True,12,"my_data = genfromtxt('df', delimiter=',')"
6181,delete the first column in csv file `df`,True,False,9,"df = df.drop('column_name', 1)"
6182,delete the first column in csv file `df`,False,False,9,"df.drop('column_name', axis=1, inplace=True)"
6183,delete the first column in csv file `df`,False,False,22,"df = df.drop(df.columns[[0, 1, 3]], axis=1)  # df.columns is zero-based pd.Index"
6184,delete the first column in csv file `df`,False,False,14,"df.drop(['column_nameA', 'column_nameB'], axis=1, inplace=True)"
6185,delete the first column in csv file `df`,False,False,6,del df['column_name']
6186,delete the first column in csv file `df`,False,False,19,"columns = ['Col1', 'Col2', ...]
df.drop(columns, inplace=True, axis=1)"
6187,delete the first column in csv file `df`,False,False,8,"df = df.drop(columns, axis=1)"
6188,write to csv file,True,True,4,writer.writerow(write)
6189,write to csv file,False,True,4,writer.writerow(csv)
6190,write to csv file,True,True,4,writer.writerow(file)
6191,write to csv file,False,True,7,"pd.read_csv('write', shell=True)"
6192,write to csv file,False,True,7,"pd.read_csv('file', shell=True)"
6193,write to csv file,False,True,4,writer.writerow(para)
6194,write to csv file,False,True,4,writer.writerow(extra)
6195,write to csv file,False,False,7,"df.to_csv(file_name, sep='\t')"
6196,write to csv file,False,False,10,"df.to_csv(file_name, sep='\t', encoding='utf-8')"
6197,write to csv file,False,False,9,"df.to_csv(file_name, encoding='utf-8', index=False)"
6198,write to csv file,False,False,8,"Color  Number
0   red     22
1  blue     10"
6199,write to csv file,False,False,5,"Color,Number
red,22
blue,10"
6200,write to csv file,False,False,10,",Color,Number
0,red,22
1,blue,10"
6201,write to csv file,False,False,36,"##text=List of strings to be written to file
with open('csvfile.csv','wb') as file:
    for line in text:
        file.write(line)
        file.write('\n')"
6202,read a csv file,False,True,4,writer.writerow(line)
6203,read a csv file,True,True,15,"df = pd.read_csv('<unk>', quotechar=',')"
6204,read a csv file,False,True,9,"writer = pd.read_csv('my.csv', header=None)"
6205,read a csv file,False,True,12,"writer = pd.read_csv('myfile.txt', sep=',')"
6206,read a csv file,False,True,14,"writer = pd.read_csv('<unk>', skiprows=1, header=None)"
6207,read a csv file,False,True,15,"writer = pd.read_csv('<unk>', quotechar=',')"
6208,read a csv file,False,True,15,"df = pd.read_csv('<unk>', sep=',')"
6209,read a csv file,False,False,73,"import csv

def getstuff(filename, criterion):
    with open(filename, ""rb"") as csvfile:
        datareader = csv.reader(csvfile)
        yield next(datareader)  # yield the header row
        count = 0
        for row in datareader:
            if row[3] == criterion:
                yield row
                count += 1
            elif count:
                # done when having read a consecutive series of rows 
                return"
6210,read a csv file,False,False,121,"import csv
from itertools import dropwhile, takewhile

def getstuff(filename, criterion):
    with open(filename, ""rb"") as csvfile:
        datareader = csv.reader(csvfile)
        yield next(datareader)  # yield the header row
        # first row, plus any subsequent rows that match, then stop
        # reading altogether
        # Python 2: use `for row in takewhile(...): yield row` instead
        # instead of `yield from takewhile(...)`.
        yield from takewhile(
            lambda r: r[3] == criterion,
            dropwhile(lambda r: r[3] != criterion, datareader))
        return"
6211,read a csv file,False,False,25,"def getdata(filename, criteria):
    for criterion in criteria:
        for row in getstuff(filename, criterion):
            yield row"
6212,read a csv file,False,False,13,"for row in getdata(somefilename, sequence_of_criteria):
    # process row"
6213,read a csv file,False,False,180,"import csv

# Define data
data = [
    (1, ""A towel,"", 1.0),
    (42, "" it says, "", 2.0),
    (1337, ""is about the most "", -1),
    (0, ""massively useful thing "", 123),
    (-2, ""an interstellar hitchhiker can have."", 3),
]

# Write CSV file
with open(""test.csv"", ""wt"") as fp:
    writer = csv.writer(fp, delimiter="","")
    # writer.writerow([""your"", ""header"", ""foo""])  # write header
    writer.writerows(data)

# Read CSV file
with open(""test.csv"") as fp:
    reader = csv.reader(fp, delimiter="","", quotechar='""')
    # next(reader, None)  # skip the headers
    data_read = [row for row in reader]

print(data_read)"
6214,read a csv file,False,False,77,"[['1', 'A towel,', '1.0'],
 ['42', ' it says, ', '2.0'],
 ['1337', 'is about the most ', '-1'],
 ['0', 'massively useful thing ', '123'],
 ['-2', 'an interstellar hitchhiker can have.', '3']]"
6215,read a csv file,False,False,28,"import mpu.io
data = mpu.io.read('example.csv', delimiter=',', quotechar='""', skiprows=None)
mpu.io.write('example.csv', data)"
6216,write csv to a file,False,True,4,writer.writerow(line)
6217,write csv to a file,False,True,4,writer.writerow(item)
6218,write csv to a file,False,True,4,writer.writerow(csv)
6219,write csv to a file,False,True,4,writer.writerow(para)
6220,write csv to a file,False,True,4,f.writerow(csv)
6221,write csv to a file,False,True,7,"to_csv.to_csv('str_2', index=False)"
6222,write csv to a file,False,True,4,writer.writerow(file)
6223,write csv to a file,True,False,7,"df.to_csv(file_name, sep='\t')"
6224,write csv to a file,False,False,10,"df.to_csv(file_name, sep='\t', encoding='utf-8')"
6225,write csv to a file,False,False,9,"df.to_csv(file_name, encoding='utf-8', index=False)"
6226,write csv to a file,False,False,8,"Color  Number
0   red     22
1  blue     10"
6227,write csv to a file,False,False,5,"Color,Number
red,22
blue,10"
6228,write csv to a file,False,False,10,",Color,Number
0,red,22
1,blue,10"
6229,write csv to a file,False,False,36,"##text=List of strings to be written to file
with open('csvfile.csv','wb') as file:
    for line in text:
        file.write(line)
        file.write('\n')"
