row_id,query,is_chosen,is_generation,snippet_len,snippet
14,print current date time,False,True,6,print(datetime.datetime.now())
15,print current date time,False,True,13,print(datetime.datetime.now().strftime('%d'))
16,print current date time,True,True,25,print(datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S'))
17,print current date time,False,True,14,print('<unk> %s' % datetime.datetime.now())
18,print current date time,False,True,22,print(datetime.datetime.now().strftime('%Y-%m-%d %H:%M'))
19,print current date time,False,True,19,print(datetime.datetime.now().strftime('%H:%M:%S'))
20,print current date time,False,True,18,"print('<unk> %s, <unk>' % datetime.datetime.now())"
21,print current date time,False,False,38,">>> import datetime
>>> datetime.datetime.now()
datetime.datetime(2009, 1, 6, 15, 8, 24, 78915)

>>> print(datetime.datetime.now())
2009-01-06 15:08:24.789150"
22,print current date time,False,False,32,">>> datetime.datetime.now().time()
datetime.time(15, 8, 24, 78915)

>>> print(datetime.datetime.now().time())
15:08:24.789150"
23,print current date time,False,False,7,>>> from datetime import datetime
24,print current date time,False,False,38,">>> from time import gmtime, strftime
>>> strftime(""%Y-%m-%d %H:%M:%S"", gmtime())
'2009-01-05 22:14:39'"
25,print current date time,False,False,10,"for date in mylist :
    print str(date)"
26,print current date time,False,False,128,"import datetime
mylist = []
today = datetime.date.today()
mylist.append(today)
print mylist[0] # print the date object, not the container ;-)
2008-11-22

# It's better to always use str() because :

print ""This is a new day : "", mylist[0] # will work
>>> This is a new day : 2008-11-22

print ""This is a new day : "" + mylist[0] # will crash
>>> cannot concatenate 'str' and 'datetime.date' objects

print ""This is a new day : "" + str(mylist[0]) 
>>> This is a new day : 2008-11-22"
27,print current date time,False,False,26,"print today.strftime('We are the %d, %b %Y')
>>> 'We are the 22, Nov 2008'"
28,get date time one week from now,False,True,18,"datetime.datetime.strptime('January 11, 2010', '%B %d, %Y')"
29,get date time one week from now,False,True,11,"datetime.datetime.combine(datetime.date.today(), datetime.timedelta(hours=3))"
30,get date time one week from now,False,True,10,"datetime.datetime.combine(datetime.date.today(), datetime.now())"
31,get date time one week from now,False,True,18,"datetime.datetime.strptime('<unk>', '%B %d, %Y')"
32,get date time one week from now,True,True,11,"datetime.datetime.combine(datetime.date.today(), datetime.timedelta(days=12))"
33,get date time one week from now,False,True,15,"datetime.datetime.combine(datetime.date.today(), '%B A"")]')"
34,get date time one week from now,False,True,15,"datetime.datetime.combine(datetime.datetime.now(), '%B A"")]')"
35,get date time one week from now,False,False,38,">>> import datetime
>>> datetime.datetime.now()
datetime.datetime(2009, 1, 6, 15, 8, 24, 78915)

>>> print(datetime.datetime.now())
2009-01-06 15:08:24.789150"
36,get date time one week from now,False,False,32,">>> datetime.datetime.now().time()
datetime.time(15, 8, 24, 78915)

>>> print(datetime.datetime.now().time())
15:08:24.789150"
37,get date time one week from now,False,False,7,>>> from datetime import datetime
38,get date time one week from now,False,False,16,"from datetime import datetime, timedelta

d = datetime.today() - timedelta(days=days_to_subtract)"
39,get date time one week from now,False,False,38,">>> from time import gmtime, strftime
>>> strftime(""%Y-%m-%d %H:%M:%S"", gmtime())
'2009-01-05 22:14:39'"
40,get date time one week from now,False,False,37,">>> import datetime
>>> datetime.datetime.today()
datetime.datetime(2012, 3, 23, 23, 24, 55, 173504)
>>> datetime.datetime.today().weekday()
4"
41,get date time one week from now,False,False,26,"from datetime import datetime
datetime.now().strftime('%Y-%m-%d %H:%M:%S')"
56,write to csv file,True,True,4,writer.writerow(write)
57,write to csv file,False,True,4,writer.writerow(csv)
58,write to csv file,True,True,4,writer.writerow(file)
59,write to csv file,False,True,7,"pd.read_csv('write', shell=True)"
60,write to csv file,False,True,7,"pd.read_csv('file', shell=True)"
61,write to csv file,False,True,4,writer.writerow(para)
62,write to csv file,False,True,4,writer.writerow(extra)
63,write to csv file,False,False,7,"df.to_csv(file_name, sep='\t')"
64,write to csv file,False,False,10,"df.to_csv(file_name, sep='\t', encoding='utf-8')"
65,write to csv file,False,False,26,"import csv

with open(""output.csv"", ""wb"") as f:
    writer = csv.writer(f)
    writer.writerows(a)"
66,write to csv file,False,False,30,"import csv

with open(""out.csv"", ""w"", newline="""") as f:
    writer = csv.writer(f)
    writer.writerows(a)"
67,write to csv file,False,False,9,"df.to_csv(file_name, encoding='utf-8', index=False)"
68,write to csv file,False,False,8,"Color  Number
0   red     22
1  blue     10"
69,write to csv file,False,False,5,"Color,Number
red,22
blue,10"
70,recursively iterate over all files in a directory,False,True,5,glob.glob('*')
71,recursively iterate over all files in a directory,True,True,33,"for dirname, dirnames, filenames in os.walk('file.txt'):
    for subdirname in dirnames:
        print(os.path.join(dirname, subdirname))
    for filename in filenames:
        pass"
72,recursively iterate over all files in a directory,False,True,10,"os.chdir(os.path.join(root, 'test.sh'))"
73,recursively iterate over all files in a directory,False,True,7,os.chdir(os.path.dirname(__file__))
74,recursively iterate over all files in a directory,False,True,7,os.chdir(os.path.normpath(__file__))
75,recursively iterate over all files in a directory,False,True,10,"os.chdir(os.path.join(root, 'my_file'))"
76,recursively iterate over all files in a directory,False,True,3,os.getcwd()
77,recursively iterate over all files in a directory,False,False,22,"from pathlib import Path

for path in Path('src').rglob('*.c'):
    print(path.name)"
78,recursively iterate over all files in a directory,False,False,41,"import fnmatch
import os

matches = []
for root, dirnames, filenames in os.walk('src'):
    for filename in fnmatch.filter(filenames, '*.c'):
        matches.append(os.path.join(root, filename))"
79,recursively iterate over all files in a directory,False,False,39,"import os

for filename in os.listdir(directory):
    if filename.endswith("".asm"") or filename.endswith("".py""): 
         # print(os.path.join(directory, filename))
        continue
    else:
        continue"
80,recursively iterate over all files in a directory,False,False,51,"import os

directory = os.fsencode(directory_in_str)

for file in os.listdir(directory):
     filename = os.fsdecode(file)
     if filename.endswith("".asm"") or filename.endswith("".py""): 
         # print(os.path.join(directory, filename))
         continue
     else:
         continue"
81,recursively iterate over all files in a directory,False,False,38,"from pathlib import Path

pathlist = Path(directory_in_str).glob('**/*.asm')
for path in pathlist:
     # because path is object not string
     path_in_str = str(path)
     # print(path_in_str)"
82,recursively iterate over all files in a directory,False,False,12,"for root, subdirs, files in os.walk(rootdir):"
83,recursively iterate over all files in a directory,False,False,223,"import os
import sys

walk_dir = sys.argv[1]

print('walk_dir = ' + walk_dir)

# If your current working directory may change during script execution, it's recommended to
# immediately convert program arguments to an absolute path. Then the variable root below will
# be an absolute path as well. Example:
# walk_dir = os.path.abspath(walk_dir)
print('walk_dir (absolute) = ' + os.path.abspath(walk_dir))

for root, subdirs, files in os.walk(walk_dir):
    print('--\nroot = ' + root)
    list_file_path = os.path.join(root, 'my-directory-list.txt')
    print('list_file_path = ' + list_file_path)

    with open(list_file_path, 'wb') as list_file:
        for subdir in subdirs:
            print('\t- subdirectory ' + subdir)

        for filename in files:
            file_path = os.path.join(root, filename)

            print('\t- file %s (full path: %s)' % (filename, file_path))

            with open(file_path, 'rb') as f:
                f_content = f.read()
                list_file.write(('The file %s contains:\n' % filename).encode('utf-8'))
                list_file.write(f_content)
                list_file.write(b'\n')"
84,regex replace capture group,False,True,16,"re.sub('<unk>', '<unk>', text)"
85,regex replace capture group,False,True,16,"re.sub('<unk>', '<unk>', str)"
86,regex replace capture group,False,True,14,"re.sub('#(\\w+)', '\\1', regex)"
87,regex replace capture group,False,True,13,"re.sub('<unk>', '\\1', text)"
88,regex replace capture group,True,True,14,"re.sub('#(\\w+)', '\\1', text)"
89,regex replace capture group,False,True,14,"re.sub('#(\\w+)', '\\1', para)"
90,regex replace capture group,False,True,11,"re.sub('http://www\\.iwashere\\.com/', '', para)"
91,regex replace capture group,False,False,25,"result = re.sub(r""(\d.*?)\s(\d.*?)"", r""\1 \2"", string1)"
92,regex replace capture group,False,False,24,"coord_re = re.sub(r""(\d), (\d)"", r""\1,\2"", coords)"
93,regex replace capture group,False,False,35,">>> '\1,\2'
'\x01,\x02'
>>> print '\1,\2'
,
>>> print r'\1,\2'   # this is what you actually want
\1,\2"
94,regex replace capture group,False,False,26,"re.sub(r'(\_a)?\.([^\.]*)$' , r'_suff.\2',""long.file.name.jpg"")"
95,regex replace capture group,False,False,8,"p.sub('gray \\1', s)"
96,regex replace capture group,False,False,8,"p.sub(r'gray \1', s)"
97,regex replace capture group,False,False,28,"re.sub(r'(?:_a)?\.([^.]*)$', r'_suff.\1', ""long.file.name.jpg"")"
98,load csv file with pandas,False,True,10,"df.to_csv(l, index=False, sep=' ')"
99,load csv file with pandas,True,True,10,"pandas.read_csv(file, sep='\t', lineterminator='\r')"
100,load csv file with pandas,False,True,10,"pd.read_csv(file, sep='', lineterminator='\r')"
101,load csv file with pandas,False,True,9,"pd.read_csv(file, sep='', header=None)"
102,load csv file with pandas,False,True,10,"pd.read_csv(file, sep='\t', lineterminator='\r')"
103,load csv file with pandas,False,True,10,"pandas.read_csv(file, sep='', lineterminator='\r')"
104,load csv file with pandas,False,True,10,"df.to_csv(l, **False, sep=' ')"
105,load csv file with pandas,False,False,16,"from numpy import genfromtxt
my_data = genfromtxt('my_file.csv', delimiter=',')"
106,load csv file with pandas,False,False,19,"chunksize = 10 ** 6
for chunk in pd.read_csv(filename, chunksize=chunksize):
    process(chunk)"
107,load csv file with pandas,False,False,14,"import pandas as pd

url=""https://raw.githubusercontent.com/cs109/2014_data/master/countries.csv""
c=pd.read_csv(url)"
108,load csv file with pandas,False,False,39,"import pandas as pd
df=pd.read_csv('myfile.csv', sep=',',header=None)
df.values
array([[ 1. ,  2. ,  3. ],
       [ 4. ,  5.5,  6. ]])"
109,load csv file with pandas,False,False,24,"1.0, 2, 3
4, 5.5, 6

import numpy as np
np.genfromtxt('myfile.csv',delimiter=',')"
110,load csv file with pandas,False,False,22,"array([[ 1. ,  2. ,  3. ],
       [ 4. ,  5.5,  6. ]])"
111,load csv file with pandas,False,False,12,"np.genfromtxt('myfile.csv',delimiter=',',dtype=None)"
112,get average of row values in pandas dataframe,False,True,16,"df.apply(lambda x: (x.mean / 100).mean(), axis=1)"
113,get average of row values in pandas dataframe,True,True,19,"df.groupby(np.arange(len(df.columns)) // 2 + 1, axis=1).mean()"
114,get average of row values in pandas dataframe,False,True,17,"df.groupby(np.arange(len(df.columns)) // 3, axis=1).mean()"
115,get average of row values in pandas dataframe,False,True,16,"df.apply(lambda x: (x.mean / 3).mean(), axis=1)"
116,get average of row values in pandas dataframe,False,True,16,"df.apply(lambda x: (x - 1).mean(), axis=1)"
117,get average of row values in pandas dataframe,False,True,19,"df.groupby(np.arange(len(df.columns)) // 2 // 3, axis=1).mean()"
118,get average of row values in pandas dataframe,False,True,14,df.apply(lambda x: (x.mean / 100).mean())
119,get average of row values in pandas dataframe,False,False,14,"from sklearn.model_selection import train_test_split

train, test = train_test_split(df, test_size=0.2)"
120,get average of row values in pandas dataframe,False,False,98,">>> import pandas as pd
>>> from numpy.random import randint

>>> df = pd.DataFrame(columns=['lib', 'qty1', 'qty2'])
>>> for i in range(5):
>>>     df.loc[i] = ['name' + str(i)] + list(randint(10, size=2))

>>> df
     lib qty1 qty2
0  name0    3    3
1  name1    2    4
2  name2    2    8
3  name3    2    1
4  name4    9    6"
121,get average of row values in pandas dataframe,False,False,38,"rows_list = []
for row in input_rows:

        dict1 = {}
        # get input row in dictionary format
        # key = col_name
        dict1.update(blah..) 

        rows_list.append(dict1)

df = pd.DataFrame(rows_list)"
122,get average of row values in pandas dataframe,False,False,61,"In [3]: sub_df
Out[3]:
          A         B
2 -0.133653 -0.030854

In [4]: sub_df.iloc[0]
Out[4]:
A   -0.133653
B   -0.030854
Name: 2, dtype: float64

In [5]: sub_df.iloc[0]['A']
Out[5]: -0.13365288513107493"
123,get average of row values in pandas dataframe,False,False,54,"In [11]: df = pd.DataFrame(np.random.randn(100, 2))

In [12]: msk = np.random.rand(len(df)) < 0.8

In [13]: train = df[msk]

In [14]: test = df[~msk]"
124,get average of row values in pandas dataframe,False,False,30,"In [15]: len(test)
Out[15]: 21

In [16]: len(train)
Out[16]: 79"
125,get average of row values in pandas dataframe,False,False,17,"train=df.sample(frac=0.8,random_state=200) #random state is a seed value
test=df.drop(train.index)"
140,pandas join dataframes,True,True,10,"pd.concat([df1, df2], axis=1)"
141,pandas join dataframes,False,True,11,"pd.merge(a, b, on='?')"
142,pandas join dataframes,False,True,10,"pandas.concat([df1, df2], axis=1)"
143,pandas join dataframes,False,True,13,"pd.concat([df1, pd.DataFrame(df2.values)], axis=1)"
144,pandas join dataframes,False,True,13,"pd.concat([df1, df2], **',')"
145,pandas join dataframes,False,True,11,"pd.concat([df1, df2], **'*')"
146,pandas join dataframes,False,True,13,"pandas.concat([df1, df2], **',')"
147,pandas join dataframes,False,False,4,import pandas as pd
148,pandas join dataframes,False,False,11,"dfs = [df0, df1, df2, dfN]"
149,pandas join dataframes,False,False,21,"df_final = reduce(lambda left,right: pd.merge(left,right,on='name'), dfs)"
150,pandas join dataframes,False,False,4,from functools import reduce
151,pandas join dataframes,False,False,21,"left.join(right, on=key_or_keys)
pd.merge(left, right, left_on=key_or_keys, right_index=True, how='left', sort=False)"
152,pandas join dataframes,False,False,10,"pd.merge(df1, df2, left_index=True, right_index=True)"
153,pandas join dataframes,False,False,4,df1.join(df2)
350,save plt figure,True,True,7,"plt.savefig('plt', dpi=1000)"
351,save plt figure,False,True,10,"plt.savefig('<unk>', dpi=1000)"
352,save plt figure,False,True,10,"plt.savefig('<unk>', dpi=300)"
353,save plt figure,False,True,8,"plt.savefig('plt color', dpi=1000)"
354,save plt figure,False,True,14,"plt.savefig('ulimit -s <unk> <unk>', dpi=1000)"
355,save plt figure,False,True,11,"plt.savefig('plt -c <unk>', dpi=1000)"
356,save plt figure,False,True,5,plt.savefig('plt')
357,save plt figure,False,False,16,"from matplotlib import pyplot as plt

plt.savefig('foo.png')
plt.savefig('foo.pdf')"
358,save plt figure,False,False,8,"savefig('foo.png', bbox_inches='tight')"
359,save plt figure,False,False,50,"import matplotlib.pyplot as plt
fig, ax = plt.subplots( nrows=1, ncols=1 )  # create figure & 1 axis
ax.plot([0,1,2], [10,20,3])
fig.savefig('path/to/save/image/to.png')   # save the figure to file
plt.close(fig)    # close the figure window"
360,save plt figure,False,False,37,"import matplotlib.pyplot as plt

f = plt.figure()
plt.plot(range(10), range(10), ""o"")
plt.show()

f.savefig(""foo.pdf"", bbox_inches='tight')"
361,save plt figure,False,False,11,"plt.figure(figsize=(800/my_dpi, 800/my_dpi), dpi=my_dpi)"
362,save plt figure,False,False,7,"plt.savefig('my_fig.png', dpi=my_dpi)"
363,save plt figure,False,False,9,"plt.savefig('my_fig.png', dpi=my_dpi * 10)"
434,plt create figure with size,True,True,9,"plt.figure(figsize=(3, 4))"
435,plt create figure with size,False,True,9,"plt.figure(figsize=(1, 2))"
436,plt create figure with size,False,True,9,"plt.figure(figsize=(10, 2))"
437,plt create figure with size,False,True,9,"plt.figure(figsize=(100, 4))"
438,plt create figure with size,False,True,10,"plt.savefig('<unk>', dpi=300)"
439,plt create figure with size,False,True,9,"plt.figure(figsize=(1, 4))"
440,plt create figure with size,False,True,4,plt.figure(dpi=1)
441,plt create figure with size,False,False,27,"from matplotlib.pyplot import figure
figure(num=None, figsize=(8, 6), dpi=80, facecolor='w', edgecolor='k')"
442,plt create figure with size,False,False,18,"fig = matplotlib.pyplot.gcf()
fig.set_size_inches(18.5, 10.5)
fig.savefig('test2png.png', dpi=100)"
443,plt create figure with size,False,False,8,"fig.set_size_inches(18.5, 10.5, forward=True)"
444,plt create figure with size,False,False,8,"f.set_figheight(15)
f.set_figwidth(15)"
445,plt create figure with size,False,False,13,"f, axs = plt.subplots(2,2,figsize=(15,15))"
446,plt create figure with size,False,False,13,"from pylab import rcParams
rcParams['figure.figsize'] = 5, 10"
447,plt create figure with size,False,False,14,"import matplotlib.pyplot as plt
plt.rcParams[""figure.figsize""] = (20,3)"
448,group pandas df by two columns,False,True,12,df.groupby(pd.TimeGrouper(freq='<unk>'))
449,group pandas df by two columns,False,True,21,"df.groupby(df.groupby(['A', 'B']).sum().unstack())"
450,group pandas df by two columns,False,True,18,"df.groupby(df.groupby(['A', 'B']).sum())"
451,group pandas df by two columns,False,True,21,"df.groupby(df.groupby(['A', 'B']).sum().sum())"
452,group pandas df by two columns,True,True,14,"df.groupby(['A', 'B'], axis=1)"
453,group pandas df by two columns,False,True,7,df.groupby(pd.TimeGrouper(3))
454,group pandas df by two columns,False,True,21,"df.groupby(df.groupby(['A', 'B']).size().sum())"
455,group pandas df by two columns,False,False,88,"In [49]: df
Out[49]: 
          0         1
0  1.000000  0.000000
1 -0.494375  0.570994
2  1.000000  0.000000
3  1.876360 -0.229738
4  1.000000  0.000000

In [50]: def f(x):    
   ....:  return x[0] + x[1]  
   ....:  

In [51]: df.apply(f, axis=1) #passes a Series object, row-wise
Out[51]: 
0    1.000000
1    0.076619
2    1.000000
3    1.646622
4    1.000000"
456,group pandas df by two columns,False,False,20,"df['col_3'] = df.apply(lambda x: f(x.col_1, x.col_2), axis=1)"
457,group pandas df by two columns,False,False,110,"import pandas as pd

df = pd.DataFrame({'ID':['1', '2', '3'], 'col_1': [0, 2, 3], 'col_2':[1, 4, 5]})
mylist = ['a', 'b', 'c', 'd', 'e', 'f']

def get_sublist(sta,end):
    return mylist[sta:end+1]

df['col_3'] = df.apply(lambda x: get_sublist(x.col_1, x.col_2), axis=1)"
458,group pandas df by two columns,False,False,35,"ID  col_1  col_2      col_3
0  1      0      1     [a, b]
1  2      2      4  [c, d, e]
2  3      3      5  [d, e, f]"
459,group pandas df by two columns,False,False,30,"df['col_3'] = df.apply(lambda x: f(x['col 1'], x['col 2']), axis=1)"
460,group pandas df by two columns,False,False,21,males = df[(df[Gender]=='Male') & (df[Year]==2014)]
461,group pandas df by two columns,False,False,69,"from collections import defaultdict
dic={}
for g in ['male', 'female']:
  dic[g]=defaultdict(dict)
  for y in [2013, 2014]:
    dic[g][y]=df[(df[Gender]==g) & (df[Year]==y)] #store the DataFrames to a dict of dict"
560,random sample with replacement,False,True,11,"random.choice(random.choice(sample), repeat=random())"
561,random sample with replacement,True,True,9,"random.choice(random.choice(sample), repeat=n)"
562,random sample with replacement,False,True,12,"random.choice(random.choice(sample), repeat=random(10))"
563,random sample with replacement,False,True,12,"random.choice(random.choice(sample), **random.choice(sample))"
564,random sample with replacement,False,True,12,"random.choice(random.choice(sample), **random.randrange(10000))"
565,random sample with replacement,False,True,16,"random.choice(random.choice(sample), **random.choice('<unk>'))"
566,random sample with replacement,False,True,12,"random.choice(random.choice(sample), **random.randrange(1000))"
567,random sample with replacement,False,False,14,"from numpy.random import choice
draw = choice(list_of_candidates, number_of_items_to_pick,
              p=probability_distribution)"
568,random sample with replacement,False,False,210,"Python 3.6.1 (v3.6.1:69c0db5050, Mar 21 2017, 01:21:04)
Type 'copyright', 'credits' or 'license' for more information
IPython 6.0.0 -- An enhanced Interactive Python. Type '?' for help.

In [1]: import random

In [2]: random.choices(
...:     population=[['a','b'], ['b','a'], ['c','b']],
...:     weights=[0.2, 0.2, 0.6],
...:     k=10
...: )

Out[2]:
[['c', 'b'],
 ['c', 'b'],
 ['b', 'a'],
 ['c', 'b'],
 ['c', 'b'],
 ['b', 'a'],
 ['c', 'b'],
 ['b', 'a'],
 ['c', 'b'],
 ['c', 'b']]"
569,random sample with replacement,False,False,11,"import random
random.sample(range(100), 10)"
570,random sample with replacement,False,False,21,"all_lines = f1.readlines()
for i in range(50):
    lines = random.sample(all_lines, 40)"
571,random sample with replacement,False,False,58,"def weighted_choice(choices):
   total = sum(w for c, w in choices)
   r = random.uniform(0, total)
   upto = 0
   for c, w in choices:
      if upto + w >= r:
         return c
      upto += w
   assert False, ""Shouldn't get here"""
572,random sample with replacement,False,False,91,"from random import random
from bisect import bisect

def weighted_choice(choices):
    values, weights = zip(*choices)
    total = 0
    cum_weights = []
    for w in weights:
        total += w
        cum_weights.append(total)
    x = random() * total
    i = bisect(cum_weights, x)
    return values[i]

>>> weighted_choice([(""WHITE"",90), (""RED"",8), (""GREEN"",2)])
'WHITE'"
573,random sample with replacement,False,False,90,"In [11]: df = pd.DataFrame([[1, 2], [3, 4], [5, 6], [7, 8]], columns=[""A"", ""B""])

In [12]: df.sample(2)
Out[12]:
   A  B
0  1  2
2  5  6

In [13]: df.sample(2)
Out[13]:
   A  B
3  7  8
0  1  2"
588,random sample with replacement,False,True,11,"random.choice(random.choice(sample), repeat=random())"
589,random sample with replacement,True,True,9,"random.choice(random.choice(sample), repeat=n)"
590,random sample with replacement,False,True,12,"random.choice(random.choice(sample), repeat=random(10))"
591,random sample with replacement,False,True,12,"random.choice(random.choice(sample), **random.choice(sample))"
592,random sample with replacement,False,True,12,"random.choice(random.choice(sample), **random.randrange(10000))"
593,random sample with replacement,False,True,16,"random.choice(random.choice(sample), **random.choice('<unk>'))"
594,random sample with replacement,False,True,12,"random.choice(random.choice(sample), **random.randrange(1000))"
595,random sample with replacement,False,False,14,"from numpy.random import choice
draw = choice(list_of_candidates, number_of_items_to_pick,
              p=probability_distribution)"
596,random sample with replacement,False,False,210,"Python 3.6.1 (v3.6.1:69c0db5050, Mar 21 2017, 01:21:04)
Type 'copyright', 'credits' or 'license' for more information
IPython 6.0.0 -- An enhanced Interactive Python. Type '?' for help.

In [1]: import random

In [2]: random.choices(
...:     population=[['a','b'], ['b','a'], ['c','b']],
...:     weights=[0.2, 0.2, 0.6],
...:     k=10
...: )

Out[2]:
[['c', 'b'],
 ['c', 'b'],
 ['b', 'a'],
 ['c', 'b'],
 ['c', 'b'],
 ['b', 'a'],
 ['c', 'b'],
 ['b', 'a'],
 ['c', 'b'],
 ['c', 'b']]"
597,random sample with replacement,False,False,154,">>> A = np.random.randint(5, size=(10,3))
>>> A
array([[1, 3, 0],
       [3, 2, 0],
       [0, 2, 1],
       [1, 1, 4],
       [3, 2, 2],
       [0, 1, 0],
       [1, 3, 1],
       [0, 4, 1],
       [2, 4, 2],
       [3, 3, 1]])
>>> idx = np.random.randint(10, size=2)
>>> idx
array([7, 6])
>>> A[idx,:]
array([[0, 4, 1],
       [1, 3, 1]])"
598,random sample with replacement,False,False,14,"A[np.random.randint(A.shape[0], size=2), :]"
599,random sample with replacement,False,False,16,"A[np.random.choice(A.shape[0], 2, replace=False), :]"
600,random sample with replacement,False,False,58,"def weighted_choice(choices):
   total = sum(w for c, w in choices)
   r = random.uniform(0, total)
   upto = 0
   for c, w in choices:
      if upto + w >= r:
         return c
      upto += w
   assert False, ""Shouldn't get here"""
601,random sample with replacement,False,False,91,"from random import random
from bisect import bisect

def weighted_choice(choices):
    values, weights = zip(*choices)
    total = 0
    cum_weights = []
    for w in weights:
        total += w
        cum_weights.append(total)
    x = random() * total
    i = bisect(cum_weights, x)
    return values[i]

>>> weighted_choice([(""WHITE"",90), (""RED"",8), (""GREEN"",2)])
'WHITE'"
602,sort dict by key,False,True,17,"sorted(list(data.items()), key=lambda x: x[1])"
603,sort dict by key,False,True,20,"OrderedDict(sorted(list(dict.items()), key=lambda t: t[0]))"
604,sort dict by key,True,True,17,"sorted(list(dict.items()), key=lambda x: x[1])"
605,sort dict by key,False,True,20,"OrderedDict(sorted(list(data.items()), key=lambda t: t[0]))"
606,sort dict by key,False,True,18,"sorted(list(data.items()), **{'key': 'value'})"
607,sort dict by key,False,True,19,"sorted(list(data.items()), **sorted(list(dict.items())))"
608,sort dict by key,False,True,6,sorted(d.values())
609,sort dict by key,False,False,68,"x = {1: 2, 3: 4, 4: 3, 2: 1, 0: 0}
{k: v for k, v in sorted(x.items(), key=lambda item: item[1])}
{0: 0, 2: 1, 1: 2, 4: 3, 3: 4}"
610,sort dict by key,False,False,38,"import operator
x = {1: 2, 3: 4, 4: 3, 2: 1, 0: 0}
sorted_x = sorted(x.items(), key=operator.itemgetter(1))"
611,sort dict by key,False,False,38,"import operator
x = {1: 2, 3: 4, 4: 3, 2: 1, 0: 0}
sorted_x = sorted(x.items(), key=operator.itemgetter(0))"
612,sort dict by key,False,False,39,"x = {1: 2, 3: 4, 4: 3, 2: 1, 0: 0}
sorted_x = sorted(x.items(), key=lambda kv: kv[1])"
613,sort dict by key,False,False,8,"import collections

sorted_dict = collections.OrderedDict(sorted_x)"
614,sort dict by key,False,False,15,"newlist = sorted(list_to_be_sorted, key=lambda k: k['name'])"
615,sort dict by key,False,False,16,"from operator import itemgetter
newlist = sorted(list_to_be_sorted, key=itemgetter('name'))"
616,list files in folder,False,True,5,glob.glob('*')
617,list files in folder,True,True,8,os.listdir('<unk>')
618,list files in folder,False,True,8,os.walk('<unk>')
619,list files in folder,False,True,5,os.listdir('filenames')
620,list files in folder,False,True,19,"[os.path.join(dirname, subdirname) for dirname in os.listdir('<unk>')]"
621,list files in folder,False,True,5,os.listdir('..')
622,list files in folder,False,True,5,os.listdir('.c')
623,list files in folder,False,False,32,"from os import listdir
from os.path import isfile, join
onlyfiles = [f for f in listdir(mypath) if isfile(join(mypath, f))]"
624,list files in folder,False,False,27,"from os import walk

f = []
for (dirpath, dirnames, filenames) in walk(mypath):
    f.extend(filenames)
    break"
625,list files in folder,False,False,24,"import glob, os
os.chdir(""/mydir"")
for file in glob.glob(""*.txt""):
    print(file)"
626,list files in folder,False,False,31,"import os
for file in os.listdir(""/mydir""):
    if file.endswith("".txt""):
        print(os.path.join(""/mydir"", file))"
627,list files in folder,False,False,38,"import os
for root, dirs, files in os.walk(""/mydir""):
    for file in files:
        if file.endswith("".txt""):
             print(os.path.join(root, file))"
628,list files in folder,False,False,11,"import glob
print(glob.glob(""/home/adam/*.txt""))"
629,list files in folder,False,False,10,"['/home/adam/file1.txt', '/home/adam/file2.txt', .... ]"
686,move file to other directory,False,True,8,os.listdir('<unk>')
687,move file to other directory,False,True,5,os.chdir('..')
688,move file to other directory,True,True,14,"shutil.copy2('<unk>', '<unk>')"
689,move file to other directory,False,True,11,"shutil.copy2('<unk>', 'rb')"
690,move file to other directory,False,True,5,os.chdir('file')
691,move file to other directory,False,True,8,os.walk('<unk>')
692,move file to other directory,False,True,10,[os.listdir('<unk>')]
693,move file to other directory,False,False,34,"import os
import shutil

os.rename(""path/to/current/file.foo"", ""path/to/new/destination/for/file.foo"")
shutil.move(""path/to/current/file.foo"", ""path/to/new/destination/for/file.foo"")
os.replace(""path/to/current/file.foo"", ""path/to/new/destination/for/file.foo"")"
694,move file to other directory,False,False,27,"import shutil
import os

source = '/path/to/source_folder'
dest1 = '/path/to/dest_folder'

files = os.listdir(source)

for f in files:
    shutil.move(source+f, dest1)"
695,move file to other directory,False,False,103,"import os
import shutil

root_src_dir = 'Src Directory\\'
root_dst_dir = 'Dst Directory\\'

for src_dir, dirs, files in os.walk(root_src_dir):
    dst_dir = src_dir.replace(root_src_dir, root_dst_dir, 1)
    if not os.path.exists(dst_dir):
        os.makedirs(dst_dir)
    for file_ in files:
        src_file = os.path.join(src_dir, file_)
        dst_file = os.path.join(dst_dir, file_)
        if os.path.exists(dst_file):
            # in case of the src and dst are the same file
            if os.path.samefile(src_file, dst_file):
                continue
            os.remove(dst_file)
        shutil.move(src_file, dst_dir)"
696,move file to other directory,False,False,50,"in /opt/awesome
○ → ls
source
○ → ls source
awesome.txt

python 
>>> source = '/opt/awesome/source'
>>> destination = '/opt/awesome/destination'
>>> import os
>>> os.rename(source, destination)
>>> os.listdir('/opt/awesome')
['destination']"
697,move file to other directory,False,False,26,">>> import shutil
>>> shutil.move(destination, source)
>>> os.listdir('/opt/awesome/source')
['awesome.txt']"
698,move file to other directory,False,False,16,"from pathlib import Path

Path(""path/to/current/file.foo"").rename(""path/to/new/destination/for/file.foo"")"
699,move file to other directory,False,False,40,"import os, shutil
path = ""/volume1/Users/Transfer/""
moveto = ""/volume1/Users/Drive_Transfer/""
files = os.listdir(path)
files.sort()
for f in files:
    src = path+f
    dst = moveto+f
    shutil.move(src,dst)"
700,print datetime in mm-dd-yyyy hh:mm  format,True,True,19,time.strftime('%Y-%m-%d %H:%M:%S')
701,print datetime in mm-dd-yyyy hh:mm  format,False,True,16,time.strftime('%Y-%m-%d %H:%M')
702,print datetime in mm-dd-yyyy hh:mm  format,False,True,3,t.strip()
703,print datetime in mm-dd-yyyy hh:mm  format,False,True,11,t.strftime('%Y-%m-%d')
704,print datetime in mm-dd-yyyy hh:mm  format,False,True,6,time.mktime(s.timetuple())
705,print datetime in mm-dd-yyyy hh:mm  format,False,True,16,t.strftime('%Y-%m-%d %H:%M')
706,print datetime in mm-dd-yyyy hh:mm  format,False,True,6,time.mktime(x.timetuple())
707,print datetime in mm-dd-yyyy hh:mm  format,False,False,10,"for date in mylist :
    print str(date)"
708,print datetime in mm-dd-yyyy hh:mm  format,False,False,128,"import datetime
mylist = []
today = datetime.date.today()
mylist.append(today)
print mylist[0] # print the date object, not the container ;-)
2008-11-22

# It's better to always use str() because :

print ""This is a new day : "", mylist[0] # will work
>>> This is a new day : 2008-11-22

print ""This is a new day : "" + mylist[0] # will crash
>>> cannot concatenate 'str' and 'datetime.date' objects

print ""This is a new day : "" + str(mylist[0]) 
>>> This is a new day : 2008-11-22"
709,print datetime in mm-dd-yyyy hh:mm  format,False,False,26,"print today.strftime('We are the %d, %b %Y')
>>> 'We are the 22, Nov 2008'"
710,print datetime in mm-dd-yyyy hh:mm  format,False,False,31,"print ""We are the {:%d, %b %Y}"".format(today)
>>> 'We are the 22, Nov 2008'"
711,print datetime in mm-dd-yyyy hh:mm  format,False,False,22,"import datetime
f""{datetime.datetime.now():%Y-%m-%d}""
>>> '2017-06-15'"
712,print datetime in mm-dd-yyyy hh:mm  format,False,False,18,"from datetime import datetime

datetime.today().strftime('%Y-%m-%d')"
713,print datetime in mm-dd-yyyy hh:mm  format,False,False,22,datetime.today().strftime('%Y-%m-%d-%H:%M:%S')
714,get time now,True,True,3,datetime.datetime.now()
715,get time now,False,True,4,datetime.datetime.kill(time.isoformat)
716,get time now,False,True,6,datetime.datetime.fromtimestamp(datetime.datetime.now())
717,get time now,False,True,6,"datetime.datetime.kill(time.signal, time.microsecond)"
718,get time now,False,True,4,datetime.datetime.minute(datetime.now)
719,get time now,False,True,4,datetime.datetime.t(datetime.datetime)
720,get time now,False,True,4,datetime.datetime.kill(time.now)
721,get time now,False,False,38,">>> import datetime
>>> datetime.datetime.now()
datetime.datetime(2009, 1, 6, 15, 8, 24, 78915)

>>> print(datetime.datetime.now())
2009-01-06 15:08:24.789150"
722,get time now,False,False,32,">>> datetime.datetime.now().time()
datetime.time(15, 8, 24, 78915)

>>> print(datetime.datetime.now().time())
15:08:24.789150"
723,get time now,False,False,7,>>> from datetime import datetime
724,get time now,False,False,38,">>> from time import gmtime, strftime
>>> strftime(""%Y-%m-%d %H:%M:%S"", gmtime())
'2009-01-05 22:14:39'"
725,get time now,False,False,17,"import time
millis = int(round(time.time() * 1000))
print millis"
726,get time now,False,False,17,"import time

current_milli_time = lambda: int(round(time.time() * 1000))"
727,get time now,False,False,7,">>> current_milli_time()
1378761833768"
798,copy file `ddd.png`,True,True,7,"shutil.copy2(ddd.png, 'ddd.png')"
799,copy file `ddd.png`,False,True,10,"shutil = open('ddd.png', 'rb')"
800,copy file `ddd.png`,False,True,6,"shutil.copy2(ddd.png, ddd.png)"
801,copy file `ddd.png`,False,True,10,"copyfile = open('ddd.png', 'rb')"
802,copy file `ddd.png`,False,True,8,"shutil.copy2('ddd.png', 'ddd.png')"
803,copy file `ddd.png`,False,True,10,"upload_url = collections.create_upload_url('ddd.png', gs_bucket_name='ddd.png')"
804,copy file `ddd.png`,False,True,10,"upload_url = collections.create_upload_url('ddd.png', delimiter='ddd.png')"
805,copy file `ddd.png`,False,False,10,"from shutil import copyfile
copyfile(src, dst)"
806,copy file `ddd.png`,False,False,57,"┌──────────────────┬────────┬───────────┬───────┬────────────────┐
│     Function     │ Copies │   Copies  │Can use│   Destination  │
│                  │metadata│permissions│buffer │may be directory│
├──────────────────┼────────┼───────────┼───────┼────────────────┤
│shutil.copy       │   No   │    Yes    │   No  │      Yes       │
│shutil.copyfile   │   No   │     No    │   No  │       No       │
│shutil.copy2      │  Yes   │    Yes    │   No  │      Yes       │
│shutil.copyfileobj│   No   │     No    │  Yes  │       No       │
└──────────────────┴────────┴───────────┴───────┴────────────────┘"
807,copy file `ddd.png`,False,False,28,"import shutil
shutil.copy2('/src/dir/file.ext', '/dst/dir/newname.ext') # complete target filename given
shutil.copy2('/src/file.ext', '/dst/dir') # target filename is /dst/dir/file.ext"
808,copy file `ddd.png`,False,False,10,"import shutil
shutil.copy('/etc/hostname', '/var/tmp/testhostname')"
809,copy file `ddd.png`,False,False,6,"import os
import shutil
import subprocess"
810,copy file `ddd.png`,False,False,20,"shutil.copyfile(src_file, dest_file, *, follow_symlinks=True)

# example    
shutil.copyfile('source.txt', 'destination.txt')"
811,copy file `ddd.png`,False,False,20,"shutil.copy(src_file, dest_file, *, follow_symlinks=True)

# example
shutil.copy('source.txt', 'destination.txt')"
826,copy a file to dist,False,True,11,"shutil.copy2('<unk>', 'dist')"
827,copy a file to dist,True,True,7,"shutil.copy2(file, 'en_US')"
828,copy a file to dist,False,True,14,"shutil.copy2('<unk>', '<unk>')"
829,copy a file to dist,False,True,8,"shutil.copy2(dist, 'w')"
830,copy a file to dist,False,True,8,"shutil.copy2('dist', 'rb')"
831,copy a file to dist,False,True,7,"shutil.copy2(dist, 'rb')"
832,copy a file to dist,False,True,11,"shutil.copy2('<unk>', '..')"
833,copy a file to dist,False,False,10,"from shutil import copyfile
copyfile(src, dst)"
834,copy a file to dist,False,False,57,"┌──────────────────┬────────┬───────────┬───────┬────────────────┐
│     Function     │ Copies │   Copies  │Can use│   Destination  │
│                  │metadata│permissions│buffer │may be directory│
├──────────────────┼────────┼───────────┼───────┼────────────────┤
│shutil.copy       │   No   │    Yes    │   No  │      Yes       │
│shutil.copyfile   │   No   │     No    │   No  │       No       │
│shutil.copy2      │  Yes   │    Yes    │   No  │      Yes       │
│shutil.copyfileobj│   No   │     No    │  Yes  │       No       │
└──────────────────┴────────┴───────────┴───────┴────────────────┘"
835,copy a file to dist,False,False,28,"import shutil
shutil.copy2('/src/dir/file.ext', '/dst/dir/newname.ext') # complete target filename given
shutil.copy2('/src/file.ext', '/dst/dir') # target filename is /dst/dir/file.ext"
836,copy a file to dist,False,False,10,"import shutil
shutil.copy('/etc/hostname', '/var/tmp/testhostname')"
837,copy a file to dist,False,False,6,"import os
import shutil
import subprocess"
838,copy a file to dist,False,False,20,"shutil.copyfile(src_file, dest_file, *, follow_symlinks=True)

# example    
shutil.copyfile('source.txt', 'destination.txt')"
839,copy a file to dist,False,False,20,"shutil.copy(src_file, dest_file, *, follow_symlinks=True)

# example
shutil.copy('source.txt', 'destination.txt')"
910,cast a float to two decimals,True,True,13,float('{0:.2f}'.format(cast))
911,cast a float to two decimals,False,True,13,float('{0:.2f}'.format(float))
912,cast a float to two decimals,False,True,24,"float('{0:.2f}'.format(cast, 'pushButton', '{0:.2f}'))"
913,cast a float to two decimals,False,True,6,"round(0.1, 2)"
914,cast a float to two decimals,False,True,6,"round(cast, 2)"
915,cast a float to two decimals,False,True,6,"round(a, 2)"
916,cast a float to two decimals,False,True,6,"round(10, 20)"
917,cast a float to two decimals,False,False,130,">>> 125650429603636838/(2**53)
13.949999999999999

>>> 234042163/(2**24)
13.949999988079071

>>> a = 13.946
>>> print(a)
13.946
>>> print(""%.2f"" % a)
13.95
>>> round(a,2)
13.949999999999999
>>> print(""%.2f"" % round(a, 2))
13.95
>>> print(""{:.2f}"".format(a))
13.95
>>> print(""{:.2f}"".format(round(a, 2)))
13.95
>>> print(""{:.15f}"".format(round(a, 2)))
13.949999999999999"
918,cast a float to two decimals,False,False,10,"""{:.2f}"".format(13.949999999999999)"
919,cast a float to two decimals,False,False,13,"float(""{:.2f}"".format(13.949999999999999))"
920,cast a float to two decimals,False,False,64,">>> x = 13.949999999999999999
>>> x
13.95
>>> g = float(""{:.2f}"".format(x))
>>> g
13.95
>>> x == g
True
>>> h = round(x, 2)
>>> h
13.95
>>> x == h
True"
921,cast a float to two decimals,False,False,11,"answer = str(round(answer, 2))"
922,cast a float to two decimals,False,False,10,">>> round(14.22222223, 2)
14.22"
923,cast a float to two decimals,False,False,10,"""{:.2f}"".format(5)"
924,cast a list to a dataframe,True,True,19,"pd.DataFrame(values, columns=['R_Number', 'C_Number', 'Avg', 'Std'])"
925,cast a list to a dataframe,False,True,13,"pd.DataFrame(data, columns=['farm', 'fruit'])"
926,cast a list to a dataframe,False,True,13,"pd.DataFrame(values, columns=['farm', 'fruit'])"
927,cast a list to a dataframe,False,True,16,"pd.DataFrame(data, columns=['farm', 'fruit', 'ob'])"
928,cast a list to a dataframe,False,True,15,"pd.DataFrame(data, columns=['x', 'y'])"
929,cast a list to a dataframe,False,True,15,"pd.DataFrame(data, columns=['farm', 'fruit'], DataFrame=False)"
930,cast a list to a dataframe,False,True,16,"pd.DataFrame(values, columns=['farm', 'fruit', 'ob'])"
931,cast a list to a dataframe,False,False,6,"do.call(rbind.data.frame, your_list)"
932,cast a list to a dataframe,False,False,20,"df <- data.frame(matrix(unlist(l), nrow=length(l), byrow=T))"
933,cast a list to a dataframe,False,False,19,"df <- data.frame(matrix(unlist(l), nrow=132, byrow=T),stringsAsFactors=FALSE)"
934,cast a list to a dataframe,False,False,76,"import pandas as pd
lst1 = range(100)
lst2 = range(100)
lst3 = range(100)
percentile_list = pd.DataFrame(
    {'lst1Title': lst1,
     'lst2Title': lst2,
     'lst3Title': lst3
    })

percentile_list
    lst1Title  lst2Title  lst3Title
0          0         0         0
1          1         1         1
2          2         2         2
3          3         3         3
4          4         4         4
5          5         5         5
6          6         6         6
..."
935,cast a list to a dataframe,False,False,31,"import numpy as np
percentile_list = pd.DataFrame(np.column_stack([lst1, lst2, lst3]), 
                               columns=['lst1Title', 'lst2Title', 'lst3Title'])"
936,cast a list to a dataframe,False,False,17,"df = pd.DataFrame(table, columns=headers)
df

   Heading1  Heading2
0         1         2
1         3         4"
937,cast a list to a dataframe,False,False,7,df['new_col'] = mylist
966,create a dataframe from a list,False,True,9,"pd.DataFrame([a], method='bar')"
967,create a dataframe from a list,False,True,18,"pd.DataFrame.from_dict(data, on=['A', 'B'], how='outer')"
968,create a dataframe from a list,False,True,18,"pd.DataFrame(data, columns=['A', 'B'], how='outer')"
969,create a dataframe from a list,False,True,16,"pd.DataFrame.from_dict(data, on=['farm', 'fruit'], how='inner')"
970,create a dataframe from a list,False,True,9,"pd.DataFrame.DataFrame([a], method='ffill')"
971,create a dataframe from a list,True,True,17,"pd.DataFrame(data, columns=['x', 'y'], axis=1)"
972,create a dataframe from a list,False,True,18,"pd.DataFrame.DataFrame(a, columns=['A', 'B'], how='outer')"
973,create a dataframe from a list,False,False,24,"df['color'] = np.where(df['Set']=='Z', 'green', 'red')"
974,create a dataframe from a list,False,False,60,"import pandas as pd
import numpy as np

df = pd.DataFrame({'Type':list('ABBC'), 'Set':list('ZZXY')})
df['color'] = np.where(df['Set']=='Z', 'green', 'red')
print(df)"
975,create a dataframe from a list,False,False,19,"Set Type  color
0   Z    A  green
1   Z    B  green
2   X    B    red
3   Y    C    red"
976,create a dataframe from a list,False,False,118,"df = pd.DataFrame({'Type':list('ABBC'), 'Set':list('ZZXY')})
conditions = [
    (df['Set'] == 'Z') & (df['Type'] == 'A'),
    (df['Set'] == 'Z') & (df['Type'] == 'B'),
    (df['Type'] == 'B')]
choices = ['yellow', 'blue', 'purple']
df['color'] = np.select(conditions, choices, default='black')
print(df)"
977,create a dataframe from a list,False,False,19,"Set Type   color
0   Z    A  yellow
1   Z    B    blue
2   X    B  purple
3   Y    C   black"
978,create a dataframe from a list,False,False,47,"import datetime
import pandas as pd
import numpy as np

todays_date = datetime.datetime.now().date()
index = pd.date_range(todays_date-datetime.timedelta(10), periods=10, freq='D')

columns = ['A','B', 'C']"
979,create a dataframe from a list,False,False,20,"df_ = pd.DataFrame(index=index, columns=columns)
df_ = df_.fillna(0) # with 0s rather than NaNs"
980,sort dataframe `jdf` by `scores`,False,True,5,jdf.sort_values(by='scores')
981,sort dataframe `jdf` by `scores`,True,True,4,jdf.sort_values(by=scores.columns)
982,sort dataframe `jdf` by `scores`,False,True,4,jdf.sort_values(by=scores)
983,sort dataframe `jdf` by `scores`,False,True,4,jdf.sort_values(by=jdf.columns)
984,sort dataframe `jdf` by `scores`,False,True,8,jdf.sort_values(by=['scores'])
985,sort dataframe `jdf` by `scores`,False,True,4,jdf.sort(by=scores.columns)
986,sort dataframe `jdf` by `scores`,False,True,4,jdf.sort(scores)
987,sort dataframe `jdf` by `scores`,False,False,4,df.sample(frac=1)
988,sort dataframe `jdf` by `scores`,False,False,10,df = df.sample(frac=1).reset_index(drop=True)
989,sort dataframe `jdf` by `scores`,False,False,60,"$ python3 -m memory_profiler .\test.py
Filename: .\test.py

Line #    Mem usage    Increment   Line Contents
================================================
     5     68.5 MiB     68.5 MiB   @profile
     6                             def shuffle():
     7    847.8 MiB    779.3 MiB       df = pd.DataFrame(np.random.randn(100, 1000000))
     8    847.9 MiB      0.1 MiB       df = df.sample(frac=1).reset_index(drop=True)"
990,sort dataframe `jdf` by `scores`,False,False,10,"from sklearn.utils import shuffle
df = shuffle(df)"
991,sort dataframe `jdf` by `scores`,False,False,33,"df = pd.DataFrame(np.random.randn(100, 3))

from scipy import stats
df[(np.abs(stats.zscore(df)) < 3).all(axis=1)]"
992,sort dataframe `jdf` by `scores`,False,False,84,"df = pd.DataFrame({'Data':np.random.normal(size=200)})
# example dataset of normally distributed data. 

df[np.abs(df.Data-df.Data.mean()) <= (3*df.Data.std())]
# keep only the ones that are within +3 to -3 standard deviations in the column 'Data'.

df[~(np.abs(df.Data-df.Data.mean()) > (3*df.Data.std()))]
# or if you prefer the other way around"
993,sort dataframe `jdf` by `scores`,False,False,27,"S = pd.Series(np.random.normal(size=200))
S[~((S-S.mean()).abs() > 3*S.std())]"
994,sort dataframe `jdf` by the values of column 'scores',False,True,10,"jdf.sort_values(['scores', 'scores'])"
995,sort dataframe `jdf` by the values of column 'scores',True,True,5,jdf.sort_values(by='scores')
996,sort dataframe `jdf` by the values of column 'scores',False,True,5,jdf.sort_values(level='scores')
997,sort dataframe `jdf` by the values of column 'scores',False,True,17,"jdf.sort_values(['scores', 'scores'], ascending=[True, True])"
998,sort dataframe `jdf` by the values of column 'scores',False,True,5,jdf.sort_values('scores')
999,sort dataframe `jdf` by the values of column 'scores',False,True,17,"jdf.sort_values(['scores', 'scores'], ascending=[True, False])"
1000,sort dataframe `jdf` by the values of column 'scores',False,True,5,jdf.sort_values(**'scores')
1001,sort dataframe `jdf` by the values of column 'scores',False,False,53,"print df
   0  Bytes  Client             Ip
0  1      1    1000   192.168.10.2
1  0      0    2000  192.168.10.12
2  2      2     500   192.168.10.4
3  3      3     159  192.168.10.56

print df.nlargest(3, 'Client')
   0  Bytes  Client             Ip
1  0      0    2000  192.168.10.12
0  1      1    1000   192.168.10.2
2  2      2     500   192.168.10.4"
1002,sort dataframe `jdf` by the values of column 'scores',False,False,73,"df1 = df.sort_values('score',ascending = False).groupby('pidx').head(2)
print (df1)

    mainid pidx pidy  score
8        2    x    w     12
4        1    a    e      8
2        1    c    a      7
10       2    y    x      6
1        1    a    c      5
7        2    z    y      5
6        2    y    z      3
3        1    c    b      2
5        2    x    y      1"
1003,sort dataframe `jdf` by the values of column 'scores',False,False,81,"df = df.set_index(['mainid','pidy']).groupby('pidx')['score'].nlargest(2).reset_index() 
print (df)
  pidx  mainid pidy  score
0    a       1    e      8
1    a       1    c      5
2    c       1    a      7
3    c       1    b      2
4    x       2    w     12
5    x       2    y      1
6    y       2    x      6
7    y       2    z      3
8    z       2    y      5"
1004,sort dataframe `jdf` by the values of column 'scores',False,False,247,"np.random.seed(123)
N = 1000000

L1 = list('abcdefghijklmnopqrstu')
L2 = list('efghijklmnopqrstuvwxyz')
df = pd.DataFrame({'mainid':np.random.randint(1000, size=N),
                   'pidx': np.random.randint(10000, size=N),
                   'pidy': np.random.choice(L2, N),
                   'score':np.random.randint(1000, size=N)})
#print (df)

def epat(df):
    grouped = df.groupby('pidx')
    new_df = pd.DataFrame([], columns = df.columns)
    for key, values in grouped:
        new_df = pd.concat([new_df, grouped.get_group(key).sort_values('score', ascending=True)[:2]], 0)
    return (new_df)

print (epat(df))

In [133]: %timeit (df.sort_values('score',ascending = False).groupby('pidx').head(2))
1 loop, best of 3: 309 ms per loop

In [134]: %timeit (df.set_index(['mainid','pidy']).groupby('pidx')['score'].nlargest(2).reset_index())
1 loop, best of 3: 7.11 s per loop

In [147]: %timeit (epat(df))
1 loop, best of 3: 22 s per loop"
1005,sort dataframe `jdf` by the values of column 'scores',False,False,37,"In [6]: df.sort('Bytes', ascending=False)
Out[6]:
   0  Bytes      Client Ip
1  1   2000  192.168.10.12
0  0   1000   192.168.10.2
2  2    500   192.168.10.4
3  3    159  192.168.10.56"
1006,sort dataframe `jdf` by the values of column 'scores',False,False,122,"import pandas as pd

df = pd.DataFrame({'a': ['GOTV', 'Persuasion', 'Likely Supporter', 
                         'GOTV', 'Persuasion', 'Persuasion+GOTV']})

df.a = pd.Categorical(df.a, 
                      categories=[""Likely Supporter"",""GOTV"",""Persuasion"",""Persuasion+GOTV""],
                      ordered=True)

print (df)
                  a
0              GOTV
1        Persuasion
2  Likely Supporter
3              GOTV
4        Persuasion
5   Persuasion+GOTV

print (df.a)
0                GOTV
1          Persuasion
2    Likely Supporter
3                GOTV
4          Persuasion
5     Persuasion+GOTV
Name: a, dtype: category
Categories (4, object): [Likely Supporter < GOTV < Persuasion < Persuasion+GOTV]"
1007,sort dataframe `jdf` by the values of column 'scores',False,False,26,"df.sort_values('a', inplace=True)
print (df)
                  a
2  Likely Supporter
0              GOTV
3              GOTV
1        Persuasion
4        Persuasion
5   Persuasion+GOTV"
1050,datetime,False,True,17,"datetime.datetime.strptime('<unk>', '%d%b%Y')"
1051,datetime,True,True,25,"datetime.datetime.strptime('<unk>', '%Y-%m-%dT%H:%M:%S')"
1052,datetime,False,True,18,"datetime.datetime.strptime('<unk>', '%B %d, %Y')"
1053,datetime,False,True,16,"datetime.datetime.strptime('<unk>', '%a, %d')"
1054,datetime,False,True,6,time.mktime(datetime.datetime.now())
1055,datetime,False,True,30,"datetime.datetime.strptime('<unk>', '%a, %d %b %Y %H:%M:%S %Z')"
1056,datetime,False,True,5,now = datetime.datetime.now()
1057,datetime,False,False,38,">>> import datetime
>>> datetime.datetime.now()
datetime.datetime(2009, 1, 6, 15, 8, 24, 78915)

>>> print(datetime.datetime.now())
2009-01-06 15:08:24.789150"
1058,datetime,False,False,32,">>> datetime.datetime.now().time()
datetime.time(15, 8, 24, 78915)

>>> print(datetime.datetime.now().time())
15:08:24.789150"
1059,datetime,False,False,7,>>> from datetime import datetime
1060,datetime,False,False,6,datetime.datetime.now().date()
1061,datetime,False,False,38,">>> from time import gmtime, strftime
>>> strftime(""%Y-%m-%d %H:%M:%S"", gmtime())
'2009-01-05 22:14:39'"
1062,datetime,False,False,10,"for date in mylist :
    print str(date)"
1063,datetime,False,False,128,"import datetime
mylist = []
today = datetime.date.today()
mylist.append(today)
print mylist[0] # print the date object, not the container ;-)
2008-11-22

# It's better to always use str() because :

print ""This is a new day : "", mylist[0] # will work
>>> This is a new day : 2008-11-22

print ""This is a new day : "" + mylist[0] # will crash
>>> cannot concatenate 'str' and 'datetime.date' objects

print ""This is a new day : "" + str(mylist[0]) 
>>> This is a new day : 2008-11-22"
1078,time add,True,True,13,"datetime.datetime.now().time() + datetime.timedelta(days=1, hours=3)"
1079,time add,False,True,13,"datetime.datetime.now().time() + datetime.timedelta(days=1, hours=5)"
1080,time add,False,True,13,"datetime.datetime.now().time() - datetime.timedelta(days=1, hours=3)"
1081,time add,False,True,13,"datetime.datetime.now().time() - datetime.timedelta(days=1, hours=5)"
1082,time add,False,True,10,"datetime.datetime.now() - datetime.timedelta(days=1, hours=3)"
1083,time add,False,True,13,"datetime.datetime.now().time() - datetime.timedelta(days=1, hours=2)"
1084,time add,False,True,10,"datetime.datetime.now() + datetime.timedelta(days=1, hours=3)"
1085,time add,False,False,24,"import time

start = time.time()
print(""hello"")
end = time.time()
print(end - start)"
1086,time add,False,False,32,"from timeit import default_timer as timer

start = timer()
# ...
end = timer()
print(end - start) # Time in seconds, e.g. 5.38091952400282"
1087,time add,False,False,2,import datetime
1088,time add,False,False,23,"date_1 = datetime.datetime.strptime(start_date, ""%m/%d/%y"")

end_date = date_1 + datetime.timedelta(days=10)"
1089,time add,False,False,37,"import datetime
a = datetime.datetime(100,1,1,11,34,59)
b = a + datetime.timedelta(0,3) # days, seconds, then other fields.
print(a.time())
print(b.time())"
1090,time add,False,False,2,"11:34:59
11:35:02"
1091,time add,False,False,8,b = a + datetime.timedelta(seconds=3)
1106,copy file,True,True,7,"shutil.copy2(file, 'rb')"
1107,copy file,False,True,6,"shutil.copy2(file, var_1)"
1108,copy file,False,True,6,"shutil.copy2(file, subdirname)"
1109,copy file,False,True,6,"shutil.copy2(file, out)"
1110,copy file,False,True,6,"shutil.copy2(file, stream)"
1111,copy file,False,True,6,"shutil.copy2(file, string)"
1112,copy file,False,True,6,"copyfile(file, var_1)"
1113,copy file,True,False,10,"from shutil import copyfile
copyfile(src, dst)"
1114,copy file,False,False,57,"┌──────────────────┬────────┬───────────┬───────┬────────────────┐
│     Function     │ Copies │   Copies  │Can use│   Destination  │
│                  │metadata│permissions│buffer │may be directory│
├──────────────────┼────────┼───────────┼───────┼────────────────┤
│shutil.copy       │   No   │    Yes    │   No  │      Yes       │
│shutil.copyfile   │   No   │     No    │   No  │       No       │
│shutil.copy2      │  Yes   │    Yes    │   No  │      Yes       │
│shutil.copyfileobj│   No   │     No    │  Yes  │       No       │
└──────────────────┴────────┴───────────┴───────┴────────────────┘"
1115,copy file,False,False,28,"import shutil
shutil.copy2('/src/dir/file.ext', '/dst/dir/newname.ext') # complete target filename given
shutil.copy2('/src/file.ext', '/dst/dir') # target filename is /dst/dir/file.ext"
1116,copy file,False,False,43,"import shutil, errno

def copyanything(src, dst):
    try:
        shutil.copytree(src, dst)
    except OSError as exc: # python >2.5
        if exc.errno == errno.ENOTDIR:
            shutil.copy(src, dst)
        else: raise"
1117,copy file,False,False,10,"import shutil
shutil.copy('/etc/hostname', '/var/tmp/testhostname')"
1118,copy file,False,False,6,"import os
import shutil
import subprocess"
1119,copy file,False,False,20,"shutil.copyfile(src_file, dest_file, *, follow_symlinks=True)

# example    
shutil.copyfile('source.txt', 'destination.txt')"
1204,sort key of dict,True,True,17,"sorted(list(dict.items()), key=lambda x: x[1])"
1205,sort key of dict,False,True,20,"sorted(list(dict.items()), key=lambda x: x[1][0])"
1206,sort key of dict,False,True,20,"sorted(list(dict.items()), key=lambda tup: tup[1][0])"
1207,sort key of dict,False,True,24,"sorted(list(dict.items()), key=lambda x: x[1]['b'], reverse=True)"
1208,sort key of dict,False,True,17,"sorted(list(dict.items()), key=lambda tup: tup[1])"
1209,sort key of dict,False,True,15,"sorted(list(dict.items()), **operator.itemgetter('key'))"
1210,sort key of dict,False,True,16,"sorted(list(dict.items()), **iter(d.items()))"
1211,sort key of dict,False,False,68,"x = {1: 2, 3: 4, 4: 3, 2: 1, 0: 0}
{k: v for k, v in sorted(x.items(), key=lambda item: item[1])}
{0: 0, 2: 1, 1: 2, 4: 3, 3: 4}"
1212,sort key of dict,False,False,38,"import operator
x = {1: 2, 3: 4, 4: 3, 2: 1, 0: 0}
sorted_x = sorted(x.items(), key=operator.itemgetter(1))"
1213,sort key of dict,False,False,38,"import operator
x = {1: 2, 3: 4, 4: 3, 2: 1, 0: 0}
sorted_x = sorted(x.items(), key=operator.itemgetter(0))"
1214,sort key of dict,False,False,39,"x = {1: 2, 3: 4, 4: 3, 2: 1, 0: 0}
sorted_x = sorted(x.items(), key=lambda kv: kv[1])"
1215,sort key of dict,False,False,8,"import collections

sorted_dict = collections.OrderedDict(sorted_x)"
1216,sort key of dict,False,False,15,"newlist = sorted(list_to_be_sorted, key=lambda k: k['name'])"
1217,sort key of dict,False,False,16,"from operator import itemgetter
newlist = sorted(list_to_be_sorted, key=itemgetter('name'))"
1218,print list,False,True,19,"print('%s, <unk>' % (1, 2, 3))"
1219,print list,False,True,22,"print('<unk> %s, <unk>' % (1, 2, 3))"
1220,print list,True,True,10,"print('%s,' % my_list)"
1221,print list,False,True,12,print([x.strip() for x in list])
1222,print list,False,True,16,"print('%s, <unk>' % (display.max_columns,))"
1223,print list,False,True,4,concatenate.my_list(my_list)
1224,print list,False,True,14,print([x.split('=') for x in list])
1225,print list,False,False,7,"print(*myList, sep='\n')"
1226,print list,False,False,7,for p in myList: print p
1227,print list,False,False,12,print '\n'.join(str(p) for p in myList)
1228,print list,False,False,32,"mylist = ['x', 3, 'b']
print '[%s]' % ', '.join(map(str, mylist))"
1229,print list,False,False,34,"mylist = ['x', 3, 'b']
print('[%s]' % ', '.join(map(str, mylist)))"
1230,print list,False,False,7,"[x, 3, b]"
1231,print list,False,False,8,"from pprint import pprint
pprint(the_list)"
1246,read all files under a folder,True,True,8,os.listdir('<unk>')
1247,read all files under a folder,False,True,3,os.getcwd()
1248,read all files under a folder,False,True,4,os.removedirs(__file__)
1249,read all files under a folder,False,True,4,os.removedirs(file_name)
1250,read all files under a folder,False,True,7,os.chdir(os.path.dirname(__file__))
1251,read all files under a folder,False,True,7,os.chdir(os.path.abspath(existGDBPath))
1252,read all files under a folder,False,True,6,print(os.getcwd())
1253,read all files under a folder,False,False,32,"from os import listdir
from os.path import isfile, join
onlyfiles = [f for f in listdir(mypath) if isfile(join(mypath, f))]"
1254,read all files under a folder,False,False,27,"from os import walk

f = []
for (dirpath, dirnames, filenames) in walk(mypath):
    f.extend(filenames)
    break"
1255,read all files under a folder,False,False,11,"import glob
print(glob.glob(""/home/adam/*.txt""))"
1256,read all files under a folder,False,False,10,"['/home/adam/file1.txt', '/home/adam/file2.txt', .... ]"
1257,read all files under a folder,False,False,29,"import os
 arr = os.listdir()
 print(arr)

 >>> ['$RECYCLE.BIN', 'work.txt', '3ebooks.txt', 'documents']"
1258,read all files under a folder,False,False,20,"import glob

txtfiles = []
for file in glob.glob(""*.txt""):
    txtfiles.append(file)"
1259,read all files under a folder,False,False,16,"import glob

mylist = [f for f in glob.glob(""*.txt"")]"
1260,open text file,True,True,27,"with open('file.txt', 'r') as f:
    f = f.open('open', 'r', encoding='utf-8')"
1261,open text file,True,True,27,"with open('file.txt', 'r') as f:
    f = f.open('file.txt', 'r', encoding='utf-8')"
1262,open text file,False,True,24,"with open('file.txt', 'r') as f:
    f = f.open('open', 'r')"
1263,open text file,False,True,18,"with open('file.txt', 'r') as f:
    f = f.readlines()"
1264,open text file,False,True,24,"with open('file.txt', 'r') as f:
    f = f.open('file.txt', 'r')"
1265,open text file,False,True,17,"with open(file, 'r') as f:
    write = f.read()"
1266,open text file,False,True,17,"with open(file, 'r') as f:
    write = f.readlines()"
1267,open text file,False,False,25,"with open('data.txt', 'r') as file:
    data = file.read().replace('\n', '')"
1268,open text file,False,False,18,"with open('data.txt', 'r') as myfile:
  data = myfile.read()"
1269,open text file,False,False,61,"# Read in the file
with open('file.txt', 'r') as file :
  filedata = file.read()

# Replace the target string
filedata = filedata.replace('ram', 'abcd')

# Write the file out again
with open('file.txt', 'w') as file:
  file.write(filedata)"
1270,open text file,False,False,36,"#!/usr/bin/env python3
import fileinput

with fileinput.FileInput(filename, inplace=True, backup='.bak') as file:
    for line in file:
        print(line.replace(text_to_search, replacement_text), end='')"
1271,open text file,False,False,40,"import urllib2  # the lib that handles the url stuff

data = urllib2.urlopen(target_url) # it's a file like object and works just like a file
for line in data: # files are iterable
    print line"
1272,open text file,False,False,12,"import urllib2

for line in urllib2.urlopen(target_url):
    print line"
1273,open text file,False,False,43,"import urllib2

data = urllib2.urlopen(""http://www.google.com"").read(20000) # read only 20 000 chars
data = data.split(""\n"") # then split it into lines

for line in data:
    print line"
1274,open text file,True,True,27,"with open('file.txt', 'r') as f:
    f = f.open('open', 'r', encoding='utf-8')"
1275,open text file,True,True,27,"with open('file.txt', 'r') as f:
    f = f.open('file.txt', 'r', encoding='utf-8')"
1276,open text file,False,True,24,"with open('file.txt', 'r') as f:
    f = f.open('open', 'r')"
1277,open text file,False,True,18,"with open('file.txt', 'r') as f:
    f = f.readlines()"
1278,open text file,False,True,24,"with open('file.txt', 'r') as f:
    f = f.open('file.txt', 'r')"
1279,open text file,False,True,17,"with open(file, 'r') as f:
    write = f.read()"
1280,open text file,False,True,17,"with open(file, 'r') as f:
    write = f.readlines()"
1281,open text file,False,False,43,"with open(filename) as f:
    content = f.readlines()
# you may also want to remove whitespace characters like `\n` at the end of each line
content = [x.strip() for x in content]"
1282,open text file,False,False,25,"with open('data.txt', 'r') as file:
    data = file.read().replace('\n', '')"
1283,open text file,False,False,14,"with open('filename') as f:
    lines = f.readlines()"
1284,open text file,False,False,20,"with open('filename') as f:
    lines = [line.rstrip() for line in f]"
1285,open text file,False,False,18,"with open('data.txt', 'r') as myfile:
  data = myfile.read()"
1286,open text file,False,False,23,"with open(""file.txt"") as file_in:
    lines = []
    for line in file_in:
        lines.append(line)"
1287,open text file,False,False,61,"# Read in the file
with open('file.txt', 'r') as file :
  filedata = file.read()

# Replace the target string
filedata = filedata.replace('ram', 'abcd')

# Write the file out again
with open('file.txt', 'w') as file:
  file.write(filedata)"
1288,copy file,True,True,7,"shutil.copy2(file, 'rb')"
1289,copy file,False,True,6,"shutil.copy2(file, var_1)"
1290,copy file,False,True,6,"shutil.copy2(file, subdirname)"
1291,copy file,False,True,6,"shutil.copy2(file, out)"
1292,copy file,False,True,6,"shutil.copy2(file, stream)"
1293,copy file,False,True,6,"shutil.copy2(file, string)"
1294,copy file,False,True,6,"copyfile(file, var_1)"
1295,copy file,True,False,10,"from shutil import copyfile
copyfile(src, dst)"
1296,copy file,False,False,57,"┌──────────────────┬────────┬───────────┬───────┬────────────────┐
│     Function     │ Copies │   Copies  │Can use│   Destination  │
│                  │metadata│permissions│buffer │may be directory│
├──────────────────┼────────┼───────────┼───────┼────────────────┤
│shutil.copy       │   No   │    Yes    │   No  │      Yes       │
│shutil.copyfile   │   No   │     No    │   No  │       No       │
│shutil.copy2      │  Yes   │    Yes    │   No  │      Yes       │
│shutil.copyfileobj│   No   │     No    │  Yes  │       No       │
└──────────────────┴────────┴───────────┴───────┴────────────────┘"
1297,copy file,False,False,28,"import shutil
shutil.copy2('/src/dir/file.ext', '/dst/dir/newname.ext') # complete target filename given
shutil.copy2('/src/file.ext', '/dst/dir') # target filename is /dst/dir/file.ext"
1298,copy file,False,False,43,"import shutil, errno

def copyanything(src, dst):
    try:
        shutil.copytree(src, dst)
    except OSError as exc: # python >2.5
        if exc.errno == errno.ENOTDIR:
            shutil.copy(src, dst)
        else: raise"
1299,copy file,False,False,10,"import shutil
shutil.copy('/etc/hostname', '/var/tmp/testhostname')"
1300,copy file,False,False,6,"import os
import shutil
import subprocess"
1301,copy file,False,False,20,"shutil.copyfile(src_file, dest_file, *, follow_symlinks=True)

# example    
shutil.copyfile('source.txt', 'destination.txt')"
1316,read csv file,True,True,14,"df = pd.read_csv('myfile.txt', sep=',', header=None)"
1317,read csv file,False,True,17,"df = pd.read_csv('<unk>', quotechar=',', header=None)"
1318,read csv file,False,True,17,"df = pd.read_csv('<unk>', sep=',', header=None)"
1319,read csv file,False,True,14,"df = pd.read_csv('myfile.txt', delimiter=',', header=None)"
1320,read csv file,False,True,17,"df = pd.read_csv('myfile.txt', quotechar=',', delimiter=',')"
1321,read csv file,False,True,12,"df = pd.read_csv('myfile.txt', quotechar=',')"
1322,read csv file,False,True,14,"df = pd.read_csv('myfile.txt', quotechar=',', header=None)"
1323,read csv file,False,False,73,"import csv

def getstuff(filename, criterion):
    with open(filename, ""rb"") as csvfile:
        datareader = csv.reader(csvfile)
        yield next(datareader)  # yield the header row
        count = 0
        for row in datareader:
            if row[3] == criterion:
                yield row
                count += 1
            elif count:
                # done when having read a consecutive series of rows 
                return"
1324,read csv file,False,False,121,"import csv
from itertools import dropwhile, takewhile

def getstuff(filename, criterion):
    with open(filename, ""rb"") as csvfile:
        datareader = csv.reader(csvfile)
        yield next(datareader)  # yield the header row
        # first row, plus any subsequent rows that match, then stop
        # reading altogether
        # Python 2: use `for row in takewhile(...): yield row` instead
        # instead of `yield from takewhile(...)`.
        yield from takewhile(
            lambda r: r[3] == criterion,
            dropwhile(lambda r: r[3] != criterion, datareader))
        return"
1325,read csv file,False,False,25,"def getdata(filename, criteria):
    for criterion in criteria:
        for row in getstuff(filename, criterion):
            yield row"
1326,read csv file,False,False,13,"for row in getdata(somefilename, sequence_of_criteria):
    # process row"
1327,read csv file,False,False,49,"import pandas as pd
print pd.read_csv('value.txt')

        Date    price  factor_1  factor_2
0  2012-06-11  1600.20     1.255     1.548
1  2012-06-12  1610.02     1.258     1.554
2  2012-06-13  1618.07     1.249     1.552
3  2012-06-14  1624.40     1.253     1.556
4  2012-06-15  1626.15     1.258     1.552
5  2012-06-16  1626.15     1.263     1.558
6  2012-06-17  1626.15     1.264     1.572"
1328,read csv file,False,False,52,"import csv

with open(""test.csv"", ""r"") as f:
    reader = csv.reader(f, delimiter=""\t"")
    for i, line in enumerate(reader):
        print 'line[{}] = {}'.format(i, line)"
1329,read csv file,False,False,98,"line[0] = ['Year:', 'Dec:', 'Jan:']
line[1] = ['1', '50', '60']
line[2] = ['2', '25', '50']
line[3] = ['3', '30', '30']
line[4] = ['4', '40', '20']
line[5] = ['5', '10', '10']"
1372,pandas to csv,False,True,10,"pd.concat([df1, df2], axis=1)"
1373,pandas to csv,True,True,10,"df.to_csv('<unk>', index=False)"
1374,pandas to csv,False,True,7,"df.to_csv('utf8', index=False)"
1375,pandas to csv,False,True,15,"df = pd.read_csv('<unk>', sep=',')"
1376,pandas to csv,False,True,7,"df.to_csv('index', index=False)"
1377,pandas to csv,False,True,12,df = pd.DataFrame(index=lambda x: x[1])
1378,pandas to csv,False,True,10,"pd.concat([df] * 5, ignore_index=True)"
1379,pandas to csv,False,False,7,"df.to_csv(file_name, sep='\t')"
1380,pandas to csv,False,False,10,"df.to_csv(file_name, sep='\t', encoding='utf-8')"
1381,pandas to csv,False,False,12,"df.to_csv('my_csv.csv', mode='a', header=False)"
1382,pandas to csv,False,False,19,"with open('my_csv.csv', 'a') as f:
    df.to_csv(f, header=False)"
1383,pandas to csv,False,False,8,",A,B,C
0,1,2,3
1,4,5,6"
1384,pandas to csv,False,False,89,"In [1]: df = pd.read_csv('foo.csv', index_col=0)

In [2]: df
Out[2]:
   A  B  C
0  1  2  3
1  4  5  6

In [3]: df + 6
Out[3]:
    A   B   C
0   7   8   9
1  10  11  12

In [4]: with open('foo.csv', 'a') as f:
             (df + 6).to_csv(f, header=False)"
1385,pandas to csv,False,False,10,",A,B,C
0,1,2,3
1,4,5,6
0,7,8,9
1,10,11,12"
1386,average by group pandas,False,True,17,"df.groupby(np.arange(len(df.columns)) // 2, axis=1).mean()"
1387,average by group pandas,True,True,15,df.groupby(np.arange(len(df.columns)) // 3).mean()
1388,average by group pandas,False,True,17,"df.groupby(np.arange(len(df)) // 2, axis=1).mean()"
1389,average by group pandas,False,True,17,"df.groupby(np.arange(len(pandas)) // 2, axis=1).mean()"
1390,average by group pandas,False,True,17,df.groupby(np.arange(len(df.columns)) // 2 / 2).mean()
1391,average by group pandas,False,True,14,"df.groupby(np.arange(len(df.columns)) // 2, axis=1)"
1392,average by group pandas,False,True,15,df.groupby(np.arange(len(df.columns)) // 2).mean()
1393,average by group pandas,False,False,13,"df.groupby(['col1','col2']).size()"
1394,average by group pandas,False,False,18,"df.groupby(['col1', 'col2']).size().reset_index(name='counts')"
1395,average by group pandas,False,False,87,"In [2]: df
Out[2]: 
  col1 col2  col3  col4  col5  col6
0    A    B  0.20 -0.61 -0.49  1.49
1    A    B -1.53 -1.01 -0.39  1.82
2    A    B -0.44  0.27  0.72  0.11
3    A    B  0.28 -1.32  0.38  0.18
4    C    D  0.12  0.59  0.81  0.66
5    C    D -0.13 -1.65 -1.64  0.50
6    C    D -1.42 -0.11 -0.18 -0.44
7    E    F -0.00  1.42 -0.26  1.17
8    E    F  0.91 -0.47  1.35 -0.34
9    G    H  1.48 -0.63 -1.14  0.17"
1396,average by group pandas,False,False,40,"In [3]: df.groupby(['col1', 'col2']).size()
Out[3]: 
col1  col2
A     B       4
C     D       3
E     F       2
G     H       1
dtype: int64"
1397,average by group pandas,False,False,47,"In [4]: df.groupby(['col1', 'col2']).size().reset_index(name='counts')
Out[4]: 
  col1 col2  counts
0    A    B       4
1    C    D       3
2    E    F       2
3    G    H       1"
1398,average by group pandas,False,False,99,"In [5]: (df
   ...: .groupby(['col1', 'col2'])
   ...: .agg({
   ...:     'col3': ['mean', 'count'], 
   ...:     'col4': ['median', 'min', 'count']
   ...: }))
Out[5]: 
            col4                  col3      
          median   min count      mean count
col1 col2                                   
A    B    -0.810 -1.32     4 -0.372500     4
C    D    -0.110 -1.65     3 -0.476667     3
E    F     0.475 -0.47     2  0.455000     2
G    H    -0.630 -0.63     1  1.480000     1"
1399,average by group pandas,False,False,160,"In [6]: gb = df.groupby(['col1', 'col2'])
   ...: counts = gb.size().to_frame(name='counts')
   ...: (counts
   ...:  .join(gb.agg({'col3': 'mean'}).rename(columns={'col3': 'col3_mean'}))
   ...:  .join(gb.agg({'col4': 'median'}).rename(columns={'col4': 'col4_median'}))
   ...:  .join(gb.agg({'col4': 'min'}).rename(columns={'col4': 'col4_min'}))
   ...:  .reset_index()
   ...: )
   ...: 
Out[6]: 
  col1 col2  counts  col3_mean  col4_median  col4_min
0    A    B       4  -0.372500       -0.810     -1.32
1    C    D       3  -0.476667       -0.110     -1.65
2    E    F       2   0.455000        0.475     -0.47
3    G    H       1   1.480000       -0.630     -0.63"
1400,pandas round value,True,True,3,df.round()
1401,pandas round value,False,True,5,df.round(style='wb')
1402,pandas round value,False,True,4,df.round(1)
1403,pandas round value,False,True,4,df.round(axis=1)
1404,pandas round value,False,True,5,df.round('value')
1405,pandas round value,False,True,12,"df.apply(lambda x: x.round(1), axis=1)"
1406,pandas round value,False,True,4,df.round(10)
1407,pandas round value,False,False,50,"In [479]: df
Out[479]: 
         ID  birthyear    weight
0    619040       1962  0.123123
1    600161       1963  0.981742
2  25602033       1963  1.312312
3    624870       1987  0.942120

In [480]: df[""weight""].mean()
Out[480]: 0.83982437500000007"
1408,pandas round value,False,False,40,"In[2]: 
    df.value1 = df.value1.round()
    print df

Out[2]:
    item  value1  value2
    0    a       1     1.3
    1    a       2     2.5
    2    a       0     0.0
    3    b       3    -1.0
    4    b       5    -1.0"
1409,pandas round value,False,False,26,"decimals = 2    
df['column'] = df['column'].apply(lambda x: round(x, decimals))"
1410,pandas round value,False,False,8,df.round(0).astype(int)
1411,pandas round value,False,False,18,"data.mean().astype(int)  # Truncates mean to integer, e.g. 1.95 = 1"
1412,pandas round value,False,False,23,"data.mean().round(0)  # Rounds mean to nearest integer, e.g. 1.95 = 2 and 1.05 = 1"
1413,pandas round value,False,False,53,"df.round(2)
      0     1     2     3
0  0.06  0.67  0.77  0.71
1  0.80  0.56  0.97  0.15
2  0.03  0.59  0.11  0.95
3  0.33  0.19  0.46  0.92

df
          0         1         2         3
0  0.057116  0.669422  0.767117  0.708115
1  0.796867  0.557761  0.965837  0.147157
2  0.029647  0.593893  0.114066  0.950810
3  0.325707  0.193619  0.457812  0.920403"
1442,sort pandas dataframe,False,True,18,"df.sort_values(['A', '\\1\\2'], ascending=[True, False])"
1443,sort pandas dataframe,False,True,18,"df.sort_values(['A', '\\1'], ascending=[True, False])"
1444,sort pandas dataframe,False,True,19,"df.sort_values(['x', 'y'], ascending=[True, False])"
1445,sort pandas dataframe,False,True,18,"df.sort_values(['A', 'X2'], ascending=[True, False])"
1446,sort pandas dataframe,False,True,21,"df.sort_values(['x', 'y'], ascending=[True, False], inplace=True)"
1447,sort pandas dataframe,True,True,5,df.sort_values(by='*')
1448,sort pandas dataframe,False,True,8,df.sort_values(by='%d')
1449,sort pandas dataframe,False,False,19,"df.sort_values(['a', 'b'], ascending=[True, False])"
1450,sort pandas dataframe,False,False,19,"df.sort(['a', 'b'], ascending=[True, False])"
1451,sort pandas dataframe,False,False,92,"In [11]: df1 = pd.DataFrame(np.random.randint(1, 5, (10,2)), columns=['a','b'])

In [12]: df1.sort(['a', 'b'], ascending=[True, False])
Out[12]:
   a  b
2  1  4
7  1  3
1  1  2
3  1  2
4  3  2
6  4  4
0  4  3
9  4  3
5  4  1
8  4  1"
1452,sort pandas dataframe,False,False,21,"df1 = df1.sort(['a', 'b'], ascending=[True, False])"
1453,sort pandas dataframe,False,False,21,"df1.sort(['a', 'b'], ascending=[True, False], inplace=True)"
1454,sort pandas dataframe,False,False,67,"In [18]:
df.sort_values('2')

Out[18]:
        0          1     2
4    85.6    January   1.0
3    95.5   February   2.0
7   104.8      March   3.0
0   354.7      April   4.0
8   283.5        May   5.0
6   238.7       June   6.0
5   152.0       July   7.0
1    55.4     August   8.0
11  212.7  September   9.0
10  249.6    October  10.0
9   278.8   November  11.0
2   176.5   December  12.0"
1455,sort pandas dataframe,False,False,13,"final_df = df.sort_values(by=['2'], ascending=False)"
1470,rename column pandas,True,True,13,"df.rename(columns={'row': 'row'}, inplace=True)"
1471,rename column pandas,False,True,13,"df.rename(columns={'value': 'value'}, inplace=True)"
1472,rename column pandas,False,True,13,"df.rename(columns={'columns': 'row'}, inplace=True)"
1473,rename column pandas,False,True,15,"df = df.rename(columns={'row': 'row'}, inplace=True)"
1474,rename column pandas,False,True,13,"df.rename(columns={'row': 'value'}, inplace=True)"
1475,rename column pandas,False,True,15,"df.rename(columns={'row': 'row'}, axis=1, inplace=True)"
1476,rename column pandas,False,True,28,"df['df'] = df['row'].rename(**{'row': 'row', 'row': 'row'})"
1477,rename column pandas,False,False,51,"df = df.rename(columns={'oldName1': 'newName1', 'oldName2': 'newName2'})
# Or rename the existing DataFrame (rather than creating a copy) 
df.rename(columns={'oldName1': 'newName1', 'oldName2': 'newName2'}, inplace=True)"
1478,rename column pandas,False,False,43,"df = pd.DataFrame('x', index=range(3), columns=list('abcde'))
df

   a  b  c  d  e
0  x  x  x  x  x
1  x  x  x  x  x
2  x  x  x  x  x"
1479,rename column pandas,False,False,102,"df2 = df.rename({'a': 'X', 'b': 'Y'}, axis=1)  # new method
df2 = df.rename({'a': 'X', 'b': 'Y'}, axis='columns')
df2 = df.rename(columns={'a': 'X', 'b': 'Y'})  # old method  

df2

   X  Y  c  d  e
0  x  x  x  x  x
1  x  x  x  x  x
2  x  x  x  x  x"
1480,rename column pandas,False,False,48,"df.rename({'a': 'X', 'b': 'Y'}, axis=1, inplace=True)
df

   X  Y  c  d  e
0  x  x  x  x  x
1  x  x  x  x  x
2  x  x  x  x  x"
1481,rename column pandas,False,False,54,"df2 = df.set_axis(['V', 'W', 'X', 'Y', 'Z'], axis=1, inplace=False)
df2

   V  W  X  Y  Z
0  x  x  x  x  x
1  x  x  x  x  x
2  x  x  x  x  x"
1482,rename column pandas,False,False,47,"df.columns = ['V', 'W', 'X', 'Y', 'Z']
df

   V  W  X  Y  Z
0  x  x  x  x  x
1  x  x  x  x  x
2  x  x  x  x  x"
1483,rename column pandas,False,False,53,">>> df = pd.DataFrame({'$a':[1,2], '$b': [10,20]})
>>> df.columns = ['a', 'b']
>>> df
   a   b
0  1  10
1  2  20"
1484,column to integer pandas,True,True,12,"df.apply(lambda row: int(row), axis=1)"
1485,column to integer pandas,False,True,10,"pd.DataFrame([column] * 5, axis=1)"
1486,column to integer pandas,False,True,19,"df.apply(lambda x: int(int(x)[-2:]), axis=1)"
1487,column to integer pandas,False,True,14,"df.apply(lambda row: int(row) - 1, axis=1)"
1488,column to integer pandas,False,True,14,"df.apply(lambda x: int(x, -1), axis=1)"
1489,column to integer pandas,False,True,12,"df.apply(lambda x: int(x), axis=1)"
1490,column to integer pandas,False,True,10,"pd.DataFrame([x] * 5, axis=1)"
1491,column to integer pandas,False,False,74,">>> s = pd.Series([""8"", 6, ""7.5"", 3, ""0.9""]) # mixed string and numeric values
>>> s
0      8
1      6
2    7.5
3      3
4    0.9
dtype: object

>>> pd.to_numeric(s) # convert everything to float values
0    8.0
1    6.0
2    7.5
3    3.0
4    0.9
dtype: float64"
1492,column to integer pandas,False,False,34,"# convert Series
my_series = pd.to_numeric(my_series)

# convert column ""a"" of a DataFrame
df[""a""] = pd.to_numeric(df[""a""])"
1493,column to integer pandas,False,False,58,"# convert all columns of DataFrame
df = df.apply(pd.to_numeric) # convert all columns of DataFrame

# convert just columns ""a"" and ""b""
df[[""a"", ""b""]] = df[[""a"", ""b""]].apply(pd.to_numeric)"
1494,column to integer pandas,False,False,44,">>> s = pd.Series(['1', '2', '4.7', 'pandas', '10'])
>>> s
0         1
1         2
2       4.7
3    pandas
4        10
dtype: object"
1495,column to integer pandas,False,False,22,">>> pd.to_numeric(s) # or pd.to_numeric(s, errors='raise')
ValueError: Unable to parse string"
1496,column to integer pandas,False,False,23,">>> pd.to_numeric(s, errors='coerce')
0     1.0
1     2.0
2     4.7
3     NaN
4    10.0
dtype: float64"
1497,column to integer pandas,False,False,17,">>> pd.to_numeric(s, errors='ignore')
# the original Series is returned untouched"
1526,pyplot subplots,False,True,6,"fig.subplots_adjust(wspace=0, hspace=0)"
1527,pyplot subplots,False,True,6,"plt.subplots_adjust(wspace=0, hspace=0)"
1528,pyplot subplots,False,True,6,"fig.subplots_adjust(**10, hspace=0)"
1529,pyplot subplots,True,True,8,"fig.add_subplot(1, 1, 1)"
1530,pyplot subplots,False,True,6,"fig.subplots_adjust(**10, wspace=0)"
1531,pyplot subplots,False,True,8,"fig.subplots_adjust(**10, wspace=0, hspace=0)"
1532,pyplot subplots,False,True,6,"fig.subplots_adjust(**10, **fig.fig)"
1533,pyplot subplots,False,False,8,"f.set_figheight(15)
f.set_figwidth(15)"
1534,pyplot subplots,False,False,13,"f, axs = plt.subplots(2,2,figsize=(15,15))"
1535,pyplot subplots,False,False,29,"import matplotlib.pyplot as plt

fig, axes = plt.subplots(nrows=4, ncols=4)
fig.tight_layout() # Or equivalently,  ""plt.tight_layout()""

plt.show()"
1536,pyplot subplots,False,False,14,"subplots_adjust(left=None, bottom=None, right=None, top=None, wspace=None, hspace=None)"
1537,pyplot subplots,False,False,78,"left  = 0.125  # the left side of the subplots of the figure
right = 0.9    # the right side of the subplots of the figure
bottom = 0.1   # the bottom of the subplots of the figure
top = 0.9      # the top of the subplots of the figure
wspace = 0.2   # the amount of width reserved for blank space between subplots
hspace = 0.2   # the amount of height reserved for white space between subplots"
1538,pyplot subplots,False,False,56,"import matplotlib.pyplot as plt
import numpy as np

fig=plt.figure()
data=np.arange(900).reshape((30,30))
for i in range(1,5):
    ax=fig.add_subplot(2,2,i)        
    ax.imshow(data)

fig.suptitle('Main title') # or plt.suptitle('Main title')
plt.show()"
1539,pyplot subplots,False,False,194,"import random
import matplotlib.pyplot as plt

x = range(1, 101)
y1 = [random.randint(1, 100) for _ in xrange(len(x))]
y2 = [random.randint(1, 100) for _ in xrange(len(x))]

fig = plt.figure()
ax = fig.add_subplot(111)    # The big subplot
ax1 = fig.add_subplot(211)
ax2 = fig.add_subplot(212)

# Turn off axis lines and ticks of the big subplot
ax.spines['top'].set_color('none')
ax.spines['bottom'].set_color('none')
ax.spines['left'].set_color('none')
ax.spines['right'].set_color('none')
ax.tick_params(labelcolor='w', top=False, bottom=False, left=False, right=False)

ax1.loglog(x, y1)
ax2.loglog(x, y2)

# Set common labels
ax.set_xlabel('common xlabel')
ax.set_ylabel('common ylabel')

ax1.set_title('ax1 title')
ax2.set_title('ax2 title')

plt.savefig('common_labels.png', dpi=300)"
1568,random integer between 1 and 20,True,True,9,"print(random.randint(0, 9))"
1569,random integer between 1 and 20,False,True,9,"int(random.randint(0, 9))"
1570,random integer between 1 and 20,False,True,6,"random.randint(0, 9)"
1571,random integer between 1 and 20,False,True,11,"int(random.randint(0, 9), key=int)"
1572,random integer between 1 and 20,False,True,8,"int(random.random(), num=5)"
1573,random integer between 1 and 20,False,True,12,"int(random.randint(0, 9), key='isinstance')"
1574,random integer between 1 and 20,False,True,13,"int(''.join(random.randint(0, 9)))"
1575,random integer between 1 and 20,False,False,21,"Random number:    1  2  3  4  5  6  7  8
Result:           1  2  3  4  7  8  9 10"
1576,random integer between 1 and 20,False,False,23,"import random
numbers = range(a,b) + range(c,d)
r = random.choice(numbers)"
1577,random integer between 1 and 20,False,False,25,">>> import random
>>> random.uniform(-1, 1)
0.4779007751444888
>>> random.uniform(-1, 1)
-0.10028581710574902"
1578,random integer between 1 and 20,False,False,29,"def NormalWORange(a, b, sigma):
    r = random.normalvariate(a,sigma)
    if r < a:
        return r-b
    else:
        return r+b"
1579,random integer between 1 and 20,False,False,42,"def RangeWORange(a, b, c, d):
    r = random.randrange(c,d-2*b) # 2*b because two intervals of length b to exclude
    if r >= a-b:
        return r+2*b
    else:
        return r"
1580,random integer between 1 and 20,False,False,32,"def rand(exclude):
    r = None
    while r in exclude or r is None:
         r = random.randrange(1,10)
    return r

rand([1,3,9])"
1581,random integer between 1 and 20,False,False,10,return 1 if random.random() < 0.5 else -1
1596,trim heading whitespace,True,True,9,"re.sub('\\s+', '', string)"
1597,trim heading whitespace,False,True,12,"re.sub('\\s+', '', b).strip()"
1598,trim heading whitespace,False,True,9,"re.sub('\\s+', '', b)"
1599,trim heading whitespace,False,True,9,"re.sub('\\s+', '', text)"
1600,trim heading whitespace,False,True,14,"l = re.sub('\\s+', '', b).strip()"
1601,trim heading whitespace,False,True,13,"pattern = re.sub('\\s+', '', locale, flags=re.UNICODE)"
1602,trim heading whitespace,False,True,9,"re.sub('\\s+', '', your_string)"
1603,trim heading whitespace,False,False,48,">>> ' Hello '.strip()
'Hello'
>>> ' Hello'.strip()
'Hello'
>>> 'Bob has a cat'.strip()
'Bob has a cat'
>>> '   Hello   '.strip()  # ALL consecutive spaces at both ends removed
'Hello'"
1604,trim heading whitespace,False,False,48,"def strip_one_space(s):
    if s.endswith("" ""): s = s[:-1]
    if s.startswith("" ""): s = s[1:]
    return s

>>> strip_one_space(""   Hello "")
'  Hello'"
1605,trim heading whitespace,False,False,13,">>> ""  Hello\n"".strip("" "")
'Hello\n'"
1606,trim heading whitespace,False,False,14,"sentence = ' hello  apple'
sentence.strip()
>>> 'hello  apple'"
1607,trim heading whitespace,False,False,18,"sentence = ' hello  apple'
sentence.replace("" "", """")
>>> 'helloapple'"
1608,trim heading whitespace,False,False,19,"sentence = ' hello  apple'
"" "".join(sentence.split())
>>> 'hello apple'"
1609,trim heading whitespace,False,False,13,"s = ""  \t a string example\t  ""
s = s.strip()"
1610,normalize newlines to \n,True,True,8,os.path.chr().encode('utf-8')
1611,normalize newlines to \n,False,True,10,os.path.encode('utf-8').encode('utf-8')
1612,normalize newlines to \n,False,True,13,"os.path.replace('str_0', 'str_0').encode('utf-8')"
1613,normalize newlines to \n,False,True,13,os.path.chr(i.encode('utf-8')).encode('utf-8')
1614,normalize newlines to \n,False,True,8,datetime.datetime.now().encode('utf-8')
1615,normalize newlines to \n,False,True,10,os.path.quote('str_0').encode('utf-8')
1616,normalize newlines to \n,False,True,13,os.path.chr(i.rstrip('utf-8')).encode('utf-8')
1617,normalize newlines to \n,False,False,9,print('First line \n Second line')
1618,normalize newlines to \n,False,False,4,"First line
 Second line"
1619,normalize newlines to \n,False,False,17,"mytext = ""<br />"".join(mytext.split(""\n""))"
1620,normalize newlines to \n,False,False,12,"infile = open(""filename"", 'r')"
1621,normalize newlines to \n,False,False,11,"infile = open(""filename"", 'rt')"
1622,normalize newlines to \n,False,False,11,"infile = open(""filename"", 'rb')"
1623,normalize newlines to \n,False,False,11,"infile = open(""filename"", 'rU')"
1624,list of filenames from a folder,True,True,4,os.walk(filenames)
1625,list of filenames from a folder,False,True,9,"os.path.basename(os.path.join(var_1, filename))"
1626,list of filenames from a folder,False,True,11,os.path.basename(os.path.expanduser('<unk>'))
1627,list of filenames from a folder,False,True,7,os.path.basename(os.path.abspath(__file__))
1628,list of filenames from a folder,False,True,8,os.walk('<unk>')
1629,list of filenames from a folder,False,True,11,"open('file.txt', 'rb').read()"
1630,list of filenames from a folder,False,True,4,os.path.basename(var_1)
1631,list of filenames from a folder,False,False,32,"from os import listdir
from os.path import isfile, join
onlyfiles = [f for f in listdir(mypath) if isfile(join(mypath, f))]"
1632,list of filenames from a folder,False,False,27,"from os import walk

f = []
for (dirpath, dirnames, filenames) in walk(mypath):
    f.extend(filenames)
    break"
1633,list of filenames from a folder,False,False,11,"import glob
print(glob.glob(""/home/adam/*.txt""))"
1634,list of filenames from a folder,False,False,10,"['/home/adam/file1.txt', '/home/adam/file2.txt', .... ]"
1635,list of filenames from a folder,False,False,29,"import os
 arr = os.listdir()
 print(arr)

 >>> ['$RECYCLE.BIN', 'work.txt', '3ebooks.txt', 'documents']"
1636,list of filenames from a folder,False,False,20,"import glob

txtfiles = []
for file in glob.glob(""*.txt""):
    txtfiles.append(file)"
1637,list of filenames from a folder,False,False,16,"import glob

mylist = [f for f in glob.glob(""*.txt"")]"
1666,generate random numbers,False,True,10,print(random.choice(range(10)))
1667,generate random numbers,False,True,6,"random.randint(0, 10)"
1668,generate random numbers,False,True,7,random.choice(range(10))
1669,generate random numbers,False,True,10,print(random.choice(range(100)))
1670,generate random numbers,True,True,6,"random.randint(0, 7)"
1671,generate random numbers,False,True,10,print(random.choice(range(9)))
1672,generate random numbers,False,True,9,"print(random.randint(0, 7))"
1673,generate random numbers,True,False,11,"from random import randrange
print(randrange(10))"
1674,generate random numbers,False,False,9,"import random
print(random.randint(0,9))"
1675,generate random numbers,False,False,6,"random.randint(a, b)"
1676,generate random numbers,False,False,26,">>> import random
>>> random.sample(range(1, 100), 3)
[77, 52, 45]"
1677,generate random numbers,False,False,38,">>> try:
...   random.sample(range(1, 2), 3)
... except ValueError:
...   print('Sample size exceeded population size.')
... 
Sample size exceeded population size"
1678,generate random numbers,False,False,8,"import random
random.uniform(0, 1)"
1679,generate random numbers,False,False,11,"import random
random.sample(range(100), 10)"
1792,get all files in directory,True,True,36,"for dirname, dirnames, filenames in os.walk('<unk>'):
    for subdirname in dirnames:
        print(os.path.join(dirname, subdirname))
    for filename in filenames:
        pass"
1793,get all files in directory,False,True,33,"for dirname, dirnames, filenames in os.walk('file.txt'):
    for subdirname in dirnames:
        print(os.path.join(dirname, subdirname))
    for filename in filenames:
        pass"
1794,get all files in directory,False,True,5,glob.glob('*')
1795,get all files in directory,False,True,8,os.listdir('<unk>')
1796,get all files in directory,False,True,5,os.listdir('..')
1797,get all files in directory,False,True,8,os.walk('<unk>')
1798,get all files in directory,False,True,4,os.walk(directory)
1799,get all files in directory,True,False,32,"from os import listdir
from os.path import isfile, join
onlyfiles = [f for f in listdir(mypath) if isfile(join(mypath, f))]"
1800,get all files in directory,False,False,27,"from os import walk

f = []
for (dirpath, dirnames, filenames) in walk(mypath):
    f.extend(filenames)
    break"
1801,get all files in directory,False,False,24,"import glob, os
os.chdir(""/mydir"")
for file in glob.glob(""*.txt""):
    print(file)"
1802,get all files in directory,False,False,31,"import os
for file in os.listdir(""/mydir""):
    if file.endswith("".txt""):
        print(os.path.join(""/mydir"", file))"
1803,get all files in directory,False,False,38,"import os
for root, dirs, files in os.walk(""/mydir""):
    for file in files:
        if file.endswith("".txt""):
             print(os.path.join(root, file))"
1804,get all files in directory,False,False,11,"import glob
print(glob.glob(""/home/adam/*.txt""))"
1805,get all files in directory,False,False,10,"['/home/adam/file1.txt', '/home/adam/file2.txt', .... ]"
1806,get all files in directory,True,True,36,"for dirname, dirnames, filenames in os.walk('<unk>'):
    for subdirname in dirnames:
        print(os.path.join(dirname, subdirname))
    for filename in filenames:
        pass"
1807,get all files in directory,False,True,33,"for dirname, dirnames, filenames in os.walk('file.txt'):
    for subdirname in dirnames:
        print(os.path.join(dirname, subdirname))
    for filename in filenames:
        pass"
1808,get all files in directory,False,True,5,glob.glob('*')
1809,get all files in directory,False,True,8,os.listdir('<unk>')
1810,get all files in directory,False,True,5,os.listdir('..')
1811,get all files in directory,False,True,8,os.walk('<unk>')
1812,get all files in directory,False,True,4,os.walk(directory)
1813,get all files in directory,True,False,32,"from os import listdir
from os.path import isfile, join
onlyfiles = [f for f in listdir(mypath) if isfile(join(mypath, f))]"
1814,get all files in directory,False,False,27,"from os import walk

f = []
for (dirpath, dirnames, filenames) in walk(mypath):
    f.extend(filenames)
    break"
1815,get all files in directory,False,False,24,"import glob, os
os.chdir(""/mydir"")
for file in glob.glob(""*.txt""):
    print(file)"
1816,get all files in directory,False,False,31,"import os
for file in os.listdir(""/mydir""):
    if file.endswith("".txt""):
        print(os.path.join(""/mydir"", file))"
1817,get all files in directory,False,False,38,"import os
for root, dirs, files in os.walk(""/mydir""):
    for file in files:
        if file.endswith("".txt""):
             print(os.path.join(root, file))"
1818,get all files in directory,False,False,11,"import glob
print(glob.glob(""/home/adam/*.txt""))"
1819,get all files in directory,False,False,10,"['/home/adam/file1.txt', '/home/adam/file2.txt', .... ]"
1848,copy file,True,True,7,"shutil.copy2(file, 'rb')"
1849,copy file,False,True,6,"shutil.copy2(file, var_1)"
1850,copy file,False,True,6,"shutil.copy2(file, subdirname)"
1851,copy file,False,True,6,"shutil.copy2(file, out)"
1852,copy file,False,True,6,"shutil.copy2(file, stream)"
1853,copy file,False,True,6,"shutil.copy2(file, string)"
1854,copy file,False,True,6,"copyfile(file, var_1)"
1855,copy file,True,False,10,"from shutil import copyfile
copyfile(src, dst)"
1856,copy file,False,False,57,"┌──────────────────┬────────┬───────────┬───────┬────────────────┐
│     Function     │ Copies │   Copies  │Can use│   Destination  │
│                  │metadata│permissions│buffer │may be directory│
├──────────────────┼────────┼───────────┼───────┼────────────────┤
│shutil.copy       │   No   │    Yes    │   No  │      Yes       │
│shutil.copyfile   │   No   │     No    │   No  │       No       │
│shutil.copy2      │  Yes   │    Yes    │   No  │      Yes       │
│shutil.copyfileobj│   No   │     No    │  Yes  │       No       │
└──────────────────┴────────┴───────────┴───────┴────────────────┘"
1857,copy file,False,False,28,"import shutil
shutil.copy2('/src/dir/file.ext', '/dst/dir/newname.ext') # complete target filename given
shutil.copy2('/src/file.ext', '/dst/dir') # target filename is /dst/dir/file.ext"
1858,copy file,False,False,35,"import os
import shutil
src_files = os.listdir(src)
for file_name in src_files:
    full_file_name = os.path.join(src, file_name)
    if os.path.isfile(full_file_name):
        shutil.copy(full_file_name, dest)"
1859,copy file,False,False,10,"import shutil
shutil.copy('/etc/hostname', '/var/tmp/testhostname')"
1860,copy file,False,False,6,"import os
import shutil
import subprocess"
1861,copy file,False,False,20,"shutil.copyfile(src_file, dest_file, *, follow_symlinks=True)

# example    
shutil.copyfile('source.txt', 'destination.txt')"
1862,current time,False,True,18,now = datetime.datetime.now().strftime('%H:%M:%S')
1863,current time,False,True,8,now = datetime.datetime.now().time()
1864,current time,True,True,6,datetime.datetime.now().time()
1865,current time,False,True,16,datetime.datetime.now().strftime('%H:%M:%S')
1866,current time,False,True,8,now = datetime.datetime.now().date()
1867,current time,False,True,6,datetime.time(datetime.datetime.now())
1868,current time,False,True,5,time = datetime.now()
1869,current time,False,False,38,">>> import datetime
>>> datetime.datetime.now()
datetime.datetime(2009, 1, 6, 15, 8, 24, 78915)

>>> print(datetime.datetime.now())
2009-01-06 15:08:24.789150"
1870,current time,False,False,32,">>> datetime.datetime.now().time()
datetime.time(15, 8, 24, 78915)

>>> print(datetime.datetime.now().time())
15:08:24.789150"
1871,current time,False,False,7,>>> from datetime import datetime
1872,current time,False,False,38,">>> from time import gmtime, strftime
>>> strftime(""%Y-%m-%d %H:%M:%S"", gmtime())
'2009-01-05 22:14:39'"
1873,current time,False,False,103,"Python 2.7.3 (default, Apr 24 2012, 00:00:54) 
[GCC 4.7.0 20120414 (prerelease)] on linux2
Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.
>>> import time
>>> ts = time.time()
>>> print ts
1355563265.81
>>> import datetime
>>> st = datetime.datetime.fromtimestamp(ts).strftime('%Y-%m-%d %H:%M:%S')
>>> print st
2012-12-15 01:21:05
>>>"
1874,current time,False,False,17,"import time
millis = int(round(time.time() * 1000))
print millis"
1875,current time,False,False,17,"import time

current_milli_time = lambda: int(round(time.time() * 1000))"
1890,get curren time,False,True,3,datetime.datetime.now()
1891,get curren time,False,True,16,datetime.datetime.now().strftime('%H:%M:%S')
1892,get curren time,True,True,6,datetime.datetime.now().time()
1893,get curren time,False,True,6,datetime.datetime.t(datetime.datetime.now())
1894,get curren time,False,True,17,"time.strftime('%H:%M:%S', time.gmtime())"
1895,get curren time,False,True,20,"time.strftime('%H:%M:%S', time.gmtime(datetime.time.now()))"
1896,get curren time,False,True,13,time.strftime('%H:%M:%S')
1897,get curren time,False,False,38,">>> import datetime
>>> datetime.datetime.now()
datetime.datetime(2009, 1, 6, 15, 8, 24, 78915)

>>> print(datetime.datetime.now())
2009-01-06 15:08:24.789150"
1898,get curren time,False,False,32,">>> datetime.datetime.now().time()
datetime.time(15, 8, 24, 78915)

>>> print(datetime.datetime.now().time())
15:08:24.789150"
1899,get curren time,False,False,7,>>> from datetime import datetime
1900,get curren time,False,False,38,">>> from time import gmtime, strftime
>>> strftime(""%Y-%m-%d %H:%M:%S"", gmtime())
'2009-01-05 22:14:39'"
1901,get curren time,False,False,17,"import time
millis = int(round(time.time() * 1000))
print millis"
1902,get curren time,False,False,17,"import time

current_milli_time = lambda: int(round(time.time() * 1000))"
1903,get curren time,False,False,7,">>> current_milli_time()
1378761833768"
1904,get a random letter,False,True,8,"output = random.randint(0, 9)"
1905,get a random letter,True,True,10,s = random.choice('<unk>')
1906,get a random letter,False,True,10,output = random.choice('<unk>')
1907,get a random letter,False,True,6,s = random.choice(string.lowercase)
1908,get a random letter,False,True,8,output = random.sample()[0]
1909,get a random letter,False,True,6,s = random.choice(s)
1910,get a random letter,False,True,10,pat = random.choice('<unk>')
1911,get a random letter,False,False,31,"import random

foo = ['a', 'b', 'c', 'd', 'e']
print(random.choice(foo))"
1912,get a random letter,False,False,24,"import secrets

foo = ['battery', 'correct', 'horse', 'staple']
print(secrets.choice(foo))"
1913,get a random letter,False,False,14,"import random

secure_random = random.SystemRandom()
print(secure_random.choice(foo))"
1914,get a random letter,False,False,16,''.join(random.choice(string.ascii_uppercase + string.digits) for _ in range(N))
1915,get a random letter,False,False,11,"''.join(random.choices(string.ascii_uppercase + string.digits, k=N))"
1916,get a random letter,False,False,19,''.join(random.SystemRandom().choice(string.ascii_uppercase + string.digits) for _ in range(N))
1917,get a random letter,False,False,61,">>> import string
>>> import random
>>> def id_generator(size=6, chars=string.ascii_uppercase + string.digits):
...    return ''.join(random.choice(chars) for _ in range(size))
...
>>> id_generator()
'G5G74W'
>>> id_generator(3, ""6793YUIO"")
'Y3U'"
1918,random number,False,True,7,random.choice(random.randrange(0))
1919,random number,False,True,7,random.choice(random.choice(random))
1920,random number,False,True,11,"random.choice(random.choice([0, 1]))"
1921,random number,False,True,9,"random.choice(random.randrange(0, 10))"
1922,random number,False,True,9,"random.choice(random.randrange(0, 7))"
1923,random number,True,True,9,"random.choice(random.randint(0, 10))"
1924,random number,False,True,7,random.choice(random.choice(10))
1925,random number,False,False,11,"from random import randrange
print(randrange(10))"
1926,random number,False,False,10,">>> random.uniform(1.5, 1.9)
1.8733202628557872"
1927,random number,False,False,9,"import random
print(random.randint(0,9))"
1928,random number,False,False,6,"random.randint(a, b)"
1929,random number,False,False,8,"import random
random.uniform(0, 1)"
1930,random number,False,False,11,"import random
random.sample(range(100), 10)"
1931,random number,False,False,21,"all_lines = f1.readlines()
for i in range(50):
    lines = random.sample(all_lines, 40)"
1932,pandas read csv,True,True,21,"df = pd.read_csv('my.csv', na_values=['%H:%M:%S'])"
1933,pandas read csv,False,True,14,"df = pd.read_csv('myfile.txt', sep=',', header=None)"
1934,pandas read csv,False,True,15,"df = pd.read_csv('my.csv', na_values=['%d'])"
1935,pandas read csv,False,True,13,"df = pd.read_csv('my.csv', na_values=['Date'])"
1936,pandas read csv,False,True,14,"df = pd.read_csv('to_csv', sep=',', header=None)"
1937,pandas read csv,False,True,17,"df = pd.read_csv('<unk>', sep=',', header=None)"
1938,pandas read csv,False,True,13,"df = pd.read_csv('my.csv', na_values=['utf8'])"
1939,pandas read csv,False,False,19,"chunksize = 10 ** 6
for chunk in pd.read_csv(filename, chunksize=chunksize):
    process(chunk)"
1940,pandas read csv,False,False,14,"import pandas as pd

url=""https://raw.githubusercontent.com/cs109/2014_data/master/countries.csv""
c=pd.read_csv(url)"
1941,pandas read csv,False,False,30,"import pandas as pd
import io
import requests
url=""https://raw.githubusercontent.com/cs109/2014_data/master/countries.csv""
s=requests.get(url).content
c=pd.read_csv(io.StringIO(s.decode('utf-8')))"
1942,pandas read csv,False,False,49,"import pandas as pd
print pd.read_csv('value.txt')

        Date    price  factor_1  factor_2
0  2012-06-11  1600.20     1.255     1.548
1  2012-06-12  1610.02     1.258     1.554
2  2012-06-13  1618.07     1.249     1.552
3  2012-06-14  1624.40     1.253     1.556
4  2012-06-15  1626.15     1.258     1.552
5  2012-06-16  1626.15     1.263     1.558
6  2012-06-17  1626.15     1.264     1.572"
1943,pandas read csv,False,False,14,"import pandas as pd
df = pd.read_csv('file_name.csv', engine='python')"
1944,pandas read csv,False,False,14,"import pandas as pd
data = pd.read_csv('file_name.csv', encoding='utf-8')"
1945,pandas read csv,False,False,10,"encoding = ""cp1252""
encoding = ""ISO-8859-1"""
1946,"pandas read csv named ""data.csv""",False,True,10,"pd.read_csv('data.csv', sep='data.csv', header=None)"
1947,"pandas read csv named ""data.csv""",True,True,10,"df = pd.read_csv('data.csv', sep='data.csv')"
1948,"pandas read csv named ""data.csv""",False,True,18,"df = pd.read_csv('data.csv', sep='data.csv', header={'data.csv': 1})"
1949,"pandas read csv named ""data.csv""",False,True,12,"df = pd.read_csv('data.csv', sep='data.csv', header=None)"
1950,"pandas read csv named ""data.csv""",False,True,13,df.index = df.index.map(lambda x: x.startswith('data.csv'))
1951,"pandas read csv named ""data.csv""",False,True,8,"pd.read_csv('data.csv', sep='data.csv')"
1952,"pandas read csv named ""data.csv""",False,True,10,"df = pd.read_csv('data.csv', quotechar='data.csv')"
1953,"pandas read csv named ""data.csv""",False,False,16,"from numpy import genfromtxt
my_data = genfromtxt('my_file.csv', delimiter=',')"
1954,"pandas read csv named ""data.csv""",False,False,39,"import pandas as pd
df=pd.read_csv('myfile.csv', sep=',',header=None)
df.values
array([[ 1. ,  2. ,  3. ],
       [ 4. ,  5.5,  6. ]])"
1955,"pandas read csv named ""data.csv""",False,False,24,"1.0, 2, 3
4, 5.5, 6

import numpy as np
np.genfromtxt('myfile.csv',delimiter=',')"
1956,"pandas read csv named ""data.csv""",False,False,22,"array([[ 1. ,  2. ,  3. ],
       [ 4. ,  5.5,  6. ]])"
1957,"pandas read csv named ""data.csv""",False,False,12,"np.genfromtxt('myfile.csv',delimiter=',',dtype=None)"
1958,"pandas read csv named ""data.csv""",False,False,53,"array([(1.0, 2.0, 3), (4.0, 5.5, 6)], 
      dtype=[('f0', '<f8'), ('f1', '<f8'), ('f2', '<i4')])"
1959,"pandas read csv named ""data.csv""",False,False,19,"from numpy import genfromtxt
genfromtxt(fname = dest_file, dtype = (<whatever options>))"
1960,save this dataframe to a csv,False,True,10,"pd.concat([a, b], ignore_index=True)"
1961,save this dataframe to a csv,False,True,9,"pd.merge(csv, csv, sep='\t')"
1962,save this dataframe to a csv,True,True,7,"df.to_csv('skiprows', index=False)"
1963,save this dataframe to a csv,False,True,10,"pd.concat([df1, df2], axis=1)"
1964,save this dataframe to a csv,False,True,10,"pd.concat([a] * 5, ignore_index=True)"
1965,save this dataframe to a csv,False,True,10,"pandas.concat([a, b], ignore_index=True)"
1966,save this dataframe to a csv,False,True,7,"df.to_csv('*', index=False)"
1967,save this dataframe to a csv,False,False,7,"df.to_csv(file_name, sep='\t')"
1968,save this dataframe to a csv,False,False,10,"df.to_csv(file_name, sep='\t', encoding='utf-8')"
1969,save this dataframe to a csv,False,False,9,"df.to_csv(file_name, encoding='utf-8', index=False)"
1970,save this dataframe to a csv,False,False,8,"Color  Number
0   red     22
1  blue     10"
1971,save this dataframe to a csv,False,False,5,"Color,Number
red,22
blue,10"
1972,save this dataframe to a csv,False,False,10,",Color,Number
0,red,22
1,blue,10"
1973,save this dataframe to a csv,False,False,44,"header = True
for chunk in chunks:

    chunk.to_csv(os.path.join(folder, new_folder, ""new_file_"" + filename),
        header=header, cols=[['TIME','STUFF']], mode='a')

    header = False"
1988,read a json file named `f`,True,True,6,data = json.loads(f)
1989,read a json file named `f`,False,True,6,json = json.load(f)
1990,read a json file named `f`,False,True,21,data = json.dumps([line.decode('utf8') for line in open('f')])
1991,read a json file named `f`,False,True,11,"return HttpResponse(json.dumps(f), content_type='application/json')"
1992,read a json file named `f`,False,True,6,data = json.loads(f.dic)
1993,read a json file named `f`,False,True,15,"content_type = json.dumps(open('f', 'r'))"
1994,read a json file named `f`,False,True,20,json = json.dumps([json.dumps(f) for line in open('f')])
1995,read a json file named `f`,False,False,21,"import json

with open('strings.json') as f:
    d = json.load(f)
    print(d)"
1996,read a json file named `f`,False,False,40,"import json
data = json.loads('{""one"" : ""1"", ""two"" : ""2"", ""three"" : ""3""}')
print data['two']"
1997,read a json file named `f`,False,False,22,"import json

with open(""test.json"") as json_file:
    json_data = json.load(json_file)
    print(json_data)"
1998,read a json file named `f`,False,False,29,"{
    ""a"": [1,3,""asdf"",true],
    ""b"": {
        ""Hello"": ""world""
    }
}"
1999,read a json file named `f`,False,False,9,j = urllib2.urlopen('http://site.com/data.json')
2000,read a json file named `f`,False,False,6,j_obj = json.load(j)
2001,read a json file named `f`,False,False,69,"import json

with open('data.json', 'r+') as f:
    data = json.load(f)
    data['id'] = 134 # <--- add `id` value.
    f.seek(0)        # <--- should reset file position to the beginning.
    json.dump(data, f, indent=4)
    f.truncate()     # remove remaining part"
2030,numpy load from csv,True,True,13,"np.genfromtxt('<unk>', delimiter=',')"
2031,numpy load from csv,False,True,10,"np.concatenate((a, b), axis=0)"
2032,numpy load from csv,False,True,21,"np.delete(numpy, list(range(0, len(row) + 1)), axis=1)"
2033,numpy load from csv,False,True,18,"np.loadtxt(open('file.txt', 'rb'), delimiter=',', skiprows=1)"
2034,numpy load from csv,False,True,14,"np.concatenate((numpy, numpy, numpy, numpy), axis=0)"
2035,numpy load from csv,False,True,16,"np.loadtxt(open('file.txt', 'rb'), delimiter=',')"
2036,numpy load from csv,False,True,21,"np.delete(numpy, list(range(0, len(row) + 1)), **row)"
2037,numpy load from csv,False,False,16,"from numpy import genfromtxt
my_data = genfromtxt('my_file.csv', delimiter=',')"
2038,numpy load from csv,False,False,39,"import pandas as pd
df=pd.read_csv('myfile.csv', sep=',',header=None)
df.values
array([[ 1. ,  2. ,  3. ],
       [ 4. ,  5.5,  6. ]])"
2039,numpy load from csv,False,False,24,"1.0, 2, 3
4, 5.5, 6

import numpy as np
np.genfromtxt('myfile.csv',delimiter=',')"
2040,numpy load from csv,False,False,22,"array([[ 1. ,  2. ,  3. ],
       [ 4. ,  5.5,  6. ]])"
2041,numpy load from csv,False,False,12,"np.genfromtxt('myfile.csv',delimiter=',',dtype=None)"
2042,numpy load from csv,False,False,53,"array([(1.0, 2.0, 3), (4.0, 5.5, 6)], 
      dtype=[('f0', '<f8'), ('f1', '<f8'), ('f2', '<i4')])"
2043,numpy load from csv,False,False,20,"numpy.loadtxt(open(""test.csv"", ""rb""), delimiter="","", skiprows=1)"
2058,open file,False,True,19,"with open(file) as f:
    f = f.open('open', 'r')"
2059,open file,True,True,10,"f = open(file, 'r')"
2060,open file,False,True,11,"f = open('file')
print(line)"
2061,open file,False,True,11,"f = open('open', 'r')"
2062,open file,False,True,11,"f = open('file.txt', 'r')"
2063,open file,False,True,18,"with open(file) as f:
    f = f.open(file, 'r')"
2064,open file,True,True,13,"with open(file) as f:
    f = f.readlines()"
2065,open file,False,False,40,"import os
for filename in os.listdir(os.getcwd()):
   with open(os.path.join(os.cwd(), filename), 'r') as f: # open in readonly mode
      # do your stuff"
2066,open file,False,False,39,"import glob
for filename in glob.glob('*.txt'):
   with open(os.path.join(os.cwd(), filename), 'r') as f: # open in readonly mode
      # do your stuff"
2067,open file,False,False,45,"path = '/some/path/to/file'
for filename in glob.glob(os.path.join(path, '*.txt')):
   with open(os.path.join(os.cwd(), filename), 'r') as f: # open in readonly mode
      # do your stuff"
2068,open file,False,False,13,"import fileinput
for line in fileinput.input():
    # do your stuff"
2069,open file,False,False,5,ls -1 | python parse.py
2070,open file,False,False,152,"def filter(txt, oldfile, newfile):
    '''\
    Read a list of names from a file line by line into an output file.
    If a line begins with a particular name, insert a string of text
    after the name before appending the line to the output file.
    '''

    with open(newfile, 'w') as outfile, open(oldfile, 'r', encoding='utf-8') as infile:
        for line in infile:
            if line.startswith(txt):
                line = line[0:len(txt)] + ' - Truly a great person!\n'
            outfile.write(line)

# input the name you want to check against
text = input('Please enter the name of a great person: ')    
letsgo = filter(text,'Spanish', 'Spanish2')"
2071,open file,False,False,33,">>> f = open('/tmp/generic.png','r')
>>> f.name
'/tmp/generic.png'
>>> import os
>>> os.path.basename(f.name)
'generic.png'"
2086,open file,False,True,19,"with open(file) as f:
    f = f.open('open', 'r')"
2087,open file,True,True,10,"f = open(file, 'r')"
2088,open file,False,True,11,"f = open('file')
print(line)"
2089,open file,False,True,11,"f = open('open', 'r')"
2090,open file,False,True,11,"f = open('file.txt', 'r')"
2091,open file,False,True,18,"with open(file) as f:
    f = f.open(file, 'r')"
2092,open file,True,True,13,"with open(file) as f:
    f = f.readlines()"
2093,open file,False,False,43,"with open(filename) as f:
    content = f.readlines()
# you may also want to remove whitespace characters like `\n` at the end of each line
content = [x.strip() for x in content]"
2094,open file,False,False,14,"with open('filename') as f:
    lines = f.readlines()"
2095,open file,False,False,20,"with open('filename') as f:
    lines = [line.rstrip() for line in f]"
2096,open file,False,False,23,"with open(""file.txt"") as file_in:
    lines = []
    for line in file_in:
        lines.append(line)"
2097,open file,False,False,40,"import os
for filename in os.listdir(os.getcwd()):
   with open(os.path.join(os.cwd(), filename), 'r') as f: # open in readonly mode
      # do your stuff"
2098,open file,False,False,39,"import glob
for filename in glob.glob('*.txt'):
   with open(os.path.join(os.cwd(), filename), 'r') as f: # open in readonly mode
      # do your stuff"
2099,open file,False,False,45,"path = '/some/path/to/file'
for filename in glob.glob(os.path.join(path, '*.txt')):
   with open(os.path.join(os.cwd(), filename), 'r') as f: # open in readonly mode
      # do your stuff"
2100,open file,False,True,19,"with open(file) as f:
    f = f.open('open', 'r')"
2101,open file,True,True,10,"f = open(file, 'r')"
2102,open file,False,True,11,"f = open('file')
print(line)"
2103,open file,False,True,11,"f = open('open', 'r')"
2104,open file,False,True,11,"f = open('file.txt', 'r')"
2105,open file,False,True,18,"with open(file) as f:
    f = f.open(file, 'r')"
2106,open file,True,True,13,"with open(file) as f:
    f = f.readlines()"
2107,open file,False,False,43,"with open(filename) as f:
    content = f.readlines()
# you may also want to remove whitespace characters like `\n` at the end of each line
content = [x.strip() for x in content]"
2108,open file,False,False,14,"with open('filename') as f:
    lines = f.readlines()"
2109,open file,False,False,20,"with open('filename') as f:
    lines = [line.rstrip() for line in f]"
2110,open file,False,False,23,"with open(""file.txt"") as file_in:
    lines = []
    for line in file_in:
        lines.append(line)"
2111,open file,False,False,40,"import os
for filename in os.listdir(os.getcwd()):
   with open(os.path.join(os.cwd(), filename), 'r') as f: # open in readonly mode
      # do your stuff"
2112,open file,False,False,39,"import glob
for filename in glob.glob('*.txt'):
   with open(os.path.join(os.cwd(), filename), 'r') as f: # open in readonly mode
      # do your stuff"
2113,open file,False,False,45,"path = '/some/path/to/file'
for filename in glob.glob(os.path.join(path, '*.txt')):
   with open(os.path.join(os.cwd(), filename), 'r') as f: # open in readonly mode
      # do your stuff"
2114,plot bar,True,True,5,bar.plot(kind='bar')
2115,plot bar,False,True,8,"plot.plot(x='bar', color='color')"
2116,plot bar,False,True,8,"plot.plot(x='bar', color='bar')"
2117,plot bar,False,True,8,"plot.plot(x='bar', color='green')"
2118,plot bar,False,True,7,plot.plot(kind='bar colour plot')
2119,plot bar,False,True,10,"plt.plot(plot.plot(x), 'bar')"
2120,plot bar,False,True,13,"plt.plot(plot.plot(x), 'bar', color='bar')"
2121,plot bar,False,False,102,"import matplotlib.pyplot as plt

D = {u'Label1':26, u'Label2': 17, u'Label3':30}

plt.bar(range(len(D)), list(D.values()), align='center')
plt.xticks(range(len(D)), list(D.keys()))
# # for python 2.x:
# plt.bar(range(len(D)), D.values(), align='center')  # python 2.x
# plt.xticks(range(len(D)), D.keys())  # in python 2.x

plt.show()"
2122,plot bar,False,False,145,"import matplotlib.pyplot as plt
from matplotlib.dates import date2num
import datetime

x = [
    datetime.datetime(2011, 1, 4, 0, 0),
    datetime.datetime(2011, 1, 5, 0, 0),
    datetime.datetime(2011, 1, 6, 0, 0)
]
x = date2num(x)

y = [4, 9, 2]
z = [1, 2, 3]
k = [11, 12, 13]

ax = plt.subplot(111)
ax.bar(x-0.2, y, width=0.2, color='b', align='center')
ax.bar(x, z, width=0.2, color='g', align='center')
ax.bar(x+0.2, k, width=0.2, color='r', align='center')
ax.xaxis_date()

plt.show()"
2123,plot bar,False,False,67,"ax = plt.subplot(111)
w = 0.3
ax.bar(x-w, y, width=w, color='b', align='center')
ax.bar(x, z, width=w, color='g', align='center')
ax.bar(x+w, k, width=w, color='r', align='center')
ax.xaxis_date()
ax.autoscale(tight=True)

plt.show()"
2124,plot bar,False,False,222,"import numpy as np
import matplotlib.pyplot as plt

N = 3
ind = np.arange(N)  # the x locations for the groups
width = 0.27       # the width of the bars

fig = plt.figure()
ax = fig.add_subplot(111)

yvals = [4, 9, 2]
rects1 = ax.bar(ind, yvals, width, color='r')
zvals = [1,2,3]
rects2 = ax.bar(ind+width, zvals, width, color='g')
kvals = [11,12,13]
rects3 = ax.bar(ind+width*2, kvals, width, color='b')

ax.set_ylabel('Scores')
ax.set_xticks(ind+width)
ax.set_xticklabels( ('2011-Jan-4', '2011-Jan-5', '2011-Jan-6') )
ax.legend( (rects1[0], rects2[0], rects3[0]), ('y', 'z', 'k') )

def autolabel(rects):
    for rect in rects:
        h = rect.get_height()
        ax.text(rect.get_x()+rect.get_width()/2., 1.05*h, '%d'%int(h),
                ha='center', va='bottom')

autolabel(rects1)
autolabel(rects2)
autolabel(rects3)

plt.show()"
2125,plot bar,False,False,53,"import matplotlib.pyplot as plt

D = {u'Label1':26, u'Label2': 17, u'Label3':30}

plt.bar(range(len(D)), D.values(), align='center')
plt.xticks(range(len(D)), list(D.keys()))

plt.show()"
2126,plot bar,False,False,28,"import matplotlib.pyplot as plt

D = {u'Label1':26, u'Label2': 17, u'Label3':30}
plt.bar(*zip(*D.items()))
plt.show()"
2127,plot bar,False,False,51,"weekdays = ['Mon', 'Tues', 'Weds', 'Thurs', 'Fri', 'Sat', 'Sun']
mapping = {day: i for i, day in enumerate(weekdays)}
key = df['day'].map(mapping)"
2184,generate random between 0 and 20,False,True,9,"print(random.randint(0, 9))"
2185,generate random between 0 and 20,False,True,9,"print(random.randint(0, 1))"
2186,generate random between 0 and 20,False,True,9,"print(range(0, -1))"
2187,generate random between 0 and 20,False,True,9,"print(random.randint(0, 0))"
2188,generate random between 0 and 20,False,True,9,"print(range(0, 9))"
2189,generate random between 0 and 20,True,True,9,"random.randint(0, 9)[0]"
2190,generate random between 0 and 20,False,True,9,"int(random.randint(0, 9))"
2191,generate random between 0 and 20,False,False,8,"import random
random.uniform(0, 1)"
2192,generate random between 0 and 20,False,False,22,"df = pd.DataFrame(np.random.randint(0,100,size=(100, 4)), columns=list('ABCD'))"
2193,generate random between 0 and 20,False,False,30,"import numpy as np
import pandas as pd
df = pd.DataFrame(np.random.randint(0,100,size=(100, 4)), columns=list('ABCD'))"
2194,generate random between 0 and 20,False,False,44,"A   B   C   D
0   45  88  44  92
1   62  34   2  86
2   85  65  11  31
3   74  43  42  56
4   90  38  34  93
5    0  94  45  10
6   58  23  23  60
..  ..  ..  ..  .."
2195,generate random between 0 and 20,False,False,34,">>> import random
>>> for i in range(10):
...     print(random.random())
... 
0.908047338626
0.0199900075962
0.904058545833
0.321508119045
0.657086320195
0.714084413092
0.315924955063
0.696965958019
0.93824013683
0.484207425759"
2196,generate random between 0 and 20,False,False,32,">>> import os
>>> int.from_bytes(os.urandom(8), byteorder=""big"") / ((1 << 64) - 1)
0.7409674234050893"
2197,generate random between 0 and 20,False,False,16,"nums = numpy.ones(1000)
nums[:100] = 0
numpy.random.shuffle(nums)"
2254,find character,True,True,10,"re.findall('<unk>', character)"
2255,find character,False,True,13,"re.findall('<unk>', character)[0]"
2256,find character,False,True,14,"re.findall('<unk>', '<unk>')"
2257,find character,False,True,13,"re.findall('<unk>', character)[-1]"
2258,find character,False,True,13,"re.findall('<unk>', find)[-1]"
2259,find character,False,True,13,"re.findall('<unk>', find)[0]"
2260,find character,False,True,10,"re.search('<unk>', character)"
2261,find character,False,False,37,">>> ord('a')
97
>>> chr(97)
'a'
>>> chr(ord('a') + 3)
'd'
>>>"
2262,find character,False,False,19,">>> unichr(97)
u'a'
>>> unichr(1234)
u'\u04d2'"
2263,find character,False,False,28,">>> myString = 'Position of a character'
>>> myString.find('s')
2
>>> myString.find('x')
-1"
2264,find character,False,False,54,">>> myString = 'Position of a character'
>>> myString.index('s')
2
>>> myString.index('x')
Traceback (most recent call last):
  File ""<stdin>"", line 1, in <module>
ValueError: substring not found"
2265,find character,False,False,48,"'$' in s        # found
'$' not in s    # not found

# original answer given, but less Pythonic than the above...
s.find('$')==-1 # not found
s.find('$')!=-1 # found"
2266,find character,False,False,27,"pattern = re.compile(r'\d\$,')
if pattern.findall(s):
    print('Found')
else
    print('Not found')"
2267,find character,False,False,36,"chars = set('0123456789$,')
if any((c in chars) for c in s):
    print('Found')
else:
    print('Not Found')"
2268,travverse list of files,False,True,10,"f.extend([1, 2, 3])"
2269,travverse list of files,False,True,5,glob.glob('*')
2270,travverse list of files,True,True,4,shutil.from_iterable(my_list)
2271,travverse list of files,False,True,7,f.write('\n'.join(filenames))
2272,travverse list of files,False,True,4,f.write(filenames)
2273,travverse list of files,False,True,6,f.extend([files])
2274,travverse list of files,False,True,17,f.extend([f.read().split(' ') for f in filenames])
2275,travverse list of files,False,False,32,"from os import listdir
from os.path import isfile, join
onlyfiles = [f for f in listdir(mypath) if isfile(join(mypath, f))]"
2276,travverse list of files,False,False,27,"from os import walk

f = []
for (dirpath, dirnames, filenames) in walk(mypath):
    f.extend(filenames)
    break"
2277,travverse list of files,False,False,11,"import glob
print(glob.glob(""/home/adam/*.txt""))"
2278,travverse list of files,False,False,10,"['/home/adam/file1.txt', '/home/adam/file2.txt', .... ]"
2279,travverse list of files,False,False,29,"import os
 arr = os.listdir()
 print(arr)

 >>> ['$RECYCLE.BIN', 'work.txt', '3ebooks.txt', 'documents']"
2280,travverse list of files,False,False,20,"import glob

txtfiles = []
for file in glob.glob(""*.txt""):
    txtfiles.append(file)"
2281,travverse list of files,False,False,16,"import glob

mylist = [f for f in glob.glob(""*.txt"")]"
2296,open file,False,True,19,"with open(file) as f:
    f = f.open('open', 'r')"
2297,open file,True,True,10,"f = open(file, 'r')"
2298,open file,False,True,11,"f = open('file')
print(line)"
2299,open file,False,True,11,"f = open('open', 'r')"
2300,open file,False,True,11,"f = open('file.txt', 'r')"
2301,open file,False,True,18,"with open(file) as f:
    f = f.open(file, 'r')"
2302,open file,True,True,13,"with open(file) as f:
    f = f.readlines()"
2303,open file,False,False,40,"import os
for filename in os.listdir(os.getcwd()):
   with open(os.path.join(os.cwd(), filename), 'r') as f: # open in readonly mode
      # do your stuff"
2304,open file,False,False,39,"import glob
for filename in glob.glob('*.txt'):
   with open(os.path.join(os.cwd(), filename), 'r') as f: # open in readonly mode
      # do your stuff"
2305,open file,False,False,45,"path = '/some/path/to/file'
for filename in glob.glob(os.path.join(path, '*.txt')):
   with open(os.path.join(os.cwd(), filename), 'r') as f: # open in readonly mode
      # do your stuff"
2306,open file,False,False,13,"import fileinput
for line in fileinput.input():
    # do your stuff"
2307,open file,False,False,5,ls -1 | python parse.py
2308,open file,False,False,53,"import subprocess, os, platform
if platform.system() == 'Darwin':       # macOS
    subprocess.call(('open', filepath))
elif platform.system() == 'Windows':    # Windows
    os.startfile(filepath)
else:                                   # linux variants
    subprocess.call(('xdg-open', filepath))"
2309,open file,False,False,82,"$ ls -la chardet-1.0.1.tgz
-rwxr-xr-x 1 vinko vinko 179218 2008-10-20 17:49 chardet-1.0.1.tgz
$ python
Python 2.5.1 (r251:54863, Jul 31 2008, 22:53:39)
[GCC 4.1.2 (Ubuntu 4.1.2-0ubuntu4)] on linux2
Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.
>>> f = open('chardet-1.0.1.tgz','rb')
>>> f.seek(0,2)
>>> f.tell()
179218L"
2338,convert str to utf-8,False,True,29,""""""""""""".join(str(x) for x in str('\\xc3\\x85あ'.encode('utf8'))).decode('utf8')"
2339,convert str to utf-8,False,True,17,"""""""\\xc3\\x85あ"""""".encode('utf8').decode('utf8')"
2340,convert str to utf-8,False,True,27,""""""""""""".join(str(x.decode('utf8')) for x in 'str').decode('utf8')"
2341,convert str to utf-8,True,True,23,""""""""""""".join(str(c) for c in 'AndrÃ©').decode('utf8')"
2342,convert str to utf-8,False,True,29,""""""""""""".join(str(x) for x in str('\\xc3\\x85あ'.encode('utf8'))).encode('utf8')"
2343,convert str to utf-8,False,True,27,""""""""""""".join(str(s.decode('utf8')) for s in 'str').decode('utf8')"
2344,convert str to utf-8,False,True,42,""""""""""""".join(str(x) for x in str(','.join(str(x.encode('utf8')) for x in 'str'))
    ).decode('utf8')"
2345,convert str to utf-8,False,False,37,"title = u""Klüft skräms inför på fédéral électoral große""
import unicodedata
unicodedata.normalize('NFKD', title).encode('ascii', 'ignore')
'Kluft skrams infor pa federal electoral groe'"
2346,convert str to utf-8,False,False,37,"my_str = ""hello world""
my_str_as_bytes = str.encode(my_str)
type(my_str_as_bytes) # ensure it is byte representation
my_decoded_str = my_str_as_bytes.decode()
type(my_decoded_str) # ensure it is string representation"
2347,convert str to utf-8,False,False,54,">>> a=u""aaaàçççñññ""
>>> type(a)
<type 'unicode'>
>>> a.encode('ascii','ignore')
'aaa'
>>> a.encode('ascii','replace')
'aaa???????'
>>>"
2348,convert str to utf-8,False,False,44,">>> plain_string = ""Hi!""
>>> unicode_string = u""Hi!""
>>> type(plain_string), type(unicode_string)
(<type 'str'>, <type 'unicode'>)"
2349,convert str to utf-8,False,False,22,">>> s = ""Hello!""
>>> u = unicode(s, ""utf-8"")"
2350,convert str to utf-8,False,False,5,b = mystring.encode()
2351,convert str to utf-8,False,False,92,"In [1]: %timeit -r 10 'abc'.encode('utf-8')
The slowest run took 38.07 times longer than the fastest. 
This could mean that an intermediate result is being cached.
10000000 loops, best of 10: 183 ns per loop

In [2]: %timeit -r 10 'abc'.encode()
The slowest run took 27.34 times longer than the fastest. 
This could mean that an intermediate result is being cached.
10000000 loops, best of 10: 137 ns per loop"
2366,load json file,True,True,7,json.loads(json.loads(json))
2367,load json file,False,True,4,json.loads(data)
2368,load json file,False,True,4,json.loads(url)
2369,load json file,False,True,7,json.loads(json.loads(data))
2370,load json file,False,True,7,json.loads(json.dumps(data))
2371,load json file,False,True,11,json.loads(request.POST.get('<unk>'))
2372,load json file,True,True,4,json.loads(file)
2373,load json file,False,False,45,">>> json.JSONDecoder(object_pairs_hook=collections.OrderedDict).decode('{""foo"":1, ""bar"": 2}')
OrderedDict([('foo', 1), ('bar', 2)])
>>>"
2374,load json file,False,False,62,">>> import json
>>> from collections import OrderedDict
>>> data = json.loads('{""foo"":1, ""bar"": 2}', object_pairs_hook=OrderedDict)
>>> print json.dumps(data, indent=4)
{
    ""foo"": 1,
    ""bar"": 2
}
>>>"
2375,load json file,False,False,15,">>> data = json.load(open('config.json'), object_pairs_hook=OrderedDict)"
2376,load json file,False,False,21,"import json

with open('strings.json') as f:
    d = json.load(f)
    print(d)"
2377,load json file,False,False,27,"import json

data = []
with open('file') as f:
    for line in f:
        data.append(json.loads(line))"
2378,load json file,False,False,8,"my_ordered_dict = json.loads(json_str, object_pairs_hook=collections.OrderedDict)"
2379,load json file,False,False,14,"import simplejson as json
import ordereddict

my_ordered_dict = json.loads(json_str, object_pairs_hook=ordereddict.OrderedDict)"
2408,add json file to a list,True,True,6,data = json.loads(data)
2409,add json file to a list,False,True,16,data = [int(line) for line in open('file')]
2410,add json file to a list,False,True,6,data = json.loads(json)
2411,add json file to a list,False,True,6,data = json.loads(my_data)
2412,add json file to a list,False,True,16,data = [str(line) for line in open('file')]
2413,add json file to a list,False,True,5,my_data = [file]
2414,add json file to a list,False,True,4,data = []
2415,add json file to a list,False,False,21,"import json
with open('data.json', 'w') as f:
    json.dump(data, f)"
2416,add json file to a list,False,False,28,"import json
with open('data.json', 'w', encoding='utf-8') as f:
    json.dump(data, f, ensure_ascii=False, indent=4)"
2417,add json file to a list,False,False,29,"import io, json
with io.open('data.txt', 'w', encoding='utf-8') as f:
  f.write(json.dumps(data, ensure_ascii=False))"
2418,add json file to a list,False,False,23,"import json
with open('data.txt', 'w') as f:
  json.dump(data, f, ensure_ascii=False)"
2419,add json file to a list,False,False,31,"import json, codecs
with open('data.txt', 'wb') as f:
    json.dump(data, codecs.getwriter('utf-8')(f), ensure_ascii=False)"
2420,add json file to a list,False,False,89,">>> json.dumps({'price': '€10'})
'{""price"": ""\\u20ac10""}'
>>> json.dumps({'price': '€10'}, ensure_ascii=False)
'{""price"": ""€10""}'

>>> len(json.dumps({'абвгд': 1}))
37
>>> len(json.dumps({'абвгд': 1}, ensure_ascii=False).encode('utf8'))
17"
2421,add json file to a list,False,False,31,"with open('data.txt', 'w') as outfile:
     json.dump(jsonData, outfile, sort_keys = True, indent = 4,
               ensure_ascii = False)"
2450,loop over a range of `count`,False,True,15,"return list(range(0, len(count) + 1))"
2451,loop over a range of `count`,False,True,10,"return list(range(0, 7))"
2452,loop over a range of `count`,True,True,11,"for x in range(0, 10):
    pass"
2453,loop over a range of `count`,False,True,14,"list(range(0, len(count) + 1))"
2454,loop over a range of `count`,False,True,9,"for x in range(0):
    pass"
2455,loop over a range of `count`,False,True,7,list(range(10))
2456,loop over a range of `count`,False,True,27,"for x in range(0, 10):
    print(list(range(0, len(count) + 1)))"
2457,loop over a range of `count`,False,False,10,"for idx,item in enumerate(list):"
2458,loop over a range of `count`,False,False,21,"for single_date in (start_date + timedelta(n) for n in range(day_count)):
    print ..."
2459,loop over a range of `count`,False,False,81,"from datetime import timedelta, date

def daterange(start_date, end_date):
    for n in range(int((end_date - start_date).days)):
        yield start_date + timedelta(n)

start_date = date(2013, 1, 1)
end_date = date(2015, 6, 2)
for single_date in daterange(start_date, end_date):
    print(single_date.strftime(""%Y-%m-%d""))"
2460,loop over a range of `count`,False,False,55,"from datetime import date, timedelta

start_date = date(2019, 1, 1)
end_date = date(2020, 1, 1)
delta = timedelta(days=1)
while start_date <= end_date:
    print (start_date.strftime(""%Y-%m-%d""))
    start_date += delta"
2461,loop over a range of `count`,False,False,54,"from datetime import date
from dateutil.rrule import rrule, DAILY

a = date(2009, 5, 30)
b = date(2009, 6, 9)

for dt in rrule(DAILY, dtstart=a, until=b):
    print dt.strftime(""%Y-%m-%d"")"
2462,loop over a range of `count`,False,False,38,"#count=0
for idx, item in enumerate(list):
    print item
    #count +=1
    #if count % 10 == 0:
    if (idx+1) % 10 == 0:
        print 'did ten'"
2463,loop over a range of `count`,False,False,12,"import pandas as pd
daterange = pd.date_range(start_date, end_date)"
2464,randomly pick an item from `seq`,False,True,8,random.choice(random.split(' '))
2465,randomly pick an item from `seq`,False,True,9,"random.choice(itertools.range(1, 7))"
2466,randomly pick an item from `seq`,False,True,6,random.choice(choice.values())
2467,randomly pick an item from `seq`,True,True,7,random.choice(random.choice(seq.random))
2468,randomly pick an item from `seq`,False,True,9,"random.choice(random.randint(0, 7))"
2469,randomly pick an item from `seq`,False,True,6,random.choice(itertools.TimeGrouper())
2470,randomly pick an item from `seq`,False,True,6,random.choice(random.pair())
2471,randomly pick an item from `seq`,False,False,31,"import random

foo = ['a', 'b', 'c', 'd', 'e']
print(random.choice(foo))"
2472,randomly pick an item from `seq`,False,False,24,"import secrets

foo = ['battery', 'correct', 'horse', 'staple']
print(secrets.choice(foo))"
2473,randomly pick an item from `seq`,False,False,14,"import random

secure_random = random.SystemRandom()
print(secure_random.choice(foo))"
2474,randomly pick an item from `seq`,False,False,14,"from numpy.random import choice
draw = choice(list_of_candidates, number_of_items_to_pick,
              p=probability_distribution)"
2475,randomly pick an item from `seq`,False,False,26,"import random
d = {'VENEZUELA':'CARACAS', 'CANADA':'OTTAWA'}
random.choice(list(d.values()))"
2476,randomly pick an item from `seq`,False,False,13,"country, capital = random.choice(list(d.items()))"
2477,randomly pick an item from `seq`,False,False,210,"Python 3.6.1 (v3.6.1:69c0db5050, Mar 21 2017, 01:21:04)
Type 'copyright', 'credits' or 'license' for more information
IPython 6.0.0 -- An enhanced Interactive Python. Type '?' for help.

In [1]: import random

In [2]: random.choices(
...:     population=[['a','b'], ['b','a'], ['c','b']],
...:     weights=[0.2, 0.2, 0.6],
...:     k=10
...: )

Out[2]:
[['c', 'b'],
 ['c', 'b'],
 ['b', 'a'],
 ['c', 'b'],
 ['c', 'b'],
 ['b', 'a'],
 ['c', 'b'],
 ['b', 'a'],
 ['c', 'b'],
 ['c', 'b']]"
2478,call `pick_with_replacement`,False,True,5,pick_with_replacement.call(pick_with_replacement='pick_with_replacement')
2479,call `pick_with_replacement`,False,True,4,pick_with_replacement.call(**pick_with_replacement)
2480,call `pick_with_replacement`,False,True,6,call(pick_with_replacement.pick_with_replacement())
2481,call `pick_with_replacement`,False,True,4,pick_with_replacement.pick_with_replacement(**pick_with_replacement)
2482,call `pick_with_replacement`,False,True,6,"pick_with_replacement.pick_with_replacement(pick_with_replacement=
    'pick_with_replacement')"
2483,call `pick_with_replacement`,False,True,5,call(pick_with_replacement='pick_with_replacement')
2484,call `pick_with_replacement`,True,True,3,pick_with_replacement()
2485,call `pick_with_replacement`,False,False,7,>>> x = []
2486,call `pick_with_replacement`,False,False,21,"def append_one(li):
    li.append(1)
x = [0]
append_one(x)
print x"
2487,call `pick_with_replacement`,False,False,24,"def append_one(li):
    li = [0, 1]
x = [0]
append_one(x)
print x"
2488,call `pick_with_replacement`,False,False,33,"def foo(y):
  y[0] = y[0]**2

x = [5]
foo(x)
print x[0]  # prints 25"
2489,call `pick_with_replacement`,False,False,36,"def foo(x, y):
   return x**2, y**2

a = 2
b = 3
a, b = foo(a, b)  # a == 4; b == 9"
2490,call `pick_with_replacement`,False,False,46,"def clear_a(x):
  x = []

def clear_b(x):
  while x: x.pop()

z = [1,2,3]
clear_a(z) # z will not be changed
clear_b(z) # z will be emptied"
2491,call `pick_with_replacement`,False,False,29,"np.random.choice(
  ['pooh', 'rabbit', 'piglet', 'Christopher'], 
  5,
  p=[0.5, 0.1, 0.1, 0.3]
)"
2492,zip `hundred_characters` with `hundred_numbers`,False,True,18,"[(x + hundred_numbers) for x, y in zip(hundred_characters, hundred_numbers)]"
2493,zip `hundred_characters` with `hundred_numbers`,False,True,18,"[(x + hundred_numbers) for x, hundred_numbers in zip(hundred_characters,
    hundred_numbers)]"
2494,zip `hundred_characters` with `hundred_numbers`,False,True,18,"[(hundred_characters + hundred_numbers) for i, j in zip(hundred_characters,
    hundred_numbers)]"
2495,zip `hundred_characters` with `hundred_numbers`,True,True,18,"[(x + y) for x, y in zip(hundred_characters, hundred_numbers)]"
2496,zip `hundred_characters` with `hundred_numbers`,False,True,28,"[(x + ((hundred_numbers,) & set(hundred_characters))) for x, y in zip(
    hundred_characters, hundred_numbers)]"
2497,zip `hundred_characters` with `hundred_numbers`,False,True,27,"[(x + ((hundred_numbers,) & hundred_characters + hundred_numbers)) for x, y in
    zip(hundred_characters, hundred_numbers)]"
2498,zip `hundred_characters` with `hundred_numbers`,False,True,23,"[(x + hundred_numbers(hundred_numbers, hundred_numbers)) for x, y in zip(
    hundred_characters, hundred_numbers)]"
2499,zip `hundred_characters` with `hundred_numbers`,False,False,140,"import numpy as np

a = np.array([1,2,3,4,5])
b = np.array([6,7,8,9,10])

c = np.dstack((a,b))
#or
d = np.column_stack((a,b))

>>> c
array([[[ 1,  6],
        [ 2,  7],
        [ 3,  8],
        [ 4,  9],
        [ 5, 10]]])
>>> d
array([[ 1,  6],
       [ 2,  7],
       [ 3,  8],
       [ 4,  9],
       [ 5, 10]])

>>> c.shape
(1, 5, 2)
>>> d.shape
(5, 2)"
2500,zip `hundred_characters` with `hundred_numbers`,False,False,55,"A = [1,2,3,4,5,6,7,8,9]
B = [""A"",""B"",""C""]

from itertools import cycle
zip_list = zip(A, cycle(B)) if len(A) > len(B) else zip(cycle(A), B)"
2501,zip `hundred_characters` with `hundred_numbers`,False,False,67,">>> np.dstack((a,b))
array([[[0, 0],
        [1, 1],
        [2, 2],
        [3, 3]],

       [[4, 4],
        [5, 5],
        [6, 6],
        [7, 7]]])"
2502,zip `hundred_characters` with `hundred_numbers`,False,False,107,">>> np.array(zip(a.ravel(),b.ravel()), dtype=('i4,i4')).reshape(a.shape)
array([[(0, 0), (1, 1), (2, 2), (3, 3)],
       [(4, 4), (5, 5), (6, 6), (7, 7)]],
      dtype=[('f0', '<i4'), ('f1', '<i4')])"
2503,zip `hundred_characters` with `hundred_numbers`,False,False,110,">>> np.array(list(zip(a.ravel(),b.ravel())), dtype=('i4,i4')).reshape(a.shape)
array([[(0, 0), (1, 1), (2, 2), (3, 3)],
       [(4, 4), (5, 5), (6, 6), (7, 7)]],
      dtype=[('f0', '<i4'), ('f1', '<i4')])"
2504,zip `hundred_characters` with `hundred_numbers`,False,False,12,"np.array(list(zip(a,b)))"
2505,zip `hundred_characters` with `hundred_numbers`,False,False,28,"list(zip(a,b,zip(c[0::2],c[1::2]),d))"
2506,list all text files in the data directory,False,True,8,glob.glob('<unk>')
2507,list all text files in the data directory,True,True,49,"for dirname, dirnames, filenames in os.walk('<unk>'):
    for line in f:
        e = f.read()
    for line in os.listdir('<unk>'):
        e = f.read()
    for line in filenames:
        pass"
2508,list all text files in the data directory,False,True,43,"for dirname, dirnames, filenames in os.walk('<unk>'):
    for line in f:
        e = f.read()
    for line in os.listdir('<unk>'):
        e = f.read()"
2509,list all text files in the data directory,False,True,29,"for dirname, line in os.walk('<unk>'):
    for line in ins:
        print(line.replace('\r', ''))"
2510,list all text files in the data directory,False,True,46,"for dirname, dirnames, filenames in os.walk('<unk>'):
    for line in ins:
        print(line.path.join(dirname, line))
    for line in open('file.txt').read():
        print(line)"
2511,list all text files in the data directory,False,True,31,"for dirname, dirnames, filenames in os.walk('<unk>'):
    for line in ins:
        print(line.replace('\r', ''))"
2512,list all text files in the data directory,False,True,23,"f = []
for dirpath, dirnames, filenames in walk('f'):
    f.write('\n')"
2513,list all text files in the data directory,False,False,32,"from os import listdir
from os.path import isfile, join
onlyfiles = [f for f in listdir(mypath) if isfile(join(mypath, f))]"
2514,list all text files in the data directory,False,False,27,"from os import walk

f = []
for (dirpath, dirnames, filenames) in walk(mypath):
    f.extend(filenames)
    break"
2515,list all text files in the data directory,False,False,24,"import glob, os
os.chdir(""/mydir"")
for file in glob.glob(""*.txt""):
    print(file)"
2516,list all text files in the data directory,False,False,31,"import os
for file in os.listdir(""/mydir""):
    if file.endswith("".txt""):
        print(os.path.join(""/mydir"", file))"
2517,list all text files in the data directory,True,False,38,"import os
for root, dirs, files in os.walk(""/mydir""):
    for file in files:
        if file.endswith("".txt""):
             print(os.path.join(root, file))"
2518,list all text files in the data directory,False,False,11,"import glob
print(glob.glob(""/home/adam/*.txt""))"
2519,list all text files in the data directory,False,False,10,"['/home/adam/file1.txt', '/home/adam/file2.txt', .... ]"
2520,list all text files in the data directory,False,True,8,glob.glob('<unk>')
2521,list all text files in the data directory,True,True,49,"for dirname, dirnames, filenames in os.walk('<unk>'):
    for line in f:
        e = f.read()
    for line in os.listdir('<unk>'):
        e = f.read()
    for line in filenames:
        pass"
2522,list all text files in the data directory,False,True,43,"for dirname, dirnames, filenames in os.walk('<unk>'):
    for line in f:
        e = f.read()
    for line in os.listdir('<unk>'):
        e = f.read()"
2523,list all text files in the data directory,False,True,29,"for dirname, line in os.walk('<unk>'):
    for line in ins:
        print(line.replace('\r', ''))"
2524,list all text files in the data directory,False,True,46,"for dirname, dirnames, filenames in os.walk('<unk>'):
    for line in ins:
        print(line.path.join(dirname, line))
    for line in open('file.txt').read():
        print(line)"
2525,list all text files in the data directory,False,True,31,"for dirname, dirnames, filenames in os.walk('<unk>'):
    for line in ins:
        print(line.replace('\r', ''))"
2526,list all text files in the data directory,False,True,23,"f = []
for dirpath, dirnames, filenames in walk('f'):
    f.write('\n')"
2527,list all text files in the data directory,False,False,32,"from os import listdir
from os.path import isfile, join
onlyfiles = [f for f in listdir(mypath) if isfile(join(mypath, f))]"
2528,list all text files in the data directory,False,False,27,"from os import walk

f = []
for (dirpath, dirnames, filenames) in walk(mypath):
    f.extend(filenames)
    break"
2529,list all text files in the data directory,False,False,24,"import glob, os
os.chdir(""/mydir"")
for file in glob.glob(""*.txt""):
    print(file)"
2530,list all text files in the data directory,False,False,31,"import os
for file in os.listdir(""/mydir""):
    if file.endswith("".txt""):
        print(os.path.join(""/mydir"", file))"
2531,list all text files in the data directory,True,False,38,"import os
for root, dirs, files in os.walk(""/mydir""):
    for file in files:
        if file.endswith("".txt""):
             print(os.path.join(root, file))"
2532,list all text files in the data directory,False,False,11,"import glob
print(glob.glob(""/home/adam/*.txt""))"
2533,list all text files in the data directory,False,False,10,"['/home/adam/file1.txt', '/home/adam/file2.txt', .... ]"
2548,walke all files in a directory,True,True,5,os.listdir('..')
2549,walke all files in a directory,False,True,5,glob.glob('*')
2550,walke all files in a directory,False,True,6,print(f.read())
2551,walke all files in a directory,False,True,6,print(os.getcwd())
2552,walke all files in a directory,False,True,15,print([f.read() for dirname in os.walk(directory)])
2553,walke all files in a directory,False,True,5,f.listdir('..')
2554,walke all files in a directory,False,True,19,print([f.read() for f in open('file.txt').read()])
2555,walke all files in a directory,False,False,32,"from os import listdir
from os.path import isfile, join
onlyfiles = [f for f in listdir(mypath) if isfile(join(mypath, f))]"
2556,walke all files in a directory,False,False,27,"from os import walk

f = []
for (dirpath, dirnames, filenames) in walk(mypath):
    f.extend(filenames)
    break"
2557,walke all files in a directory,False,False,11,"import glob
print(glob.glob(""/home/adam/*.txt""))"
2558,walke all files in a directory,False,False,10,"['/home/adam/file1.txt', '/home/adam/file2.txt', .... ]"
2559,walke all files in a directory,False,False,29,"import os
 arr = os.listdir()
 print(arr)

 >>> ['$RECYCLE.BIN', 'work.txt', '3ebooks.txt', 'documents']"
2560,walke all files in a directory,False,False,20,"import glob

txtfiles = []
for file in glob.glob(""*.txt""):
    txtfiles.append(file)"
2561,walke all files in a directory,False,False,16,"import glob

mylist = [f for f in glob.glob(""*.txt"")]"
2562,list all filepaths in a directory,True,True,5,glob.glob('*')
2563,list all filepaths in a directory,False,True,5,glob.glob('Date')
2564,list all filepaths in a directory,False,True,11,print(' '.join(os.walk(filepaths)))
2565,list all filepaths in a directory,False,True,4,sys.path(0)
2566,list all filepaths in a directory,False,True,5,ast.literal_eval('filepaths')
2567,list all filepaths in a directory,False,True,6,glob.glob('?')
2568,list all filepaths in a directory,False,True,4,sys.path(1)
2569,list all filepaths in a directory,False,False,32,"from os import listdir
from os.path import isfile, join
onlyfiles = [f for f in listdir(mypath) if isfile(join(mypath, f))]"
2570,list all filepaths in a directory,False,False,27,"from os import walk

f = []
for (dirpath, dirnames, filenames) in walk(mypath):
    f.extend(filenames)
    break"
2571,list all filepaths in a directory,False,False,24,"import glob, os
os.chdir(""/mydir"")
for file in glob.glob(""*.txt""):
    print(file)"
2572,list all filepaths in a directory,False,False,31,"import os
for file in os.listdir(""/mydir""):
    if file.endswith("".txt""):
        print(os.path.join(""/mydir"", file))"
2573,list all filepaths in a directory,False,False,38,"import os
for root, dirs, files in os.walk(""/mydir""):
    for file in files:
        if file.endswith("".txt""):
             print(os.path.join(root, file))"
2574,list all filepaths in a directory,False,False,11,"import glob
print(glob.glob(""/home/adam/*.txt""))"
2575,list all filepaths in a directory,False,False,10,"['/home/adam/file1.txt', '/home/adam/file2.txt', .... ]"
2604,search all matches in a string,True,True,14,"re.findall('<unk>', '<unk>')"
2605,search all matches in a string,False,True,11,"re.findall('<unk>', 'Hello')"
2606,search all matches in a string,True,True,10,"re.findall('<unk>', s)"
2607,search all matches in a string,False,True,11,"re.findall('<unk>', 'test')"
2608,search all matches in a string,False,True,12,"re.findall('<unk>', 'a')"
2609,search all matches in a string,False,True,11,"re.findall('<unk>', 'bar')"
2610,search all matches in a string,False,True,11,"re.findall('<unk>', 'hello')"
2611,search all matches in a string,False,False,82,"re.findall( r'all (.*?) are', 'all cats are smarter than dogs, all dogs are dumber than cats')
# Output: ['cats', 'dogs']

[x.group() for x in re.finditer( r'all (.*?) are', 'all cats are smarter than dogs, all dogs are dumber than cats')]
# Output: ['all cats are', 'all dogs are']"
2612,search all matches in a string,False,False,31,"import re
[m.start() for m in re.finditer('test', 'test test test test')]
#[0, 5, 10, 15]"
2613,search all matches in a string,False,False,26,"[m.start() for m in re.finditer('(?=tt)', 'ttt')]
#[0, 1]"
2614,search all matches in a string,False,False,54,"search = 'tt'
[m.start() for m in re.finditer('(?=%s)(?!.{1,%d}%s)' % (search, len(search)-1, search), 'ttt')]
#[1]"
2615,search all matches in a string,False,False,68,">>> p = re.compile(""name (.*) is valid"")
>>> result = p.search(s)
>>> result
<_sre.SRE_Match object at 0x10555e738>
>>> result.group(1)     # group(1) will return the 1st capture.
                        # group(0) will returned the entire matched text.
'my_user_name'"
2616,search all matches in a string,False,False,30,">>> help(str.find)
Help on method_descriptor:

find(...)
    S.find(sub [,start [,end]]) -> int"
2617,search all matches in a string,False,False,69,"def find_all(a_str, sub):
    start = 0
    while True:
        start = a_str.find(sub, start)
        if start == -1: return
        yield start
        start += len(sub) # use start += 1 to find overlapping matches

list(find_all('spam spam spam spam', 'spam')) # [0, 5, 10, 15]"
2618,search all matches in a string,True,True,14,"re.findall('<unk>', '<unk>')"
2619,search all matches in a string,False,True,11,"re.findall('<unk>', 'Hello')"
2620,search all matches in a string,True,True,10,"re.findall('<unk>', s)"
2621,search all matches in a string,False,True,11,"re.findall('<unk>', 'test')"
2622,search all matches in a string,False,True,12,"re.findall('<unk>', 'a')"
2623,search all matches in a string,False,True,11,"re.findall('<unk>', 'bar')"
2624,search all matches in a string,False,True,11,"re.findall('<unk>', 'hello')"
2625,search all matches in a string,False,False,82,"re.findall( r'all (.*?) are', 'all cats are smarter than dogs, all dogs are dumber than cats')
# Output: ['cats', 'dogs']

[x.group() for x in re.finditer( r'all (.*?) are', 'all cats are smarter than dogs, all dogs are dumber than cats')]
# Output: ['all cats are', 'all dogs are']"
2626,search all matches in a string,False,False,31,"import re
[m.start() for m in re.finditer('test', 'test test test test')]
#[0, 5, 10, 15]"
2627,search all matches in a string,False,False,26,"[m.start() for m in re.finditer('(?=tt)', 'ttt')]
#[0, 1]"
2628,search all matches in a string,False,False,54,"search = 'tt'
[m.start() for m in re.finditer('(?=%s)(?!.{1,%d}%s)' % (search, len(search)-1, search), 'ttt')]
#[1]"
2629,search all matches in a string,False,False,16,"if any(ext in url_string for ext in extensionsToCheck):
    print(url_string)"
2630,search all matches in a string,False,False,10,"re.finditer(pattern, string[, flags])"
2631,search all matches in a string,False,False,22,"[(m.start(0), m.end(0)) for m in re.finditer(pattern, string)]"
2632,search all matches in a string,True,True,14,"re.findall('<unk>', '<unk>')"
2633,search all matches in a string,False,True,11,"re.findall('<unk>', 'Hello')"
2634,search all matches in a string,True,True,10,"re.findall('<unk>', s)"
2635,search all matches in a string,False,True,11,"re.findall('<unk>', 'test')"
2636,search all matches in a string,False,True,12,"re.findall('<unk>', 'a')"
2637,search all matches in a string,False,True,11,"re.findall('<unk>', 'bar')"
2638,search all matches in a string,False,True,11,"re.findall('<unk>', 'hello')"
2639,search all matches in a string,False,False,82,"re.findall( r'all (.*?) are', 'all cats are smarter than dogs, all dogs are dumber than cats')
# Output: ['cats', 'dogs']

[x.group() for x in re.finditer( r'all (.*?) are', 'all cats are smarter than dogs, all dogs are dumber than cats')]
# Output: ['all cats are', 'all dogs are']"
2640,search all matches in a string,False,False,31,"import re
[m.start() for m in re.finditer('test', 'test test test test')]
#[0, 5, 10, 15]"
2641,search all matches in a string,False,False,26,"[m.start() for m in re.finditer('(?=tt)', 'ttt')]
#[0, 1]"
2642,search all matches in a string,False,False,54,"search = 'tt'
[m.start() for m in re.finditer('(?=%s)(?!.{1,%d}%s)' % (search, len(search)-1, search), 'ttt')]
#[1]"
2643,search all matches in a string,False,False,16,"if any(ext in url_string for ext in extensionsToCheck):
    print(url_string)"
2644,search all matches in a string,False,False,68,">>> p = re.compile(""name (.*) is valid"")
>>> result = p.search(s)
>>> result
<_sre.SRE_Match object at 0x10555e738>
>>> result.group(1)     # group(1) will return the 1st capture.
                        # group(0) will returned the entire matched text.
'my_user_name'"
2645,search all matches in a string,False,False,30,">>> help(str.find)
Help on method_descriptor:

find(...)
    S.find(sub [,start [,end]]) -> int"
2688,move file,False,True,8,os.listdir('<unk>')
2689,move file,False,True,14,"shutil.copy2('<unk>', '<unk>')"
2690,move file,False,True,5,os.listdir('file')
2691,move file,False,True,4,os.chdir(file)
2692,move file,True,True,7,"shutil.copy2(file, 'filenames')"
2693,move file,False,True,8,"shutil.copy2('file', 'rb')"
2694,move file,False,True,6,"os.rename(file, file)"
2695,move file,False,False,34,"import os
import shutil

os.rename(""path/to/current/file.foo"", ""path/to/new/destination/for/file.foo"")
shutil.move(""path/to/current/file.foo"", ""path/to/new/destination/for/file.foo"")
os.replace(""path/to/current/file.foo"", ""path/to/new/destination/for/file.foo"")"
2696,move file,False,False,27,"import shutil
import os

source = '/path/to/source_folder'
dest1 = '/path/to/dest_folder'

files = os.listdir(source)

for f in files:
    shutil.move(source+f, dest1)"
2697,move file,False,False,50,"in /opt/awesome
○ → ls
source
○ → ls source
awesome.txt

python 
>>> source = '/opt/awesome/source'
>>> destination = '/opt/awesome/destination'
>>> import os
>>> os.rename(source, destination)
>>> os.listdir('/opt/awesome')
['destination']"
2698,move file,False,False,26,">>> import shutil
>>> shutil.move(destination, source)
>>> os.listdir('/opt/awesome/source')
['awesome.txt']"
2699,move file,False,False,16,"from pathlib import Path

Path(""path/to/current/file.foo"").rename(""path/to/new/destination/for/file.foo"")"
2700,move file,False,False,21,"import boto

c = boto.connect_s3()
src = c.get_bucket('my_source_bucket')
dst = c.get_bucket('my_destination_bucket')"
2701,move file,False,False,31,"for k in src.list():
    # copy stuff to your destination here
    dst.copy_key(k.key.name, src.name, k.key.name)
    # then delete the source key
    k.delete()"
2730,assign current date and time to `now`,True,True,5,now = datetime.now()
2731,assign current date and time to `now`,False,True,5,now = datetime.datetime.now()
2732,assign current date and time to `now`,False,True,5,t = datetime.now()
2733,assign current date and time to `now`,False,True,5,t = datetime.datetime.now()
2734,assign current date and time to `now`,False,True,6,now = datetime.time(hours=5)
2735,assign current date and time to `now`,False,True,6,now = datetime.time(time=5)
2736,assign current date and time to `now`,False,True,5,now = datetime.time()
2737,assign current date and time to `now`,False,False,38,">>> import datetime
>>> datetime.datetime.now()
datetime.datetime(2009, 1, 6, 15, 8, 24, 78915)

>>> print(datetime.datetime.now())
2009-01-06 15:08:24.789150"
2738,assign current date and time to `now`,False,False,32,">>> datetime.datetime.now().time()
datetime.time(15, 8, 24, 78915)

>>> print(datetime.datetime.now().time())
15:08:24.789150"
2739,assign current date and time to `now`,False,False,7,>>> from datetime import datetime
2740,assign current date and time to `now`,False,False,38,">>> from time import gmtime, strftime
>>> strftime(""%Y-%m-%d %H:%M:%S"", gmtime())
'2009-01-05 22:14:39'"
2741,assign current date and time to `now`,False,False,20,"from datetime import date
from datetime import datetime

dt = datetime.combine(date.today(), datetime.min.time())"
2742,assign current date and time to `now`,False,False,26,"from datetime import datetime
datetime.now().strftime('%Y-%m-%d %H:%M:%S')"
2743,assign current date and time to `now`,False,False,18,"from datetime import datetime

datetime.today().strftime('%Y-%m-%d')"
2744,add days to time,False,True,10,"datetime.datetime.now() + datetime.timedelta(days=1, hours=3)"
2745,add days to time,False,True,17,"time.strftime('%H:%M:%S', datetime.time())"
2746,add days to time,True,True,8,datetime.datetime.now() + datetime.timedelta(days=1)
2747,add days to time,False,True,18,"time.strftime('%H:%M:%S', datetime.timedelta(hours=3))"
2748,add days to time,False,True,20,"time.strftime('%H:%M:%S', time.gmtime(datetime.datetime.now()))"
2749,add days to time,False,True,10,"datetime.datetime.now() - datetime.timedelta(days=1, hours=3)"
2750,add days to time,False,True,6,time.mktime(datetime.datetime.now())
2751,add days to time,False,False,2,import datetime
2752,add days to time,False,False,23,"date_1 = datetime.datetime.strptime(start_date, ""%m/%d/%y"")

end_date = date_1 + datetime.timedelta(days=10)"
2753,add days to time,False,False,33,"from datetime import datetime, timedelta

nine_hours_from_now = datetime.now() + timedelta(hours=9)
#datetime.datetime(2012, 12, 3, 23, 24, 31, 774118)"
2754,add days to time,False,False,21,">>> '{:%H:%M:%S}'.format(nine_hours_from_now)
'23:24:31'"
2755,add days to time,False,False,20,">>> format(nine_hours_from_now, '%H:%M:%S')
'23:24:31'"
2756,add days to time,False,False,24,"date = datetime.datetime(2003,8,1,12,4,5)
for i in range(5): 
    date += datetime.timedelta(days=1)
    print(date)"
2757,add days to time,False,False,6,"from datetime import timedelta, date"
2758,convert `week_date` to GMT timezone and assign to `GMT_week_date`,False,True,6,GMT_week_date = datetime.datetime.fromtimestamp(week_date)
2759,convert `week_date` to GMT timezone and assign to `GMT_week_date`,True,True,9,"GMT_week_date = datetime.datetime.strptime(week_date, 'GMT_week_date')"
2760,convert `week_date` to GMT timezone and assign to `GMT_week_date`,False,True,9,GMT_week_date = datetime.datetime.fromtimestamp(isoformat(week_date))
2761,convert `week_date` to GMT timezone and assign to `GMT_week_date`,False,True,8,GMT_week_date = time.mktime(week_date.timetuple())
2762,convert `week_date` to GMT timezone and assign to `GMT_week_date`,False,True,10,"GMT_week_date = datetime.datetime.combine(datetime.date.today(), week_date)"
2763,convert `week_date` to GMT timezone and assign to `GMT_week_date`,False,True,8,GMT_week_date = datetime.datetime.fromtimestamp(utcnow())
2764,convert `week_date` to GMT timezone and assign to `GMT_week_date`,False,True,13,"GMT_week_date = datetime.datetime.fromtimestamp(range(1970, 50, 7))"
2765,convert `week_date` to GMT timezone and assign to `GMT_week_date`,False,False,6,datetime.datetime.now().date()
2766,convert `week_date` to GMT timezone and assign to `GMT_week_date`,False,False,23,">>> import datetime
>>> datetime.date(2010, 6, 16).isocalendar()[1]
24"
2767,convert `week_date` to GMT timezone and assign to `GMT_week_date`,False,False,114,"from datetime import datetime
from dateutil import tz

# METHOD 1: Hardcode zones:
from_zone = tz.gettz('UTC')
to_zone = tz.gettz('America/New_York')

# METHOD 2: Auto-detect zones:
from_zone = tz.tzutc()
to_zone = tz.tzlocal()

# utc = datetime.utcnow()
utc = datetime.strptime('2011-01-21 02:37:21', '%Y-%m-%d %H:%M:%S')

# Tell the datetime object that it's in UTC time zone since 
# datetime objects are 'naive' by default
utc = utc.replace(tzinfo=from_zone)

# Convert time zone
central = utc.astimezone(to_zone)"
2768,convert `week_date` to GMT timezone and assign to `GMT_week_date`,False,False,25,">>> import datetime
>>> datetime.date(2010, 6, 16).strftime(""%V"")
'24'"
2769,convert `week_date` to GMT timezone and assign to `GMT_week_date`,False,False,63,"In [4]: t = pd.date_range(start=""2013-05-18 12:00:00"", periods=2, freq='H',
                          tz= ""Europe/Brussels"")

In [5]: t
Out[5]: DatetimeIndex(['2013-05-18 12:00:00+02:00', '2013-05-18 13:00:00+02:00'],
                       dtype='datetime64[ns, Europe/Brussels]', freq='H')"
2770,convert `week_date` to GMT timezone and assign to `GMT_week_date`,False,False,37,"In [6]: t.tz_localize(None)
Out[6]: DatetimeIndex(['2013-05-18 12:00:00', '2013-05-18 13:00:00'], 
                      dtype='datetime64[ns]', freq='H')"
2771,convert `week_date` to GMT timezone and assign to `GMT_week_date`,False,False,37,"In [7]: t.tz_convert(None)
Out[7]: DatetimeIndex(['2013-05-18 10:00:00', '2013-05-18 11:00:00'], 
                      dtype='datetime64[ns]', freq='H')"
2772,display `week_date` in format mm-dd-yyyy hh:mm,True,True,23,"time.strftime('%Y-%m-%d %H:%M:%S', gmtime())"
2773,display `week_date` in format mm-dd-yyyy hh:mm,False,True,6,time.mktime(x.timetuple())
2774,display `week_date` in format mm-dd-yyyy hh:mm,False,True,22,"time.strftime('%l:%M%p %z on %b %d, %Y')"
2775,display `week_date` in format mm-dd-yyyy hh:mm,False,True,6,time.mktime(s.timetuple())
2776,display `week_date` in format mm-dd-yyyy hh:mm,False,True,8,time.mktime(time.gmtime('time'))
2777,display `week_date` in format mm-dd-yyyy hh:mm,False,True,11,time.strftime('%m/%d/%Y')
2778,display `week_date` in format mm-dd-yyyy hh:mm,False,True,6,time.mktime(time.timetuple())
2779,display `week_date` in format mm-dd-yyyy hh:mm,False,False,18,"from datetime import datetime

datetime.today().strftime('%Y-%m-%d')"
2780,display `week_date` in format mm-dd-yyyy hh:mm,False,False,22,datetime.today().strftime('%Y-%m-%d-%H:%M:%S')
2781,display `week_date` in format mm-dd-yyyy hh:mm,False,False,19,"from datetime import date
today = str(date.today())
print(today)   # '2017-12-26'"
2782,display `week_date` in format mm-dd-yyyy hh:mm,False,False,28,"import datetime

datetime.datetime.strptime(""21/12/2008"", ""%d/%m/%Y"").strftime(""%Y-%m-%d"")"
2783,display `week_date` in format mm-dd-yyyy hh:mm,False,False,19,"time.strftime('%m/%d/%Y', time.gmtime(os.path.getmtime(file)))"
2784,display `week_date` in format mm-dd-yyyy hh:mm,False,False,100,">>> from datetime import datetime
>>> inDate = ""29-Apr-2013-15:59:02""
>>> d = datetime.strptime(inDate, ""%d-%b-%Y-%H:%M:%S"")
>>> d
datetime.datetime(2013, 4, 29, 15, 59, 2)
>>> d.strftime(""YYYYMMDD HH:mm:ss (%Y%m%d %H:%M:%S)"")
'YYYYMMDD HH:mm:ss (20130429 15:59:02)'"
2785,display `week_date` in format mm-dd-yyyy hh:mm,False,False,18,">>> import arrow
>>> arrow.now().format('YYYY-MM-DD')
'2017-02-17'"
2786,change datetime format of `week_date` to mm-dd-yyyy hh:mm,True,True,16,week_date.strftime('%Y-%m-%d %H:%M')
2787,change datetime format of `week_date` to mm-dd-yyyy hh:mm,False,True,6,time.mktime(week_date.timetuple())
2788,change datetime format of `week_date` to mm-dd-yyyy hh:mm,False,True,10,time.mktime(datetime.datetime.fromtimestamp(week_date).timetuple())
2789,change datetime format of `week_date` to mm-dd-yyyy hh:mm,False,True,11,week_date.strftime('%m/%d/%Y')
2790,change datetime format of `week_date` to mm-dd-yyyy hh:mm,False,True,5,week_date.strftime('Series')
2791,change datetime format of `week_date` to mm-dd-yyyy hh:mm,False,True,30,"time.strftime('%H:%M:%S', week_date.strftime('%Y-%m-%d %H:%M'))"
2792,change datetime format of `week_date` to mm-dd-yyyy hh:mm,False,True,19,week_date.strftime('%Y-%m-%d %H:%M:%S')
2793,change datetime format of `week_date` to mm-dd-yyyy hh:mm,False,False,18,"from datetime import datetime

datetime.today().strftime('%Y-%m-%d')"
2794,change datetime format of `week_date` to mm-dd-yyyy hh:mm,False,False,22,datetime.today().strftime('%Y-%m-%d-%H:%M:%S')
2795,change datetime format of `week_date` to mm-dd-yyyy hh:mm,False,False,26,"datetime.datetime.strptime(""2013-1-25"", '%Y-%m-%d').strftime('%m/%d/%y')"
2796,change datetime format of `week_date` to mm-dd-yyyy hh:mm,False,False,40,"dt = datetime.datetime.strptime(""2013-1-25"", '%Y-%m-%d')
print '{0}/{1}/{2:02}'.format(dt.month, dt.day, dt.year % 100)"
2797,change datetime format of `week_date` to mm-dd-yyyy hh:mm,False,False,26,"datetime.datetime.strptime(""2013-1-25"", '%Y-%m-%d').strftime('%m/%d/%y')"
2798,change datetime format of `week_date` to mm-dd-yyyy hh:mm,False,False,19,"from datetime import date
today = str(date.today())
print(today)   # '2017-12-26'"
2799,change datetime format of `week_date` to mm-dd-yyyy hh:mm,False,False,28,"import datetime

datetime.datetime.strptime(""21/12/2008"", ""%d/%m/%Y"").strftime(""%Y-%m-%d"")"
2800,"read csv file ""data.csv""",True,True,14,"df = pd.read_csv('data.csv', sep=',', header=None)"
2801,"read csv file ""data.csv""",False,True,14,"df = pd.read_csv('data.csv', sep=',', **None)"
2802,"read csv file ""data.csv""",False,True,26,"with open('data.csv', 'rb') as ins:
    writer = pd.read_csv('data.csv', sep=',', header=None)"
2803,"read csv file ""data.csv""",False,True,26,"with open('data.csv', 'rb') as f:
    df = pd.read_csv('data.csv', sep=',', header=None)"
2804,"read csv file ""data.csv""",False,True,33,"with open('data.csv', 'rb') as f:
    df = pd.read_csv('data.csv', dtype={'data.csv': np.float64}, na_values=
        ['data.csv'])"
2805,"read csv file ""data.csv""",False,True,26,"with open('data.csv', 'rb') as line:
    df = pd.read_csv('data.csv', sep=',', header=None)"
2806,"read csv file ""data.csv""",False,True,26,"with open('data.csv', 'rb') as f:
    df = pd.read_csv('data.csv', sep=',', **None)"
2807,"read csv file ""data.csv""",False,False,16,"from numpy import genfromtxt
my_data = genfromtxt('my_file.csv', delimiter=',')"
2808,"read csv file ""data.csv""",False,False,39,"import pandas as pd
df=pd.read_csv('myfile.csv', sep=',',header=None)
df.values
array([[ 1. ,  2. ,  3. ],
       [ 4. ,  5.5,  6. ]])"
2809,"read csv file ""data.csv""",False,False,24,"1.0, 2, 3
4, 5.5, 6

import numpy as np
np.genfromtxt('myfile.csv',delimiter=',')"
2810,"read csv file ""data.csv""",False,False,22,"array([[ 1. ,  2. ,  3. ],
       [ 4. ,  5.5,  6. ]])"
2811,"read csv file ""data.csv""",False,False,12,"np.genfromtxt('myfile.csv',delimiter=',',dtype=None)"
2812,"read csv file ""data.csv""",False,False,53,"array([(1.0, 2.0, 3), (4.0, 5.5, 6)], 
      dtype=[('f0', '<f8'), ('f1', '<f8'), ('f2', '<i4')])"
2813,"read csv file ""data.csv""",False,False,19,"from numpy import genfromtxt
genfromtxt(fname = dest_file, dtype = (<whatever options>))"
2814,number of columns of csv,True,True,4,len(df.columns)
2815,number of columns of csv,False,True,16,sum(row[0] for row in list(row.values()))
2816,number of columns of csv,False,True,15,sum(len(row) for row in row.split(' '))
2817,number of columns of csv,False,True,4,len(np.columns)
2818,number of columns of csv,False,True,6,"len(df.columns, axis=1)"
2819,number of columns of csv,False,True,18,sum(len(row) for row in row.split(' <unk>'))
2820,number of columns of csv,False,True,16,sum(row[0] for row in list(csv.TimeGrouper()))
2821,number of columns of csv,False,False,39,"import pandas as pd
df = pd.DataFrame({""pear"": [1,2,3], ""apple"": [2,3,4], ""orange"": [3,4,5]})

len(df.columns)
3"
2822,number of columns of csv,False,False,20,"for row in reader:
    content = list(row[i] for i in included_cols)
print content"
2823,number of columns of csv,False,False,20,"for row in reader:
        content = list(row[i] for i in included_cols)
        print content"
2824,number of columns of csv,False,False,23,"import pandas as pd
df = pd.read_csv(csv_file)
saved_column = df.column_name #you can also use df['column_name']"
2825,number of columns of csv,False,False,3,names = df.Names
2826,number of columns of csv,False,False,4,df.shape[1]
2827,number of columns of csv,False,False,131,"import csv
from collections import defaultdict

columns = defaultdict(list) # each value in each column is appended to a list

with open('file.txt') as f:
    reader = csv.DictReader(f) # read rows into a dictionary format
    for row in reader: # read a row as {column1: value1, column2: value2,...}
        for (k,v) in row.items(): # go over each column name and value 
            columns[k].append(v) # append the value into the appropriate list
                                 # based on column name k

print(columns['name'])
print(columns['phone'])
print(columns['street'])"
2828,"write csv `output_f` to file ""output/output.csv""",True,True,7,"output_f.to_csv('output/output.csv', index=False)"
2829,"write csv `output_f` to file ""output/output.csv""",False,True,7,"output_f.to_csv('output/output.csv', **False)"
2830,"write csv `output_f` to file ""output/output.csv""",False,True,14,"output_f.to_csv('output/output.csv', **{'namelist': ' '})"
2831,"write csv `output_f` to file ""output/output.csv""",False,True,14,"output_f.to_csv('output/output.csv', **{'enumerate': 'output/output.csv'})"
2832,"write csv `output_f` to file ""output/output.csv""",False,True,13,"output_f.to_csv('output/output.csv', **{'namelist': ''})"
2833,"write csv `output_f` to file ""output/output.csv""",False,True,14,"output_f.to_csv('output/output.csv', **{'namelist': 'output/output.csv'})"
2834,"write csv `output_f` to file ""output/output.csv""",False,True,7,"output_f.to_csv(output_f, date_format='output/output.csv')"
2835,"write csv `output_f` to file ""output/output.csv""",False,False,546,"jQuery.fn.table2CSV = function(options) {
    var options = jQuery.extend({
        separator: ',',
        header: [],
        delivery: 'popup' // popup, value
    },
    options);

    var csvData = [];
    var headerArr = [];
    var el = this;

    //header
    var numCols = options.header.length;
    var tmpRow = []; // construct header avalible array

    if (numCols > 0) {
        for (var i = 0; i < numCols; i++) {
            tmpRow[tmpRow.length] = formatData(options.header[i]);
        }
    } else {
        $(el).filter(':visible').find('th').each(function() {
            if ($(this).css('display') != 'none') tmpRow[tmpRow.length] = formatData($(this).html());
        });
    }

    row2CSV(tmpRow);

    // actual data
    $(el).find('tr').each(function() {
        var tmpRow = [];
        $(this).filter(':visible').find('td').each(function() {
            if ($(this).css('display') != 'none') tmpRow[tmpRow.length] = formatData($(this).html());
        });
        row2CSV(tmpRow);
    });
    if (options.delivery == 'popup') {
        var mydata = csvData.join('\n');
        return popup(mydata);
    } else {
        var mydata = csvData.join('\n');
        return mydata;
    }

    function row2CSV(tmpRow) {
        var tmp = tmpRow.join('') // to remove any blank rows
        // alert(tmp);
        if (tmpRow.length > 0 && tmp != '') {
            var mystr = tmpRow.join(options.separator);
            csvData[csvData.length] = mystr;
        }
    }
    function formatData(input) {
        // replace "" with “
        var regexp = new RegExp(/[""]/g);
        var output = input.replace(regexp, ""“"");
        //HTML
        var regexp = new RegExp(/\<[^\<]+\>/g);
        var output = output.replace(regexp, """");
        if (output == """") return '';
        return '""' + output + '""';
    }
    function popup(data) {
        var generator = window.open('', 'csv', 'height=400,width=600');
        generator.document.write('<html><head><title>CSV</title>');
        generator.document.write('</head><body >');
        generator.document.write('<textArea cols=70 rows=15 wrap=""off"" >');
        generator.document.write(data);
        generator.document.write('</textArea>');
        generator.document.write('</body></html>');
        generator.document.close();
        return true;
    }
};"
2836,"write csv `output_f` to file ""output/output.csv""",False,False,28,"<script type=""text/javascript"" src=""jquery-1.3.2.js"" ></script>

<script type=""text/javascript"" src=""html2CSV.js"" ></script>"
2837,"write csv `output_f` to file ""output/output.csv""",False,False,175,"<table id=""example1"" border=""1""  style=""background-color:#FFFFCC"" width=""0%"" cellpadding=""3"" cellspacing=""3"">

    <tr>

        <th>Title</th>

        <th>Name</th>

        <th>Phone</th>

    </tr>

    <tr>

        <td>Mr.</td>

        <td>John</td>

        <td>07868785831</td>

    </tr>

    <tr>

        <td>Miss</td>

        <td><i>Linda</i></td>

        <td>0141-2244-5566</td>

    </tr>

    <tr>

        <td>Master</td>

        <td>Jack</td>

        <td>0142-1212-1234</td>

    </tr>

    <tr>

        <td>Mr.</td>

        <td>Bush</td>

        <td>911-911-911</td>

    </tr>

</table>"
2838,"write csv `output_f` to file ""output/output.csv""",False,False,42,"<input value=""Export as CSV 2"" type=""button"" onclick=""$('#example1').table2CSV({header:['prefix','Employee Name','Contact']})"">"
2839,"write csv `output_f` to file ""output/output.csv""",False,False,387,"function exportTableToCSV($table, filename) {

    var $rows = $table.find('tr:has(td),tr:has(th)'),

        // Temporary delimiter characters unlikely to be typed by keyboard
        // This is to avoid accidentally splitting the actual contents
        tmpColDelim = String.fromCharCode(11), // vertical tab character
        tmpRowDelim = String.fromCharCode(0), // null character

        // actual delimiter characters for CSV format
        colDelim = '"",""',
        rowDelim = '""\r\n""',

        // Grab text from table into CSV formatted string
        csv = '""' + $rows.map(function (i, row) {
            var $row = $(row), $cols = $row.find('td,th');

            return $cols.map(function (j, col) {
                var $col = $(col), text = $col.text();

                return text.replace(/""/g, '""""'); // escape double quotes

            }).get().join(tmpColDelim);

        }).get().join(tmpRowDelim)
            .split(tmpRowDelim).join(rowDelim)
            .split(tmpColDelim).join(colDelim) + '""',



        // Data URI
        csvData = 'data:application/csv;charset=utf-8,' + encodeURIComponent(csv);

        console.log(csv);

        if (window.navigator.msSaveBlob) { // IE 10+
            //alert('IE' + csv);
            window.navigator.msSaveOrOpenBlob(new Blob([csv], {type: ""text/plain;charset=utf-8;""}), ""csvname.csv"")
        } 
        else {
            $(this).attr({ 'download': filename, 'href': csvData, 'target': '_blank' }); 
        }
}

// This must be a hyperlink
$(""#xx"").on('click', function (event) {

    exportTableToCSV.apply(this, [$('#projectSpreadsheet'), 'export.csv']);

    // IF CSV, don't do event.preventDefault() or return false
    // We actually need this to be a typical hyperlink
});"
2840,"write csv `output_f` to file ""output/output.csv""",False,False,43,"<a href=""#"" id=""xx"" style=""text-decoration:none;color:#000;background-color:#ddd;border:1px solid #ccc;padding:8px;"">Export Table data into Excel</a>"
2841,"write csv `output_f` to file ""output/output.csv""",False,False,56,"csv = []
for row in $('#sometable tr')
  csv.push (""\""#{col.innerText}\"""" for col in $(row).find('td,th')).join(',')
output = csv.join(""\n"")"
2870,check if file `output_file` exists,False,True,4,os.path.isfile(output_file)
2871,check if file `output_file` exists,True,True,4,os.path.exists(output_file)
2872,check if file `output_file` exists,False,True,11,'output_file' in os.stat('<unk>')
2873,check if file `output_file` exists,False,True,8,'output_file' in os.listdir('output_file')
2874,check if file `output_file` exists,False,True,11,"'output_file' in file.open('output_file', 'rb')"
2875,check if file `output_file` exists,False,True,6,'output_file' in output_file.os()
2876,check if file `output_file` exists,False,True,11,'output_file' in file.open('<unk>')
2877,check if file `output_file` exists,False,False,16,"from pathlib import Path
Path(""/my/directory"").mkdir(parents=True, exist_ok=True)"
2878,check if file `output_file` exists,False,False,13,"import os
if not os.path.exists(directory):
    os.makedirs(directory)"
2879,check if file `output_file` exists,False,False,22,"import os, errno

try:
    os.makedirs(directory)
except OSError as e:
    if e.errno != errno.EEXIST:
        raise"
2880,check if file `output_file` exists,False,False,16,"try:
    os.makedirs(""path/to/directory"")
except FileExistsError:
    # directory already exists
    pass"
2881,check if file `output_file` exists,False,False,15,"os.makedirs(""path/to/directory"", exist_ok=True)  # succeeds even if directory exists."
2882,check if file `output_file` exists,False,False,6,"import os.path
os.path.isfile(fname)"
2883,check if file `output_file` exists,False,False,20,"from pathlib import Path

my_file = Path(""/path/to/file"")
if my_file.is_file():
    # file exists"
2884,add entry to json file,False,True,4,json.load(f)
2885,add entry to json file,True,True,7,"json.dumps(entry, content_type='application/json')"
2886,add entry to json file,False,True,7,"json.dumps(file, content_type='application/json')"
2887,add entry to json file,False,True,7,"json.dumps(file, content_type='gzip')"
2888,add entry to json file,False,True,7,"json.load(f, content_type='application/json')"
2889,add entry to json file,False,True,6,json.dumps([entry])
2890,add entry to json file,False,True,8,"json.dumps([add, entry])"
2891,add entry to json file,False,False,30,"with open('data.txt', 'a') as outfile:
    for hostDict in ....:
        json.dump(hostDict, outfile)
        outfile.write('\n')"
2892,add entry to json file,False,False,21,"with open('data.txt', 'a') as outfile:
    json.dump(hostDict, outfile, indent=2)"
2893,add entry to json file,False,False,69,"import json

with open('data.json', 'r+') as f:
    data = json.load(f)
    data['id'] = 134 # <--- add `id` value.
    f.seek(0)        # <--- should reset file position to the beginning.
    json.dump(data, f, indent=4)
    f.truncate()     # remove remaining part"
2894,add entry to json file,False,False,11,data[0]['f'] = var
2895,add entry to json file,False,False,66,"import json
import os

filename = 'data.json'
with open(filename, 'r') as f:
    data = json.load(f)
    data['id'] = 134 # <--- add `id` value.

os.remove(filename)
with open(filename, 'w') as f:
    json.dump(data, f, indent=4)"
2896,add entry to json file,False,False,23,"with open(DATA_FILENAME, mode='w', encoding='utf-8') as f:
    json.dump([], f)"
2897,add entry to json file,False,False,39,"with open(DATA_FILENAME, mode='w', encoding='utf-8') as feedsjson:
    entry = {'name': args.name, 'url': args.url}
    feeds.append(entry)
    json.dump(feeds, feedsjson)"
2898,load json file,True,True,7,json.loads(json.loads(json))
2899,load json file,False,True,4,json.loads(data)
2900,load json file,False,True,4,json.loads(url)
2901,load json file,False,True,7,json.loads(json.loads(data))
2902,load json file,False,True,7,json.loads(json.dumps(data))
2903,load json file,False,True,11,json.loads(request.POST.get('<unk>'))
2904,load json file,True,True,4,json.loads(file)
2905,load json file,False,False,45,">>> json.JSONDecoder(object_pairs_hook=collections.OrderedDict).decode('{""foo"":1, ""bar"": 2}')
OrderedDict([('foo', 1), ('bar', 2)])
>>>"
2906,load json file,False,False,62,">>> import json
>>> from collections import OrderedDict
>>> data = json.loads('{""foo"":1, ""bar"": 2}', object_pairs_hook=OrderedDict)
>>> print json.dumps(data, indent=4)
{
    ""foo"": 1,
    ""bar"": 2
}
>>>"
2907,load json file,False,False,15,">>> data = json.load(open('config.json'), object_pairs_hook=OrderedDict)"
2908,load json file,False,False,21,"import json

with open('strings.json') as f:
    d = json.load(f)
    print(d)"
2909,load json file,False,False,27,"import json

data = []
with open('file') as f:
    for line in f:
        data.append(json.loads(line))"
2910,load json file,False,False,8,"my_ordered_dict = json.loads(json_str, object_pairs_hook=collections.OrderedDict)"
2911,load json file,False,False,14,"import simplejson as json
import ordereddict

my_ordered_dict = json.loads(json_str, object_pairs_hook=ordereddict.OrderedDict)"
2912,"GET request to ""https://jsonplaceholder.typicode.com/posts"" with argument userId",True,True,11,"r = requests.get('https://jsonplaceholder.typicode.com/posts', params=userid)"
2913,"GET request to ""https://jsonplaceholder.typicode.com/posts"" with argument userId",False,True,9,r = requests.get('https://jsonplaceholder.typicode.com/posts')
2914,"GET request to ""https://jsonplaceholder.typicode.com/posts"" with argument userId",False,True,13,"requests.get('https://jsonplaceholder.typicode.com/posts', HTTPConnection=
    'https://jsonplaceholder.typicode.com/posts')"
2915,"GET request to ""https://jsonplaceholder.typicode.com/posts"" with argument userId",False,True,14,"r = requests.get('https://jsonplaceholder.typicode.com/posts', params=
    https://jsonplaceholder.typicode.com/posts)"
2916,"GET request to ""https://jsonplaceholder.typicode.com/posts"" with argument userId",False,True,18,"r = requests.get('https://jsonplaceholder.typicode.com/posts', headers={
    'Authorization': 'str_1'})"
2917,"GET request to ""https://jsonplaceholder.typicode.com/posts"" with argument userId",False,True,18,"r = requests.get('https://jsonplaceholder.typicode.com/posts', headers={
    'Authorization': 'str_3'})"
2918,"GET request to ""https://jsonplaceholder.typicode.com/posts"" with argument userId",False,True,13,"requests.get('https://jsonplaceholder.typicode.com/posts', url=
    'https://jsonplaceholder.typicode.com/posts')"
2919,"GET request to ""https://jsonplaceholder.typicode.com/posts"" with argument userId",False,False,22,"text = raw_input(""prompt"")  # Python 2
text = input(""prompt"")  # Python 3"
2920,"GET request to ""https://jsonplaceholder.typicode.com/posts"" with argument userId",False,False,6,"import sys
print (sys.argv)"
2921,"GET request to ""https://jsonplaceholder.typicode.com/posts"" with argument userId",False,False,18,"var = raw_input(""Please enter something: "")
print ""you entered"", var"
2922,"GET request to ""https://jsonplaceholder.typicode.com/posts"" with argument userId",False,False,21,"var = input(""Please enter something: "")
print(""You entered: "" + var)"
2923,"GET request to ""https://jsonplaceholder.typicode.com/posts"" with argument userId",False,False,19,"input_var = input(""Enter something: "")
print (""you entered "" + input_var)"
2924,"GET request to ""https://jsonplaceholder.typicode.com/posts"" with argument userId",False,False,85,"headers = {""W-Token"": ""Ilovemyboss""}
data = [
    {
        'url': '/rest/shifts',
        'params': {'user_id': 0, 'other_stuff': 'value'},
        'method': 'post',
    },
    {
        'url': '/rest/shifts',
        'params': {'user_id': 1,'other_stuff': 'value'},
        'method':'post',
    },
]
requests.post(url, json=data, headers=headers)"
2925,"GET request to ""https://jsonplaceholder.typicode.com/posts"" with argument userId",False,False,15,"headers = {'Content-Type': 'application/json', 'Accept':'application/json'}"
2926,print format,True,True,20,"print('<unk> %s, <unk>' % (1, 2))"
2927,print format,False,True,22,"print('<unk> %s, <unk>' % (1, 2, 3))"
2928,print format,False,True,13,"print('%5.3f' % (1, 2))"
2929,print format,False,True,25,"print('%5.3f' % ('%5.3f', '%H:%M:%S'))"
2930,print format,False,True,17,"print('%5.3f' % ('%5.3f', 'unicode_escape'))"
2931,print format,False,True,23,"print('<unk> %s, <unk>' % ('3.5', '+20'))"
2932,print format,False,True,24,"print('<unk> %s, <unk>' % ('%5.3f', '20'))"
2933,print format,False,False,47,"import numpy as np
x=np.random.random(10)
print(x)
# [ 0.07837821  0.48002108  0.41274116  0.82993414  0.77610352  0.1023732
#   0.51303098  0.4617183   0.33487207  0.71162095]

np.set_printoptions(precision=3)
print(x)
# [ 0.078  0.48   0.413  0.83   0.776  0.102  0.513  0.462  0.335  0.712]"
2934,print format,False,False,32,"y=np.array([1.5e-10,1.5,1500])
print(y)
# [  1.500e-10   1.500e+00   1.500e+03]
np.set_printoptions(suppress=True)
print(y)
# [    0.      1.5  1500. ]"
2935,print format,False,False,31,"x = np.random.random(10)
with np.printoptions(precision=3, suppress=True):
    print(x)
    # [ 0.073  0.461  0.689  0.754  0.624  0.901  0.049  0.582  0.557  0.348]"
2936,print format,False,False,18,"print(x)    
# [ 0.07334334  0.46132615  0.68935231  0.75379645  0.62424021  0.90115836
#   0.04879837  0.58207504  0.55694118  0.34768638]"
2937,print format,False,False,67,"import numpy as np
import contextlib

@contextlib.contextmanager
def printoptions(*args, **kwargs):
    original = np.get_printoptions()
    np.set_printoptions(*args, **kwargs)
    try:
        yield
    finally: 
        np.set_printoptions(**original)

x = np.random.random(10)
with printoptions(precision=3, suppress=True):
    print(x)
    # [ 0.073  0.461  0.689  0.754  0.624  0.901  0.049  0.582  0.557  0.348]"
2938,print format,False,False,19,"np.set_printoptions(formatter={'float': '{: 0.3f}'.format})
print(x)"
2939,print format,False,False,12,[ 0.078  0.480  0.413  0.830  0.776  0.102  0.513  0.462  0.335  0.712]
2940,exit program,True,True,3,sys.exit()
2941,exit program,False,True,6,print(sys.exit())
2942,exit program,False,True,3,quit()
2943,exit program,False,True,7,print(sys.exit(10))
2944,exit program,False,True,3,exit()
2945,exit program,False,True,7,print(sys.exit(2))
2946,exit program,False,True,22,"exec(compile(open('<unk>').read(), 'range', 2))"
2947,exit program,False,False,5,"import sys
sys.exit()"
2948,exit program,False,False,20,">>> print (quit)
Use quit() or Ctrl-Z plus Return to exit
>>>"
2949,exit program,False,False,20,">>> print (exit)
Use exit() or Ctrl-Z plus Return to exit
>>>"
2950,exit program,False,False,2,raise SystemExit
2951,exit program,False,False,11,"#do stuff
if this == that:
  quit()"
2952,exit program,False,False,49,"import sys, traceback

def main():
    try:
        do main program stuff here
        ....
    except KeyboardInterrupt:
        print ""Shutdown requested...exiting""
    except Exception:
        traceback.print_exc(file=sys.stdout)
    sys.exit(0)

if __name__ == ""__main__"":
    main()"
2953,exit program,False,False,2,raise SystemExit
2954,get current time,True,True,6,datetime.datetime.now().time()
2955,get current time,False,True,6,datetime.datetime.time(datetime.datetime.now())
2956,get current time,False,True,16,datetime.datetime.now().strftime('%H:%M:%S')
2957,get current time,False,True,6,datetime.now().time()
2958,get current time,False,True,6,datetime.time(datetime.datetime.now())
2959,get current time,False,True,16,datetime.now().strftime('%H:%M:%S')
2960,get current time,False,True,9,print(datetime.datetime.now().time())
2961,get current time,False,False,38,">>> import datetime
>>> datetime.datetime.now()
datetime.datetime(2009, 1, 6, 15, 8, 24, 78915)

>>> print(datetime.datetime.now())
2009-01-06 15:08:24.789150"
2962,get current time,False,False,32,">>> datetime.datetime.now().time()
datetime.time(15, 8, 24, 78915)

>>> print(datetime.datetime.now().time())
15:08:24.789150"
2963,get current time,False,False,7,>>> from datetime import datetime
2964,get current time,False,False,38,">>> from time import gmtime, strftime
>>> strftime(""%Y-%m-%d %H:%M:%S"", gmtime())
'2009-01-05 22:14:39'"
2965,get current time,False,False,17,"import time
millis = int(round(time.time() * 1000))
print millis"
2966,get current time,False,False,17,"import time

current_milli_time = lambda: int(round(time.time() * 1000))"
2967,get current time,False,False,7,">>> current_milli_time()
1378761833768"
2968,load csv data,True,True,6,"pd.read_csv(data, header=None)"
2969,load csv data,False,True,6,"pd.read_csv(csv, header=None)"
2970,load csv data,False,True,9,"pd.read_csv(data, sep='\t', header=None)"
2971,load csv data,False,True,4,writer.writerow(row)
2972,load csv data,False,True,10,"pd.read_csv(data, header=None, sep=' ')"
2973,load csv data,False,True,7,"pd.read_csv(data, sep='\t')"
2974,load csv data,False,True,10,"pd.read_csv('csv', sep='\t', header=None)"
2975,load csv data,False,False,16,"from numpy import genfromtxt
my_data = genfromtxt('my_file.csv', delimiter=',')"
2976,load csv data,False,False,39,"import pandas as pd
df=pd.read_csv('myfile.csv', sep=',',header=None)
df.values
array([[ 1. ,  2. ,  3. ],
       [ 4. ,  5.5,  6. ]])"
2977,load csv data,False,False,24,"1.0, 2, 3
4, 5.5, 6

import numpy as np
np.genfromtxt('myfile.csv',delimiter=',')"
2978,load csv data,False,False,22,"array([[ 1. ,  2. ,  3. ],
       [ 4. ,  5.5,  6. ]])"
2979,load csv data,False,False,12,"np.genfromtxt('myfile.csv',delimiter=',',dtype=None)"
2980,load csv data,False,False,53,"array([(1.0, 2.0, 3), (4.0, 5.5, 6)], 
      dtype=[('f0', '<f8'), ('f1', '<f8'), ('f2', '<i4')])"
2981,load csv data,False,False,15,"spark.read.csv(
    ""some_input_file.csv"", header=True, mode=""DROPMALFORMED"", schema=schema
)"
3080,How to generate random letter,False,True,25,""""""""""""".join(str(random.randint(0, 9)) for _ in range(12))"
3081,How to generate random letter,False,True,36,""""""""""""".join(''.join(str(random.randint(0, 9)) for _ in range(12)) for _ in
    range(12))"
3082,How to generate random letter,True,True,20,""""""""""""".join(choice(ascii_uppercase) for i in range(12))"
3083,How to generate random letter,False,True,20,""""""""""""".join(str(i) for i in range(12))"
3084,How to generate random letter,False,True,11,"random.sample(range(0, 7), 6)"
3085,How to generate random letter,False,True,20,""""""""""""".join(str(ord(a)) for a in letter)"
3086,How to generate random letter,False,True,11,"random.sample(range(1, 7), 6)"
3087,How to generate random letter,False,False,16,''.join(random.choice(string.ascii_uppercase + string.digits) for _ in range(N))
3088,How to generate random letter,False,False,11,"''.join(random.choices(string.ascii_uppercase + string.digits, k=N))"
3089,How to generate random letter,False,False,19,''.join(random.SystemRandom().choice(string.ascii_uppercase + string.digits) for _ in range(N))
3090,How to generate random letter,False,False,61,">>> import string
>>> import random
>>> def id_generator(size=6, chars=string.ascii_uppercase + string.digits):
...    return ''.join(random.choice(chars) for _ in range(size))
...
>>> id_generator()
'G5G74W'
>>> id_generator(3, ""6793YUIO"")
'Y3U'"
3091,How to generate random letter,False,False,18,">>> string.ascii_uppercase
'ABCDEFGHIJKLMNOPQRSTUVWXYZ'
>>> string.digits
'0123456789'
>>> string.ascii_uppercase + string.digits
'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'"
3092,How to generate random letter,False,False,62,">>> range(4) # range create a list of 'n' numbers
[0, 1, 2, 3]
>>> ['elem' for _ in range(4)] # we use range to create 4 times 'elem'
['elem', 'elem', 'elem', 'elem']"
3093,How to generate random letter,False,False,33,">>> random.choice(""abcde"")
'a'
>>> random.choice(""abcde"")
'd'
>>> random.choice(""abcde"")
'b'"
3094,How to generate random int in range between 1 and 20,True,True,9,"print(random.randint(0, 9))"
3095,How to generate random int in range between 1 and 20,False,True,9,"print(random.randint(0, 1))"
3096,How to generate random int in range between 1 and 20,False,True,9,"print(random.randint(0, 7))"
3097,How to generate random int in range between 1 and 20,False,True,9,"print(random.randint(1, 9))"
3098,How to generate random int in range between 1 and 20,False,True,9,"int(random.randint(0, 9))"
3099,How to generate random int in range between 1 and 20,False,True,18,"print([random.randint(0, 9) for _ in range(100)])"
3100,How to generate random int in range between 1 and 20,False,True,6,"random.randint(0, 9)"
3101,How to generate random int in range between 1 and 20,False,False,26,">>> import random
>>> random.sample(range(1, 100), 3)
[77, 52, 45]"
3102,How to generate random int in range between 1 and 20,False,False,38,">>> try:
...   random.sample(range(1, 2), 3)
... except ValueError:
...   print('Sample size exceeded population size.')
... 
Sample size exceeded population size"
3103,How to generate random int in range between 1 and 20,False,False,11,"import random
random.sample(range(100), 10)"
3104,How to generate random int in range between 1 and 20,False,False,21,"all_lines = f1.readlines()
for i in range(50):
    lines = random.sample(all_lines, 40)"
3105,How to generate random int in range between 1 and 20,False,False,21,"Random number:    1  2  3  4  5  6  7  8
Result:           1  2  3  4  7  8  9 10"
3106,How to generate random int in range between 1 and 20,False,False,23,"import random
numbers = range(a,b) + range(c,d)
r = random.choice(numbers)"
3107,How to generate random int in range between 1 and 20,False,False,31,"def random_dates(start, end, n=10):

    start_u = start.value//10**9
    end_u = end.value//10**9

    return pd.to_datetime(np.random.randint(start_u, end_u, n), unit='s')"
3122,get current path,False,True,4,os.path.abspath(sys.executable)
3123,get current path,False,True,4,os.path.abspath(os.__file__)
3124,get current path,False,True,7,os.path.dirname(os.path.abspath(__file__))
3125,get current path,True,True,4,os.path.abspath(os.path)
3126,get current path,False,True,4,os.path.exists(os.__file__)
3127,get current path,False,True,4,os.path.dirname(os.__file__)
3128,get current path,False,True,1,os.path.abspath
3129,get current path,False,False,11,"import os 
dir_path = os.path.dirname(os.path.realpath(__file__))"
3130,get current path,False,False,7,"import os
cwd = os.getcwd()"
3131,get current path,False,False,9,"import pathlib
pathlib.Path(__file__).parent.absolute()"
3132,get current path,False,False,8,"import pathlib
pathlib.Path().absolute()"
3133,get current path,False,False,9,"import os
os.path.dirname(os.path.abspath(__file__))"
3134,get current path,False,False,8,"import os
os.path.abspath(os.getcwd())"
3135,get current path,False,False,122,"import os

print(""Path at terminal when executing this file"")
print(os.getcwd() + ""\n"")

print(""This file path, relative to os.getcwd()"")
print(__file__ + ""\n"")

print(""This file full path (following symlinks)"")
full_path = os.path.realpath(__file__)
print(full_path + ""\n"")

print(""This file directory and name"")
path, filename = os.path.split(full_path)
print(path + ' --> ' + filename + ""\n"")

print(""This file directory only"")
print(os.path.dirname(full_path))"
3346,get date and time one week from now,False,True,18,"datetime.datetime.strptime('January 11, 2010', '%B %d, %Y')"
3347,get date and time one week from now,False,True,10,"datetime.datetime.combine(datetime.date.today(), datetime.now())"
3348,get date and time one week from now,False,True,16,"datetime.datetime.combine(datetime.datetime.now(), '%B %d, %Y')"
3349,get date and time one week from now,True,True,11,"datetime.datetime.combine(datetime.date.today(), datetime.timedelta(hours=3))"
3350,get date and time one week from now,False,True,6,datetime.datetime.combine(datetime.datetime.now())
3351,get date and time one week from now,False,True,10,datetime.datetime.now().date.strftime('%a')
3352,get date and time one week from now,False,True,10,datetime.datetime.now().year.strftime('%a')
3353,get date and time one week from now,False,False,38,">>> import datetime
>>> datetime.datetime.now()
datetime.datetime(2009, 1, 6, 15, 8, 24, 78915)

>>> print(datetime.datetime.now())
2009-01-06 15:08:24.789150"
3354,get date and time one week from now,False,False,32,">>> datetime.datetime.now().time()
datetime.time(15, 8, 24, 78915)

>>> print(datetime.datetime.now().time())
15:08:24.789150"
3355,get date and time one week from now,False,False,7,>>> from datetime import datetime
3356,get date and time one week from now,False,False,16,"from datetime import datetime, timedelta

d = datetime.today() - timedelta(days=days_to_subtract)"
3357,get date and time one week from now,False,False,38,">>> from time import gmtime, strftime
>>> strftime(""%Y-%m-%d %H:%M:%S"", gmtime())
'2009-01-05 22:14:39'"
3358,get date and time one week from now,False,False,37,">>> import datetime
>>> datetime.datetime.today()
datetime.datetime(2012, 3, 23, 23, 24, 55, 173504)
>>> datetime.datetime.today().weekday()
4"
3359,get date and time one week from now,False,False,20,"from datetime import date
from datetime import datetime

dt = datetime.combine(date.today(), datetime.min.time())"
3360,get time and date one week from now,True,True,11,"datetime.datetime.combine(datetime.date.today(), datetime.timedelta(hours=3))"
3361,get time and date one week from now,False,True,18,"datetime.datetime.strptime('January 11, 2010', '%B %d, %Y')"
3362,get time and date one week from now,False,True,15,"datetime.datetime.combine(datetime.date.today(), '%B A"")]')"
3363,get time and date one week from now,False,True,10,"datetime.datetime.combine(datetime.date.today(), datetime.now())"
3364,get time and date one week from now,False,True,11,"datetime.datetime.combine(datetime.date.today(), '%B')"
3365,get time and date one week from now,False,True,16,"datetime.datetime.combine(datetime.datetime.now(), '%B %d, %Y')"
3366,get time and date one week from now,False,True,12,"datetime.datetime.combine(datetime.date.today(), '%B id_vars')"
3367,get time and date one week from now,False,False,38,">>> import datetime
>>> datetime.datetime.now()
datetime.datetime(2009, 1, 6, 15, 8, 24, 78915)

>>> print(datetime.datetime.now())
2009-01-06 15:08:24.789150"
3368,get time and date one week from now,False,False,32,">>> datetime.datetime.now().time()
datetime.time(15, 8, 24, 78915)

>>> print(datetime.datetime.now().time())
15:08:24.789150"
3369,get time and date one week from now,False,False,7,>>> from datetime import datetime
3370,get time and date one week from now,False,False,38,">>> from time import gmtime, strftime
>>> strftime(""%Y-%m-%d %H:%M:%S"", gmtime())
'2009-01-05 22:14:39'"
3371,get time and date one week from now,False,False,26,"from datetime import datetime
datetime.now().strftime('%Y-%m-%d %H:%M:%S')"
3372,get time and date one week from now,False,False,19,">>> from datetime import datetime
>>> str(datetime.now())
'2011-05-03 17:45:35.177000'"
3373,get time and date one week from now,False,False,23,">>> import datetime
>>> datetime.date(2010, 6, 16).isocalendar()[1]
24"
3374,trim the heading and trailing whitespaces and blank lines for all text files,True,True,7,"re.split('\n\\s*\n', string)"
3375,trim the heading and trailing whitespaces and blank lines for all text files,False,True,7,"re.split('\n\\s*\n', text)"
3376,trim the heading and trailing whitespaces and blank lines for all text files,False,True,23,"return ' '.join(x.strip() for x in re.findall(""[A-Za-z']+"", string))"
3377,trim the heading and trailing whitespaces and blank lines for all text files,False,True,10,"re.split('Please enter something: ', l)"
3378,trim the heading and trailing whitespaces and blank lines for all text files,False,True,8,"re.split('\\s+', '10')"
3379,trim the heading and trailing whitespaces and blank lines for all text files,False,True,7,"re.split('\\s+', text)"
3380,trim the heading and trailing whitespaces and blank lines for all text files,False,True,10,"re.split('Please enter something: ', my_string)"
3381,trim the heading and trailing whitespaces and blank lines for all text files,False,False,10,">>> 'test string\n'.rstrip()
'test string'"
3382,trim the heading and trailing whitespaces and blank lines for all text files,False,False,13,">>> 'test string \n \r\n\n\r \n\n'.rstrip()
'test string'"
3383,trim the heading and trailing whitespaces and blank lines for all text files,False,False,17,">>> 'test string \n \r\n\n\r \n\n'.rstrip('\n')
'test string \n \r\n\n\r '"
3384,trim the heading and trailing whitespaces and blank lines for all text files,False,False,44,">>> s = ""   \n\r\n  \n  abc   def \n\r\n  \n  ""
>>> s.strip()
'abc   def'
>>> s.lstrip()
'abc   def \n\r\n  \n  '
>>> s.rstrip()
'   \n\r\n  \n  abc   def'"
3385,trim the heading and trailing whitespaces and blank lines for all text files,False,False,48,">>> ' Hello '.strip()
'Hello'
>>> ' Hello'.strip()
'Hello'
>>> 'Bob has a cat'.strip()
'Bob has a cat'
>>> '   Hello   '.strip()  # ALL consecutive spaces at both ends removed
'Hello'"
3386,trim the heading and trailing whitespaces and blank lines for all text files,False,False,48,"def strip_one_space(s):
    if s.endswith("" ""): s = s[:-1]
    if s.startswith("" ""): s = s[1:]
    return s

>>> strip_one_space(""   Hello "")
'  Hello'"
3387,trim the heading and trailing whitespaces and blank lines for all text files,False,False,13,">>> ""  Hello\n"".strip("" "")
'Hello\n'"
3388,generate random number,False,True,7,random.choice(range(10))
3389,generate random number,False,True,7,random.choice(range(9))
3390,generate random number,True,True,6,"random.randint(0, 9)"
3391,generate random number,True,True,6,"random.randint(0, 7)"
3392,generate random number,False,True,10,int(random.choice(range(100)))
3393,generate random number,False,True,7,random.choice(range(100))
3394,generate random number,False,True,7,random.choice(range(3))
3395,generate random number,False,False,11,"from random import randrange
print(randrange(10))"
3396,generate random number,False,False,9,"import random
print(random.randint(0,9))"
3397,generate random number,False,False,6,"random.randint(a, b)"
3398,generate random number,False,False,26,">>> import random
>>> random.sample(range(1, 100), 3)
[77, 52, 45]"
3399,generate random number,False,False,38,">>> try:
...   random.sample(range(1, 2), 3)
... except ValueError:
...   print('Sample size exceeded population size.')
... 
Sample size exceeded population size"
3400,generate random number,False,False,8,"import random
random.uniform(0, 1)"
3401,generate random number,False,False,36,"from random import randrange, uniform

# randrange gives you an integral value
irand = randrange(0, 10)

# uniform gives you a floating-point value
frand = uniform(0, 10)"
3402,sort a list,True,True,12,"sorted(list, key=lambda x: x[1])"
3403,sort a list,False,True,12,"sorted(l, key=lambda x: x[1])"
3404,sort a list,False,True,12,"sorted(var_1, key=lambda x: x[1])"
3405,sort a list,False,True,14,"sorted(l, key=lambda x: sorted(x), reverse=True)"
3406,sort a list,False,True,6,"sorted(l, **l)"
3407,sort a list,False,True,6,"sorted(list, **list)"
3408,sort a list,False,True,6,"sorted(list, **var_2)"
3409,sort a list,False,False,15,"newlist = sorted(list_to_be_sorted, key=lambda k: k['name'])"
3410,sort a list,False,False,16,"from operator import itemgetter
newlist = sorted(list_to_be_sorted, key=itemgetter('name'))"
3411,sort a list,False,False,14,"newlist = sorted(l, key=itemgetter('name'), reverse=True)"
3412,sort a list,False,False,14,"sorted_by_second = sorted(data, key=lambda tup: tup[1])"
3413,sort a list,False,False,14,data.sort(key=lambda tup: tup[1])  # sorts in place
3414,sort a list,False,False,23,"s = sorted(s, key = lambda x: (x[1], x[2]))"
3415,sort a list,False,False,17,"import operator
s = sorted(s, key = operator.itemgetter(1, 2))"
3444,"change directory to ""data""",False,True,7,os.path.dirname(os.path.realpath(__file__))
3445,"change directory to ""data""",True,True,5,os.chdir('data')
3446,"change directory to ""data""",False,True,7,os.chdir(os.path.dirname(__file__))
3447,"change directory to ""data""",False,True,8,os.path.dirname(os.path.normpath('data'))
3448,"change directory to ""data""",False,True,7,os.path.dirname(os.path.abspath(__file__))
3449,"change directory to ""data""",False,True,7,os.path.dirname(os.path.normpath(data))
3450,"change directory to ""data""",False,True,7,os.path.dirname(os.path.abspath(data))
3451,"change directory to ""data""",False,False,4,os.chdir(path)
3452,"change directory to ""data""",False,False,6,"import os

os.chdir(path)"
3453,"change directory to ""data""",False,False,64,"import os

class cd:
    """"""Context manager for changing the current working directory""""""
    def __init__(self, newPath):
        self.newPath = os.path.expanduser(newPath)

    def __enter__(self):
        self.savedPath = os.getcwd()
        os.chdir(self.newPath)

    def __exit__(self, etype, value, traceback):
        os.chdir(self.savedPath)"
3454,"change directory to ""data""",False,False,50,"import subprocess # just to call an arbitrary command e.g. 'ls'

# enter the directory like this:
with cd(""~/Library""):
   # we are in ~/Library
   subprocess.call(""ls"")

# outside the context manager we are back wherever we started."
3455,"change directory to ""data""",False,False,29,">>> import os
>>> os.getcwd()
'/home/user'
>>> os.chdir(""/tmp/"")
>>> os.getcwd()
'/tmp'"
3456,"change directory to ""data""",False,False,5,export PYTHONPATH=/path/to/my/library:$PYTHONPATH
3457,"change directory to ""data""",False,False,9,set PYTHONPATH=%PYTHONPATH%;C:\My_python_lib
3500,check if directory exists,True,True,3,os.path.exists()
3501,check if directory exists,False,True,3,os.directory.exists()
3502,check if directory exists,False,True,6,os.path.exists('o')
3503,check if directory exists,False,True,6,print(os.path.defDEF())
3504,check if directory exists,False,True,5,os.path.exists('os')
3505,check if directory exists,False,True,5,os.path.exists('hello')
3506,check if directory exists,False,True,8,os.path.exists('<unk>')
3507,check if directory exists,False,False,16,"from pathlib import Path
Path(""/my/directory"").mkdir(parents=True, exist_ok=True)"
3508,check if directory exists,False,False,13,"import os
if not os.path.exists(directory):
    os.makedirs(directory)"
3509,check if directory exists,False,False,22,"import os, errno

try:
    os.makedirs(directory)
except OSError as e:
    if e.errno != errno.EEXIST:
        raise"
3510,check if directory exists,False,False,16,"try:
    os.makedirs(""path/to/directory"")
except FileExistsError:
    # directory already exists
    pass"
3511,check if directory exists,False,False,15,"os.makedirs(""path/to/directory"", exist_ok=True)  # succeeds even if directory exists."
3512,check if directory exists,False,False,6,"import os.path
os.path.isfile(fname)"
3513,check if directory exists,False,False,20,"from pathlib import Path

my_file = Path(""/path/to/file"")
if my_file.is_file():
    # file exists"
3556,pandas dataframe groupby column,True,True,15,df.groupby('User').agg({'A': x.mean})
3557,pandas dataframe groupby column,False,True,19,df.groupby('User').agg(lambda x: x.groupby('User').cumcount())
3558,pandas dataframe groupby column,False,True,31,"df.groupby('User').agg(lambda x: x.groupby('User').agg({'two': pd.Series,
    'y': pd.Series}))"
3559,pandas dataframe groupby column,False,True,10,"df.groupby('User', as_index=False).nth()"
3560,pandas dataframe groupby column,False,True,33,"df.groupby('User').agg(lambda x: x.groupby('User').agg({'x': x.mean, 'y':
    'mean'}))"
3561,pandas dataframe groupby column,False,True,20,"df.groupby('User').agg({'size': pd.Series, 'v': pd.Series})"
3562,pandas dataframe groupby column,False,True,19,"df.groupby('User').agg({'size': Series.index, 'val': Series.index})"
3563,pandas dataframe groupby column,False,False,44,"df.groupby(['Fruit','Name']).sum()

Out[31]: 
               Number
Fruit   Name         
Apples  Bob        16
        Mike        9
        Steve      10
Grapes  Bob        35
        Tom        87
        Tony       15
Oranges Bob        67
        Mike       57
        Tom        15
        Tony        1"
3564,pandas dataframe groupby column,False,False,19,"df.groupby(['Name', 'Fruit'])['Number'].agg('sum')"
3565,pandas dataframe groupby column,False,False,50,"In [11]: df.groupby(['col5', 'col2']).size()
Out[11]:
col5  col2
1     A       1
      D       3
2     B       2
3     A       3
      C       1
4     B       1
5     B       2
6     B       1
dtype: int64"
3566,pandas dataframe groupby column,False,False,42,"In [12]: df.groupby(['col5', 'col2']).size().groupby(level=1).max()
Out[12]:
col2
A       3
B       2
C       1
D       3
dtype: int64"
3567,pandas dataframe groupby column,False,False,56,"In [11]: df.fillna(-1)
Out[11]: 
   a   b
0  1   4
1  2  -1
2  3   6

In [12]: df.fillna(-1).groupby('b').sum()
Out[12]: 
    a
b    
-1  2
4   1
6   3"
3568,pandas dataframe groupby column,False,False,49,"In [56]: df.groupby(['col5','col2']).size().reset_index().groupby('col2')[[0]].max()
Out[56]: 
      0
col2   
A     3
B     2
C     1
D     3"
3569,pandas dataframe groupby column,False,False,53,"df.groupby(['Fruit','Name'])['Number'].sum().reset_index()

Fruit   Name       Number
Apples  Bob        16
Apples  Mike        9
Apples  Steve      10
Grapes  Bob        35
Grapes  Tom        87
Grapes  Tony       15
Oranges Bob        67
Oranges Mike       57
Oranges Tom        15
Oranges Tony        1"
3682,how to draw scatter plot for data in csv file,True,True,9,"plt.scatter(x, y, color='str_3')"
3683,how to draw scatter plot for data in csv file,False,True,13,"plt.scatter(x, y, yerr=err, ecolor='y')"
3684,how to draw scatter plot for data in csv file,False,True,9,"plt.scatter(x, y, color='utf8')"
3685,how to draw scatter plot for data in csv file,False,True,9,"plt.scatter(x, y, ecolor='hex')"
3686,how to draw scatter plot for data in csv file,False,True,11,"plt.scatter(x, y, y='y')"
3687,how to draw scatter plot for data in csv file,False,True,9,"plt.scatter(x, y, ecolor='scatter')"
3688,how to draw scatter plot for data in csv file,False,True,14,"plt.scatter(x, y, color='green', marker='o')"
3689,how to draw scatter plot for data in csv file,False,False,38,"import numpy as np
data = np.genfromtxt('e:\dir1\datafile.csv', delimiter=',', skip_header=10,
                     skip_footer=10, names=['x', 'y', 'z'])"
3690,how to draw scatter plot for data in csv file,False,False,25,"ax1.plot(data['x'], data['y'], color='r', label='the data')"
3691,how to draw scatter plot for data in csv file,False,False,13,"x,y
1,2
2,4
3,6
4,7
5,11
6,12
7,13
8,20
9,17
10,19"
3692,how to draw scatter plot for data in csv file,True,False,60,"import pandas as pd
import matplotlib.pyplot as plt
df  = pd.read_csv(""data.csv"")
df.plot()  # plots all columns against index
df.plot(kind='scatter',x='x',y='y') # scatter plot
df.plot(kind='density')  # estimate density function
# df.plot(kind='hist')  # histogram"
3693,how to draw scatter plot for data in csv file,False,False,8,"df  = pd.read_csv(""data.csv"")"
3694,how to draw scatter plot for data in csv file,False,False,127,"import pandas as pd
from datetime import datetime
import csv
import matplotlib.pyplot as plt
import matplotlib.dates as mdates
headers = ['Sensor Value','Date','Time']
df = pd.read_csv('C:/Users\Lala Rushan\Downloads\DataLog.CSV',names=headers)
print (df)

df['Date'] = df['Date'].map(lambda x: datetime.strptime(str(x), '%Y/%m/%d %H:%M:%S.%f'))
x = df['Date']
y = df['Sensor Value']

# plot
plt.plot(x,y)
# beautify the x-labels
plt.gcf().autofmt_xdate()

plt.show()"
3695,how to draw scatter plot for data in csv file,False,False,33,"def getColumn(filename, column):
    results = csv.reader(open(filename), delimiter=""\t"")
    return [result[column] for result in results]"
3696,how to draw scatter plot for data in csv file,True,True,9,"plt.scatter(x, y, color='str_3')"
3697,how to draw scatter plot for data in csv file,False,True,13,"plt.scatter(x, y, yerr=err, ecolor='y')"
3698,how to draw scatter plot for data in csv file,False,True,9,"plt.scatter(x, y, color='utf8')"
3699,how to draw scatter plot for data in csv file,False,True,9,"plt.scatter(x, y, ecolor='hex')"
3700,how to draw scatter plot for data in csv file,False,True,11,"plt.scatter(x, y, y='y')"
3701,how to draw scatter plot for data in csv file,False,True,9,"plt.scatter(x, y, ecolor='scatter')"
3702,how to draw scatter plot for data in csv file,False,True,14,"plt.scatter(x, y, color='green', marker='o')"
3703,how to draw scatter plot for data in csv file,False,False,38,"import numpy as np
data = np.genfromtxt('e:\dir1\datafile.csv', delimiter=',', skip_header=10,
                     skip_footer=10, names=['x', 'y', 'z'])"
3704,how to draw scatter plot for data in csv file,False,False,25,"ax1.plot(data['x'], data['y'], color='r', label='the data')"
3705,how to draw scatter plot for data in csv file,False,False,13,"x,y
1,2
2,4
3,6
4,7
5,11
6,12
7,13
8,20
9,17
10,19"
3706,how to draw scatter plot for data in csv file,True,False,60,"import pandas as pd
import matplotlib.pyplot as plt
df  = pd.read_csv(""data.csv"")
df.plot()  # plots all columns against index
df.plot(kind='scatter',x='x',y='y') # scatter plot
df.plot(kind='density')  # estimate density function
# df.plot(kind='hist')  # histogram"
3707,how to draw scatter plot for data in csv file,False,False,8,"df  = pd.read_csv(""data.csv"")"
3708,how to draw scatter plot for data in csv file,False,False,127,"import pandas as pd
from datetime import datetime
import csv
import matplotlib.pyplot as plt
import matplotlib.dates as mdates
headers = ['Sensor Value','Date','Time']
df = pd.read_csv('C:/Users\Lala Rushan\Downloads\DataLog.CSV',names=headers)
print (df)

df['Date'] = df['Date'].map(lambda x: datetime.strptime(str(x), '%Y/%m/%d %H:%M:%S.%f'))
x = df['Date']
y = df['Sensor Value']

# plot
plt.plot(x,y)
# beautify the x-labels
plt.gcf().autofmt_xdate()

plt.show()"
3709,how to draw scatter plot for data in csv file,False,False,33,"def getColumn(filename, column):
    results = csv.reader(open(filename), delimiter=""\t"")
    return [result[column] for result in results]"
3780,generate random int,True,True,6,"random.randint(0, 7)"
3781,generate random int,False,True,11,"random.choice(range(0, 7), repeat=4)"
3782,generate random int,False,True,11,"random.choice(range(0, 7), access=random.randrange)"
3783,generate random int,False,True,9,"random.choice(range(0, 7))"
3784,generate random int,False,True,6,"random.randint(0, 9)"
3785,generate random int,False,True,6,"random.randint(0, 10)"
3786,generate random int,False,True,7,random.choice(range(10))
3787,generate random int,False,False,11,"from random import randrange
print(randrange(10))"
3788,generate random int,False,False,9,"import random
print(random.randint(0,9))"
3789,generate random int,False,False,6,"random.randint(a, b)"
3790,generate random int,False,False,26,">>> import random
>>> random.sample(range(1, 100), 3)
[77, 52, 45]"
3791,generate random int,False,False,38,">>> try:
...   random.sample(range(1, 2), 3)
... except ValueError:
...   print('Sample size exceeded population size.')
... 
Sample size exceeded population size"
3792,generate random int,False,False,25,">>> import string
>>> string.ascii_letters
'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'
>>> import random
>>> random.choice(string.ascii_letters)
'j'"
3793,generate random int,False,False,22,"df = pd.DataFrame(np.random.randint(0,100,size=(100, 4)), columns=list('ABCD'))"
3794,dictionary of characters and int,False,True,5,int[-2:]
3795,dictionary of characters and int,False,True,18,"dict((k, '0') for k, v in d.items())"
3796,dictionary of characters and int,False,True,5,int[::-1]
3797,dictionary of characters and int,False,True,14,"dict((k, ':') for k in dictionary)"
3798,dictionary of characters and int,False,True,4,int[0:2]
3799,dictionary of characters and int,True,True,15,"dict((k, 'b.') for k in of)"
3800,dictionary of characters and int,False,True,15,"dict((k, 'b.') for k in dictionary)"
3801,dictionary of characters and int,False,False,37,">>> ord('a')
97
>>> chr(97)
'a'
>>> chr(ord('a') + 3)
'd'
>>>"
3802,dictionary of characters and int,False,False,19,">>> unichr(97)
u'a'
>>> unichr(1234)
u'\u04d2'"
3803,dictionary of characters and int,False,False,51,">>> from collections import Counter
>>> Counter(['apple','red','apple','red','red','pear'])
Counter({'red': 3, 'apple': 2, 'pear': 1})"
3804,dictionary of characters and int,False,False,23,"counts = dict()
for i in items:
  counts[i] = counts.get(i, 0) + 1"
3805,dictionary of characters and int,False,False,11,">>> ord(u'あ')
12354"
3806,dictionary of characters and int,False,False,22,print [ord(char) - 96 for char in raw_input('Write Text: ').lower()]
3807,dictionary of characters and int,False,False,37,"input = raw_input('Write Text: ')
input = input.lower()
output = []
for character in input:
    number = ord(character) - 96
    output.append(number)
print output"
3822,open csv,False,True,14,"df = pd.read_csv('grep', quotechar=',', header=None)"
3823,open csv,False,True,17,"df = pd.read_csv('<unk>', quotechar=',', header=None)"
3824,open csv,False,True,19,"df = pd.read_csv('<unk>', quotechar=',', skiprows=1, header=None)"
3825,open csv,False,True,11,"df.to_csv('to_csv', index=False, sep=' ')"
3826,open csv,True,True,12,"df = pd.read_csv('<unk>', header=None)"
3827,open csv,False,True,18,"np.loadtxt(open('open', 'rb'), delimiter=',', skiprows=1)"
3828,open csv,False,True,15,"np.genfromtxt('<unk>', delimiter=',', header=None)"
3829,open csv,False,False,30,"import csv

with open('file.csv', newline='') as f:
    reader = csv.reader(f)
    data = list(reader)

print(data)"
3830,open csv,False,False,37,"[['This is the first line', 'Line1'], ['This is the second line', 'Line2'], ['This is the third line', 'Line3']]"
3831,open csv,False,False,36,"import csv

with open('file.csv', newline='') as f:
    reader = csv.reader(f)
    data = [tuple(row) for row in reader]

print(data)"
3832,open csv,False,False,37,"[('This is the first line', 'Line1'), ('This is the second line', 'Line2'), ('This is the third line', 'Line3')]"
3833,open csv,False,False,68,"import csv
with open('file.csv', 'rb') as f:
    reader = csv.reader(f)
    your_list = list(reader)

print your_list
# [['This is the first line', 'Line1'],
#  ['This is the second line', 'Line2'],
#  ['This is the third line', 'Line3']]"
3834,open csv,False,False,73,"import csv

def getstuff(filename, criterion):
    with open(filename, ""rb"") as csvfile:
        datareader = csv.reader(csvfile)
        yield next(datareader)  # yield the header row
        count = 0
        for row in datareader:
            if row[3] == criterion:
                yield row
                count += 1
            elif count:
                # done when having read a consecutive series of rows 
                return"
3835,open csv,False,False,121,"import csv
from itertools import dropwhile, takewhile

def getstuff(filename, criterion):
    with open(filename, ""rb"") as csvfile:
        datareader = csv.reader(csvfile)
        yield next(datareader)  # yield the header row
        # first row, plus any subsequent rows that match, then stop
        # reading altogether
        # Python 2: use `for row in takewhile(...): yield row` instead
        # instead of `yield from takewhile(...)`.
        yield from takewhile(
            lambda r: r[3] == criterion,
            dropwhile(lambda r: r[3] != criterion, datareader))
        return"
3836,delete row in csv,False,True,21,"np.delete(row, list(range(0, len(row) + 1)), axis=1)"
3837,delete row in csv,True,True,23,"np.delete(row, list(range(0, len(row) + 1, 2)), axis=1)"
3838,delete row in csv,False,True,12,"df.drop('<unk>', axis=1, inplace=True)"
3839,delete row in csv,False,True,19,"df = pd.read_csv('my.csv', header=['*', 'cols'], how='call')"
3840,delete row in csv,False,True,12,"tr.drop('<unk>', axis=1, inplace=True)"
3841,delete row in csv,False,True,10,"pd.concat([row, row], axis=1)"
3842,delete row in csv,False,True,19,"df = pd.read_csv('my.csv', header=['farm', 'fruit'], how='call')"
3843,delete row in csv,False,False,10,"row[2]!=""0"":"
3844,delete row in csv,False,False,54,"import csv
with open('first.csv', 'rb') as inp, open('first_edit.csv', 'wb') as out:
    writer = csv.writer(out)
    for row in csv.reader(inp):
        if row[2] != ""0"":
            writer.writerow(row)"
3845,delete row in csv,False,False,87,"$ cat test.py 
import csv
with open('first.csv', 'rb') as inp, open('first_edit.csv', 'wb') as out:
    writer = csv.writer(out)
    for row in csv.reader(inp):
        if row[2] != "" 0"":
            writer.writerow(row)
$ cat first.csv 
6.5, 5.4, 0, 320
6.5, 5.4, 1, 320
$ python test.py 
$ cat first_edit.csv 
6.5, 5.4, 1, 320"
3846,delete row in csv,False,False,44,"import csv
...

with open(in_fnam) as in_file:
    with open(out_fnam, 'w') as out_file:
        writer = csv.writer(out_file)
        for row in csv.reader(in_file):
            if row:
                writer.writerow(row)"
3847,delete row in csv,False,False,6,if any(row):
3848,delete row in csv,False,False,12,if any(field.strip() for field in row):
3849,delete row in csv,False,False,25,"h1,h2,h3
a,b,c
d,e,f
g,h,i
j,k,l"
3850,delete row in csv,False,True,21,"np.delete(row, list(range(0, len(row) + 1)), axis=1)"
3851,delete row in csv,True,True,23,"np.delete(row, list(range(0, len(row) + 1, 2)), axis=1)"
3852,delete row in csv,False,True,12,"df.drop('<unk>', axis=1, inplace=True)"
3853,delete row in csv,False,True,19,"df = pd.read_csv('my.csv', header=['*', 'cols'], how='call')"
3854,delete row in csv,False,True,12,"tr.drop('<unk>', axis=1, inplace=True)"
3855,delete row in csv,False,True,10,"pd.concat([row, row], axis=1)"
3856,delete row in csv,False,True,19,"df = pd.read_csv('my.csv', header=['farm', 'fruit'], how='call')"
3857,delete row in csv,False,False,38,"from more_itertools import unique_everseen
with open('1.csv','r') as f, open('2.csv','w') as out_file:
    out_file.writelines(unique_everseen(f))"
3858,delete row in csv,False,False,64,"with open('1.csv','r') as in_file, open('2.csv','w') as out_file:
    seen = set() # set for fast O(1) amortized lookup
    for line in in_file:
        if line in seen: continue # skip duplicate

        seen.add(line)
        out_file.write(line)"
3859,delete row in csv,False,False,54,"import fileinput
seen = set() # set for fast O(1) amortized lookup
for line in fileinput.FileInput('1.csv', inplace=1):
    if line in seen: continue # skip duplicate

    seen.add(line)
    print line, # standard output is now redirected to the file"
3860,delete row in csv,False,False,69,"import csv
with open(""source"",""rb"") as source:
    rdr= csv.reader( source )
    with open(""result"",""wb"") as result:
        wtr= csv.writer( result )
        for r in rdr:
            wtr.writerow( (r[0], r[1], r[3], r[4]) )"
3861,delete row in csv,False,False,32,"in_iter= ( (r[0], r[1], r[3], r[4]) for r in rdr )
        wtr.writerows( in_iter )"
3862,delete row in csv,False,False,9,"del r[2]
            wtr.writerow( r )"
3863,delete row in csv,True,False,39,"import pandas as pd
f=pd.read_csv(""test.csv"")
keep_col = ['day','month','lat','long']
new_f = f[keep_col]
new_f.to_csv(""newFile.csv"", index=False)"
3878,rename files,False,True,6,"os.rename(dirnames, filenames)"
3879,rename files,False,True,11,"os.rename(filename, os.path.join(filenames, filenames))"
3880,rename files,False,True,6,"os.rename(f, filenames)"
3881,rename files,True,True,6,"os.rename(filename, filenames)"
3882,rename files,False,True,6,"os.rename(filenames, filenames)"
3883,rename files,False,True,11,"os.rename(pid, os.path.join(filenames, filenames))"
3884,rename files,False,True,10,"os.rename(filename, os.path.expanduser('..'))"
3885,rename files,False,False,34,"import os
import shutil

os.rename(""path/to/current/file.foo"", ""path/to/new/destination/for/file.foo"")
shutil.move(""path/to/current/file.foo"", ""path/to/new/destination/for/file.foo"")
os.replace(""path/to/current/file.foo"", ""path/to/new/destination/for/file.foo"")"
3886,rename files,False,False,52,"$ ls
cheese_cheese_type.bar  cheese_cheese_type.foo
$ python
>>> import os
>>> for filename in os.listdir("".""):
...  if filename.startswith(""cheese_""):
...    os.rename(filename, filename[7:])
... 
>>> 
$ ls
cheese_type.bar  cheese_type.foo"
3887,rename files,True,False,12,"import os

os.rename('a.txt', 'b.kml')"
3888,rename files,False,False,35,"import os
[os.rename(f, f.replace('_', '-')) for f in os.listdir('.') if not f.startswith('.')]"
3889,rename files,False,False,53,"import glob, os

def rename(dir, pattern, titlePattern):
    for pathAndFilename in glob.iglob(os.path.join(dir, pattern)):
        title, ext = os.path.splitext(os.path.basename(pathAndFilename))
        os.rename(pathAndFilename, 
                  os.path.join(dir, titlePattern % title + ext))"
3890,rename files,False,False,19,"rename(r'c:\temp\xx', r'*.doc', r'new(%s)')"
3891,rename files,False,False,32,"import os
old_file = os.path.join(""directory"", ""a.txt"")
new_file = os.path.join(""directory"", ""b.kml"")
os.rename(old_file, new_file)"
3892,rename files,False,True,6,"os.rename(dirnames, filenames)"
3893,rename files,False,True,11,"os.rename(filename, os.path.join(filenames, filenames))"
3894,rename files,False,True,6,"os.rename(f, filenames)"
3895,rename files,True,True,6,"os.rename(filename, filenames)"
3896,rename files,False,True,6,"os.rename(filenames, filenames)"
3897,rename files,False,True,11,"os.rename(pid, os.path.join(filenames, filenames))"
3898,rename files,False,True,10,"os.rename(filename, os.path.expanduser('..'))"
3899,rename files,False,False,34,"import os
import shutil

os.rename(""path/to/current/file.foo"", ""path/to/new/destination/for/file.foo"")
shutil.move(""path/to/current/file.foo"", ""path/to/new/destination/for/file.foo"")
os.replace(""path/to/current/file.foo"", ""path/to/new/destination/for/file.foo"")"
3900,rename files,False,False,52,"$ ls
cheese_cheese_type.bar  cheese_cheese_type.foo
$ python
>>> import os
>>> for filename in os.listdir("".""):
...  if filename.startswith(""cheese_""):
...    os.rename(filename, filename[7:])
... 
>>> 
$ ls
cheese_type.bar  cheese_type.foo"
3901,rename files,True,False,12,"import os

os.rename('a.txt', 'b.kml')"
3902,rename files,False,False,35,"import os
[os.rename(f, f.replace('_', '-')) for f in os.listdir('.') if not f.startswith('.')]"
3903,rename files,False,False,53,"import glob, os

def rename(dir, pattern, titlePattern):
    for pathAndFilename in glob.iglob(os.path.join(dir, pattern)):
        title, ext = os.path.splitext(os.path.basename(pathAndFilename))
        os.rename(pathAndFilename, 
                  os.path.join(dir, titlePattern % title + ext))"
3904,rename files,False,False,19,"rename(r'c:\temp\xx', r'*.doc', r'new(%s)')"
3905,rename files,False,False,32,"import os
old_file = os.path.join(""directory"", ""a.txt"")
new_file = os.path.join(""directory"", ""b.kml"")
os.rename(old_file, new_file)"
3920,http reques get html,False,True,12,"requests.get(url, headers={'Authorization': ''})"
3921,http reques get html,False,True,12,"requests.get(page, headers={'Authorization': ''})"
3922,http reques get html,False,True,13,"requests.get(url, headers={'Authorization': ' '})"
3923,http reques get html,False,True,8,"conn.request('HEAD', '/')"
3924,http reques get html,False,True,10,"requests.get(url, headers={'Authorization'})"
3925,http reques get html,False,True,12,"requests.get(html, headers={'Authorization': ''})"
3926,http reques get html,True,True,12,"requests.get(html, headers={1}.__class__())"
3927,http reques get html,False,False,15,"import urllib.request
contents = urllib.request.urlopen(""http://example.com/foo/bar"").read()"
3928,http reques get html,False,False,15,"import urllib2
contents = urllib2.urlopen(""http://example.com/foo/bar"").read()"
3929,http reques get html,False,False,40,"import requests
import shutil

r = requests.get(settings.STATICMAP_URL.format(**data), stream=True)
if r.status_code == 200:
    with open(path, 'wb') as f:
        r.raw.decode_content = True
        shutil.copyfileobj(r.raw, f)"
3930,http reques get html,False,False,36,"r = requests.get(settings.STATICMAP_URL.format(**data), stream=True)
if r.status_code == 200:
    with open(path, 'wb') as f:
        for chunk in r:
            f.write(chunk)"
3931,http reques get html,False,False,39,"r = requests.get(settings.STATICMAP_URL.format(**data), stream=True)
if r.status_code == 200:
    with open(path, 'wb') as f:
        for chunk in r.iter_content(1024):
            f.write(chunk)"
3932,http reques get html,False,False,119,"import requests
import logging

# These two lines enable debugging at httplib level (requests->urllib3->http.client)
# You will see the REQUEST, including HEADERS and DATA, and RESPONSE with HEADERS but without DATA.
# The only thing missing will be the response.body which is not logged.
try:
    import http.client as http_client
except ImportError:
    # Python 2
    import httplib as http_client
http_client.HTTPConnection.debuglevel = 1

# You must initialize logging, otherwise you'll not see debug output.
logging.basicConfig()
logging.getLogger().setLevel(logging.DEBUG)
requests_log = logging.getLogger(""requests.packages.urllib3"")
requests_log.setLevel(logging.DEBUG)
requests_log.propagate = True

requests.get('https://httpbin.org/headers')"
3933,http reques get html,False,False,82,"$ python requests-logging.py 
INFO:requests.packages.urllib3.connectionpool:Starting new HTTPS connection (1): httpbin.org
send: 'GET /headers HTTP/1.1\r\nHost: httpbin.org\r\nAccept-Encoding: gzip, deflate, compress\r\nAccept: */*\r\nUser-Agent: python-requests/1.2.0 CPython/2.7.3 Linux/3.2.0-48-generic\r\n\r\n'
reply: 'HTTP/1.1 200 OK\r\n'
header: Content-Type: application/json
header: Date: Sat, 29 Jun 2013 11:19:34 GMT
header: Server: gunicorn/0.17.4
header: Content-Length: 226
header: Connection: keep-alive
DEBUG:requests.packages.urllib3.connectionpool:""GET /headers HTTP/1.1"" 200 226"
3934,save table beautifulsoup,False,True,22,"cursor.execute('INSERT INTO table (`column1`) VALUES (%s)', (text,))"
3935,save table beautifulsoup,False,True,22,"cursor.execute('INSERT INTO table (`column1`) VALUES (%s)', (score,))"
3936,save table beautifulsoup,False,True,21,"cursor.execute('INSERT INTO table (`column1`) VALUES (%s)', str())"
3937,save table beautifulsoup,True,True,8,"tr.findAll('td', style='tr')"
3938,save table beautifulsoup,False,True,8,"tr.findAll('td', style='font')"
3939,save table beautifulsoup,False,True,8,"tr.findAll('td', style='s')"
3940,save table beautifulsoup,False,True,7,"pandas.set_option('display.max_columns', 7)"
3941,save table beautifulsoup,False,False,75,"data = []
table = soup.find('table', attrs={'class':'lineItemsTable'})
table_body = table.find('tbody')

rows = table_body.find_all('tr')
for row in rows:
    cols = row.find_all('td')
    cols = [ele.text.strip() for ele in cols]
    data.append([ele for ele in cols if ele]) # Get rid of empty values"
3942,save table beautifulsoup,False,False,237,"[ [u'1359711259', u'SRF', u'08/05/2013', u'5310 4 AVE', u'K', u'19', u'125.00', u'$'], 
  [u'7086775850', u'PAS', u'12/14/2013', u'3908 6th Ave', u'K', u'40', u'125.00', u'$'], 
  [u'7355010165', u'OMT', u'12/14/2013', u'3908 6th Ave', u'K', u'40', u'145.00', u'$'], 
  [u'4002488755', u'OMT', u'02/12/2014', u'NB 1ST AVE @ E 23RD ST', u'5', u'115.00', u'$'], 
  [u'7913806837', u'OMT', u'03/03/2014', u'5015 4th Ave', u'K', u'46', u'115.00', u'$'], 
  [u'5080015366', u'OMT', u'03/10/2014', u'EB 65TH ST @ 16TH AV E', u'7', u'50.00', u'$'], 
  [u'7208770670', u'OMT', u'04/08/2014', u'333 15th St', u'K', u'70', u'65.00', u'$'], 
  [u'$0.00\n\n\nPayment Amount:']
]"
3943,save table beautifulsoup,False,False,21,"with open(""output1.html"", ""w"") as file:
    file.write(str(soup))"
3944,save table beautifulsoup,False,False,58,"for tr in soup.find_all('tr')[2:]:
    tds = tr.find_all('td')
    print ""Nome: %s, Cognome: %s, Email: %s"" % \
          (tds[0].text, tds[1].text, tds[2].text)"
3945,save table beautifulsoup,False,False,27,"Nome:  Massimo, Cognome:  Allegri, Email:  Allegri.Massimo@alitalia.it
Nome:  Alessandra, Cognome:  Anastasia, Email:  Anastasia.Alessandra@alitalia.it
..."
3946,save table beautifulsoup,False,False,73,"with open('output.txt', 'w') as f:
    for tr in soup.find_all('tr')[2:]:
        tds = tr.find_all('td')
        f.write(""Nome: %s, Cognome: %s, Email: %s\n"" % \
              (tds[0].text, tds[1].text, tds[2].text))"
3947,save table beautifulsoup,False,False,13,start = cols[1].find('a').string
3948,regex [],False,True,12,"re.sub('<unk>', '', text)"
3949,regex [],False,True,16,"re.sub('<unk>', '<unk>', text)"
3950,regex [],True,True,14,"re.sub('<unk>', '.', text)"
3951,regex [],False,True,13,"re.sub('<unk>', 'hello', text)"
3952,regex [],False,True,14,"re.findall('<unk>', '<unk>')"
3953,regex [],False,True,11,"re.findall('<unk>', 'bar')"
3954,regex [],False,True,13,"re.sub('<unk>', '42', text)"
3955,regex [],False,False,28,"import re

line = re.sub(
           r""(?i)^.*interfaceOpDataFile.*$"", 
           ""interfaceOpDataFile %s"" % fileIn, 
           line
       )"
3956,regex [],False,False,42,"import re

regex = re.compile(r""^.*interfaceOpDataFile.*$"", re.IGNORECASE)
for line in some_file:
    line = regex.sub(""interfaceOpDataFile %s"" % fileIn, line)
    # do something with the updated line"
3957,regex [],False,False,26,"import re
s = ""Example String""
replaced = re.sub('[ES]', 'a', s)
print replaced"
3958,regex [],False,False,24,"article = re.sub(r'(?is)</html>.+', '</html>', article)"
3959,regex [],False,False,56,"import re

mylist = [""dog"", ""cat"", ""wildcat"", ""thundercat"", ""cow"", ""hooo""]
r = re.compile("".*cat"")
newlist = list(filter(r.match, mylist)) # Read Note
print(newlist)"
3960,regex [],False,False,10,"['cat', 'wildcat', 'thundercat']"
3961,regex [],False,False,6,"filter(r.match, list)"
4004,rearrange dictionary keys into alphabetic order,True,True,17,"sorted(list(keys.items()), key=lambda x: x[1])"
4005,rearrange dictionary keys into alphabetic order,False,True,17,"sorted(list(data.items()), key=lambda x: x[1])"
4006,rearrange dictionary keys into alphabetic order,False,True,17,"sorted(list(keys.items()), key=lambda k_v: k_v[1])"
4007,rearrange dictionary keys into alphabetic order,False,True,17,"sorted(list(keys.items()), key=lambda i: i[1])"
4008,rearrange dictionary keys into alphabetic order,False,True,19,"sorted(list(keys.items()), key=lambda k_v: k_v[1], reverse=True)"
4009,rearrange dictionary keys into alphabetic order,False,True,17,"sorted(list(dictionary.items()), key=lambda x: x[1])"
4010,rearrange dictionary keys into alphabetic order,False,True,20,"sorted(list(keys.items()), **['k', 'v'])"
4011,rearrange dictionary keys into alphabetic order,False,False,78,"In [1]: import collections

In [2]: d = {2:3, 1:89, 4:5, 3:0}

In [3]: od = collections.OrderedDict(sorted(d.items()))

In [4]: od
Out[4]: OrderedDict([(1, 89), (2, 3), (3, 0), (4, 5)])"
4012,rearrange dictionary keys into alphabetic order,False,False,59,"In [11]: od[1]
Out[11]: 89

In [12]: od[3]
Out[12]: 0

In [13]: for k, v in od.iteritems(): print k, v
   ....: 
1 89
2 3
3 0
4 5"
4013,rearrange dictionary keys into alphabetic order,False,False,31,"In [13]: for k, v in od.items(): print(k, v)
   ....: 
1 89
2 3
3 0
4 5"
4014,rearrange dictionary keys into alphabetic order,False,False,36,"mydict = {'carl':40,
          'alan':2,
          'bob':1,
          'danny':3}

for key in sorted(mydict):
    print ""%s: %s"" % (key, mydict[key])"
4015,rearrange dictionary keys into alphabetic order,False,False,12,"alan: 2
bob: 1
carl: 40
danny: 3"
4016,rearrange dictionary keys into alphabetic order,False,False,30,"keylist = mydict.keys()
keylist.sort()
for key in keylist:
    print ""%s: %s"" % (key, mydict[key])"
4017,rearrange dictionary keys into alphabetic order,False,False,235,">>> from collections import OrderedDict

>>> # regular unsorted dictionary
>>> d = {'banana': 3, 'apple':4, 'pear': 1, 'orange': 2}

>>> # dictionary sorted by key -- OrderedDict(sorted(d.items()) also works
>>> OrderedDict(sorted(d.items(), key=lambda t: t[0]))
OrderedDict([('apple', 4), ('banana', 3), ('orange', 2), ('pear', 1)])

>>> # dictionary sorted by value
>>> OrderedDict(sorted(d.items(), key=lambda t: t[1]))
OrderedDict([('pear', 1), ('orange', 2), ('banana', 3), ('apple', 4)])

>>> # dictionary sorted by length of the key string
>>> OrderedDict(sorted(d.items(), key=lambda t: len(t[0])))
OrderedDict([('pear', 1), ('apple', 4), ('orange', 2), ('banana', 3)])"
4032,sort a list x into ascending order,False,True,14,"sorted(var_1, key=lambda x: sorted(x, reverse=True))"
4033,sort a list x into ascending order,False,True,6,"sorted(var_1, key=input.get)"
4034,sort a list x into ascending order,True,True,6,"sorted(var_1, key=sorted)"
4035,sort a list x into ascending order,False,True,6,"sorted(var_1, key=int)"
4036,sort a list x into ascending order,False,True,6,"sorted(var_1, key=input.__len__)"
4037,sort a list x into ascending order,False,True,6,"sorted(var_1, key=int.int)"
4038,sort a list x into ascending order,False,True,6,"sorted(var_1, **var_2)"
4039,sort a list x into ascending order,False,False,14,"sorted_by_second = sorted(data, key=lambda tup: tup[1])"
4040,sort a list x into ascending order,False,False,14,data.sort(key=lambda tup: tup[1])  # sorts in place
4041,sort a list x into ascending order,False,False,17,"[x for _,x in sorted(zip(Y,X))]"
4042,sort a list x into ascending order,False,False,121,"X = [""a"", ""b"", ""c"", ""d"", ""e"", ""f"", ""g"", ""h"", ""i""]
Y = [ 0,   1,   1,    0,   1,   2,   2,   0,   1]

Z = [x for _,x in sorted(zip(Y,X))]
print(Z)  # [""a"", ""d"", ""h"", ""b"", ""c"", ""e"", ""i"", ""f"", ""g""]"
4043,sort a list x into ascending order,False,False,25,"[x for _, x in sorted(zip(Y,X), key=lambda pair: pair[0])]"
4044,sort a list x into ascending order,False,False,11,"from operator import itemgetter
data.sort(key=itemgetter(1))"
4045,sort a list x into ascending order,False,False,223,">>> yx = zip(Y, X)
>>> yx
[(0, 'a'), (1, 'b'), (1, 'c'), (0, 'd'), (1, 'e'), (2, 'f'), (2, 'g'), (0, 'h'), (1, 'i')]
>>> yx.sort()
>>> yx
[(0, 'a'), (0, 'd'), (0, 'h'), (1, 'b'), (1, 'c'), (1, 'e'), (1, 'i'), (2, 'f'), (2, 'g')]
>>> x_sorted = [x for y, x in yx]
>>> x_sorted
['a', 'd', 'h', 'b', 'c', 'e', 'i', 'f', 'g']"
4046,sort a list into ascending order,False,True,20,"sorted(list, key=lambda x: int(x.split(':')[1]))"
4047,sort a list into ascending order,False,True,19,"sorted(list, key=lambda x: int(x.split('None')[1]))"
4048,sort a list into ascending order,True,True,6,"sorted(list, key=sorted)"
4049,sort a list into ascending order,False,True,14,"sorted(list, key=lambda x: x.startswith('j'))"
4050,sort a list into ascending order,False,True,6,"sorted(var_1, key=input.get)"
4051,sort a list into ascending order,False,True,6,"sorted(list, **int)"
4052,sort a list into ascending order,False,True,6,"sorted(list, **p)"
4053,sort a list into ascending order,False,False,14,"sorted_by_second = sorted(data, key=lambda tup: tup[1])"
4054,sort a list into ascending order,False,False,14,data.sort(key=lambda tup: tup[1])  # sorts in place
4055,sort a list into ascending order,False,False,17,"[x for _,x in sorted(zip(Y,X))]"
4056,sort a list into ascending order,False,False,121,"X = [""a"", ""b"", ""c"", ""d"", ""e"", ""f"", ""g"", ""h"", ""i""]
Y = [ 0,   1,   1,    0,   1,   2,   2,   0,   1]

Z = [x for _,x in sorted(zip(Y,X))]
print(Z)  # [""a"", ""d"", ""h"", ""b"", ""c"", ""e"", ""i"", ""f"", ""g""]"
4057,sort a list into ascending order,False,False,25,"[x for _, x in sorted(zip(Y,X), key=lambda pair: pair[0])]"
4058,sort a list into ascending order,False,False,11,"from operator import itemgetter
data.sort(key=itemgetter(1))"
4059,sort a list into ascending order,False,False,223,">>> yx = zip(Y, X)
>>> yx
[(0, 'a'), (1, 'b'), (1, 'c'), (0, 'd'), (1, 'e'), (2, 'f'), (2, 'g'), (0, 'h'), (1, 'i')]
>>> yx.sort()
>>> yx
[(0, 'a'), (0, 'd'), (0, 'h'), (1, 'b'), (1, 'c'), (1, 'e'), (1, 'i'), (2, 'f'), (2, 'g')]
>>> x_sorted = [x for y, x in yx]
>>> x_sorted
['a', 'd', 'h', 'b', 'c', 'e', 'i', 'f', 'g']"
4060,sort list 'values' into ascending order,True,True,6,"sorted(values, key=values.index)"
4061,sort list 'values' into ascending order,False,True,6,sorted([values])
4062,sort list 'values' into ascending order,False,True,12,"sorted(values, key=lambda x: values.index(x))"
4063,sort list 'values' into ascending order,False,True,6,"sorted(values, key=str.upper)"
4064,sort list 'values' into ascending order,False,True,6,"sorted(values, key=int.index)"
4065,sort list 'values' into ascending order,False,True,8,"sorted([values], key=int)"
4066,sort list 'values' into ascending order,False,True,6,"sorted(values, **values)"
4067,sort list 'values' into ascending order,False,False,15,"newlist = sorted(list_to_be_sorted, key=lambda k: k['name'])"
4068,sort list 'values' into ascending order,False,False,16,"from operator import itemgetter
newlist = sorted(list_to_be_sorted, key=itemgetter('name'))"
4069,sort list 'values' into ascending order,False,False,14,"newlist = sorted(l, key=itemgetter('name'), reverse=True)"
4070,sort list 'values' into ascending order,False,False,14,"sorted_by_second = sorted(data, key=lambda tup: tup[1])"
4071,sort list 'values' into ascending order,False,False,14,data.sort(key=lambda tup: tup[1])  # sorts in place
4072,sort list 'values' into ascending order,False,False,11,"from operator import itemgetter
data.sort(key=itemgetter(1))"
4073,sort list 'values' into ascending order,False,False,51,">>> s = [2, 3, 1, 4, 5]
>>> sorted(range(len(s)), key=lambda k: s[k])
[2, 0, 1, 3, 4]
>>>"
4102,how to combine 2 lists into a dictionary,False,True,26,"dict(zip(*[(1, 2), (3, 4), (5, 6)]))"
4103,how to combine 2 lists into a dictionary,True,True,9,"dict(zip(keys, values))"
4104,how to combine 2 lists into a dictionary,False,True,13,"dict(zip([a], [b]))"
4105,how to combine 2 lists into a dictionary,False,True,13,"dict(zip([d], [k]))"
4106,how to combine 2 lists into a dictionary,False,True,15,"dict(zip([a], [b, c]))"
4107,how to combine 2 lists into a dictionary,False,True,13,"dict(zip([l], [k]))"
4108,how to combine 2 lists into a dictionary,False,True,17,"dict(zip([k, v], [k, v]))"
4109,how to combine 2 lists into a dictionary,False,False,7,"z = {**x, **y}"
4110,how to combine 2 lists into a dictionary,False,False,39,"def merge_two_dicts(x, y):
      z = x.copy()   # start with x's keys and values
      z.update(y)    # modifies z with y's keys and values & returns None
      return z"
4111,how to combine 2 lists into a dictionary,False,False,8,"z = merge_two_dicts(x, y)"
4112,how to combine 2 lists into a dictionary,False,False,10,z = x | y          # NOTE: 3.9+ ONLY
4113,how to combine 2 lists into a dictionary,False,False,30,"x = {'a': 1, 'b': 2}
y = {'b': 3, 'c': 4}"
4114,how to combine 2 lists into a dictionary,False,False,23,">>> z
{'a': 1, 'b': 3, 'c': 4}"
4115,how to combine 2 lists into a dictionary,False,False,7,"z = {**x, **y}"
4172,client connection to url,False,True,8,urllib.request.urlopen('<unk>')
4173,client connection to url,False,True,3,urllib.request.URLopener()
4174,client connection to url,False,True,6,print(urllib.request.URLopener())
4175,client connection to url,False,True,11,print(requests.get('<unk>'))
4176,client connection to url,True,True,4,print(self.status_code)
4177,client connection to url,False,True,8,print(request.args.get('/'))
4178,client connection to url,False,True,11,print(urllib.parse.quote('<unk>'))
4179,client connection to url,False,False,59,"import socket

serversocket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
serversocket.bind(('localhost', 8089))
serversocket.listen(5) # become a server socket, maximum 5 connections

while True:
    connection, address = serversocket.accept()
    buf = connection.recv(64)
    if len(buf) > 0:
        print buf
        break"
4180,client connection to url,False,False,24,"import socket

clientsocket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
clientsocket.connect(('localhost', 8089))
clientsocket.send('hello')"
4181,client connection to url,False,False,83,"import requests
url = 'https://...'
payload = {'key1': 'value1', 'key2': 'value2'}

# GET
r = requests.get(url)

# GET with params in URL
r = requests.get(url, params=payload)

# POST with form-encoded data
r = requests.post(url, data=payload)

# POST with JSON 
import json
r = requests.post(url, data=json.dumps(payload))

# Response, status etc
r.text
r.status_code"
4182,client connection to url,False,False,120,">>> from httplib2 import Http
>>> from urllib import urlencode
>>> h = Http()
>>> data = dict(name=""Joe"", comment=""A test comment"")
>>> resp, content = h.request(""http://bitworking.org/news/223/Meet-Ares"", ""POST"", urlencode(data))
>>> resp
{'status': '200', 'transfer-encoding': 'chunked', 'vary': 'Accept-Encoding,User-Agent',
 'server': 'Apache', 'connection': 'close', 'date': 'Tue, 31 Jul 2007 15:29:52 GMT', 
 'content-type': 'text/html'}"
4183,client connection to url,False,False,19,">>> print urllib.urlopen(""http://www.stackoverflow.com"").getcode()
>>> 200"
4184,client connection to url,False,False,20,"import urllib.request
print(urllib.request.urlopen(""http://www.stackoverflow.com"").getcode())
>>> 200"
4185,client connection to url,False,False,34,"host = socket.gethostname() #Get the local machine name
port = 12397 # Reserve a port for your service
s.bind((host,port)) #Bind to the port"
4228,generate random numbers,False,True,10,print(random.choice(range(10)))
4229,generate random numbers,False,True,6,"random.randint(0, 10)"
4230,generate random numbers,False,True,7,random.choice(range(10))
4231,generate random numbers,False,True,10,print(random.choice(range(100)))
4232,generate random numbers,True,True,6,"random.randint(0, 7)"
4233,generate random numbers,False,True,10,print(random.choice(range(9)))
4234,generate random numbers,False,True,9,"print(random.randint(0, 7))"
4235,generate random numbers,False,False,26,">>> import random
>>> random.sample(range(1, 100), 3)
[77, 52, 45]"
4236,generate random numbers,False,False,38,">>> try:
...   random.sample(range(1, 2), 3)
... except ValueError:
...   print('Sample size exceeded population size.')
... 
Sample size exceeded population size"
4237,generate random numbers,False,False,17,"from random import randint
randint(100, 999)  # randint is inclusive at both ends"
4238,generate random numbers,False,False,44,"from random import randint

def random_with_N_digits(n):
    range_start = 10**(n-1)
    range_end = (10**n)-1
    return randint(range_start, range_end)

print random_with_N_digits(2)
print random_with_N_digits(3)
print random_with_N_digits(4)"
4239,generate random numbers,False,False,3,"33
124
5127"
4240,generate random numbers,False,False,92,">>> import numpy as np, numpy.random
>>> print np.random.dirichlet(np.ones(10),size=1)
[[ 0.01779975  0.14165316  0.01029262  0.168136    0.03061161  0.09046587
   0.19987289  0.13398581  0.03119906  0.17598322]]

>>> print np.random.dirichlet(np.ones(10)/1000.,size=1)
[[  2.63435230e-115   4.31961290e-209   1.41369771e-212   1.42417285e-188
    0.00000000e+000   5.79841280e-143   0.00000000e+000   9.85329725e-005
    9.99901467e-001   8.37460207e-246]]

>>> print np.random.dirichlet(np.ones(10)*1000.,size=1)
[[ 0.09967689  0.10151585  0.10077575  0.09875282  0.09935606  0.10093678
   0.09517132  0.09891358  0.10206595  0.10283501]]"
4241,generate random numbers,False,False,24,"numpy.random.choice(numpy.arange(1, 7), p=[0.1, 0.05, 0.05, 0.2, 0.4, 0.2])"
4256,list to dict,True,True,21,"dict((k, ':') for k, v in list(d.items()))"
4257,list to dict,False,True,18,"dict((k, ':') for k, v in d.items())"
4258,list to dict,False,True,21,"dict((k, 'k') for k, v in list(d.items()))"
4259,list to dict,False,True,20,"dict((k, 'd') for k, v in list(d.items()))"
4260,list to dict,False,True,21,"dict((name, ':') for key, value in list(d.items()))"
4261,list to dict,False,True,18,"dict((k, 'k') for k, v in d.items())"
4262,list to dict,False,True,17,"dict((k, 'd') for k, v in d.items())"
4263,list to dict,False,False,70,">>> keys = ['a', 'b', 'c']
>>> values = [1, 2, 3]
>>> dictionary = dict(zip(keys, values))
>>> print(dictionary)
{'a': 1, 'b': 2, 'c': 3}"
4264,list to dict,False,False,13,"{key: value for (key, value) in iterable}"
4265,list to dict,False,False,15,"dict((key, func(key)) for key in keys)"
4266,list to dict,False,False,34,"1) consumed from any iterable yielding pairs of keys/vals
dict(pairs)

2) ""zip'ped"" from two separate iterables of keys/vals
dict(zip(list_of_keys, list_of_values))"
4267,list to dict,False,False,69,"import csv
toCSV = [{'name':'bob','age':25,'weight':200},
         {'name':'jim','age':31,'weight':180}]
keys = toCSV[0].keys()
with open('people.csv', 'w', newline='')  as output_file:
    dict_writer = csv.DictWriter(output_file, keys)
    dict_writer.writeheader()
    dict_writer.writerows(toCSV)"
4268,list to dict,False,False,51,">>> from collections import Counter
>>> Counter(['apple','red','apple','red','red','pear'])
Counter({'red': 3, 'apple': 2, 'pear': 1})"
4269,list to dict,False,False,20,"b = dict(zip(a[::2], a[1::2]))"
4270,list to dict,True,True,21,"dict((k, ':') for k, v in list(d.items()))"
4271,list to dict,False,True,18,"dict((k, ':') for k, v in d.items())"
4272,list to dict,False,True,21,"dict((k, 'k') for k, v in list(d.items()))"
4273,list to dict,False,True,20,"dict((k, 'd') for k, v in list(d.items()))"
4274,list to dict,False,True,21,"dict((name, ':') for key, value in list(d.items()))"
4275,list to dict,False,True,18,"dict((k, 'k') for k, v in d.items())"
4276,list to dict,False,True,17,"dict((k, 'd') for k, v in d.items())"
4277,list to dict,False,False,70,">>> keys = ['a', 'b', 'c']
>>> values = [1, 2, 3]
>>> dictionary = dict(zip(keys, values))
>>> print(dictionary)
{'a': 1, 'b': 2, 'c': 3}"
4278,list to dict,False,False,13,"{key: value for (key, value) in iterable}"
4279,list to dict,False,False,15,"dict((key, func(key)) for key in keys)"
4280,list to dict,False,False,34,"1) consumed from any iterable yielding pairs of keys/vals
dict(pairs)

2) ""zip'ped"" from two separate iterables of keys/vals
dict(zip(list_of_keys, list_of_values))"
4281,list to dict,False,False,69,"import csv
toCSV = [{'name':'bob','age':25,'weight':200},
         {'name':'jim','age':31,'weight':180}]
keys = toCSV[0].keys()
with open('people.csv', 'w', newline='')  as output_file:
    dict_writer = csv.DictWriter(output_file, keys)
    dict_writer.writeheader()
    dict_writer.writerows(toCSV)"
4282,list to dict,False,False,20,"b = dict(zip(a[::2], a[1::2]))"
4283,list to dict,False,False,21,"from itertools import izip
i = iter(a)
b = dict(izip(i, i))"
4298,save plot as image,True,True,5,plt.savefig('save')
4299,save plot as image,False,True,8,plt.savefig('<unk>')
4300,save plot as image,False,True,7,"plt.savefig('save', dpi=300)"
4301,save plot as image,False,True,5,plt.savefig('image')
4302,save plot as image,False,True,7,"plt.savefig('plot', dpi=300)"
4303,save plot as image,False,True,5,plot.savefig('plot')
4304,save plot as image,False,True,5,plot.savefig('image')
4305,save plot as image,False,False,16,"from matplotlib import pyplot as plt

plt.savefig('foo.png')
plt.savefig('foo.pdf')"
4306,save plot as image,False,False,8,"savefig('foo.png', bbox_inches='tight')"
4307,save plot as image,False,False,50,"import matplotlib.pyplot as plt
fig, ax = plt.subplots( nrows=1, ncols=1 )  # create figure & 1 axis
ax.plot([0,1,2], [10,20,3])
fig.savefig('path/to/save/image/to.png')   # save the figure to file
plt.close(fig)    # close the figure window"
4308,save plot as image,False,False,11,"plt.figure(figsize=(800/my_dpi, 800/my_dpi), dpi=my_dpi)"
4309,save plot as image,False,False,7,"plt.savefig('my_fig.png', dpi=my_dpi)"
4310,save plot as image,False,False,9,"plt.savefig('my_fig.png', dpi=my_dpi * 10)"
4311,save plot as image,False,False,23,"plt.figure(figsize=(3.841, 7.195), dpi=100)
( your code ...)
plt.savefig('myfig.png', dpi=1000)"
4312,print date and time in GMT in 24hr format,True,True,26,"time.strftime('%Y-%m-%d %H:%M:%S', time.gmtime(datetime.time.now()))"
4313,print date and time in GMT in 24hr format,False,True,26,"time.strftime('%Y-%m-%d %H:%M:%S', time.gmtime(datetime.date.today()))"
4314,print date and time in GMT in 24hr format,True,True,23,"parser.strftime('%Y-%m-%d %H:%M:%S', gmtime())"
4315,print date and time in GMT in 24hr format,False,True,6,parser.parse(datetime.datetime.now())
4316,print date and time in GMT in 24hr format,False,True,26,"time.strftime('%Y-%m-%d %H:%M:%S', time.gmtime(datetime.datetime.now()))"
4317,print date and time in GMT in 24hr format,False,True,23,"time.strftime('%Y-%m-%d %H:%M:%S', gmtime())"
4318,print date and time in GMT in 24hr format,False,True,23,"time.strftime('%Y-%m-%d %H:%M:%S', time.gmtime())"
4319,print date and time in GMT in 24hr format,False,False,10,"for date in mylist :
    print str(date)"
4320,print date and time in GMT in 24hr format,True,False,128,"import datetime
mylist = []
today = datetime.date.today()
mylist.append(today)
print mylist[0] # print the date object, not the container ;-)
2008-11-22

# It's better to always use str() because :

print ""This is a new day : "", mylist[0] # will work
>>> This is a new day : 2008-11-22

print ""This is a new day : "" + mylist[0] # will crash
>>> cannot concatenate 'str' and 'datetime.date' objects

print ""This is a new day : "" + str(mylist[0]) 
>>> This is a new day : 2008-11-22"
4321,print date and time in GMT in 24hr format,False,False,26,"print today.strftime('We are the %d, %b %Y')
>>> 'We are the 22, Nov 2008'"
4322,print date and time in GMT in 24hr format,False,False,31,"print ""We are the {:%d, %b %Y}"".format(today)
>>> 'We are the 22, Nov 2008'"
4323,print date and time in GMT in 24hr format,False,False,22,"import datetime
f""{datetime.datetime.now():%Y-%m-%d}""
>>> '2017-06-15'"
4324,print date and time in GMT in 24hr format,False,False,22,"import datetime
print datetime.datetime.now().strftime(""%Y-%m-%d %H:%M"")"
4325,print date and time in GMT in 24hr format,False,False,19,"import time
print time.strftime(""%Y-%m-%d %H:%M"")"
4326,print date and time in GMT in 24hr format,True,True,26,"time.strftime('%Y-%m-%d %H:%M:%S', time.gmtime(datetime.time.now()))"
4327,print date and time in GMT in 24hr format,False,True,26,"time.strftime('%Y-%m-%d %H:%M:%S', time.gmtime(datetime.date.today()))"
4328,print date and time in GMT in 24hr format,True,True,23,"parser.strftime('%Y-%m-%d %H:%M:%S', gmtime())"
4329,print date and time in GMT in 24hr format,False,True,6,parser.parse(datetime.datetime.now())
4330,print date and time in GMT in 24hr format,False,True,26,"time.strftime('%Y-%m-%d %H:%M:%S', time.gmtime(datetime.datetime.now()))"
4331,print date and time in GMT in 24hr format,False,True,23,"time.strftime('%Y-%m-%d %H:%M:%S', gmtime())"
4332,print date and time in GMT in 24hr format,False,True,23,"time.strftime('%Y-%m-%d %H:%M:%S', time.gmtime())"
4333,print date and time in GMT in 24hr format,False,False,38,">>> import datetime
>>> datetime.datetime.now()
datetime.datetime(2009, 1, 6, 15, 8, 24, 78915)

>>> print(datetime.datetime.now())
2009-01-06 15:08:24.789150"
4334,print date and time in GMT in 24hr format,False,False,32,">>> datetime.datetime.now().time()
datetime.time(15, 8, 24, 78915)

>>> print(datetime.datetime.now().time())
15:08:24.789150"
4335,print date and time in GMT in 24hr format,False,False,7,>>> from datetime import datetime
4336,print date and time in GMT in 24hr format,True,False,38,">>> from time import gmtime, strftime
>>> strftime(""%Y-%m-%d %H:%M:%S"", gmtime())
'2009-01-05 22:14:39'"
4337,print date and time in GMT in 24hr format,False,False,10,"for date in mylist :
    print str(date)"
4338,print date and time in GMT in 24hr format,True,False,128,"import datetime
mylist = []
today = datetime.date.today()
mylist.append(today)
print mylist[0] # print the date object, not the container ;-)
2008-11-22

# It's better to always use str() because :

print ""This is a new day : "", mylist[0] # will work
>>> This is a new day : 2008-11-22

print ""This is a new day : "" + mylist[0] # will crash
>>> cannot concatenate 'str' and 'datetime.date' objects

print ""This is a new day : "" + str(mylist[0]) 
>>> This is a new day : 2008-11-22"
4339,print date and time in GMT in 24hr format,False,False,26,"print today.strftime('We are the %d, %b %Y')
>>> 'We are the 22, Nov 2008'"
4340,print date and time in GMT in 24hr format,True,True,26,"time.strftime('%Y-%m-%d %H:%M:%S', time.gmtime(datetime.time.now()))"
4341,print date and time in GMT in 24hr format,False,True,26,"time.strftime('%Y-%m-%d %H:%M:%S', time.gmtime(datetime.date.today()))"
4342,print date and time in GMT in 24hr format,True,True,23,"parser.strftime('%Y-%m-%d %H:%M:%S', gmtime())"
4343,print date and time in GMT in 24hr format,False,True,6,parser.parse(datetime.datetime.now())
4344,print date and time in GMT in 24hr format,False,True,26,"time.strftime('%Y-%m-%d %H:%M:%S', time.gmtime(datetime.datetime.now()))"
4345,print date and time in GMT in 24hr format,False,True,23,"time.strftime('%Y-%m-%d %H:%M:%S', gmtime())"
4346,print date and time in GMT in 24hr format,False,True,23,"time.strftime('%Y-%m-%d %H:%M:%S', time.gmtime())"
4347,print date and time in GMT in 24hr format,False,False,10,"for date in mylist :
    print str(date)"
4348,print date and time in GMT in 24hr format,True,False,128,"import datetime
mylist = []
today = datetime.date.today()
mylist.append(today)
print mylist[0] # print the date object, not the container ;-)
2008-11-22

# It's better to always use str() because :

print ""This is a new day : "", mylist[0] # will work
>>> This is a new day : 2008-11-22

print ""This is a new day : "" + mylist[0] # will crash
>>> cannot concatenate 'str' and 'datetime.date' objects

print ""This is a new day : "" + str(mylist[0]) 
>>> This is a new day : 2008-11-22"
4349,print date and time in GMT in 24hr format,False,False,26,"print today.strftime('We are the %d, %b %Y')
>>> 'We are the 22, Nov 2008'"
4350,print date and time in GMT in 24hr format,False,False,31,"print ""We are the {:%d, %b %Y}"".format(today)
>>> 'We are the 22, Nov 2008'"
4351,print date and time in GMT in 24hr format,False,False,22,"import datetime
f""{datetime.datetime.now():%Y-%m-%d}""
>>> '2017-06-15'"
4352,print date and time in GMT in 24hr format,False,False,22,"import datetime
print datetime.datetime.now().strftime(""%Y-%m-%d %H:%M"")"
4353,print date and time in GMT in 24hr format,False,False,19,"import time
print time.strftime(""%Y-%m-%d %H:%M"")"
4354,print date and time in GMT in 24hr format,True,True,26,"time.strftime('%Y-%m-%d %H:%M:%S', time.gmtime(datetime.time.now()))"
4355,print date and time in GMT in 24hr format,False,True,26,"time.strftime('%Y-%m-%d %H:%M:%S', time.gmtime(datetime.date.today()))"
4356,print date and time in GMT in 24hr format,True,True,23,"parser.strftime('%Y-%m-%d %H:%M:%S', gmtime())"
4357,print date and time in GMT in 24hr format,False,True,6,parser.parse(datetime.datetime.now())
4358,print date and time in GMT in 24hr format,False,True,26,"time.strftime('%Y-%m-%d %H:%M:%S', time.gmtime(datetime.datetime.now()))"
4359,print date and time in GMT in 24hr format,False,True,23,"time.strftime('%Y-%m-%d %H:%M:%S', gmtime())"
4360,print date and time in GMT in 24hr format,False,True,23,"time.strftime('%Y-%m-%d %H:%M:%S', time.gmtime())"
4361,print date and time in GMT in 24hr format,False,False,10,"for date in mylist :
    print str(date)"
4362,print date and time in GMT in 24hr format,True,False,128,"import datetime
mylist = []
today = datetime.date.today()
mylist.append(today)
print mylist[0] # print the date object, not the container ;-)
2008-11-22

# It's better to always use str() because :

print ""This is a new day : "", mylist[0] # will work
>>> This is a new day : 2008-11-22

print ""This is a new day : "" + mylist[0] # will crash
>>> cannot concatenate 'str' and 'datetime.date' objects

print ""This is a new day : "" + str(mylist[0]) 
>>> This is a new day : 2008-11-22"
4363,print date and time in GMT in 24hr format,False,False,26,"print today.strftime('We are the %d, %b %Y')
>>> 'We are the 22, Nov 2008'"
4364,print date and time in GMT in 24hr format,False,False,31,"print ""We are the {:%d, %b %Y}"".format(today)
>>> 'We are the 22, Nov 2008'"
4365,print date and time in GMT in 24hr format,False,False,22,"import datetime
f""{datetime.datetime.now():%Y-%m-%d}""
>>> '2017-06-15'"
4366,print date and time in GMT in 24hr format,False,False,22,"import datetime
print datetime.datetime.now().strftime(""%Y-%m-%d %H:%M"")"
4367,print date and time in GMT in 24hr format,False,False,19,"import time
print time.strftime(""%Y-%m-%d %H:%M"")"
4368,print date and time in GMT in 24hr format,True,True,26,"time.strftime('%Y-%m-%d %H:%M:%S', time.gmtime(datetime.time.now()))"
4369,print date and time in GMT in 24hr format,False,True,26,"time.strftime('%Y-%m-%d %H:%M:%S', time.gmtime(datetime.date.today()))"
4370,print date and time in GMT in 24hr format,True,True,23,"parser.strftime('%Y-%m-%d %H:%M:%S', gmtime())"
4371,print date and time in GMT in 24hr format,False,True,6,parser.parse(datetime.datetime.now())
4372,print date and time in GMT in 24hr format,False,True,26,"time.strftime('%Y-%m-%d %H:%M:%S', time.gmtime(datetime.datetime.now()))"
4373,print date and time in GMT in 24hr format,False,True,23,"time.strftime('%Y-%m-%d %H:%M:%S', gmtime())"
4374,print date and time in GMT in 24hr format,False,True,23,"time.strftime('%Y-%m-%d %H:%M:%S', time.gmtime())"
4375,print date and time in GMT in 24hr format,False,False,10,"for date in mylist :
    print str(date)"
4376,print date and time in GMT in 24hr format,True,False,128,"import datetime
mylist = []
today = datetime.date.today()
mylist.append(today)
print mylist[0] # print the date object, not the container ;-)
2008-11-22

# It's better to always use str() because :

print ""This is a new day : "", mylist[0] # will work
>>> This is a new day : 2008-11-22

print ""This is a new day : "" + mylist[0] # will crash
>>> cannot concatenate 'str' and 'datetime.date' objects

print ""This is a new day : "" + str(mylist[0]) 
>>> This is a new day : 2008-11-22"
4377,print date and time in GMT in 24hr format,False,False,26,"print today.strftime('We are the %d, %b %Y')
>>> 'We are the 22, Nov 2008'"
4378,print date and time in GMT in 24hr format,False,False,31,"print ""We are the {:%d, %b %Y}"".format(today)
>>> 'We are the 22, Nov 2008'"
4379,print date and time in GMT in 24hr format,False,False,22,"import datetime
f""{datetime.datetime.now():%Y-%m-%d}""
>>> '2017-06-15'"
4380,print date and time in GMT in 24hr format,False,False,22,"import datetime
print datetime.datetime.now().strftime(""%Y-%m-%d %H:%M"")"
4381,print date and time in GMT in 24hr format,False,False,19,"import time
print time.strftime(""%Y-%m-%d %H:%M"")"
4410,remove first column from csv file,True,True,9,"df = pd.read_csv('my.csv', header=None)"
4411,remove first column from csv file,False,True,7,"df.to_csv('head', header=False)"
4412,remove first column from csv file,False,True,14,"df = pd.read_csv('farm', sep=',', header=None)"
4413,remove first column from csv file,False,True,12,"df = pd.read_csv('<unk>', names=False)"
4414,remove first column from csv file,False,True,12,"df = pandas.read_csv('<unk>', names=False)"
4415,remove first column from csv file,False,True,14,"df = pd.read_csv('my.csv', header=None, sep=',')"
4416,remove first column from csv file,False,True,5,df.to_csv('head')
4417,remove first column from csv file,True,False,20,"for row in reader:
    content = list(row[i] for i in included_cols)
print content"
4418,remove first column from csv file,False,False,20,"for row in reader:
        content = list(row[i] for i in included_cols)
        print content"
4419,remove first column from csv file,False,False,23,"import pandas as pd
df = pd.read_csv(csv_file)
saved_column = df.column_name #you can also use df['column_name']"
4420,remove first column from csv file,False,False,3,names = df.Names
4421,remove first column from csv file,True,False,131,"import csv
from collections import defaultdict

columns = defaultdict(list) # each value in each column is appended to a list

with open('file.txt') as f:
    reader = csv.DictReader(f) # read rows into a dictionary format
    for row in reader: # read a row as {column1: value1, column2: value2,...}
        for (k,v) in row.items(): # go over each column name and value 
            columns[k].append(v) # append the value into the appropriate list
                                 # based on column name k

print(columns['name'])
print(columns['phone'])
print(columns['street'])"
4422,remove first column from csv file,False,False,13,"name,phone,street
Bob,0893,32 Silly
James,000,400 McHilly
Smithers,4442,23 Looped St."
4423,remove first column from csv file,False,False,38,">>> 
['Bob', 'James', 'Smithers']
['0893', '000', '4442']
['32 Silly', '400 McHilly', '23 Looped St.']"
4424,remove first column from csv file,True,True,9,"df = pd.read_csv('my.csv', header=None)"
4425,remove first column from csv file,False,True,7,"df.to_csv('head', header=False)"
4426,remove first column from csv file,False,True,14,"df = pd.read_csv('farm', sep=',', header=None)"
4427,remove first column from csv file,False,True,12,"df = pd.read_csv('<unk>', names=False)"
4428,remove first column from csv file,False,True,12,"df = pandas.read_csv('<unk>', names=False)"
4429,remove first column from csv file,False,True,14,"df = pd.read_csv('my.csv', header=None, sep=',')"
4430,remove first column from csv file,False,True,5,df.to_csv('head')
4431,remove first column from csv file,True,False,20,"for row in reader:
    content = list(row[i] for i in included_cols)
print content"
4432,remove first column from csv file,False,False,20,"for row in reader:
        content = list(row[i] for i in included_cols)
        print content"
4433,remove first column from csv file,False,False,23,"import pandas as pd
df = pd.read_csv(csv_file)
saved_column = df.column_name #you can also use df['column_name']"
4434,remove first column from csv file,False,False,3,names = df.Names
4435,remove first column from csv file,True,False,131,"import csv
from collections import defaultdict

columns = defaultdict(list) # each value in each column is appended to a list

with open('file.txt') as f:
    reader = csv.DictReader(f) # read rows into a dictionary format
    for row in reader: # read a row as {column1: value1, column2: value2,...}
        for (k,v) in row.items(): # go over each column name and value 
            columns[k].append(v) # append the value into the appropriate list
                                 # based on column name k

print(columns['name'])
print(columns['phone'])
print(columns['street'])"
4436,remove first column from csv file,False,False,13,"name,phone,street
Bob,0893,32 Silly
James,000,400 McHilly
Smithers,4442,23 Looped St."
4437,remove first column from csv file,False,False,38,">>> 
['Bob', 'James', 'Smithers']
['0893', '000', '4442']
['32 Silly', '400 McHilly', '23 Looped St.']"
4438,remove first column from csv file,True,True,9,"df = pd.read_csv('my.csv', header=None)"
4439,remove first column from csv file,False,True,7,"df.to_csv('head', header=False)"
4440,remove first column from csv file,False,True,14,"df = pd.read_csv('farm', sep=',', header=None)"
4441,remove first column from csv file,False,True,12,"df = pd.read_csv('<unk>', names=False)"
4442,remove first column from csv file,False,True,12,"df = pandas.read_csv('<unk>', names=False)"
4443,remove first column from csv file,False,True,14,"df = pd.read_csv('my.csv', header=None, sep=',')"
4444,remove first column from csv file,False,True,5,df.to_csv('head')
4445,remove first column from csv file,True,False,20,"for row in reader:
    content = list(row[i] for i in included_cols)
print content"
4446,remove first column from csv file,False,False,20,"for row in reader:
        content = list(row[i] for i in included_cols)
        print content"
4447,remove first column from csv file,False,False,23,"import pandas as pd
df = pd.read_csv(csv_file)
saved_column = df.column_name #you can also use df['column_name']"
4448,remove first column from csv file,False,False,3,names = df.Names
4449,remove first column from csv file,True,False,131,"import csv
from collections import defaultdict

columns = defaultdict(list) # each value in each column is appended to a list

with open('file.txt') as f:
    reader = csv.DictReader(f) # read rows into a dictionary format
    for row in reader: # read a row as {column1: value1, column2: value2,...}
        for (k,v) in row.items(): # go over each column name and value 
            columns[k].append(v) # append the value into the appropriate list
                                 # based on column name k

print(columns['name'])
print(columns['phone'])
print(columns['street'])"
4450,remove first column from csv file,False,False,13,"name,phone,street
Bob,0893,32 Silly
James,000,400 McHilly
Smithers,4442,23 Looped St."
4451,remove first column from csv file,False,False,38,">>> 
['Bob', 'James', 'Smithers']
['0893', '000', '4442']
['32 Silly', '400 McHilly', '23 Looped St.']"
4480,copy directory to another directory,False,True,7,os.chdir(os.path.dirname(__file__))
4481,copy directory to another directory,False,True,8,os.listdir('<unk>')
4482,copy directory to another directory,False,True,5,os.listdir('..')
4483,copy directory to another directory,False,True,4,os.walk(directory)
4484,copy directory to another directory,True,True,7,"shutil.copy2(directory, 'ignore_errors')"
4485,copy directory to another directory,False,True,3,os.getcwd()
4486,copy directory to another directory,False,True,8,os.walk('<unk>')
4487,copy directory to another directory,False,False,14,"from distutils.dir_util import copy_tree
copy_tree(""/a/b/c"", ""/x/y/z"")"
4488,copy directory to another directory,False,False,64,"import os, shutil
def copytree(src, dst, symlinks=False, ignore=None):
    for item in os.listdir(src):
        s = os.path.join(src, item)
        d = os.path.join(dst, item)
        if os.path.isdir(s):
            shutil.copytree(s, d, symlinks, ignore)
        else:
            shutil.copy2(s, d)"
4489,copy directory to another directory,False,False,24,"from distutils.dir_util import copy_tree

# copy subdirectory example
fromDirectory = ""/a/b/c""
toDirectory = ""/x/y/z""

copy_tree(fromDirectory, toDirectory)"
4490,copy directory to another directory,False,False,43,"import shutil, errno

def copyanything(src, dst):
    try:
        shutil.copytree(src, dst)
    except OSError as exc: # python >2.5
        if exc.errno == errno.ENOTDIR:
            shutil.copy(src, dst)
        else: raise"
4491,copy directory to another directory,False,False,35,"import os
import shutil
src_files = os.listdir(src)
for file_name in src_files:
    full_file_name = os.path.join(src, file_name)
    if os.path.isfile(full_file_name):
        shutil.copy(full_file_name, dest)"
4492,copy directory to another directory,False,False,27,"import shutil
import os

source = '/path/to/source_folder'
dest1 = '/path/to/dest_folder'

files = os.listdir(source)

for f in files:
    shutil.move(source+f, dest1)"
4493,copy directory to another directory,False,False,92,"def copytree(src, dst, symlinks=False, ignore=None):
    if not os.path.exists(dst):
        os.makedirs(dst)
    for item in os.listdir(src):
        s = os.path.join(src, item)
        d = os.path.join(dst, item)
        if os.path.isdir(s):
            copytree(s, d, symlinks, ignore)
        else:
            if not os.path.exists(d) or os.stat(s).st_mtime - os.stat(d).st_mtime > 1:
                shutil.copy2(s, d)"
4522,rename file with regex,True,True,13,"re.sub('<unk>', '\\1', text)"
4523,rename file with regex,False,True,13,"re.sub('<unk>', '\\1', str1)"
4524,rename file with regex,False,True,13,"re.sub('<unk>', '\\1.\\2', file)"
4525,rename file with regex,False,True,16,"re.sub('<unk>', '<unk>', text)"
4526,rename file with regex,False,True,13,"re.sub('<unk>', '\\1', str)"
4527,rename file with regex,False,True,13,"re.sub('<unk>', '\\1', my_string)"
4528,rename file with regex,False,True,13,"re.sub('<unk>', '\\1', file)"
4529,rename file with regex,False,False,12,"import os

os.rename('a.txt', 'b.kml')"
4530,rename file with regex,False,False,10,rename 's/^images\/(.+)/test\/$1.png/s' images/*.png
4531,rename file with regex,False,False,32,"import os
old_file = os.path.join(""directory"", ""a.txt"")
new_file = os.path.join(""directory"", ""b.kml"")
os.rename(old_file, new_file)"
4532,rename file with regex,False,False,30,rename -n 's/(\w+) - (\d{1})x(\d{2}).*$/S0$2E$3\.srt/' *.srt
4533,rename file with regex,False,False,19,for x in *.png;do mv $x test/${x%.png}test.png;done
4534,rename file with regex,False,False,12,"import shutil

shutil.move('a.txt', 'b.kml')"
4535,rename file with regex,False,False,32,"$ for old in ./images*.png; do
    new=$(echo $old | sed -e 's/\.png$/test.png/')
    mv -v ""$old"" ""$new""
  done"
4536,format time,True,True,26,"""""""time"""""".strftime('%Y-%m-%d %H:%M:%S')"
4537,format time,False,True,23,"""""""time"""""".strftime('%Y-%m-%d %H:%M')"
4538,format time,False,True,16,"""""""time <unk>"""""".format(datetime.datetime.now())"
4539,format time,False,True,14,"""""""time driver"""""".format(datetime.datetime.now())"
4540,format time,False,True,14,"""""""time <unk>"""""".format(time=500)"
4541,format time,False,True,27,"""""""time find_element_by_css_selector"""""".strftime('%Y-%m-%d %H:%M:%S')"
4542,format time,False,True,16,"""""""time driver"""""".strftime('<unk>')"
4543,format time,False,False,24,"import time

start = time.time()
print(""hello"")
end = time.time()
print(end - start)"
4544,format time,False,False,10,"for date in mylist :
    print str(date)"
4545,format time,False,False,128,"import datetime
mylist = []
today = datetime.date.today()
mylist.append(today)
print mylist[0] # print the date object, not the container ;-)
2008-11-22

# It's better to always use str() because :

print ""This is a new day : "", mylist[0] # will work
>>> This is a new day : 2008-11-22

print ""This is a new day : "" + mylist[0] # will crash
>>> cannot concatenate 'str' and 'datetime.date' objects

print ""This is a new day : "" + str(mylist[0]) 
>>> This is a new day : 2008-11-22"
4546,format time,False,False,26,"print today.strftime('We are the %d, %b %Y')
>>> 'We are the 22, Nov 2008'"
4547,format time,False,False,31,"print ""We are the {:%d, %b %Y}"".format(today)
>>> 'We are the 22, Nov 2008'"
4548,format time,False,False,22,"import datetime
f""{datetime.datetime.now():%Y-%m-%d}""
>>> '2017-06-15'"
4549,format time,False,False,32,"from timeit import default_timer as timer

start = timer()
# ...
end = timer()
print(end - start) # Time in seconds, e.g. 5.38091952400282"
4550,import time,False,True,18,now = datetime.now().strftime('%H:%M:%S')
4551,import time,True,True,18,now = datetime.datetime.now().strftime('%H:%M:%S')
4552,import time,False,True,23,now = os.path.abspath('<unk>').strftime('%H:%M:%S')
4553,import time,False,True,6,datetime.time(datetime.datetime.now())
4554,import time,False,True,20,now = datetime.importlib.import_module('time').strftime('%H:%M:%S')
4555,import time,False,True,23,now = os.path.getmtime('<unk>').strftime('%H:%M:%S')
4556,import time,False,True,8,datetime.importlib.import_module('time').total_seconds()
4557,import time,False,False,30,"import time
start_time = time.time()
main()
print(""--- %s seconds ---"" % (time.time() - start_time))"
4558,import time,False,False,6,--- 0.764891862869 seconds ---
4559,import time,False,False,24,"import time

start = time.time()
print(""hello"")
end = time.time()
print(end - start)"
4560,import time,False,False,32,"from timeit import default_timer as timer

start = timer()
# ...
end = timer()
print(end - start) # Time in seconds, e.g. 5.38091952400282"
4561,import time,False,False,153,"import atexit
from time import clock

def secondsToStr(t):
    return ""%d:%02d:%02d.%03d"" % \
        reduce(lambda ll,b : divmod(ll[0],b) + ll[1:],
            [(t*1000,),1000,60,60])

line = ""=""*40
def log(s, elapsed=None):
    print line
    print secondsToStr(clock()), '-', s
    if elapsed:
        print ""Elapsed time:"", elapsed
    print line
    print

def endlog():
    end = clock()
    elapsed = end-start
    log(""End Program"", secondsToStr(elapsed))

def now():
    return secondsToStr(clock())

start = clock()
atexit.register(endlog)
log(""Start Program"")"
4562,import time,False,False,4,$ time python yourprogram.py
4563,import time,False,False,174,"$ time -v python yourprogram.py
    Command being timed: ""python3 yourprogram.py""
    User time (seconds): 0.08
    System time (seconds): 0.02
    Percent of CPU this job got: 98%
    Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.10
    Average shared text size (kbytes): 0
    Average unshared data size (kbytes): 0
    Average stack size (kbytes): 0
    Average total size (kbytes): 0
    Maximum resident set size (kbytes): 9480
    Average resident set size (kbytes): 0
    Major (requiring I/O) page faults: 0
    Minor (reclaiming a frame) page faults: 1114
    Voluntary context switches: 0
    Involuntary context switches: 22
    Swaps: 0
    File system inputs: 0
    File system outputs: 0
    Socket messages sent: 0
    Socket messages received: 0
    Signals delivered: 0
    Page size (bytes): 4096
    Exit status: 0"
4578,read file,True,True,21,"with open('file.txt') as f:
    f = open(os.path.join(__location__, 'rb'))"
4579,read file,False,True,21,"with open('myfile.txt') as f:
    f = open(os.path.join(__location__, 'rb'))"
4580,read file,False,True,21,"with open('file.txt') as f:
    f = open(os.path.join(__location__, 'rt'))"
4581,read file,False,True,21,"with open('myfile.txt') as f:
    f = open(os.path.join(__location__, 'rt'))"
4582,read file,False,True,19,"with open('myfile.txt') as f:
    f = open('file.txt', 'rb')"
4583,read file,False,True,19,"with open('file.txt') as f:
    f = open('file.txt', 'rb')"
4584,read file,False,True,18,"with open('myfile.txt', 'r') as f:
    f = f.read()"
4585,read file,False,False,43,"with open(filename) as f:
    content = f.readlines()
# you may also want to remove whitespace characters like `\n` at the end of each line
content = [x.strip() for x in content]"
4586,read file,True,False,25,"with open('data.txt', 'r') as file:
    data = file.read().replace('\n', '')"
4587,read file,False,False,14,"with open('filename') as f:
    lines = f.readlines()"
4588,read file,False,False,20,"with open('filename') as f:
    lines = [line.rstrip() for line in f]"
4589,read file,False,False,23,"with open(""file.txt"") as file_in:
    lines = []
    for line in file_in:
        lines.append(line)"
4590,read file,False,False,18,"with open('Path/to/file', 'r') as content_file:
    content = content_file.read()"
4591,read file,False,False,44,"f = open(""myfile"", ""rb"")
try:
    byte = f.read(1)
    while byte != """":
        # Do stuff with byte.
        byte = f.read(1)
finally:
    f.close()"
4592,read file,True,True,21,"with open('file.txt') as f:
    f = open(os.path.join(__location__, 'rb'))"
4593,read file,False,True,21,"with open('myfile.txt') as f:
    f = open(os.path.join(__location__, 'rb'))"
4594,read file,False,True,21,"with open('file.txt') as f:
    f = open(os.path.join(__location__, 'rt'))"
4595,read file,False,True,21,"with open('myfile.txt') as f:
    f = open(os.path.join(__location__, 'rt'))"
4596,read file,False,True,19,"with open('myfile.txt') as f:
    f = open('file.txt', 'rb')"
4597,read file,False,True,19,"with open('file.txt') as f:
    f = open('file.txt', 'rb')"
4598,read file,False,True,18,"with open('myfile.txt', 'r') as f:
    f = f.read()"
4599,read file,False,False,43,"with open(filename) as f:
    content = f.readlines()
# you may also want to remove whitespace characters like `\n` at the end of each line
content = [x.strip() for x in content]"
4600,read file,True,False,25,"with open('data.txt', 'r') as file:
    data = file.read().replace('\n', '')"
4601,read file,False,False,14,"with open('filename') as f:
    lines = f.readlines()"
4602,read file,False,False,20,"with open('filename') as f:
    lines = [line.rstrip() for line in f]"
4603,read file,False,False,23,"with open(""file.txt"") as file_in:
    lines = []
    for line in file_in:
        lines.append(line)"
4604,read file,False,False,18,"with open('Path/to/file', 'r') as content_file:
    content = content_file.read()"
4605,read file,False,False,44,"f = open(""myfile"", ""rb"")
try:
    byte = f.read(1)
    while byte != """":
        # Do stuff with byte.
        byte = f.read(1)
finally:
    f.close()"
4606,iterating files in a folder,False,True,5,os.listdir('create_upload_url')
4607,iterating files in a folder,True,True,13,"for dirname, dirnames, filenames in os.walk(files):
    pass"
4608,iterating files in a folder,False,True,4,os.walk(filename)
4609,iterating files in a folder,False,True,5,os.listdir('filenames')
4610,iterating files in a folder,False,True,6,print(os.getcwd())
4611,iterating files in a folder,False,True,5,os.listdir('..')
4612,iterating files in a folder,False,True,5,glob.glob('*')
4613,iterating files in a folder,False,False,32,"from os import listdir
from os.path import isfile, join
onlyfiles = [f for f in listdir(mypath) if isfile(join(mypath, f))]"
4614,iterating files in a folder,False,False,27,"from os import walk

f = []
for (dirpath, dirnames, filenames) in walk(mypath):
    f.extend(filenames)
    break"
4615,iterating files in a folder,False,False,11,"import glob
print(glob.glob(""/home/adam/*.txt""))"
4616,iterating files in a folder,False,False,10,"['/home/adam/file1.txt', '/home/adam/file2.txt', .... ]"
4617,iterating files in a folder,False,False,29,"import os
 arr = os.listdir()
 print(arr)

 >>> ['$RECYCLE.BIN', 'work.txt', '3ebooks.txt', 'documents']"
4618,iterating files in a folder,False,False,20,"import glob

txtfiles = []
for file in glob.glob(""*.txt""):
    txtfiles.append(file)"
4619,iterating files in a folder,False,False,16,"import glob

mylist = [f for f in glob.glob(""*.txt"")]"
4634,pandas calculate mean,False,True,19,"df.groupby(np.arange(len(mean)) // 100 + 1, axis=1).mean()"
4635,pandas calculate mean,False,True,19,"df.groupby(np.arange(len(df)) // 2 + 1, axis=1).mean()"
4636,pandas calculate mean,False,True,18,df.groupby(np.arange(len(mean)) // 2 / 2).mean(axis=1)
4637,pandas calculate mean,True,True,19,"df.groupby(np.arange(len(mean)) // 2 + 1, axis=1).mean()"
4638,pandas calculate mean,False,True,18,df.groupby(np.arange(len(df)) // 2 / 2).mean(axis=1)
4639,pandas calculate mean,False,True,13,df.groupby(x.mean() / 2 + 1).mean()
4640,pandas calculate mean,False,True,13,df.groupby(x.mean() / 2 / 2).mean()
4641,pandas calculate mean,False,False,50,"In [479]: df
Out[479]: 
         ID  birthyear    weight
0    619040       1962  0.123123
1    600161       1963  0.981742
2  25602033       1963  1.312312
3    624870       1987  0.942120

In [480]: df[""weight""].mean()
Out[480]: 0.83982437500000007"
4642,pandas calculate mean,False,False,35,"In [4]: df.groupby('StationID', as_index=False)['BiasTemp'].mean()
Out[4]:
  StationID  BiasTemp
0        BB       5.0
1     KEOPS       2.5
2    SS0279      15.0"
4643,pandas calculate mean,False,False,36,"In [5]: df.groupby('StationID')['BiasTemp'].mean()
Out[5]:
StationID
BB            5.0
KEOPS         2.5
SS0279       15.0
Name: BiasTemp, dtype: float64"
4644,pandas calculate mean,False,False,11,df['value'].expanding().mean()
4645,pandas calculate mean,False,False,6,s.expanding().mean()
4646,pandas calculate mean,False,False,85,"In [1]: import numpy as np

In [2]: import pandas as pd

In [3]: index = pd.Index(['01/01/2012','01/01/2012','01/01/2012','01/02/2012','01/02/2012'], name='Date')

In [4]: df = pd.DataFrame({'ID':[100,101,102,201,202],'wt':[.5,.75,1,.5,1],'value':[60,80,100,100,80]},index=index)"
4647,pandas calculate mean,False,False,34,"In [5]: df.groupby(df.index).apply(lambda x: np.average(x.wt, weights=x.value))
Out[5]: 
Date
01/01/2012    0.791667
01/02/2012    0.722222
dtype: float64"
4648,pandas read from csv,True,True,11,"pd.read_csv('<unk>', sep='')"
4649,pandas read from csv,False,True,11,"pd.read_csv('<unk>', sep='\t')"
4650,pandas read from csv,False,True,13,"pd.read_csv('<unk>', sep=',')"
4651,pandas read from csv,False,True,14,"pd.read_csv('<unk>', sep=' ', header=None)"
4652,pandas read from csv,False,True,13,"pd.read_csv('<unk>', sep=' ]')"
4653,pandas read from csv,False,True,10,"pd.read_csv('<unk>', sheetname=None)"
4654,pandas read from csv,False,True,13,"pd.read_csv('<unk>', sep=';')"
4655,pandas read from csv,False,False,19,"chunksize = 10 ** 6
for chunk in pd.read_csv(filename, chunksize=chunksize):
    process(chunk)"
4656,pandas read from csv,False,False,10,"import pandas as pd
pd.read_csv(""../data_folder/data.csv"")"
4657,pandas read from csv,False,False,21,"# Dataframes implement the Pandas API
import dask.dataframe as dd
df = dd.read_csv('s3://.../2018-*-*.csv')"
4658,pandas read from csv,False,False,125,">>> import numpy as np, pandas as pd
>>> import io, pkgutil
>>> wells = pkgutil.get_data('pymc.examples', 'data/wells.dat')
>>> type(wells)
<class 'bytes'>
>>> df = pd.read_csv(io.BytesIO(wells), encoding='utf8', sep="" "", index_col=""id"", dtype={""switch"": np.int8})
>>> df.head()
    switch  arsenic       dist  assoc  educ
id                                         
1        1     2.36  16.826000      0     0
2        1     0.71  47.321999      0     0
3        0     2.07  20.966999      0    10
4        1     1.15  21.486000      0    12
5        1     1.10  40.874001      1    14

[5 rows x 5 columns]"
4659,pandas read from csv,False,False,89,"chunks=pd.read_table('aphro.csv',chunksize=1000000,sep=';',\
       names=['lat','long','rf','date','slno'],index_col='slno',\
       header=None,parse_dates=['date'])

df=pd.DataFrame()
%time df=pd.concat(chunk.groupby(['lat','long',chunk['date'].map(lambda x: x.year)])['rf'].agg(['sum']) for chunk in chunks)"
4660,pandas read from csv,False,False,21,"import pandas as pd
from io import StringIO
df = pd.read_csv(StringIO(""csv string...""))"
4661,pandas read from csv,False,False,106,"import os
import boto3
import pandas as pd
import sys

if sys.version_info[0] < 3: 
    from StringIO import StringIO # Python 2.x
else:
    from io import StringIO # Python 3.x

# get your credentials from environment variables
aws_id = os.environ['AWS_ID']
aws_secret = os.environ['AWS_SECRET']

client = boto3.client('s3', aws_access_key_id=aws_id,
        aws_secret_access_key=aws_secret)

bucket_name = 'my_bucket'

object_key = 'my_file.csv'
csv_obj = client.get_object(Bucket=bucket_name, Key=object_key)
body = csv_obj['Body']
csv_string = body.read().decode('utf-8')

df = pd.read_csv(StringIO(csv_string))"
4662,format output to 2 decimal,True,True,27,"""""""[{0}, {1}, {2}]"""""".format(1, 2, num=3)"
4663,format output to 2 decimal,False,True,27,"""""""[{0}, {1}, {2}]"""""".format(1, 2, subdirname=False)"
4664,format output to 2 decimal,False,True,11,"""""""ABC"""""".format(2)"
4665,format output to 2 decimal,False,True,4,sys.exit(0)
4666,format output to 2 decimal,False,True,25,"""""""[{0}, {1}, {2}]"""""".format(1, 2)"
4667,format output to 2 decimal,False,True,28,"""""""%(asctime)s;%(levelname)s;%(message)s"""""".format('output')"
4668,format output to 2 decimal,False,True,15,"""""""{:.5}"""""".format('output')"
4669,format output to 2 decimal,False,False,130,">>> 125650429603636838/(2**53)
13.949999999999999

>>> 234042163/(2**24)
13.949999988079071

>>> a = 13.946
>>> print(a)
13.946
>>> print(""%.2f"" % a)
13.95
>>> round(a,2)
13.949999999999999
>>> print(""%.2f"" % round(a, 2))
13.95
>>> print(""{:.2f}"".format(a))
13.95
>>> print(""{:.2f}"".format(round(a, 2)))
13.95
>>> print(""{:.15f}"".format(round(a, 2)))
13.949999999999999"
4670,format output to 2 decimal,False,False,10,"""{:.2f}"".format(13.949999999999999)"
4671,format output to 2 decimal,False,False,13,"float(""{:.2f}"".format(13.949999999999999))"
4672,format output to 2 decimal,False,False,64,">>> x = 13.949999999999999999
>>> x
13.95
>>> g = float(""{:.2f}"".format(x))
>>> g
13.95
>>> x == g
True
>>> h = round(x, 2)
>>> h
13.95
>>> x == h
True"
4673,format output to 2 decimal,False,False,27,">>> from math import pi  # pi ~ 3.141592653589793
>>> '{0:.2f}'.format(pi)
'3.14'"
4674,format output to 2 decimal,False,False,14,">>> f'{pi:.2f}'
'3.14'"
4675,format output to 2 decimal,False,False,11,"answer = str(round(answer, 2))"
4704,pair characters in `characters` and numbers in `numbers`,False,True,18,"characters(zip(numbers[::2], characters[1::2]))"
4705,pair characters in `characters` and numbers in `numbers`,False,True,6,"zip(characters, numbers)"
4706,pair characters in `characters` and numbers in `numbers`,True,True,11,"numbers = list(zip(characters, numbers))"
4707,pair characters in `characters` and numbers in `numbers`,False,True,20,"[(k, v) for k, v in numbers.items() if v == 'y3']"
4708,pair characters in `characters` and numbers in `numbers`,False,True,4,characters(numbers)
4709,pair characters in `characters` and numbers in `numbers`,False,True,6,"copyfile(characters, numbers)"
4710,pair characters in `characters` and numbers in `numbers`,False,True,9,"print(zip(characters, numbers))"
4711,pair characters in `characters` and numbers in `numbers`,False,False,11,">>> import string
>>> string.ascii_lowercase
'abcdefghijklmnopqrstuvwxyz'"
4712,pair characters in `characters` and numbers in `numbers`,False,False,108,">>> list(string.ascii_lowercase)
['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']"
4713,pair characters in `characters` and numbers in `numbers`,False,False,145,">>> list(map(chr, range(97, 123))) #or list(map(chr, range(ord('a'), ord('z')+1)))
['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']"
4714,pair characters in `characters` and numbers in `numbers`,False,False,102,">>> help(string) # on Python 3
....
DATA
    ascii_letters = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'
    ascii_lowercase = 'abcdefghijklmnopqrstuvwxyz'
    ascii_uppercase = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'
    digits = '0123456789'
    hexdigits = '0123456789abcdefABCDEF'
    octdigits = '01234567'
    printable = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!""#$%&\'()*+,-./:;<=>?@[\\]^_`{|}~ \t\n\r\x0b\x0c'
    punctuation = '!""#$%&\'()*+,-./:;<=>?@[\\]^_`{|}~'
    whitespace = ' \t\n\r\x0b\x0c'"
4715,pair characters in `characters` and numbers in `numbers`,False,False,20,">>> import re
>>> re.sub('\D', '', 'aas30dsa20')
'3020'"
4716,pair characters in `characters` and numbers in `numbers`,False,False,12,">>> filter(str.isdigit, 'aas30dsa20')
'3020'"
4717,pair characters in `characters` and numbers in `numbers`,False,False,16,">>> ''.join(filter(str.isdigit, 'aas30dsa20'))
'3020'"
4718,delete a column in csv,False,True,10,"pd.concat([row, row], axis=1)"
4719,delete a column in csv,True,True,9,"df.drop('value', axis=1, inplace=True)"
4720,delete a column in csv,False,True,10,"pd.concat([row, row], axis=0)"
4721,delete a column in csv,False,True,22,"df = pd.read_csv('my.csv', header=['farm', 'fruit'], na_values=['float64'])"
4722,delete a column in csv,False,True,12,"df.drop('<unk>', axis=1, inplace=True)"
4723,delete a column in csv,False,True,13,"df = pd.read_csv('my.csv', header=['names'])"
4724,delete a column in csv,False,True,6,"np.delete(df, axis=1)"
4725,delete a column in csv,False,False,9,"df = df.drop('column_name', 1)"
4726,delete a column in csv,False,False,9,"df.drop('column_name', axis=1, inplace=True)"
4727,delete a column in csv,False,False,22,"df = df.drop(df.columns[[0, 1, 3]], axis=1)  # df.columns is zero-based pd.Index"
4728,delete a column in csv,False,False,14,"df.drop(['column_nameA', 'column_nameB'], axis=1, inplace=True)"
4729,delete a column in csv,False,False,6,del df['column_name']
4730,delete a column in csv,False,False,19,"columns = ['Col1', 'Col2', ...]
df.drop(columns, inplace=True, axis=1)"
4731,delete a column in csv,False,False,8,"df = df.drop(columns, axis=1)"
4746,save dataframe to csv,True,True,9,"pd.merge(csv, csv, sep='\t')"
4747,save dataframe to csv,False,True,4,df.index.merge(*df)
4748,save dataframe to csv,False,True,5,df.values.to_csv('utf-8-sig')
4749,save dataframe to csv,False,True,5,df.index.to_csv('utf-8-sig')
4750,save dataframe to csv,False,True,7,"pd.DataFrame(df.values, columns='*')"
4751,save dataframe to csv,False,True,11,"df.index.apply(lambda x: x.tolist(), axis=1)"
4752,save dataframe to csv,False,True,12,"df.index.apply(lambda x: np.cos(x), axis=1)"
4753,save dataframe to csv,False,False,7,"df.to_csv(file_name, sep='\t')"
4754,save dataframe to csv,False,False,10,"df.to_csv(file_name, sep='\t', encoding='utf-8')"
4755,save dataframe to csv,False,False,9,"df.to_csv(file_name, encoding='utf-8', index=False)"
4756,save dataframe to csv,False,False,8,"Color  Number
0   red     22
1  blue     10"
4757,save dataframe to csv,False,False,5,"Color,Number
red,22
blue,10"
4758,save dataframe to csv,False,False,10,",Color,Number
0,red,22
1,blue,10"
4759,save dataframe to csv,False,False,8,df.toPandas().to_csv('mycsv.csv')
4774,reformat date,True,True,14,datetime.datetime.now().strftime('%Y-%m-%d')
4775,reformat date,False,True,8,"datetime.datetime.combine(datetime.date.today(), date)"
4776,reformat date,False,True,10,"datetime.datetime.combine(datetime.date.today(), datetime.date.today())"
4777,reformat date,False,True,10,"datetime.datetime.combine(datetime.date.today(), '.')"
4778,reformat date,False,True,17,"datetime.datetime.combine(datetime.date.today(), '%H:%M:%S')"
4779,reformat date,False,True,6,datetime.datetime.now().isoformat()
4780,reformat date,False,True,10,"datetime.datetime.combine(datetime.date.today(), datetime.datetime.now())"
4781,reformat date,False,False,10,"for date in mylist :
    print str(date)"
4782,reformat date,False,False,128,"import datetime
mylist = []
today = datetime.date.today()
mylist.append(today)
print mylist[0] # print the date object, not the container ;-)
2008-11-22

# It's better to always use str() because :

print ""This is a new day : "", mylist[0] # will work
>>> This is a new day : 2008-11-22

print ""This is a new day : "" + mylist[0] # will crash
>>> cannot concatenate 'str' and 'datetime.date' objects

print ""This is a new day : "" + str(mylist[0]) 
>>> This is a new day : 2008-11-22"
4783,reformat date,False,False,26,"print today.strftime('We are the %d, %b %Y')
>>> 'We are the 22, Nov 2008'"
4784,reformat date,False,False,31,"print ""We are the {:%d, %b %Y}"".format(today)
>>> 'We are the 22, Nov 2008'"
4785,reformat date,False,False,22,"import datetime
f""{datetime.datetime.now():%Y-%m-%d}""
>>> '2017-06-15'"
4786,reformat date,False,False,22,"import datetime
print datetime.datetime.now().strftime(""%Y-%m-%d %H:%M"")"
4787,reformat date,False,False,19,"import time
print time.strftime(""%Y-%m-%d %H:%M"")"
4788,"create list ""a_list""",True,True,5,a = [a_list]
4789,"create list ""a_list""",False,True,5,a_list = [a_list]
4790,"create list ""a_list""",False,True,18,"my_list = ['a_list', 'a', 'b', 'c']"
4791,"create list ""a_list""",False,True,14,"my_list = ['a_list', 'a', 'b']"
4792,"create list ""a_list""",False,True,6,print([a_list])
4793,"create list ""a_list""",False,True,17,"my_list = ['a_list', 'a', 'a', 's']"
4794,"create list ""a_list""",False,True,23,"a_list = ['a_list', 'a', 'a', 's', 'd', 's']"
4795,"create list ""a_list""",False,False,35,">>> l = [None] * 10
>>> l
[None, None, None, None, None, None, None, None, None, None]"
4796,"create list ""a_list""",False,False,34,">>> l[1] = 5
>>> l
[None, 5, None, None, None, None, None, None, None, None]"
4797,"create list ""a_list""",False,False,49,"# 2.X only. Use list(range(10)) in 3.X.
>>> l = range(10)
>>> l
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]"
4798,"create list ""a_list""",False,False,70,">>> def display():
...     s1 = []
...     for i in range(9): # This is just to tell you how to create a list.
...         s1.append(i)
...     return s1
... 
>>> print display()
[0, 1, 2, 3, 4, 5, 6, 7, 8]"
4799,"create list ""a_list""",False,False,47,">>> def display():
...     return [x**2 for x in range(9)]
... 
>>> print display()
[0, 1, 4, 9, 16, 25, 36, 49, 64]"
4800,"create list ""a_list""",False,False,5,[e] * n
4801,"create list ""a_list""",False,False,44,">>> timeit.timeit('itertools.repeat(0, 10)', 'import itertools', number = 1000000)
0.37095273281943264
>>> timeit.timeit('[0] * 10', 'import itertools', number = 1000000)
0.5577236771712819"
4802,create dictionary,True,True,26,"dict((k, list(v.values())[k]) for k in ('utf-8', '16'))"
4803,create dictionary,False,True,22,"dict((key, int(value)) for key, value in list(dict1.items()))"
4804,create dictionary,False,True,19,"dict((k, int(v)) for k, v in d.items())"
4805,create dictionary,False,True,14,"dict(map(int, list(data.items())))"
4806,create dictionary,False,True,14,"dict(map(int, list(d.items())))"
4807,create dictionary,False,True,27,"dict((k, list(v.values())[k]) for k in ('head', '6'))"
4808,create dictionary,False,True,22,"dict((key, int(value)) for key, value in list(dict.items()))"
4809,create dictionary,False,False,13,"{key: value for (key, value) in iterable}"
4810,create dictionary,False,False,15,"dict((key, func(key)) for key in keys)"
4811,create dictionary,False,False,34,"1) consumed from any iterable yielding pairs of keys/vals
dict(pairs)

2) ""zip'ped"" from two separate iterables of keys/vals
dict(zip(list_of_keys, list_of_values))"
4812,create dictionary,False,False,5,new_dict = dict()
4813,create dictionary,False,False,4,new_dict = {}
4814,create dictionary,False,False,12,"x = {}
x['a'] = 1"
4815,create dictionary,False,False,13,"d = {k:v for k, v in iterable}"
4816,generate random number,False,True,7,random.choice(range(10))
4817,generate random number,False,True,7,random.choice(range(9))
4818,generate random number,True,True,6,"random.randint(0, 9)"
4819,generate random number,True,True,6,"random.randint(0, 7)"
4820,generate random number,False,True,10,int(random.choice(range(100)))
4821,generate random number,False,True,7,random.choice(range(100))
4822,generate random number,False,True,7,random.choice(range(3))
4823,generate random number,False,False,11,"from random import randrange
print(randrange(10))"
4824,generate random number,False,False,9,"import random
print(random.randint(0,9))"
4825,generate random number,False,False,6,"random.randint(a, b)"
4826,generate random number,False,False,26,">>> import random
>>> random.sample(range(1, 100), 3)
[77, 52, 45]"
4827,generate random number,False,False,38,">>> try:
...   random.sample(range(1, 2), 3)
... except ValueError:
...   print('Sample size exceeded population size.')
... 
Sample size exceeded population size"
4828,generate random number,False,False,8,"import random
random.uniform(0, 1)"
4829,generate random number,False,False,17,"from random import randint
randint(100, 999)  # randint is inclusive at both ends"
4830,generate random number,False,True,7,random.choice(range(10))
4831,generate random number,False,True,7,random.choice(range(9))
4832,generate random number,True,True,6,"random.randint(0, 9)"
4833,generate random number,True,True,6,"random.randint(0, 7)"
4834,generate random number,False,True,10,int(random.choice(range(100)))
4835,generate random number,False,True,7,random.choice(range(100))
4836,generate random number,False,True,7,random.choice(range(3))
4837,generate random number,False,False,11,"from random import randrange
print(randrange(10))"
4838,generate random number,False,False,9,"import random
print(random.randint(0,9))"
4839,generate random number,False,False,6,"random.randint(a, b)"
4840,generate random number,False,False,26,">>> import random
>>> random.sample(range(1, 100), 3)
[77, 52, 45]"
4841,generate random number,False,False,38,">>> try:
...   random.sample(range(1, 2), 3)
... except ValueError:
...   print('Sample size exceeded population size.')
... 
Sample size exceeded population size"
4842,generate random number,False,False,8,"import random
random.uniform(0, 1)"
4843,generate random number,False,False,17,"from random import randint
randint(100, 999)  # randint is inclusive at both ends"
4872,"copy column from ""data.csv"" file to another ""output.csv""",False,True,18,"output.csv['data.csv'] = pd.to_datetime(data.csv['data.csv'], format=
    'output.csv')"
4873,"copy column from ""data.csv"" file to another ""output.csv""",False,True,18,"output.csv['data.csv'] = pd.read_csv('data.csv', sep=' ', var_name='data.csv')"
4874,"copy column from ""data.csv"" file to another ""output.csv""",True,True,10,output.csv['data.csv'] = pd.data.csv(data.csv)
4875,"copy column from ""data.csv"" file to another ""output.csv""",False,True,19,"output.csv['data.csv'] = pd.read_csv('data.csv', sep=' ', value_name=
    'output.csv')"
4876,"copy column from ""data.csv"" file to another ""output.csv""",False,True,15,"output.csv['data.csv'] = pd.read_csv('data.csv', sep=' ')"
4877,"copy column from ""data.csv"" file to another ""output.csv""",False,True,14,output.csv['data.csv'] = pd.to_datetime(data.csv['data.csv'])
4878,"copy column from ""data.csv"" file to another ""output.csv""",False,True,10,"pandas.concat([data.csv, output.csv], axis=1)"
4879,"copy column from ""data.csv"" file to another ""output.csv""",False,False,41,"import csv
from itertools import izip
a = izip(*csv.reader(open(""input.csv"", ""rb"")))
csv.writer(open(""output.csv"", ""wb"")).writerows(a)"
4880,"copy column from ""data.csv"" file to another ""output.csv""",False,False,59,"a = [(1, 2, 3),
     (4, 5, 6),
     (7, 8, 9)]
zip(*a)
# [(1, 4, 7),
#  (2, 5, 8),
#  (3, 6, 9)]"
4881,"copy column from ""data.csv"" file to another ""output.csv""",False,False,20,"import pandas as pd
pd.read_csv('input.csv', header=None).T.to_csv('output.csv', header=False, index=False)"
4882,"copy column from ""data.csv"" file to another ""output.csv""",False,False,57,"import csv
reader = csv.reader(open('output.csv', 'rb'))
reader1 = csv.reader(open('output1.csv', 'rb'))
writer = csv.writer(open('appended_output.csv', 'wb'))
for row in reader:
    row1 = reader1.next()
    writer.writerow(row + row1)"
4883,"copy column from ""data.csv"" file to another ""output.csv""",False,False,46,"import os, sys
target = '/path/to/target'
src1 = '/path/to/source1.csv'
src2 = '/path/to/source2.csv'
tf = open(target, 'a')
tf.write(open(src1).read())
tf.write(open(src2).read())
tf.close()"
4884,"copy column from ""data.csv"" file to another ""output.csv""",False,False,62,"import csv

date_reader = csv.reader(open('Date.csv', 'rb'))
price_reader = csv.reader(open('Price.csv', 'rb'))
writer = csv.writer(open('NewData.csv', 'wb'))
for date_row in date_reader:
    price_row = price_reader.next()
    writer.writerow(date_row + [price_row[1]])"
4885,"copy column from ""data.csv"" file to another ""output.csv""",False,False,41,"ID, Date, Price
0,""Jan 22, 2016"",27.89
1,""Jan 21, 2016"",26.80
2,""Jan 20, 2016"",26.78
3,""Jan 19, 2016"",26.00"
4914,write to csv file,True,True,4,writer.writerow(write)
4915,write to csv file,False,True,4,writer.writerow(csv)
4916,write to csv file,True,True,4,writer.writerow(file)
4917,write to csv file,False,True,7,"pd.read_csv('write', shell=True)"
4918,write to csv file,False,True,7,"pd.read_csv('file', shell=True)"
4919,write to csv file,False,True,4,writer.writerow(para)
4920,write to csv file,False,True,4,writer.writerow(extra)
4921,write to csv file,False,False,7,"df.to_csv(file_name, sep='\t')"
4922,write to csv file,False,False,10,"df.to_csv(file_name, sep='\t', encoding='utf-8')"
4923,write to csv file,False,False,9,"df.to_csv(file_name, encoding='utf-8', index=False)"
4924,write to csv file,False,False,8,"Color  Number
0   red     22
1  blue     10"
4925,write to csv file,False,False,5,"Color,Number
red,22
blue,10"
4926,write to csv file,False,False,10,",Color,Number
0,red,22
1,blue,10"
4927,write to csv file,False,False,36,"##text=List of strings to be written to file
with open('csvfile.csv','wb') as file:
    for line in text:
        file.write(line)
        file.write('\n')"
4928,new line,True,True,5,mmap.write('\n')
4929,new line,False,True,5,mmap.write('line')
4930,new line,False,True,10,"subprocess.call('<unk>', shell=True)"
4931,new line,False,True,10,"subprocess.call('My <unk>', shell=True)"
4932,new line,False,True,13,"subprocess.call('My <unk> <unk>', shell=True)"
4933,new line,False,True,10,"subprocess.check_output('<unk>', shell=True)"
4934,new line,False,True,11,"subprocess.call('HTTP/1.0 200 <unk>', shell=True)"
4935,new line,False,False,10,">>> 'test string\n'.rstrip()
'test string'"
4936,new line,False,False,13,">>> 'test string \n \r\n\n\r \n\n'.rstrip()
'test string'"
4937,new line,False,False,17,">>> 'test string \n \r\n\n\r \n\n'.rstrip('\n')
'test string \n \r\n\n\r '"
4938,new line,False,False,44,">>> s = ""   \n\r\n  \n  abc   def \n\r\n  \n  ""
>>> s.strip()
'abc   def'
>>> s.lstrip()
'abc   def \n\r\n  \n  '
>>> s.rstrip()
'   \n\r\n  \n  abc   def'"
4939,new line,False,False,18,"a = dostuff(blahblah1, blahblah2, blahblah3, blahblah4, blahblah5, 
            blahblah6, blahblah7)"
4940,new line,False,False,9,"if a == True and \
   b == False"
4941,new line,False,False,22,"a = '1' + '2' + '3' + \
    '4' + '5'"
4956,read csv file using pandas,True,True,15,"pd.read_csv('<unk>', sep=',', header=None)"
4957,read csv file using pandas,False,True,13,"pd.read_csv('<unk>', sep='', header=None)"
4958,read csv file using pandas,False,True,13,"pd.read_csv('<unk>', sep='\t', header=None)"
4959,read csv file using pandas,False,True,13,"pd.read_csv('my.csv', sep=',', lineterminator='\r')"
4960,read csv file using pandas,False,True,14,"pd.read_csv('<unk>', sep='', lineterminator='\r')"
4961,read csv file using pandas,False,True,16,"pd.read_csv('<unk>', sep=',', lineterminator='\r')"
4962,read csv file using pandas,False,True,14,"pd.read_csv('<unk>', sep='\t', lineterminator='\r')"
4963,read csv file using pandas,False,False,49,"import pandas as pd
print pd.read_csv('value.txt')

        Date    price  factor_1  factor_2
0  2012-06-11  1600.20     1.255     1.548
1  2012-06-12  1610.02     1.258     1.554
2  2012-06-13  1618.07     1.249     1.552
3  2012-06-14  1624.40     1.253     1.556
4  2012-06-15  1626.15     1.258     1.552
5  2012-06-16  1626.15     1.263     1.558
6  2012-06-17  1626.15     1.264     1.572"
4964,read csv file using pandas,False,False,14,"import pandas as pd
df = pd.read_csv('file_name.csv', engine='python')"
4965,read csv file using pandas,False,False,14,"import pandas as pd
data = pd.read_csv('file_name.csv', encoding='utf-8')"
4966,read csv file using pandas,False,False,10,"encoding = ""cp1252""
encoding = ""ISO-8859-1"""
4967,read csv file using pandas,False,False,106,"import os
import boto3
import pandas as pd
import sys

if sys.version_info[0] < 3: 
    from StringIO import StringIO # Python 2.x
else:
    from io import StringIO # Python 3.x

# get your credentials from environment variables
aws_id = os.environ['AWS_ID']
aws_secret = os.environ['AWS_SECRET']

client = boto3.client('s3', aws_access_key_id=aws_id,
        aws_secret_access_key=aws_secret)

bucket_name = 'my_bucket'

object_key = 'my_file.csv'
csv_obj = client.get_object(Bucket=bucket_name, Key=object_key)
body = csv_obj['Body']
csv_string = body.read().decode('utf-8')

df = pd.read_csv(StringIO(csv_string))"
4968,read csv file using pandas,False,False,80,"import pandas as pd
import boto3

bucket = ""yourbucket""
file_name = ""your_file.csv""

s3 = boto3.client('s3') 
# 's3' is a key word. create connection to S3 using default config and all buckets within S3

obj = s3.get_object(Bucket= bucket, Key= file_name) 
# get object and file (key) from bucket

initial_df = pd.read_csv(obj['Body']) # 'Body' is a key word"
4969,read csv file using pandas,False,False,27,"file_encoding = 'cp1252'        # set file_encoding to the file encoding (utf8, latin1, etc.)
pd.read_csv(input_file_and_path, ..., encoding=file_encoding)"
5012,check if string has specific pattern,True,True,14,"re.findall('\\[(.*?)\\]', s)"
5013,check if string has specific pattern,False,True,14,"re.findall('\\[(.*?)\\]', str1)"
5014,check if string has specific pattern,False,True,14,"re.findall('\\[(.*?)\\]', compile)"
5015,check if string has specific pattern,False,True,14,"re.findall('\\[(.*?)\\]', string)"
5016,check if string has specific pattern,False,True,11,"re.findall('#(\\w+)', string)"
5017,check if string has specific pattern,False,True,11,"re.findall('#(\\w+)', text)"
5018,check if string has specific pattern,False,True,7,"re.findall('\\S+', str1)"
5019,check if string has specific pattern,False,False,9,"if ""blah"" not in somestring: 
    continue"
5020,check if string has specific pattern,False,False,42,"s = ""This be a string""
if s.find(""is"") == -1:
    print(""No 'is' here!"")
else:
    print(""Found 'is' in the string."")"
5021,check if string has specific pattern,False,False,25,"import re
pattern = re.compile(""^([A-Z][0-9]+)+$"")
pattern.match(string)"
5022,check if string has specific pattern,False,False,8,"if word in mystring: 
   print 'success'"
5023,check if string has specific pattern,False,False,48,"'$' in s        # found
'$' not in s    # not found

# original answer given, but less Pythonic than the above...
s.find('$')==-1 # not found
s.find('$')!=-1 # found"
5024,check if string has specific pattern,False,False,27,"pattern = re.compile(r'\d\$,')
if pattern.findall(s):
    print('Found')
else
    print('Not found')"
5025,check if string has specific pattern,False,False,36,"chars = set('0123456789$,')
if any((c in chars) for c in s):
    print('Found')
else:
    print('Not Found')"
5026,regex dd-mm-yy,True,True,7,"re.findall('\\d+', regex)"
5027,regex dd-mm-yy,False,True,7,"re.findall('10000', regex)"
5028,regex dd-mm-yy,False,True,7,"re.findall('\n\\s*\n', regex)"
5029,regex dd-mm-yy,False,True,17,"re.findall('\\d+(?=[^[]+$)', regex)"
5030,regex dd-mm-yy,False,True,21,"re.findall('(([0-9]+)([A-Z]))', '10000')"
5031,regex dd-mm-yy,False,True,8,"re.findall('10000', 'dd-mm-yy')"
5032,regex dd-mm-yy,False,True,16,"re.findall('\\d+', '\n'.join(re.findall('\\S+', str1)))"
5033,regex dd-mm-yy,False,False,240,"^(?:(?:31(\/|-|\.)(?:0?[13578]|1[02]|(?:Jan|Mar|May|Jul|Aug|Oct|Dec)))\1|(?:(?:29|30)(\/|-|\.)(?:0?[1,3-9]|1[0-2]|(?:Jan|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec))\2))(?:(?:1[6-9]|[2-9]\d)?\d{2})$|^(?:29(\/|-|\.)(?:0?2|(?:Feb))\3(?:(?:(?:1[6-9]|[2-9]\d)?(?:0[48]|[2468][048]|[13579][26])|(?:(?:16|[2468][048]|[3579][26])00))))$|^(?:0?[1-9]|1\d|2[0-8])(\/|-|\.)(?:(?:0?[1-9]|(?:Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep))|(?:1[0-2]|(?:Oct|Nov|Dec)))\4(?:(?:1[6-9]|[2-9]\d)?\d{2})$"
5034,regex dd-mm-yy,False,False,107,"(^(((0[1-9]|1[0-9]|2[0-8])[\/](0[1-9]|1[012]))|((29|30|31)[\/](0[13578]|1[02]))|((29|30)[\/](0[4,6,9]|11)))[\/](19|[2-9][0-9])\d\d$)|(^29[\/]02[\/](19|[2-9][0-9])(00|04|08|12|16|20|24|28|32|36|40|44|48|52|56|60|64|68|72|76|80|84|88|92|96)$)"
5035,regex dd-mm-yy,False,False,31,"function validateDate(testdate) {
    var date_regex = /^\d{2}\/\d{2}\/\d{4}$/ ;
    return date_regex.test(testdate);
}"
5036,regex dd-mm-yy,False,False,49,"function validateDate(testdate) {
    var date_regex = /^(0[1-9]|1[0-2])\/(0[1-9]|1\d|2\d|3[01])\/(19|20)\d{2}$/ ;
    return date_regex.test(testdate);
}"
5037,regex dd-mm-yy,False,False,28,"import datetime
dd = datetime.datetime.strptime(date,'%y%m%d')
if dd.year > 2005:
   dd = dd.replace(year=dd.year-100)"
5038,regex dd-mm-yy,False,False,32,"import datetime

print datetime.datetime.strptime('2010-08-27', '%Y-%m-%d')
print datetime.datetime.strptime('2010-15-27', '%Y-%m-%d')"
5039,regex dd-mm-yy,False,False,71,"2010-08-27 00:00:00
Traceback (most recent call last):
  File ""./x.py"", line 6, in <module>
    print datetime.datetime.strptime('2010-15-27', '%Y-%m-%d')
  File ""/usr/lib/python2.7/_strptime.py"", line 325, in _strptime
    (data_string, format))
ValueError: time data '2010-15-27' does not match format '%Y-%m-%d'"
5152,read csv,True,True,9,"df = pd.read_csv('my.csv', header=None)"
5153,read csv,False,True,15,"pd.read_csv('<unk>', sep=',', header=None)"
5154,read csv,False,True,13,"np.genfromtxt('<unk>', delimiter=',')"
5155,read csv,False,True,17,"df = pd.read_csv('<unk>', quotechar=',', header=None)"
5156,read csv,False,True,21,"df = pd.read_csv('my.csv', na_values=['%H:%M:%S'])"
5157,read csv,False,True,13,"pd.read_csv('<unk>', sep='', header=None)"
5158,read csv,False,True,11,"pd.read_csv('my.csv', na_values=['utf-8'])"
5159,read csv,False,False,180,"import csv

# Define data
data = [
    (1, ""A towel,"", 1.0),
    (42, "" it says, "", 2.0),
    (1337, ""is about the most "", -1),
    (0, ""massively useful thing "", 123),
    (-2, ""an interstellar hitchhiker can have."", 3),
]

# Write CSV file
with open(""test.csv"", ""wt"") as fp:
    writer = csv.writer(fp, delimiter="","")
    # writer.writerow([""your"", ""header"", ""foo""])  # write header
    writer.writerows(data)

# Read CSV file
with open(""test.csv"") as fp:
    reader = csv.reader(fp, delimiter="","", quotechar='""')
    # next(reader, None)  # skip the headers
    data_read = [row for row in reader]

print(data_read)"
5160,read csv,False,False,77,"[['1', 'A towel,', '1.0'],
 ['42', ' it says, ', '2.0'],
 ['1337', 'is about the most ', '-1'],
 ['0', 'massively useful thing ', '123'],
 ['-2', 'an interstellar hitchhiker can have.', '3']]"
5161,read csv,False,False,28,"import mpu.io
data = mpu.io.read('example.csv', delimiter=',', quotechar='""', skiprows=None)
mpu.io.write('example.csv', data)"
5162,read csv,False,False,92,"import pandas as pd

# Read the CSV into a pandas data frame (df)
#   With a df you can do many things
#   most important: visualize data with Seaborn
df = pd.read_csv('myfile.csv', sep=',')
print(df)

# Or export it in many ways, e.g. a list of tuples
tuples = [tuple(x) for x in df.values]

# or export it as a list of dicts
dicts = df.to_dict().values()"
5163,read csv,False,False,37,"1,""A towel,"",1.0
42,"" it says, "",2.0
1337,is about the most ,-1
0,massively useful thing ,123
-2,an interstellar hitchhiker can have.,3"
5164,read csv,False,False,115,"yourstring= '""ABC"", ""XYZ,MNO"", ""KLM""\n""ABC"", ""MN""\n""ABC"", ""123"", ""10"", ""OPPA GANGNAM STYLE"", ""LADY""'

import csv
import io

class MyDialect(csv.Dialect):
    strict = True
    skipinitialspace = True
    quoting = csv.QUOTE_ALL
    delimiter = ','
    quotechar = '""'
    lineterminator = '\n'


b = io.StringIO(yourstring)
r = csv.reader(b, MyDialect())

for i in r:
    print len(i), ':',' @ '.join(i)"
5165,read csv,False,False,7,"if batch:
    do_something(batch)"
5236,newline space,False,True,14,"re.findall('<unk>', '<unk>')"
5237,newline space,False,True,16,"re.sub('<unk>', '', '<unk>')"
5238,newline space,True,True,11,""""""" """""".rstrip('\r\n')"
5239,newline space,False,True,14,"re.findall('<unk> ', '<unk>')"
5240,newline space,False,True,12,"re.findall('[ <unk> ', '\\\\')"
5241,newline space,False,True,17,"re.sub('<unk>', ' ', '<unk>')"
5242,newline space,False,True,14,"re.sub('<unk>', ' ', '\\\\')"
5243,newline space,False,False,9,"print('.', end='')"
5244,newline space,False,False,17,"print('a', 'b', 'c', sep='')"
5245,newline space,False,False,11,"print('.', end='', flush=True)"
5246,newline space,False,False,4,from __future__ import print_function
5247,newline space,False,False,8,"import sys
sys.stdout.write('.')"
5248,newline space,False,False,3,sys.stdout.flush()
5249,newline space,False,False,34,">>> for i in range(10):
...     print i,
... else:
...     print
...
0 1 2 3 4 5 6 7 8 9
>>>"
5278,findall,True,True,11,"re.findall('<unk>', 'раз')"
5279,findall,False,True,8,"re.findall('раз', 'раз')"
5280,findall,False,True,13,"re.search('<unk>', re).split()"
5281,findall,False,True,10,"re.findall('<unk>', pattern)"
5282,findall,False,True,17,"re.findall('<unk>', 'раз <unk> <unk>')"
5283,findall,False,True,10,"re.findall('<unk>', s)"
5284,findall,False,True,11,"re.findall('раз', '<unk>')"
5285,findall,False,False,31,"import re
[m.start() for m in re.finditer('test', 'test test test test')]
#[0, 5, 10, 15]"
5286,findall,False,False,26,"[m.start() for m in re.finditer('(?=tt)', 'ttt')]
#[0, 1]"
5287,findall,False,False,54,"search = 'tt'
[m.start() for m in re.finditer('(?=%s)(?!.{1,%d}%s)' % (search, len(search)-1, search), 'ttt')]
#[1]"
5288,findall,False,False,30,">>> help(str.find)
Help on method_descriptor:

find(...)
    S.find(sub [,start [,end]]) -> int"
5289,findall,False,False,69,"def find_all(a_str, sub):
    start = 0
    while True:
        start = a_str.find(sub, start)
        if start == -1: return
        yield start
        start += len(sub) # use start += 1 to find overlapping matches

list(find_all('spam spam spam spam', 'spam')) # [0, 5, 10, 15]"
5290,findall,False,False,60,"import re
regex = ur""\[P\] (.+?) \[/P\]+?""
line = ""President [P] Barack Obama [/P] met Microsoft founder [P] Bill Gates [/P], yesterday.""
person = re.findall(regex, line)
print(person)"
5291,findall,False,False,9,"['Barack Obama', 'Bill Gates']"
5292,generate 100 random lower-cased leters,True,True,14,"random.choice(range(100), args=(100, 100))"
5293,generate 100 random lower-cased leters,False,True,8,"random.randint(0, 100, size=100)"
5294,generate 100 random lower-cased leters,False,True,9,"random.choice(range(100), flags=random.random)"
5295,generate 100 random lower-cased leters,False,True,7,random.choice(range(100))
5296,generate 100 random lower-cased leters,False,True,9,"random.choice(range(100), **100)"
5297,generate 100 random lower-cased leters,False,True,6,"random.randint(100, 100)"
5298,generate 100 random lower-cased leters,False,True,9,"random.choice(range(100), flags=random.randrange)"
5299,generate 100 random lower-cased leters,False,False,16,''.join(random.choice(string.ascii_uppercase + string.digits) for _ in range(N))
5300,generate 100 random lower-cased leters,False,False,11,"''.join(random.choices(string.ascii_uppercase + string.digits, k=N))"
5301,generate 100 random lower-cased leters,False,False,19,''.join(random.SystemRandom().choice(string.ascii_uppercase + string.digits) for _ in range(N))
5302,generate 100 random lower-cased leters,False,False,61,">>> import string
>>> import random
>>> def id_generator(size=6, chars=string.ascii_uppercase + string.digits):
...    return ''.join(random.choice(chars) for _ in range(size))
...
>>> id_generator()
'G5G74W'
>>> id_generator(3, ""6793YUIO"")
'Y3U'"
5303,generate 100 random lower-cased leters,False,False,18,">>> string.ascii_uppercase
'ABCDEFGHIJKLMNOPQRSTUVWXYZ'
>>> string.digits
'0123456789'
>>> string.ascii_uppercase + string.digits
'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'"
5304,generate 100 random lower-cased leters,False,False,62,">>> range(4) # range create a list of 'n' numbers
[0, 1, 2, 3]
>>> ['elem' for _ in range(4)] # we use range to create 4 times 'elem'
['elem', 'elem', 'elem', 'elem']"
5305,generate 100 random lower-cased leters,False,False,33,">>> random.choice(""abcde"")
'a'
>>> random.choice(""abcde"")
'd'
>>> random.choice(""abcde"")
'b'"
5334,generate random numbers between 1-20 inclusive,False,True,9,"print(random.randint(0, 11.5))"
5335,generate random numbers between 1-20 inclusive,False,True,9,"print(random.randint(0, 1))"
5336,generate random numbers between 1-20 inclusive,False,True,9,"print(random.randint(0, 7))"
5337,generate random numbers between 1-20 inclusive,False,True,9,"print(random.randint(0, 9))"
5338,generate random numbers between 1-20 inclusive,False,True,9,"print(random.randint(0, 0.1))"
5339,generate random numbers between 1-20 inclusive,True,True,9,"print(random.randint(0, 50))"
5340,generate random numbers between 1-20 inclusive,False,True,9,"print(random.randint(0, 0.2))"
5341,generate random numbers between 1-20 inclusive,False,False,11,"from random import randrange
print(randrange(10))"
5342,generate random numbers between 1-20 inclusive,False,False,9,"import random
print(random.randint(0,9))"
5343,generate random numbers between 1-20 inclusive,False,False,6,"random.randint(a, b)"
5344,generate random numbers between 1-20 inclusive,False,False,26,">>> import random
>>> random.sample(range(1, 100), 3)
[77, 52, 45]"
5345,generate random numbers between 1-20 inclusive,False,False,38,">>> try:
...   random.sample(range(1, 2), 3)
... except ValueError:
...   print('Sample size exceeded population size.')
... 
Sample size exceeded population size"
5346,generate random numbers between 1-20 inclusive,False,False,11,"import random
random.sample(range(100), 10)"
5347,generate random numbers between 1-20 inclusive,False,False,21,"all_lines = f1.readlines()
for i in range(50):
    lines = random.sample(all_lines, 40)"
5348,"Given list `letters` and `integers`, create a dicitonary such that the values in `letters` are keys and values in `integers` are values",True,True,20,"letters = [(x + y) for x, y in zip(letters, integers)]"
5349,"Given list `letters` and `integers`, create a dicitonary such that the values in `letters` are keys and values in `integers` are values",False,True,17,"letters = [(k, v) for k, v in letters.items()]"
5350,"Given list `letters` and `integers`, create a dicitonary such that the values in `letters` are keys and values in `integers` are values",False,True,14,letters = [x for x in letters if x not in integers]
5351,"Given list `letters` and `integers`, create a dicitonary such that the values in `letters` are keys and values in `integers` are values",False,True,13,[list(x) for x in zip(*letters)]
5352,"Given list `letters` and `integers`, create a dicitonary such that the values in `letters` are keys and values in `integers` are values",False,True,18,"[dict(x, key=lambda x: x[1]) for x in letters]"
5353,"Given list `letters` and `integers`, create a dicitonary such that the values in `letters` are keys and values in `integers` are values",False,True,15,"[k for k, v in letters.items() if v == integers]"
5354,"Given list `letters` and `integers`, create a dicitonary such that the values in `letters` are keys and values in `integers` are values",False,True,12,letters = [int(x) for x in letters]
5355,"Given list `letters` and `integers`, create a dicitonary such that the values in `letters` are keys and values in `integers` are values",False,False,13,"{key: value for (key, value) in iterable}"
5356,"Given list `letters` and `integers`, create a dicitonary such that the values in `letters` are keys and values in `integers` are values",False,False,15,"dict((key, func(key)) for key in keys)"
5357,"Given list `letters` and `integers`, create a dicitonary such that the values in `letters` are keys and values in `integers` are values",False,False,34,"1) consumed from any iterable yielding pairs of keys/vals
dict(pairs)

2) ""zip'ped"" from two separate iterables of keys/vals
dict(zip(list_of_keys, list_of_values))"
5358,"Given list `letters` and `integers`, create a dicitonary such that the values in `letters` are keys and values in `integers` are values",False,False,11,"for key in newdict.keys():
  print(key)"
5359,"Given list `letters` and `integers`, create a dicitonary such that the values in `letters` are keys and values in `integers` are values",False,False,3,dict.items()
5360,"Given list `letters` and `integers`, create a dicitonary such that the values in `letters` are keys and values in `integers` are values",False,False,25,">>> newdict = {1:0, 2:0, 3:0}
>>> [*newdict]
[1, 2, 3]"
5361,"Given list `letters` and `integers`, create a dicitonary such that the values in `letters` are keys and values in `integers` are values",False,False,53,"%timeit [*newdict]
1000000 loops, best of 3: 249 ns per loop

%timeit list(newdict)
1000000 loops, best of 3: 508 ns per loop

%timeit [k for k in newdict]
1000000 loops, best of 3: 574 ns per loop"
5362,print `dic` sorted by keys,False,True,14,"print(sorted(list(dic.items()), key=k))"
5363,print `dic` sorted by keys,False,True,14,"print(sorted(list(dic.items()), **k))"
5364,print `dic` sorted by keys,True,True,14,"print(sorted(list(dic.items()), key=tuple))"
5365,print `dic` sorted by keys,False,True,8,print(dic.decode('*'))
5366,print `dic` sorted by keys,False,True,20,"print(sorted(list(dic.items()), key=lambda x: x[1]))"
5367,print `dic` sorted by keys,False,True,8,print(dic.decode('unicode-escape'))
5368,print `dic` sorted by keys,False,True,9,"print(sorted(dic, key=k))"
5369,print `dic` sorted by keys,True,False,78,"In [1]: import collections

In [2]: d = {2:3, 1:89, 4:5, 3:0}

In [3]: od = collections.OrderedDict(sorted(d.items()))

In [4]: od
Out[4]: OrderedDict([(1, 89), (2, 3), (3, 0), (4, 5)])"
5370,print `dic` sorted by keys,False,False,59,"In [11]: od[1]
Out[11]: 89

In [12]: od[3]
Out[12]: 0

In [13]: for k, v in od.iteritems(): print k, v
   ....: 
1 89
2 3
3 0
4 5"
5371,print `dic` sorted by keys,False,False,31,"In [13]: for k, v in od.items(): print(k, v)
   ....: 
1 89
2 3
3 0
4 5"
5372,print `dic` sorted by keys,False,False,36,"mydict = {'carl':40,
          'alan':2,
          'bob':1,
          'danny':3}

for key in sorted(mydict):
    print ""%s: %s"" % (key, mydict[key])"
5373,print `dic` sorted by keys,False,False,12,"alan: 2
bob: 1
carl: 40
danny: 3"
5374,print `dic` sorted by keys,False,False,30,"keylist = mydict.keys()
keylist.sort()
for key in keylist:
    print ""%s: %s"" % (key, mydict[key])"
5375,print `dic` sorted by keys,False,False,235,">>> from collections import OrderedDict

>>> # regular unsorted dictionary
>>> d = {'banana': 3, 'apple':4, 'pear': 1, 'orange': 2}

>>> # dictionary sorted by key -- OrderedDict(sorted(d.items()) also works
>>> OrderedDict(sorted(d.items(), key=lambda t: t[0]))
OrderedDict([('apple', 4), ('banana', 3), ('orange', 2), ('pear', 1)])

>>> # dictionary sorted by value
>>> OrderedDict(sorted(d.items(), key=lambda t: t[1]))
OrderedDict([('pear', 1), ('orange', 2), ('banana', 3), ('apple', 4)])

>>> # dictionary sorted by length of the key string
>>> OrderedDict(sorted(d.items(), key=lambda t: len(t[0])))
OrderedDict([('pear', 1), ('apple', 4), ('orange', 2), ('banana', 3)])"
5376,open a csv file `data.csv` and read the data,True,True,14,"df = pd.read_csv('data.csv', sep=',', header=None)"
5377,open a csv file `data.csv` and read the data,False,True,8,"os.rename('data.csv', 'data.csv')"
5378,open a csv file `data.csv` and read the data,False,True,4,writer.writerow(line)
5379,open a csv file `data.csv` and read the data,False,True,4,writer.writerow(row)
5380,open a csv file `data.csv` and read the data,False,True,14,"df = pd.read_csv('data.csv', sep=',', **None)"
5381,open a csv file `data.csv` and read the data,False,True,12,"df = pd.read_csv('data.csv', sep=',')"
5382,open a csv file `data.csv` and read the data,False,True,7,"df.to_csv('data.csv', index=False)"
5383,open a csv file `data.csv` and read the data,False,False,49,"import pandas as pd
print pd.read_csv('value.txt')

        Date    price  factor_1  factor_2
0  2012-06-11  1600.20     1.255     1.548
1  2012-06-12  1610.02     1.258     1.554
2  2012-06-13  1618.07     1.249     1.552
3  2012-06-14  1624.40     1.253     1.556
4  2012-06-15  1626.15     1.258     1.552
5  2012-06-16  1626.15     1.263     1.558
6  2012-06-17  1626.15     1.264     1.572"
5384,open a csv file `data.csv` and read the data,False,False,13,"Data = namedtuple(""Data"", next(reader))"
5385,open a csv file `data.csv` and read the data,False,False,4,next(reader)
5386,open a csv file `data.csv` and read the data,False,False,70,"import csv
from collections import namedtuple
from itertools import imap

with open(""data_file.txt"", mode=""rb"") as infile:
    reader = csv.reader(infile)
    Data = namedtuple(""Data"", next(reader))  # get names from column headers
    for data in imap(Data._make, reader):
        print data.foo
        # ...further processing of a line..."
5387,open a csv file `data.csv` and read the data,False,False,67,"import csv
from collections import namedtuple

with open(""data_file.txt"", newline="""") as infile:
    reader = csv.reader(infile)
    Data = namedtuple(""Data"", next(reader))  # get names from column headers
    for data in map(Data._make, reader):
        print(data.foo)
        # ...further processing of a line..."
5388,open a csv file `data.csv` and read the data,False,False,44,"import csv

path = 'c:\\temp\\'

file=open( path +""xyz.CSV"", ""r"")
reader = csv.reader(file)
for line in reader:
    t=line[1],line[2]
    print(t)"
5389,open a csv file `data.csv` and read the data,False,False,77,"('col2', 'col3')
('empId1', '241682-27638-USD-CIGGNT ')
('empId2', '241682-27638-USD-OCGGINT ')
('empId3', '241942-37190-USD-GGDIV ')
('empId4', '241942-37190-USD-CHYOF ')
('empId5', '241942-37190-USD-EQPL ')
('empId6', '241942-37190-USD-INT ')
('empId7', '242066-15343-USD-CYJOF ')
('empId8', '242066-15343-USD-CYJOF ')
('empId9', '242066-15343-USD-CYJOF ')
('empId10', '241942-37190-USD-GGDIV ')"
5390,delete first row from dataframe `df`,False,True,12,"df = df.drop('<unk>', axis=1)"
5391,delete first row from dataframe `df`,True,True,7,df = df.drop('get_title')
5392,delete first row from dataframe `df`,False,True,12,"df.drop('<unk>', axis=1, inplace=True)"
5393,delete first row from dataframe `df`,False,True,12,"df = pd.concat((df, df), axis=1)"
5394,delete first row from dataframe `df`,False,True,8,"df.drop(df, axis=1, inplace=True)"
5395,delete first row from dataframe `df`,False,True,7,df = df.drop('/a')
5396,delete first row from dataframe `df`,False,True,9,"df = df.drop('farm', axis=1)"
5397,delete first row from dataframe `df`,False,False,9,"df = df.drop('column_name', 1)"
5398,delete first row from dataframe `df`,False,False,9,"df.drop('column_name', axis=1, inplace=True)"
5399,delete first row from dataframe `df`,False,False,22,"df = df.drop(df.columns[[0, 1, 3]], axis=1)  # df.columns is zero-based pd.Index"
5400,delete first row from dataframe `df`,False,False,14,"df.drop(['column_nameA', 'column_nameB'], axis=1, inplace=True)"
5401,delete first row from dataframe `df`,False,False,9,df = df[df.line_race != 0]
5402,delete first row from dataframe `df`,False,False,6,del df['column_name']
5403,delete first row from dataframe `df`,False,False,37,"In [31]: df_test.iloc[0]
Out[31]: 
ATime     1.2
X         2.0
Y        15.0
Z         2.0
Btime     1.2
C        12.0
D        25.0
E        12.0
Name: 0, dtype: float64"
5404,delete first and last row from the dataframe `df`,False,True,15,"df.drop(df.columns[[0, 1, 3]], axis=1)"
5405,delete first and last row from the dataframe `df`,False,True,12,"df = df.drop((1, 1), axis=1)"
5406,delete first and last row from the dataframe `df`,False,True,9,"df.drop(df.index[0], axis=1)"
5407,delete first and last row from the dataframe `df`,True,True,6,df = df.loc[-1]
5408,delete first and last row from the dataframe `df`,False,True,12,"df = df.drop('<unk>', axis=1)"
5409,delete first and last row from the dataframe `df`,False,True,20,"df = df.iloc[:, ([2, 5, 6, 7, 8])]"
5410,delete first and last row from the dataframe `df`,False,True,9,"df.drop(df.index[0], axis=0)"
5411,delete first and last row from the dataframe `df`,False,False,7,df = df.iloc[3:]
5412,delete first and last row from the dataframe `df`,False,False,15,df[df['column name'].map(len) < 2]
5413,delete first and last row from the dataframe `df`,False,False,15,"df.drop(df.tail(n).index,inplace=True) # drop last n rows"
5414,delete first and last row from the dataframe `df`,False,False,15,"df.drop(df.head(n).index,inplace=True) # drop first n rows"
5415,delete first and last row from the dataframe `df`,False,False,56,"df = pd.DataFrame({'a':range(1,5), 'b':['a','b','c','d']})
df2 = df.iloc[[0, -1]]

print df2

   a  b
0  1  a
3  4  d"
5416,delete first and last row from the dataframe `df`,False,False,8,df = df[df.score > 50]
5417,delete first and last row from the dataframe `df`,False,False,164,"%%timeit
test = pd.DataFrame({'x': np.random.randn(int(1e6))})
test = test[test.x < 0]
# 54.5 ms ± 2.02 ms per loop (mean ± std. dev. of 7 runs, 10 loops each)

%%timeit
test = pd.DataFrame({'x': np.random.randn(int(1e6))})
test.drop(test[test.x > 0].index, inplace=True)
# 201 ms ± 17.9 ms per loop (mean ± std. dev. of 7 runs, 10 loops each)

%%timeit
test = pd.DataFrame({'x': np.random.randn(int(1e6))})
test = test.drop(test[test.x > 0].index)
# 194 ms ± 7.03 ms per loop (mean ± std. dev. of 7 runs, 10 loops each)"
5460,visit the url `url`,False,True,6,response = requests.visit(url)
5461,visit the url `url`,False,True,6,r = requests.visit(url)
5462,visit the url `url`,True,True,8,"r = requests.get(url, verify=False)"
5463,visit the url `url`,False,True,8,"response = requests.get(url, verify=False)"
5464,visit the url `url`,False,True,8,"response = requests.get(url, headers=url)"
5465,visit the url `url`,False,True,8,"response = requests.get(url, auth=url)"
5466,visit the url `url`,False,True,8,"r = requests.get(url, params=url)"
5467,visit the url `url`,False,False,13,"import webbrowser

webbrowser.open('http://example.com')  # Go to example.com"
5468,visit the url `url`,False,False,26,"import urllib

link = ""http://www.somesite.com/details.pl?urn=2344""
f = urllib.urlopen(link)
myfile = f.read()
print(myfile)"
5469,visit the url `url`,False,False,21,"import requests

link = ""http://www.somesite.com/details.pl?urn=2344""
f = requests.get(link)
print(f.text)"
5470,visit the url `url`,False,False,40,"import urllib2  # the lib that handles the url stuff

data = urllib2.urlopen(target_url) # it's a file like object and works just like a file
for line in data: # files are iterable
    print line"
5471,visit the url `url`,False,False,12,"import urllib2

for line in urllib2.urlopen(target_url):
    print line"
5472,visit the url `url`,False,False,43,"import urllib2

data = urllib2.urlopen(""http://www.google.com"").read(20000) # read only 20 000 chars
data = data.split(""\n"") # then split it into lines

for line in data:
    print line"
5473,visit the url `url`,False,False,37,"import urllib.request  # the lib that handles the url stuff

for line in urllib.request.urlopen(target_url):
    print(line.decode('utf-8')) #utf-8 or iso8859-1 or whatever the page encoding scheme is"
5572,generate 100 random numbers,True,True,7,print(random.choice(100))
5573,generate 100 random numbers,False,True,10,print(random.choice(range(100)))
5574,generate 100 random numbers,False,True,12,"print(random.choice(range(100), **100))"
5575,generate 100 random numbers,False,True,9,"print(random.randint(0, 100))"
5576,generate 100 random numbers,False,True,12,"print(random.choice(range(100), microsecond=100))"
5577,generate 100 random numbers,False,True,7,random.choice(range(100))
5578,generate 100 random numbers,True,True,9,"print(random.randrange(0, 100))"
5579,generate 100 random numbers,False,False,26,">>> import random
>>> random.sample(range(1, 100), 3)
[77, 52, 45]"
5580,generate 100 random numbers,False,False,38,">>> try:
...   random.sample(range(1, 2), 3)
... except ValueError:
...   print('Sample size exceeded population size.')
... 
Sample size exceeded population size"
5581,generate 100 random numbers,False,False,92,">>> import numpy as np, numpy.random
>>> print np.random.dirichlet(np.ones(10),size=1)
[[ 0.01779975  0.14165316  0.01029262  0.168136    0.03061161  0.09046587
   0.19987289  0.13398581  0.03119906  0.17598322]]

>>> print np.random.dirichlet(np.ones(10)/1000.,size=1)
[[  2.63435230e-115   4.31961290e-209   1.41369771e-212   1.42417285e-188
    0.00000000e+000   5.79841280e-143   0.00000000e+000   9.85329725e-005
    9.99901467e-001   8.37460207e-246]]

>>> print np.random.dirichlet(np.ones(10)*1000.,size=1)
[[ 0.09967689  0.10151585  0.10077575  0.09875282  0.09935606  0.10093678
   0.09517132  0.09891358  0.10206595  0.10283501]]"
5582,generate 100 random numbers,False,False,13,"import random
my_randoms = random.sample(range(100), 10)"
5583,generate 100 random numbers,False,False,13,"my_randoms = random.sample(range(1, 101), 10)"
5584,generate 100 random numbers,False,False,21,"import random
my_randoms = [random.randrange(1, 101, 1) for _ in range(10)]"
5585,generate 100 random numbers,False,False,21,"Random number:    1  2  3  4  5  6  7  8
Result:           1  2  3  4  7  8  9 10"
5586,generate 100 random numbers,True,True,7,print(random.choice(100))
5587,generate 100 random numbers,False,True,10,print(random.choice(range(100)))
5588,generate 100 random numbers,False,True,12,"print(random.choice(range(100), **100))"
5589,generate 100 random numbers,False,True,9,"print(random.randint(0, 100))"
5590,generate 100 random numbers,False,True,12,"print(random.choice(range(100), microsecond=100))"
5591,generate 100 random numbers,False,True,7,random.choice(range(100))
5592,generate 100 random numbers,True,True,9,"print(random.randrange(0, 100))"
5593,generate 100 random numbers,False,False,26,">>> import random
>>> random.sample(range(1, 100), 3)
[77, 52, 45]"
5594,generate 100 random numbers,False,False,38,">>> try:
...   random.sample(range(1, 2), 3)
... except ValueError:
...   print('Sample size exceeded population size.')
... 
Sample size exceeded population size"
5595,generate 100 random numbers,False,False,92,">>> import numpy as np, numpy.random
>>> print np.random.dirichlet(np.ones(10),size=1)
[[ 0.01779975  0.14165316  0.01029262  0.168136    0.03061161  0.09046587
   0.19987289  0.13398581  0.03119906  0.17598322]]

>>> print np.random.dirichlet(np.ones(10)/1000.,size=1)
[[  2.63435230e-115   4.31961290e-209   1.41369771e-212   1.42417285e-188
    0.00000000e+000   5.79841280e-143   0.00000000e+000   9.85329725e-005
    9.99901467e-001   8.37460207e-246]]

>>> print np.random.dirichlet(np.ones(10)*1000.,size=1)
[[ 0.09967689  0.10151585  0.10077575  0.09875282  0.09935606  0.10093678
   0.09517132  0.09891358  0.10206595  0.10283501]]"
5596,generate 100 random numbers,False,False,13,"import random
my_randoms = random.sample(range(100), 10)"
5597,generate 100 random numbers,False,False,13,"my_randoms = random.sample(range(1, 101), 10)"
5598,generate 100 random numbers,False,False,21,"import random
my_randoms = [random.randrange(1, 101, 1) for _ in range(10)]"
5599,generate 100 random numbers,False,False,21,"Random number:    1  2  3  4  5  6  7  8
Result:           1  2  3  4  7  8  9 10"
5600,generate 100 random numbers from 1 to 20,False,True,9,"random.sample(range(100), 100)"
5601,generate 100 random numbers from 1 to 20,True,True,9,"print(random.randint(0, 100))"
5602,generate 100 random numbers from 1 to 20,False,True,7,"return random.randint(0, 100)"
5603,generate 100 random numbers from 1 to 20,False,True,10,print(random.choice(range(100)))
5604,generate 100 random numbers from 1 to 20,False,True,9,"print(random.randint(0, 7))"
5605,generate 100 random numbers from 1 to 20,False,True,6,"random.randint(0, 100)"
5606,generate 100 random numbers from 1 to 20,False,True,7,print(random.choice(100))
5607,generate 100 random numbers from 1 to 20,False,False,26,">>> import random
>>> random.sample(range(1, 100), 3)
[77, 52, 45]"
5608,generate 100 random numbers from 1 to 20,False,False,38,">>> try:
...   random.sample(range(1, 2), 3)
... except ValueError:
...   print('Sample size exceeded population size.')
... 
Sample size exceeded population size"
5609,generate 100 random numbers from 1 to 20,False,False,8,"import random
random.uniform(0, 1)"
5610,generate 100 random numbers from 1 to 20,False,False,11,"import random
random.sample(range(100), 10)"
5611,generate 100 random numbers from 1 to 20,False,False,21,"all_lines = f1.readlines()
for i in range(50):
    lines = random.sample(all_lines, 40)"
5612,generate 100 random numbers from 1 to 20,False,False,92,">>> import numpy as np, numpy.random
>>> print np.random.dirichlet(np.ones(10),size=1)
[[ 0.01779975  0.14165316  0.01029262  0.168136    0.03061161  0.09046587
   0.19987289  0.13398581  0.03119906  0.17598322]]

>>> print np.random.dirichlet(np.ones(10)/1000.,size=1)
[[  2.63435230e-115   4.31961290e-209   1.41369771e-212   1.42417285e-188
    0.00000000e+000   5.79841280e-143   0.00000000e+000   9.85329725e-005
    9.99901467e-001   8.37460207e-246]]

>>> print np.random.dirichlet(np.ones(10)*1000.,size=1)
[[ 0.09967689  0.10151585  0.10077575  0.09875282  0.09935606  0.10093678
   0.09517132  0.09891358  0.10206595  0.10283501]]"
5613,generate 100 random numbers from 1 to 20,False,False,13,"import random
my_randoms = random.sample(range(100), 10)"
5614,create a dictionary with keys `random_letters` and values `random_numbers`,False,True,21,"random_numbers = dict((key, random_numbers) for key, val in list(
    random_letters.items()))"
5615,create a dictionary with keys `random_letters` and values `random_numbers`,False,True,21,"random_numbers = dict((key, random_numbers) for key, value in list(
    random_letters.items()))"
5616,create a dictionary with keys `random_letters` and values `random_numbers`,True,True,23,"random_numbers = dict((key, value) for key, value in list(random_letters.
    items()))"
5617,create a dictionary with keys `random_letters` and values `random_numbers`,False,True,23,"random_letters = {key: random_numbers for key, random_numbers in list(
    random_letters.items()) if value == 'random_numbers'}"
5618,create a dictionary with keys `random_letters` and values `random_numbers`,False,True,21,"random_letters = dict((key, random_numbers) for key, val in list(
    random_letters.items()))"
5619,create a dictionary with keys `random_letters` and values `random_numbers`,False,True,21,"random_numbers = dict((key, random_numbers) for key, val in sorted(
    random_letters.items()))"
5620,create a dictionary with keys `random_letters` and values `random_numbers`,False,True,24,"random_letters = {key: random_numbers for key, random_numbers in list(
    random_letters.items()) if random_numbers != 'random_numbers'}"
5621,create a dictionary with keys `random_letters` and values `random_numbers`,False,False,26,"import random
d = {'VENEZUELA':'CARACAS', 'CANADA':'OTTAWA'}
random.choice(list(d.values()))"
5622,create a dictionary with keys `random_letters` and values `random_numbers`,False,False,13,"country, capital = random.choice(list(d.items()))"
5623,create a dictionary with keys `random_letters` and values `random_numbers`,False,False,18,"res = dict((v,k) for k,v in a.iteritems())"
5624,create a dictionary with keys `random_letters` and values `random_numbers`,False,False,18,"res = dict((v,k) for k,v in a.items())"
5625,create a dictionary with keys `random_letters` and values `random_numbers`,False,False,15,"new_dict = dict(zip(my_dict.values(), my_dict.keys()))"
5626,create a dictionary with keys `random_letters` and values `random_numbers`,False,False,50,">>> my_dict = {'x':1, 'y':2, 'z':3}
>>> {v: k for k, v in my_dict.items()}
{1: 'x', 2: 'y', 3: 'z'}"
5627,create a dictionary with keys `random_letters` and values `random_numbers`,False,False,62,"In [1]: my_dict = {'x':1, 'y':2, 'z':3}

In [2]: dict((value, key) for key, value in my_dict.iteritems())
Out[2]: {1: 'x', 2: 'y', 3: 'z'}"
5628,print `dic` sorted by keys,False,True,14,"print(sorted(list(dic.items()), key=k))"
5629,print `dic` sorted by keys,False,True,14,"print(sorted(list(dic.items()), **k))"
5630,print `dic` sorted by keys,True,True,14,"print(sorted(list(dic.items()), key=tuple))"
5631,print `dic` sorted by keys,False,True,8,print(dic.decode('*'))
5632,print `dic` sorted by keys,False,True,20,"print(sorted(list(dic.items()), key=lambda x: x[1]))"
5633,print `dic` sorted by keys,False,True,8,print(dic.decode('unicode-escape'))
5634,print `dic` sorted by keys,False,True,9,"print(sorted(dic, key=k))"
5635,print `dic` sorted by keys,True,False,78,"In [1]: import collections

In [2]: d = {2:3, 1:89, 4:5, 3:0}

In [3]: od = collections.OrderedDict(sorted(d.items()))

In [4]: od
Out[4]: OrderedDict([(1, 89), (2, 3), (3, 0), (4, 5)])"
5636,print `dic` sorted by keys,False,False,59,"In [11]: od[1]
Out[11]: 89

In [12]: od[3]
Out[12]: 0

In [13]: for k, v in od.iteritems(): print k, v
   ....: 
1 89
2 3
3 0
4 5"
5637,print `dic` sorted by keys,False,False,31,"In [13]: for k, v in od.items(): print(k, v)
   ....: 
1 89
2 3
3 0
4 5"
5638,print `dic` sorted by keys,False,False,36,"mydict = {'carl':40,
          'alan':2,
          'bob':1,
          'danny':3}

for key in sorted(mydict):
    print ""%s: %s"" % (key, mydict[key])"
5639,print `dic` sorted by keys,False,False,12,"alan: 2
bob: 1
carl: 40
danny: 3"
5640,print `dic` sorted by keys,False,False,30,"keylist = mydict.keys()
keylist.sort()
for key in keylist:
    print ""%s: %s"" % (key, mydict[key])"
5641,print `dic` sorted by keys,False,False,13,"for key, value in mydic.iteritems() :
    print key, value"
5642,print `dic` keys sorted,False,True,14,print('\n'.join(str(key) for key in dic))
5643,print `dic` keys sorted,False,True,14,print('\n'.join(str(key) for word in dic))
5644,print `dic` keys sorted,False,True,14,print('\n'.join(chr(key) for key in dic))
5645,print `dic` keys sorted,True,True,14,"print(sorted(list(dic.items()), key=k))"
5646,print `dic` keys sorted,False,True,8,print(dic.decode('unicode-escape'))
5647,print `dic` keys sorted,False,True,11,"sorted(list(dic.items()), key=k)"
5648,print `dic` keys sorted,False,True,14,"print(sorted(list(dic.items()), **k))"
5649,print `dic` keys sorted,False,False,74,">>> x = {1: 2, 3: 4, 4: 3, 2: 1, 0: 0}
>>> {k: v for k, v in sorted(x.items(), key=lambda item: item[1])}

{0: 0, 2: 1, 1: 2, 4: 3, 3: 4}"
5650,print `dic` keys sorted,False,False,38,"import operator
x = {1: 2, 3: 4, 4: 3, 2: 1, 0: 0}
sorted_x = sorted(x.items(), key=operator.itemgetter(1))"
5651,print `dic` keys sorted,False,False,38,"import operator
x = {1: 2, 3: 4, 4: 3, 2: 1, 0: 0}
sorted_x = sorted(x.items(), key=operator.itemgetter(0))"
5652,print `dic` keys sorted,False,False,39,"x = {1: 2, 3: 4, 4: 3, 2: 1, 0: 0}
sorted_x = sorted(x.items(), key=lambda kv: kv[1])"
5653,print `dic` keys sorted,False,False,8,"import collections

sorted_dict = collections.OrderedDict(sorted_x)"
5654,print `dic` keys sorted,False,False,23,"from collections import defaultdict
d = defaultdict(int)
for w in text.split():
    d[w] += 1"
5655,print `dic` keys sorted,False,False,21,"for w in sorted(d, key=d.get, reverse=True):
    print(w, d[w])"
5656,print `dic` keys on each line,True,True,14,print('\n'.join(str(key) for line in dic))
5657,print `dic` keys on each line,False,True,14,print('\n'.join(str(item) for item in dic))
5658,print `dic` keys on each line,False,True,14,print('\n'.join(str(p) for p in dic))
5659,print `dic` keys on each line,False,True,9,"print(dic.split(','))"
5660,print `dic` keys on each line,False,True,8,print(dic.decode('unicode-escape'))
5661,print `dic` keys on each line,False,True,11,print(dic.split(' <unk>'))
5662,print `dic` keys on each line,False,True,19,"print('\n'.join(str(key) for line in zip(dic, '')))"
5663,print `dic` keys on each line,False,False,13,"for key, value in mydic.iteritems() :
    print key, value"
5664,print `dic` keys on each line,False,False,15,"for key, value in mydic.items() :
    print (key, value)"
5665,print `dic` keys on each line,False,False,12,"for i in d:
    print i, d[i]"
5666,print `dic` keys on each line,False,False,13,"for k, v in d.iteritems():
    print k, v"
5667,print `dic` keys on each line,False,False,15,"for k, v in d.items():
    print(k, v)"
5668,print `dic` keys on each line,False,False,33,"for x in cars:
    print (x)
    for y in cars[x]:
        print (y,':',cars[x][y])"
5669,print `dic` keys on each line,False,False,14,"A
color : 2
speed : 70
B
color : 3
speed : 60"
5670,"read ""data.csv"" file",False,True,21,"with open('data.csv') as f:
    f = open(os.path.join(__location__, 'data.csv'))"
5671,"read ""data.csv"" file",False,True,19,"with open('data.csv') as f:
    f = open('data.csv', 'rb')"
5672,"read ""data.csv"" file",False,True,19,"with open('data.csv') as f:
    f = open(os.path.expanduser('data.csv'))"
5673,"read ""data.csv"" file",False,True,31,"with open('data.csv') as f:
    f = open('data.csv', 'rb')
    f = open('data.csv')
    writerow = f.readlines()"
5674,"read ""data.csv"" file",False,True,12,"f = open(os.path.join(__location__, 'data.csv'))"
5675,"read ""data.csv"" file",False,True,10,"with open('data.csv') as f:
    pass"
5676,"read ""data.csv"" file",True,True,14,"with open('data.csv', 'r') as f:
    pass"
5677,"read ""data.csv"" file",False,False,13,"Data = namedtuple(""Data"", next(reader))"
5678,"read ""data.csv"" file",False,False,4,next(reader)
5679,"read ""data.csv"" file",False,False,70,"import csv
from collections import namedtuple
from itertools import imap

with open(""data_file.txt"", mode=""rb"") as infile:
    reader = csv.reader(infile)
    Data = namedtuple(""Data"", next(reader))  # get names from column headers
    for data in imap(Data._make, reader):
        print data.foo
        # ...further processing of a line..."
5680,"read ""data.csv"" file",False,False,67,"import csv
from collections import namedtuple

with open(""data_file.txt"", newline="""") as infile:
    reader = csv.reader(infile)
    Data = namedtuple(""Data"", next(reader))  # get names from column headers
    for data in map(Data._make, reader):
        print(data.foo)
        # ...further processing of a line..."
5681,"read ""data.csv"" file",False,False,36,"with open('data_file.txt') as infile:
    reader = csv.DictReader(infile)
    Data = collections.namedtuple('Data', reader.fieldnames)
    tuples = [Data(**row) for row in reader]"
5682,"read ""data.csv"" file",False,False,37,"df_iter = pd.read_csv('data.csv', chunksize=10000, iterator=True)

for iter_num, chunk in enumerate(df_iter, 1):
    print(f'Processing iteration {iter_num}')
    # do things with chunk"
5683,"read ""data.csv"" file",False,False,16,"for chunk in pd.read_csv('data.csv', chunksize=10000):
    # do things with chunk"
5684,"read csv file ""data.csv""",True,True,14,"df = pd.read_csv('data.csv', sep=',', header=None)"
5685,"read csv file ""data.csv""",False,True,14,"df = pd.read_csv('data.csv', sep=',', **None)"
5686,"read csv file ""data.csv""",False,True,26,"with open('data.csv', 'rb') as ins:
    writer = pd.read_csv('data.csv', sep=',', header=None)"
5687,"read csv file ""data.csv""",False,True,26,"with open('data.csv', 'rb') as f:
    df = pd.read_csv('data.csv', sep=',', header=None)"
5688,"read csv file ""data.csv""",False,True,33,"with open('data.csv', 'rb') as f:
    df = pd.read_csv('data.csv', dtype={'data.csv': np.float64}, na_values=
        ['data.csv'])"
5689,"read csv file ""data.csv""",False,True,26,"with open('data.csv', 'rb') as line:
    df = pd.read_csv('data.csv', sep=',', header=None)"
5690,"read csv file ""data.csv""",False,True,26,"with open('data.csv', 'rb') as f:
    df = pd.read_csv('data.csv', sep=',', **None)"
5691,"read csv file ""data.csv""",False,False,15,row_count = sum(1 for row in fileObject)  # fileObject is your csv.reader
5692,"read csv file ""data.csv""",False,False,16,"with open(filename) as f:
    sum(1 for line in f)"
5693,"read csv file ""data.csv""",False,False,259,"import timeit
import csv
import pandas as pd

filename = './sample_submission.csv'

def talktime(filename, funcname, func):
    print(f""# {funcname}"")
    t = timeit.timeit(f'{funcname}(""{filename}"")', setup=f'from __main__ import {funcname}', number = 100) / 100
    print('Elapsed time : ', t)
    print('n = ', func(filename))
    print('\n')

def sum1forline(filename):
    with open(filename) as f:
        return sum(1 for line in f)
talktime(filename, 'sum1forline', sum1forline)

def lenopenreadlines(filename):
    with open(filename) as f:
        return len(f.readlines())
talktime(filename, 'lenopenreadlines', lenopenreadlines)

def lenpd(filename):
    return len(pd.read_csv(filename)) + 1
talktime(filename, 'lenpd', lenpd)

def csvreaderfor(filename):
    cnt = 0
    with open(filename) as f:
        cr = csv.reader(f)
        for row in cr:
            cnt += 1
    return cnt
talktime(filename, 'csvreaderfor', csvreaderfor)

def openenum(filename):
    cnt = 0
    with open(filename) as f:
        for i, line in enumerate(f,1):
            cnt += 1
    return cnt
talktime(filename, 'openenum', openenum)"
5694,"read csv file ""data.csv""",False,False,45,"# sum1forline
Elapsed time :  0.6327946722068599
n =  2528244


# lenopenreadlines
Elapsed time :  0.655304473598555
n =  2528244


# lenpd
Elapsed time :  0.7561274056295324
n =  2528244


# csvreaderfor
Elapsed time :  1.5571560935772661
n =  2528244


# openenum
Elapsed time :  0.773000013928679
n =  2528244"
5695,"read csv file ""data.csv""",False,False,13,"Data = namedtuple(""Data"", next(reader))"
5696,"read csv file ""data.csv""",False,False,4,next(reader)
5697,"read csv file ""data.csv""",False,False,70,"import csv
from collections import namedtuple
from itertools import imap

with open(""data_file.txt"", mode=""rb"") as infile:
    reader = csv.reader(infile)
    Data = namedtuple(""Data"", next(reader))  # get names from column headers
    for data in imap(Data._make, reader):
        print data.foo
        # ...further processing of a line..."
5712,"write output to csv file ""output.csv""",True,True,7,"output.csv.to_csv('output.csv', index=False)"
5713,"write output to csv file ""output.csv""",False,True,5,output.write('output.csv')
5714,"write output to csv file ""output.csv""",False,True,7,"output.csv.to_csv('output.csv', **False)"
5715,"write output to csv file ""output.csv""",False,True,7,"output.csv.to_csv('output.csv', header=False)"
5716,"write output to csv file ""output.csv""",False,True,7,"subprocess.call('output.csv', shell=True)"
5717,"write output to csv file ""output.csv""",False,True,9,"output.csv.to_csv('output.csv', sep=' ')"
5718,"write output to csv file ""output.csv""",False,True,4,subprocess.writerow(output.csv)
5719,"write output to csv file ""output.csv""",False,False,12,"print ""Tmin="", "", "".join(Tmin)"
5720,"write output to csv file ""output.csv""",False,False,9,"print ""Tmin="", Tmin[0]"
5721,"write output to csv file ""output.csv""",False,False,27,"writer.writerow(['Tmin']+Tmin) #note this is already printing the result to a file so dont ""print"" the return value"
5722,"write output to csv file ""output.csv""",False,False,80,"import csv
with open('somefile.csv', 'w') as file:
    output = csv.writer(file, delimiter='\t')
    output.writerows([
        ['code', 'info'],
        ['****', '****'],
        [None, '****'],
        [None, '****'],
        [None, '****'],
        ['****', '****'],
        [None, '****']
    ])"
5723,"write output to csv file ""output.csv""",False,False,10,"code    info
****    ****
        ****
        ****
        ****
****    ****
        ****"
5724,"write output to csv file ""output.csv""",False,False,87,"import csv
from itertools import izip_longest
from itertools import chain

data = [(""key"", [""value"", ""value""]), (""key"", [""value"", ""value""])]

with open('somefile.csv', 'w') as file:
    output = csv.writer(file, dialect='excel-tab')
    output.writerows(
        chain.from_iterable(
            izip_longest([key], values) for key, values in data
        )
    )"
5725,"write output to csv file ""output.csv""",False,False,6,"key     value
        value
key     value
        value"
5726,write `output` to csv file,True,True,7,"output.to_csv('output', index=False)"
5727,write `output` to csv file,False,True,7,"output.to_csv('output', **output)"
5728,write `output` to csv file,False,True,4,output.writerow(output)
5729,write `output` to csv file,False,True,4,writer.writerow(output)
5730,write `output` to csv file,False,True,4,f.writerow(output)
5731,write `output` to csv file,False,True,4,output.to_csv(output)
5732,write `output` to csv file,False,True,7,"output.to_csv('output', header=False)"
5733,write `output` to csv file,False,False,7,"df.to_csv(file_name, sep='\t')"
5734,write `output` to csv file,False,False,10,"df.to_csv(file_name, sep='\t', encoding='utf-8')"
5735,write `output` to csv file,False,False,9,"df.to_csv(file_name, encoding='utf-8', index=False)"
5736,write `output` to csv file,False,False,8,"Color  Number
0   red     22
1  blue     10"
5737,write `output` to csv file,False,False,5,"Color,Number
red,22
blue,10"
5738,write `output` to csv file,False,False,10,",Color,Number
0,red,22
1,blue,10"
5739,write `output` to csv file,False,False,36,"##text=List of strings to be written to file
with open('csvfile.csv','wb') as file:
    for line in text:
        file.write(line)
        file.write('\n')"
5740,"search for pattern ""%d%d-%d%d"" in `file`",False,True,7,print(file.group(1))
5741,"search for pattern ""%d%d-%d%d"" in `file`",False,True,29,"c = file.find('%d%d-%d%d', href=re.compile('%d%d-%d%d'))"
5742,"search for pattern ""%d%d-%d%d"" in `file`",False,True,29,"r = file.find('%d%d-%d%d', href=re.compile('%d%d-%d%d'))"
5743,"search for pattern ""%d%d-%d%d"" in `file`",False,True,16,"return re.match('%d%d-%d%d', file)"
5744,"search for pattern ""%d%d-%d%d"" in `file`",False,True,16,"if file.endswith('%d%d-%d%d'):
    pass"
5745,"search for pattern ""%d%d-%d%d"" in `file`",False,True,13,file.endswith('%d%d-%d%d')
5746,"search for pattern ""%d%d-%d%d"" in `file`",True,True,16,"return re.findall('%d%d-%d%d', file)"
5747,"search for pattern ""%d%d-%d%d"" in `file`",False,False,6,"import os.path
os.path.isfile(fname)"
5748,"search for pattern ""%d%d-%d%d"" in `file`",False,False,20,"from pathlib import Path

my_file = Path(""/path/to/file"")
if my_file.is_file():
    # file exists"
5749,"search for pattern ""%d%d-%d%d"" in `file`",False,False,8,"if my_file.is_dir():
    # directory exists"
5750,"search for pattern ""%d%d-%d%d"" in `file`",False,False,8,"if my_file.exists():
    # path exists"
5751,"search for pattern ""%d%d-%d%d"" in `file`",False,False,19,"try:
    my_abs_path = my_file.resolve(strict=True)
except FileNotFoundError:
    # doesn't exist
else:
    # exists"
5752,"search for pattern ""%d%d-%d%d"" in `file`",False,False,6,"import os.path
os.path.exists(file_path)"
5753,"search for pattern ""%d%d-%d%d"" in `file`",False,False,4,os.path.isfile(file_path)
5754,copy file from `src_path` to `dest_path`,True,True,6,"copyfile(src_path, dest_path)"
5755,copy file from `src_path` to `dest_path`,False,True,8,"dest_path = copyfile(src_path, dest_path)"
5756,copy file from `src_path` to `dest_path`,False,True,7,"copyfile(src_path, 'dest_path')"
5757,copy file from `src_path` to `dest_path`,False,True,6,"copyfile(dest_path, src_path)"
5758,copy file from `src_path` to `dest_path`,False,True,4,dest_path[src_path]
5759,copy file from `src_path` to `dest_path`,False,True,4,dest_path[:]
5760,copy file from `src_path` to `dest_path`,False,True,11,"dest_path = open('src_path', 'r')"
5761,copy file from `src_path` to `dest_path`,False,False,10,"from shutil import copyfile
copyfile(src, dst)"
5762,copy file from `src_path` to `dest_path`,False,False,57,"┌──────────────────┬────────┬───────────┬───────┬────────────────┐
│     Function     │ Copies │   Copies  │Can use│   Destination  │
│                  │metadata│permissions│buffer │may be directory│
├──────────────────┼────────┼───────────┼───────┼────────────────┤
│shutil.copy       │   No   │    Yes    │   No  │      Yes       │
│shutil.copyfile   │   No   │     No    │   No  │       No       │
│shutil.copy2      │  Yes   │    Yes    │   No  │      Yes       │
│shutil.copyfileobj│   No   │     No    │  Yes  │       No       │
└──────────────────┴────────┴───────────┴───────┴────────────────┘"
5763,copy file from `src_path` to `dest_path`,False,False,28,"import shutil
shutil.copy2('/src/dir/file.ext', '/dst/dir/newname.ext') # complete target filename given
shutil.copy2('/src/file.ext', '/dst/dir') # target filename is /dst/dir/file.ext"
5764,copy file from `src_path` to `dest_path`,False,False,10,"import shutil
shutil.copy('/etc/hostname', '/var/tmp/testhostname')"
5765,copy file from `src_path` to `dest_path`,False,False,35,"import os
import shutil
src_files = os.listdir(src)
for file_name in src_files:
    full_file_name = os.path.join(src, file_name)
    if os.path.isfile(full_file_name):
        shutil.copy(full_file_name, dest)"
5766,copy file from `src_path` to `dest_path`,False,False,6,"import os
import shutil
import subprocess"
5767,copy file from `src_path` to `dest_path`,False,False,20,"shutil.copyfile(src_file, dest_file, *, follow_symlinks=True)

# example    
shutil.copyfile('source.txt', 'destination.txt')"
5768,check if `file` is a directory,True,True,4,os.path.isfile(file)
5769,check if `file` is a directory,False,True,8,print(os.path.isfile('file'))
5770,check if `file` is a directory,False,True,3,file.isdigit()
5771,check if `file` is a directory,False,True,7,print(os.path.exists(file))
5772,check if `file` is a directory,False,True,7,'file' in os(*file)
5773,check if `file` is a directory,False,True,6,'file' in file.os()
5774,check if `file` is a directory,False,True,7,print(os.path.isfile(file))
5775,check if `file` is a directory,False,False,6,"import os.path
os.path.isfile(fname)"
5776,check if `file` is a directory,False,False,20,"from pathlib import Path

my_file = Path(""/path/to/file"")
if my_file.is_file():
    # file exists"
5777,check if `file` is a directory,False,False,8,"if my_file.is_dir():
    # directory exists"
5778,check if `file` is a directory,False,False,8,"if my_file.exists():
    # path exists"
5779,check if `file` is a directory,False,False,19,"try:
    my_abs_path = my_file.resolve(strict=True)
except FileNotFoundError:
    # doesn't exist
else:
    # exists"
5780,check if `file` is a directory,False,False,11,"import os 
dir_path = os.path.dirname(os.path.realpath(__file__))"
5781,check if `file` is a directory,False,False,7,"import os
cwd = os.getcwd()"
5782,"write `final_data` to csv file ""price.csv""",False,True,7,"final_data.to_csv('price.csv', **final_data)"
5783,"write `final_data` to csv file ""price.csv""",False,True,7,"final_data.to_csv('price.csv', index=False)"
5784,"write `final_data` to csv file ""price.csv""",True,True,5,final_data.to_csv('price.csv')
5785,"write `final_data` to csv file ""price.csv""",False,True,4,final_data.writerow(final_data)
5786,"write `final_data` to csv file ""price.csv""",False,True,7,"final_data.to_csv('price.csv', header=False)"
5787,"write `final_data` to csv file ""price.csv""",False,True,14,"final_data.to_csv('price.csv', **{'enumerate': 'price.csv'})"
5788,"write `final_data` to csv file ""price.csv""",False,True,7,"final_data.to_csv('price.csv', **False)"
5789,"write `final_data` to csv file ""price.csv""",False,False,62,"import csv

date_reader = csv.reader(open('Date.csv', 'rb'))
price_reader = csv.reader(open('Price.csv', 'rb'))
writer = csv.writer(open('NewData.csv', 'wb'))
for date_row in date_reader:
    price_row = price_reader.next()
    writer.writerow(date_row + [price_row[1]])"
5790,"write `final_data` to csv file ""price.csv""",False,False,41,"ID, Date, Price
0,""Jan 22, 2016"",27.89
1,""Jan 21, 2016"",26.80
2,""Jan 20, 2016"",26.78
3,""Jan 19, 2016"",26.00"
5791,"write `final_data` to csv file ""price.csv""",False,False,99,"with open('C:/Users/User/OneDrive/Documents/Date.csv') as file1, \
     open('C:/Users/User/OneDrive/Documents/Price.csv') as file2, \
     open('C:/Users/User/OneDrive/Documents/Output.csv', 'w') as output:
    reader1 = csv.DictReader(file1)
    reader2 = csv.DictReader(file2)
    writer = csv.DictWriter(output, ['ID', 'Date', 'Price'])
    writer.writeheader()  # Optional if you want the header

    for row1, row2 in zip(reader1, reader2):
        row1.update(row2)
        writer.writerow(row1)"
5792,"write `final_data` to csv file ""price.csv""",False,False,39,"import pandas as pd
file1 = pd.read_csv('Data.csv', index_col='ID')
file2 = pd.read_csv('Price.csv', index_col='ID')
pd.concat([file1,file2], axis=1).to_csv('Output.csv')"
5793,"write `final_data` to csv file ""price.csv""",False,False,41,"ID,Date,Price
0,""Jan 22, 2016"",27.89
1,""Jan 21, 2016"",26.80
2,""Jan 20, 2016"",26.78
3,""Jan 19, 2016"",26.00"
5794,"write `final_data` to csv file ""price.csv""",False,False,2,['2010-06-29
5795,"write `final_data` to csv file ""price.csv""",False,False,62,"csv1_dict = {  ...,
            ""CompanyA productA"" : 0,
            ""CompanyA productB"" : 0,
            ...
            }

csv2_dict = { ...,
            ""CompanyA productA"" : 10,
              ...
            }
for key,value in csv2_dict.iteritems():
    try:
        csv1_dict[key] = csv2_dict[key]
    except:
        #Key not in csv1"
5824,change date format,True,True,23,"time.strftime('%Y-%m-%d %H:%M:%S', gmtime())"
5825,change date format,False,True,23,"time.strftime('%Y-%m-%d %H:%M:%S', time.gmtime())"
5826,change date format,False,True,30,"datetime.strptime('<unk>', '%a, %d %b %Y %H:%M:%S %Z')"
5827,change date format,False,True,30,"datetime.datetime.strptime('<unk>', '%a, %d %b %Y %H:%M:%S %Z')"
5828,change date format,False,True,29,"datetime.datetime.strptime('<unk>', '%B %d, %Y').strftime('%Y-%m-%d')"
5829,change date format,False,True,20,"datetime.datetime.strptime(s, '%B').strftime('%Y-%m-%d')"
5830,change date format,False,True,23,"time.strftime('%Y-%m-%d %H:%M:%S', datetime.gmtime())"
5831,change date format,False,False,87,"import pandas as pd

df = pd.DataFrame({'DOB': {0: '26/1/2016', 1: '26/1/2016'}})
print (df)
         DOB
0  26/1/2016 
1  26/1/2016

df['DOB'] = pd.to_datetime(df.DOB)
print (df)
         DOB
0 2016-01-26
1 2016-01-26

df['DOB1'] = df['DOB'].dt.strftime('%m/%d/%Y')
print (df)
         DOB        DOB1
0 2016-01-26  01/26/2016
1 2016-01-26  01/26/2016"
5832,change date format,False,False,26,"datetime.datetime.strptime(""2013-1-25"", '%Y-%m-%d').strftime('%m/%d/%y')"
5833,change date format,False,False,40,"dt = datetime.datetime.strptime(""2013-1-25"", '%Y-%m-%d')
print '{0}/{1}/{2:02}'.format(dt.month, dt.day, dt.year % 100)"
5834,change date format,False,False,26,"datetime.datetime.strptime(""2013-1-25"", '%Y-%m-%d').strftime('%m/%d/%y')"
5835,change date format,False,False,10,"datetime.datetime.strptime(date_string, format1).strftime(format2)"
5836,change date format,False,False,37,">>> datetime.datetime.strptime('Mon Feb 15 2010', '%a %b %d %Y').strftime('%d/%m/%Y')
'15/02/2010'
>>>"
5837,change date format,False,False,47,"from dateutil.parser import parse
dt = parse('Mon Feb 15 2010')
print(dt)
# datetime.datetime(2010, 2, 15, 0, 0)
print(dt.strftime('%d/%m/%Y'))
# 15/02/2010"
5838,remove header,True,True,12,"re.sub('<unk>', '', text)"
5839,remove header,False,True,12,"re.sub('<unk>', '', line)"
5840,remove header,False,True,6,"json.loads(url, headers=headers)"
5841,remove header,False,True,10,"json.loads(url, headers=re.compile('\\s+'))"
5842,remove header,False,True,6,"json.loads(line, headers=headers)"
5843,remove header,False,True,6,"requests.get(url, headers=headers)"
5844,remove header,False,True,6,"json.load(headers, headers=headers)"
5845,remove header,False,False,41,"new_header = df.iloc[0] #grab the first row for the header
df = df[1:] #take the data less the header row
df.columns = new_header #set the header row as the df header"
5846,remove header,False,False,13,"df.columns = df.iloc[0]
df = df[1:]"
5847,remove header,False,False,6,"df.to_csv(path, index=False)"
5848,remove header,False,False,41,"print df.shape[1]
2

print range(df.shape[1])
[0, 1]

df.columns = range(df.shape[1])
print df
    0   1
0  23  12
1  21  44
2  98  21"
5849,remove header,False,False,39,"print df.to_csv(header=None,index=False)
23,12
21,44
98,21

print pd.read_csv(io.StringIO(u""""+df.to_csv(header=None,index=False)), header=None)
    0   1
0  23  12
1  21  44
2  98  21"
5850,remove header,False,False,40,"print df.to_csv(index=False)
A,B
23,12
21,44
98,21

print pd.read_csv(io.StringIO(u""""+df.to_csv(index=False)), header=None, skiprows=1)
    0   1
0  23  12
1  21  44
2  98  21"
5851,remove header,False,False,14,df.rename(columns=df.iloc[0]).drop(df.index[0])
5922,timedelta,False,True,6,"timedelta(hours=60, minutes=60)"
5923,timedelta,False,True,18,"time.strftime('%H:%M:%S', datetime.timedelta(hours=5))"
5924,timedelta,False,True,9,timedelta(hours=365) - timedelta(hours=2)
5925,timedelta,False,True,18,"datetime.datetime.combine(time.strftime('%H:%M:%S'), 60)"
5926,timedelta,False,True,9,timedelta(hours=365) - timedelta(hours=1)
5927,timedelta,False,True,9,timedelta(hours=365) & timedelta(hours=1)
5928,timedelta,True,True,9,timedelta(hours=5) - timedelta(hours=2)
5929,timedelta,False,False,16,">>> import datetime
>>> datetime.timedelta(seconds=24*60*60).total_seconds()
86400.0"
5930,timedelta,False,False,16,"def days_hours_minutes(td):
    return td.days, td.seconds//3600, (td.seconds//60)%60"
5931,timedelta,False,False,27,"import datetime
start = datetime.datetime(2009,2,10,14,00)
end   = datetime.datetime(2009,2,10,16,00)
delta = end-start
print(str(delta))
# prints 2:00:00"
5932,timedelta,False,False,57,"s = 13420
hours, remainder = divmod(s, 3600)
minutes, seconds = divmod(remainder, 60)
print '{:02}:{:02}:{:02}'.format(int(hours), int(minutes), int(seconds))
# result: 03:43:40"
5933,timedelta,False,False,83,"# arbitrary number of seconds
s = 13420
# hours
hours = s // 3600 
# remaining seconds
s = s - (hours * 3600)
# minutes
minutes = s // 60
# remaining seconds
seconds = s - (minutes * 60)
# total time
print '{:02}:{:02}:{:02}'.format(int(hours), int(minutes), int(seconds))
# result: 03:43:40"
5934,timedelta,False,False,29,"from dateutil.relativedelta import relativedelta

def yearsago(years, from_date=None):
    if from_date is None:
        from_date = datetime.now()
    return from_date - relativedelta(years=years)"
5935,timedelta,False,False,60,"from datetime import datetime
def yearsago(years, from_date=None):
    if from_date is None:
        from_date = datetime.now()
    try:
        return from_date.replace(year=from_date.year - years)
    except ValueError:
        # Must be 2/29!
        assert from_date.month == 2 and from_date.day == 29 # can be removed
        return from_date.replace(month=2, day=28,
                                 year=from_date.year-years)"
5936,time and date in certain,False,True,10,"datetime.datetime.combine(datetime.datetime.now(), datetime.datetime.now())"
5937,time and date in certain,False,True,10,"datetime.datetime.combine(datetime.datetime.now(), datetime.time())"
5938,time and date in certain,False,True,16,datetime.datetime.now().strftime('%H:%M:%S')
5939,time and date in certain,False,True,19,datetime.datetime.now().strftime('%Y-%m-%d %H:%M')
5940,time and date in certain,False,True,10,"datetime.datetime.combine(datetime.datetime.now(), datetime.datetime.t())"
5941,time and date in certain,True,True,15,"datetime.datetime.combine(datetime.datetime.now(), datetime.datetime.now() +
    datetime.timedelta(days=1))"
5942,time and date in certain,False,True,9,"datetime.datetime.combine(datetime.datetime.now(), 'time')"
5943,time and date in certain,False,False,38,">>> import datetime
>>> datetime.datetime.now()
datetime.datetime(2009, 1, 6, 15, 8, 24, 78915)

>>> print(datetime.datetime.now())
2009-01-06 15:08:24.789150"
5944,time and date in certain,False,False,32,">>> datetime.datetime.now().time()
datetime.time(15, 8, 24, 78915)

>>> print(datetime.datetime.now().time())
15:08:24.789150"
5945,time and date in certain,False,False,7,>>> from datetime import datetime
5946,time and date in certain,False,False,38,">>> from time import gmtime, strftime
>>> strftime(""%Y-%m-%d %H:%M:%S"", gmtime())
'2009-01-05 22:14:39'"
5947,time and date in certain,False,False,26,"from datetime import datetime
datetime.now().strftime('%Y-%m-%d %H:%M:%S')"
5948,time and date in certain,False,False,22,"base = datetime.datetime.today()
date_list = [base - datetime.timedelta(days=x) for x in range(numdays)]"
5949,time and date in certain,False,False,19,">>> from datetime import datetime
>>> str(datetime.now())
'2011-05-03 17:45:35.177000'"
5964,convert text file encoding,False,True,8,f.write('<unk>')
5965,convert text file encoding,False,True,15,"print(f.open('file.txt', 'r').read())"
5966,convert text file encoding,False,True,15,"print(io.open('file.txt', 'w').read())"
5967,convert text file encoding,False,True,11,print(f.read().decode('utf8'))
5968,convert text file encoding,False,True,11,print(f.read().decode('unicode-escape'))
5969,convert text file encoding,False,True,5,f.write('en_US')
5970,convert text file encoding,True,True,20,"print(codecs.open('file.txt', 'w', encoding='utf-8').decode('utf-8'))"
5971,convert text file encoding,False,False,47,"foo = u'Δ, Й, ק, ‎ م, ๗, あ, 叶, 葉, and 말.'
f = open('test', 'w')
f.write(foo.encode('utf8'))
f.close()"
5972,convert text file encoding,False,False,20,"f = file('test', 'r')
print f.read().decode('utf8')"
5973,convert text file encoding,False,False,14,">>> u'aあä'.encode('ascii', 'ignore')
'a'"
5974,convert text file encoding,False,False,55,">>> u'aあä'.encode('ascii', 'replace')
b'a??'
>>> u'aあä'.encode('ascii', 'xmlcharrefreplace')
b'a&#12354;&#228;'
>>> u'aあä'.encode('ascii', 'backslashreplace')
b'a\\u3042\\xe4'"
5975,convert text file encoding,False,False,14,">>> u'aあä'.encode('ascii', 'ignore')
'a'"
5976,convert text file encoding,False,False,26,">>> import unicodedata
>>> unicodedata.normalize('NFKD', u'aあä').encode('ascii', 'ignore')
'aa'"
5977,convert text file encoding,False,False,60,">>> print u'\u2019'
’
>>> unicodedata.name(u'\u2019')
'RIGHT SINGLE QUOTATION MARK'
>>> u'\u2019'.encode('ascii', 'ignore')
''
# Note we get an empty string back
>>> u'\u2019'.replace(u'\u2019', u'\'').encode('ascii', 'ignore')
""'"""
6048,convert list to dictionary,True,True,21,"dict((k, ':') for k, v in list(d.items()))"
6049,convert list to dictionary,False,True,19,"dict(map(lambda s: s.split(':'), [l]))"
6050,convert list to dictionary,False,True,19,"dict(map(lambda s: s.split(':'), [s]))"
6051,convert list to dictionary,False,True,23,"dict((k, ':') for k, v in map(list, d.items()))"
6052,convert list to dictionary,False,True,16,"dict((k, v) for k, v in d.items())"
6053,convert list to dictionary,False,True,19,"dict(map(lambda s: s.split(':'), [x]))"
6054,convert list to dictionary,False,True,19,"dict((k, v) for k, v in list(d.items()))"
6055,convert list to dictionary,False,False,20,"b = dict(zip(a[::2], a[1::2]))"
6056,convert list to dictionary,False,False,21,"from itertools import izip
i = iter(a)
b = dict(izip(i, i))"
6057,convert list to dictionary,False,False,27,"b = {a[i]: a[i+1] for i in range(0, len(a), 2)}"
6058,convert list to dictionary,False,False,17,"i = iter(a)
b = dict(zip(i, i))"
6059,convert list to dictionary,False,False,23,"l = [""a"", ""b"", ""c"", ""d"", ""e""]"
6060,convert list to dictionary,False,False,57,"dict(one=1, two=2)
dict({'one': 1, 'two': 2})
dict(zip(('one', 'two'), (1, 2)))
dict([['two', 2], ['one', 1]])"
6061,convert list to dictionary,False,False,30,"l = [[""a"", ""b""], [""c"", ""d""], [""e"",]]"
6062,get the date and time a week from now in gmt,False,True,7,datetime.datetime.now().date().year
6063,get the date and time a week from now in gmt,False,True,14,datetime.datetime.now().strftime('%Y-%m-%d')
6064,get the date and time a week from now in gmt,True,True,10,datetime.datetime.now().strftime('%a')
6065,get the date and time a week from now in gmt,False,True,16,"datetime.datetime.combine(datetime.datetime.now(), '%B %d, %Y')"
6066,get the date and time a week from now in gmt,False,True,16,datetime.datetime.now().strftime('%H:%M:%S')
6067,get the date and time a week from now in gmt,False,True,11,"datetime.datetime.combine(datetime.date.today(), datetime.timedelta(hours=3))"
6068,get the date and time a week from now in gmt,False,True,4,datetime.datetime.now().date
6069,get the date and time a week from now in gmt,False,False,38,">>> import datetime
>>> datetime.datetime.now()
datetime.datetime(2009, 1, 6, 15, 8, 24, 78915)

>>> print(datetime.datetime.now())
2009-01-06 15:08:24.789150"
6070,get the date and time a week from now in gmt,False,False,32,">>> datetime.datetime.now().time()
datetime.time(15, 8, 24, 78915)

>>> print(datetime.datetime.now().time())
15:08:24.789150"
6071,get the date and time a week from now in gmt,False,False,7,>>> from datetime import datetime
6072,get the date and time a week from now in gmt,False,False,38,">>> from time import gmtime, strftime
>>> strftime(""%Y-%m-%d %H:%M:%S"", gmtime())
'2009-01-05 22:14:39'"
6073,get the date and time a week from now in gmt,False,False,26,"from datetime import datetime
datetime.now().strftime('%Y-%m-%d %H:%M:%S')"
6074,get the date and time a week from now in gmt,False,False,19,">>> from datetime import datetime
>>> str(datetime.now())
'2011-05-03 17:45:35.177000'"
6075,get the date and time a week from now in gmt,False,False,23,">>> import datetime
>>> datetime.date(2010, 6, 16).isocalendar()[1]
24"
6076,get date and time in gmt,False,True,10,"datetime.datetime.combine(datetime.date.today(), datetime.date.now())"
6077,get date and time in gmt,False,True,10,"datetime.datetime.combine(datetime.datetime.now(), datetime.date.now())"
6078,get date and time in gmt,False,True,10,"datetime.datetime.combine(datetime.datetime.now(), datetime.datetime.now())"
6079,get date and time in gmt,False,True,10,"datetime.datetime.combine(datetime.date.today(), datetime.date.today())"
6080,get date and time in gmt,True,True,10,"datetime.datetime.combine(datetime.date.today(), datetime.date.utcnow())"
6081,get date and time in gmt,False,True,10,"now = datetime.datetime.combine(datetime.date.today(), time)"
6082,get date and time in gmt,False,True,8,"datetime.datetime.combine(datetime.date.today(), time)"
6083,get date and time in gmt,False,False,38,">>> import datetime
>>> datetime.datetime.now()
datetime.datetime(2009, 1, 6, 15, 8, 24, 78915)

>>> print(datetime.datetime.now())
2009-01-06 15:08:24.789150"
6084,get date and time in gmt,False,False,32,">>> datetime.datetime.now().time()
datetime.time(15, 8, 24, 78915)

>>> print(datetime.datetime.now().time())
15:08:24.789150"
6085,get date and time in gmt,False,False,7,>>> from datetime import datetime
6086,get date and time in gmt,False,False,38,">>> from time import gmtime, strftime
>>> strftime(""%Y-%m-%d %H:%M:%S"", gmtime())
'2009-01-05 22:14:39'"
6087,get date and time in gmt,False,False,26,"from datetime import datetime
datetime.now().strftime('%Y-%m-%d %H:%M:%S')"
6088,get date and time in gmt,False,False,19,">>> from datetime import datetime
>>> str(datetime.now())
'2011-05-03 17:45:35.177000'"
6089,get date and time in gmt,False,False,2,import time
6090,get time and date in gmt in `date`,False,True,5,date = datetime.datetime.now()
6091,get time and date in gmt in `date`,False,True,3,date.date.total_seconds()
6092,get time and date in gmt in `date`,True,True,8,"datetime.datetime.combine(date, datetime.time())"
6093,get time and date in gmt in `date`,False,True,5,dt = datetime.datetime.now()
6094,get time and date in gmt in `date`,False,True,13,date.date.strftime('%H:%M:%S')
6095,get time and date in gmt in `date`,False,True,3,date.date.timetuple()
6096,get time and date in gmt in `date`,False,True,10,"dt = datetime.datetime.combine(datetime.date.today(), date)"
6097,get time and date in gmt in `date`,False,False,38,">>> import datetime
>>> datetime.datetime.now()
datetime.datetime(2009, 1, 6, 15, 8, 24, 78915)

>>> print(datetime.datetime.now())
2009-01-06 15:08:24.789150"
6098,get time and date in gmt in `date`,False,False,32,">>> datetime.datetime.now().time()
datetime.time(15, 8, 24, 78915)

>>> print(datetime.datetime.now().time())
15:08:24.789150"
6099,get time and date in gmt in `date`,False,False,7,>>> from datetime import datetime
6100,get time and date in gmt in `date`,False,False,38,">>> from time import gmtime, strftime
>>> strftime(""%Y-%m-%d %H:%M:%S"", gmtime())
'2009-01-05 22:14:39'"
6101,get time and date in gmt in `date`,False,False,26,"from datetime import datetime
datetime.now().strftime('%Y-%m-%d %H:%M:%S')"
6102,get time and date in gmt in `date`,False,False,19,">>> from datetime import datetime
>>> str(datetime.now())
'2011-05-03 17:45:35.177000'"
6103,get time and date in gmt in `date`,False,False,2,import time
6104,get the current date in utc,True,True,8,today = datetime.datetime.utcnow().date()
6105,get the current date in utc,False,True,5,today = datetime.now()
6106,get the current date in utc,False,True,5,now = datetime.now()
6107,get the current date in utc,False,True,5,now = datetime.datetime.now()
6108,get the current date in utc,False,True,8,today = datetime.datetime.now().date()
6109,get the current date in utc,False,True,5,utcnow = datetime.now()
6110,get the current date in utc,False,True,6,datetime.datetime.now().isoformat()
6111,get the current date in utc,False,False,38,">>> import datetime
>>> datetime.datetime.now()
datetime.datetime(2009, 1, 6, 15, 8, 24, 78915)

>>> print(datetime.datetime.now())
2009-01-06 15:08:24.789150"
6112,get the current date in utc,False,False,32,">>> datetime.datetime.now().time()
datetime.time(15, 8, 24, 78915)

>>> print(datetime.datetime.now().time())
15:08:24.789150"
6113,get the current date in utc,False,False,7,>>> from datetime import datetime
6114,get the current date in utc,False,False,38,">>> from time import gmtime, strftime
>>> strftime(""%Y-%m-%d %H:%M:%S"", gmtime())
'2009-01-05 22:14:39'"
6115,get the current date in utc,False,False,26,"from datetime import datetime
datetime.now().strftime('%Y-%m-%d %H:%M:%S')"
6116,get the current date in utc,False,False,19,">>> from datetime import datetime
>>> str(datetime.now())
'2011-05-03 17:45:35.177000'"
6117,get the current date in utc,False,False,2,import time
6118,get the current time in utc,False,True,8,now = datetime.datetime.now().isoformat()
6119,get the current time in utc,True,True,8,now = datetime.datetime.utcnow().date()
6120,get the current time in utc,False,True,8,now = datetime.datetime.utcnow().size()
6121,get the current time in utc,False,True,16,datetime.datetime.now().strftime('%H:%M:%S')
6122,get the current time in utc,False,True,8,now = datetime.datetime.now().date()
6123,get the current time in utc,False,True,6,datetime.datetime.now().isoformat()
6124,get the current time in utc,False,True,18,now = datetime.datetime.now().order_by('%H:%M:%S')
6125,get the current time in utc,False,False,38,">>> import datetime
>>> datetime.datetime.now()
datetime.datetime(2009, 1, 6, 15, 8, 24, 78915)

>>> print(datetime.datetime.now())
2009-01-06 15:08:24.789150"
6126,get the current time in utc,False,False,32,">>> datetime.datetime.now().time()
datetime.time(15, 8, 24, 78915)

>>> print(datetime.datetime.now().time())
15:08:24.789150"
6127,get the current time in utc,False,False,7,>>> from datetime import datetime
6128,get the current time in utc,False,False,38,">>> from time import gmtime, strftime
>>> strftime(""%Y-%m-%d %H:%M:%S"", gmtime())
'2009-01-05 22:14:39'"
6129,get the current time in utc,False,False,26,"from datetime import datetime
datetime.now().strftime('%Y-%m-%d %H:%M:%S')"
6130,get the current time in utc,False,False,19,">>> from datetime import datetime
>>> str(datetime.now())
'2011-05-03 17:45:35.177000'"
6131,get the current time in utc,False,False,114,"from datetime import datetime
from dateutil import tz

# METHOD 1: Hardcode zones:
from_zone = tz.gettz('UTC')
to_zone = tz.gettz('America/New_York')

# METHOD 2: Auto-detect zones:
from_zone = tz.tzutc()
to_zone = tz.tzlocal()

# utc = datetime.utcnow()
utc = datetime.strptime('2011-01-21 02:37:21', '%Y-%m-%d %H:%M:%S')

# Tell the datetime object that it's in UTC time zone since 
# datetime objects are 'naive' by default
utc = utc.replace(tzinfo=from_zone)

# Convert time zone
central = utc.astimezone(to_zone)"
6146,open csv file with read and write,False,True,12,"df = pd.read_csv('<unk>', header=None)"
6147,open csv file with read and write,True,True,7,"pd.read_csv('file', shell=True)"
6148,open csv file with read and write,False,True,4,writer.writerow(csv)
6149,open csv file with read and write,False,True,7,"pd.read_csv('open', shell=True)"
6150,open csv file with read and write,False,True,7,"pd.read_csv('write', shell=True)"
6151,open csv file with read and write,False,True,17,"df = pd.read_csv('<unk>', sep=',', header=None)"
6152,open csv file with read and write,False,True,17,"df = pd.read_csv('<unk>', quotechar=',', header=None)"
6153,open csv file with read and write,False,False,46,"try:
    f = open(fname, 'rb')
except OSError:
    print ""Could not open/read file:"", fname
    sys.exit()

with f:
    reader = csv.reader(f)
    for row in reader:
        pass #do stuff here"
6154,open csv file with read and write,False,False,180,"import csv

# Define data
data = [
    (1, ""A towel,"", 1.0),
    (42, "" it says, "", 2.0),
    (1337, ""is about the most "", -1),
    (0, ""massively useful thing "", 123),
    (-2, ""an interstellar hitchhiker can have."", 3),
]

# Write CSV file
with open(""test.csv"", ""wt"") as fp:
    writer = csv.writer(fp, delimiter="","")
    # writer.writerow([""your"", ""header"", ""foo""])  # write header
    writer.writerows(data)

# Read CSV file
with open(""test.csv"") as fp:
    reader = csv.reader(fp, delimiter="","", quotechar='""')
    # next(reader, None)  # skip the headers
    data_read = [row for row in reader]

print(data_read)"
6155,open csv file with read and write,False,False,77,"[['1', 'A towel,', '1.0'],
 ['42', ' it says, ', '2.0'],
 ['1337', 'is about the most ', '-1'],
 ['0', 'massively useful thing ', '123'],
 ['-2', 'an interstellar hitchhiker can have.', '3']]"
6156,open csv file with read and write,False,False,28,"import mpu.io
data = mpu.io.read('example.csv', delimiter=',', quotechar='""', skiprows=None)
mpu.io.write('example.csv', data)"
6157,open csv file with read and write,False,False,92,"import pandas as pd

# Read the CSV into a pandas data frame (df)
#   With a df you can do many things
#   most important: visualize data with Seaborn
df = pd.read_csv('myfile.csv', sep=',')
print(df)

# Or export it in many ways, e.g. a list of tuples
tuples = [tuple(x) for x in df.values]

# or export it as a list of dicts
dicts = df.to_dict().values()"
6158,open csv file with read and write,False,False,37,"1,""A towel,"",1.0
42,"" it says, "",2.0
1337,is about the most ,-1
0,massively useful thing ,123
-2,an interstellar hitchhiker can have.,3"
6159,open csv file with read and write,False,False,36,"import os

if os.path.exists(fName):
   with open(fName, 'rb') as f:
       try:
           # do stuff
       except : # whatever reader errors you care about
           # handle error"
6160,open csv file `data.csv`,True,True,14,"df = pd.read_csv('data.csv', sep=',', header=None)"
6161,open csv file `data.csv`,False,True,14,"df = pd.read_csv('data.csv', sep=',', **None)"
6162,open csv file `data.csv`,False,True,12,"df = pd.read_csv('data.csv', sep='', header=None)"
6163,open csv file `data.csv`,False,True,14,"df = pandas.read_csv('data.csv', sep=',', header=None)"
6164,open csv file `data.csv`,False,True,13,"os.rename(data.csv, open('data.csv', 'rb'))"
6165,open csv file `data.csv`,False,True,12,"np.genfromtxt('data.csv', delimiter=',', skiprows=1)"
6166,open csv file `data.csv`,False,True,6,"os.rename(data.csv, float)"
6167,open csv file `data.csv`,False,False,180,"import csv

# Define data
data = [
    (1, ""A towel,"", 1.0),
    (42, "" it says, "", 2.0),
    (1337, ""is about the most "", -1),
    (0, ""massively useful thing "", 123),
    (-2, ""an interstellar hitchhiker can have."", 3),
]

# Write CSV file
with open(""test.csv"", ""wt"") as fp:
    writer = csv.writer(fp, delimiter="","")
    # writer.writerow([""your"", ""header"", ""foo""])  # write header
    writer.writerows(data)

# Read CSV file
with open(""test.csv"") as fp:
    reader = csv.reader(fp, delimiter="","", quotechar='""')
    # next(reader, None)  # skip the headers
    data_read = [row for row in reader]

print(data_read)"
6168,open csv file `data.csv`,False,False,77,"[['1', 'A towel,', '1.0'],
 ['42', ' it says, ', '2.0'],
 ['1337', 'is about the most ', '-1'],
 ['0', 'massively useful thing ', '123'],
 ['-2', 'an interstellar hitchhiker can have.', '3']]"
6169,open csv file `data.csv`,False,False,28,"import mpu.io
data = mpu.io.read('example.csv', delimiter=',', quotechar='""', skiprows=None)
mpu.io.write('example.csv', data)"
6170,open csv file `data.csv`,False,False,92,"import pandas as pd

# Read the CSV into a pandas data frame (df)
#   With a df you can do many things
#   most important: visualize data with Seaborn
df = pd.read_csv('myfile.csv', sep=',')
print(df)

# Or export it in many ways, e.g. a list of tuples
tuples = [tuple(x) for x in df.values]

# or export it as a list of dicts
dicts = df.to_dict().values()"
6171,open csv file `data.csv`,False,False,37,"1,""A towel,"",1.0
42,"" it says, "",2.0
1337,is about the most ,-1
0,massively useful thing ,123
-2,an interstellar hitchhiker can have.,3"
6172,open csv file `data.csv`,False,False,13,"w = csv.writer(open('foo.csv', 'wb'))"
6173,open csv file `data.csv`,False,False,16,"f = open('foo.csv', 'wb')
w = csv.writer(f)"
6188,write to csv file,True,True,4,writer.writerow(write)
6189,write to csv file,False,True,4,writer.writerow(csv)
6190,write to csv file,True,True,4,writer.writerow(file)
6191,write to csv file,False,True,7,"pd.read_csv('write', shell=True)"
6192,write to csv file,False,True,7,"pd.read_csv('file', shell=True)"
6193,write to csv file,False,True,4,writer.writerow(para)
6194,write to csv file,False,True,4,writer.writerow(extra)
6195,write to csv file,False,False,7,"df.to_csv(file_name, sep='\t')"
6196,write to csv file,False,False,10,"df.to_csv(file_name, sep='\t', encoding='utf-8')"
6197,write to csv file,False,False,9,"df.to_csv(file_name, encoding='utf-8', index=False)"
6198,write to csv file,False,False,8,"Color  Number
0   red     22
1  blue     10"
6199,write to csv file,False,False,5,"Color,Number
red,22
blue,10"
6200,write to csv file,False,False,10,",Color,Number
0,red,22
1,blue,10"
6201,write to csv file,False,False,36,"##text=List of strings to be written to file
with open('csvfile.csv','wb') as file:
    for line in text:
        file.write(line)
        file.write('\n')"
6202,read a csv file,False,True,4,writer.writerow(line)
6203,read a csv file,True,True,15,"df = pd.read_csv('<unk>', quotechar=',')"
6204,read a csv file,False,True,9,"writer = pd.read_csv('my.csv', header=None)"
6205,read a csv file,False,True,12,"writer = pd.read_csv('myfile.txt', sep=',')"
6206,read a csv file,False,True,14,"writer = pd.read_csv('<unk>', skiprows=1, header=None)"
6207,read a csv file,False,True,15,"writer = pd.read_csv('<unk>', quotechar=',')"
6208,read a csv file,False,True,15,"df = pd.read_csv('<unk>', sep=',')"
6209,read a csv file,False,False,73,"import csv

def getstuff(filename, criterion):
    with open(filename, ""rb"") as csvfile:
        datareader = csv.reader(csvfile)
        yield next(datareader)  # yield the header row
        count = 0
        for row in datareader:
            if row[3] == criterion:
                yield row
                count += 1
            elif count:
                # done when having read a consecutive series of rows 
                return"
6210,read a csv file,False,False,121,"import csv
from itertools import dropwhile, takewhile

def getstuff(filename, criterion):
    with open(filename, ""rb"") as csvfile:
        datareader = csv.reader(csvfile)
        yield next(datareader)  # yield the header row
        # first row, plus any subsequent rows that match, then stop
        # reading altogether
        # Python 2: use `for row in takewhile(...): yield row` instead
        # instead of `yield from takewhile(...)`.
        yield from takewhile(
            lambda r: r[3] == criterion,
            dropwhile(lambda r: r[3] != criterion, datareader))
        return"
6211,read a csv file,False,False,25,"def getdata(filename, criteria):
    for criterion in criteria:
        for row in getstuff(filename, criterion):
            yield row"
6212,read a csv file,False,False,13,"for row in getdata(somefilename, sequence_of_criteria):
    # process row"
6213,read a csv file,False,False,180,"import csv

# Define data
data = [
    (1, ""A towel,"", 1.0),
    (42, "" it says, "", 2.0),
    (1337, ""is about the most "", -1),
    (0, ""massively useful thing "", 123),
    (-2, ""an interstellar hitchhiker can have."", 3),
]

# Write CSV file
with open(""test.csv"", ""wt"") as fp:
    writer = csv.writer(fp, delimiter="","")
    # writer.writerow([""your"", ""header"", ""foo""])  # write header
    writer.writerows(data)

# Read CSV file
with open(""test.csv"") as fp:
    reader = csv.reader(fp, delimiter="","", quotechar='""')
    # next(reader, None)  # skip the headers
    data_read = [row for row in reader]

print(data_read)"
6214,read a csv file,False,False,77,"[['1', 'A towel,', '1.0'],
 ['42', ' it says, ', '2.0'],
 ['1337', 'is about the most ', '-1'],
 ['0', 'massively useful thing ', '123'],
 ['-2', 'an interstellar hitchhiker can have.', '3']]"
6215,read a csv file,False,False,28,"import mpu.io
data = mpu.io.read('example.csv', delimiter=',', quotechar='""', skiprows=None)
mpu.io.write('example.csv', data)"
